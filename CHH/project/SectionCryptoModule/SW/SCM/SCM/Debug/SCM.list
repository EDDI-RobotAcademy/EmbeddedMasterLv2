
SCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000188d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031c4  08018b74  08018b74  00028b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801bd38  0801bd38  0002bd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801bd40  0801bd40  0002bd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801bd44  0801bd44  0002bd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000009c  24000000  0801bd48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400009c  0801bde4  0003009c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000fc  0801be44  000300fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxArraySection 000017d0  2400015c  0801bea4  0003015c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000bde8  2400192c  0801d674  0003192c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400d714  0801d674  0003d714  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0003192c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00060c0f  00000000  00000000  0003195a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009de3  00000000  00000000  00092569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028d0  00000000  00000000  0009c350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002720  00000000  00000000  0009ec20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004968d  00000000  00000000  000a1340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003fba6  00000000  00000000  000ea9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018b1b3  00000000  00000000  0012a573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  002b5726  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b370  00000000  00000000  002b577c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400192c 	.word	0x2400192c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08018b5c 	.word	0x08018b5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24001930 	.word	0x24001930
 80002dc:	08018b5c 	.word	0x08018b5c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b96e 	b.w	8000674 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468c      	mov	ip, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8083 	bne.w	80004c6 <__udivmoddi4+0x116>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d947      	bls.n	8000456 <__udivmoddi4+0xa6>
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	b142      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003cc:	f1c2 0020 	rsb	r0, r2, #32
 80003d0:	fa24 f000 	lsr.w	r0, r4, r0
 80003d4:	4091      	lsls	r1, r2
 80003d6:	4097      	lsls	r7, r2
 80003d8:	ea40 0c01 	orr.w	ip, r0, r1
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbbc f6f8 	udiv	r6, ip, r8
 80003e8:	fa1f fe87 	uxth.w	lr, r7
 80003ec:	fb08 c116 	mls	r1, r8, r6, ip
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f10e 	mul.w	r1, r6, lr
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18fb      	adds	r3, r7, r3
 80003fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000402:	f080 8119 	bcs.w	8000638 <__udivmoddi4+0x288>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8116 	bls.w	8000638 <__udivmoddi4+0x288>
 800040c:	3e02      	subs	r6, #2
 800040e:	443b      	add	r3, r7
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fe0e 	mul.w	lr, r0, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	193c      	adds	r4, r7, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800042e:	f080 8105 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000432:	45a6      	cmp	lr, r4
 8000434:	f240 8102 	bls.w	800063c <__udivmoddi4+0x28c>
 8000438:	3802      	subs	r0, #2
 800043a:	443c      	add	r4, r7
 800043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	2600      	movs	r6, #0
 8000446:	b11d      	cbz	r5, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c5 4300 	strd	r4, r3, [r5]
 8000450:	4631      	mov	r1, r6
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	b902      	cbnz	r2, 800045a <__udivmoddi4+0xaa>
 8000458:	deff      	udf	#255	; 0xff
 800045a:	fab2 f282 	clz	r2, r2
 800045e:	2a00      	cmp	r2, #0
 8000460:	d150      	bne.n	8000504 <__udivmoddi4+0x154>
 8000462:	1bcb      	subs	r3, r1, r7
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	fa1f f887 	uxth.w	r8, r7
 800046c:	2601      	movs	r6, #1
 800046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000472:	0c21      	lsrs	r1, r4, #16
 8000474:	fb0e 331c 	mls	r3, lr, ip, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb08 f30c 	mul.w	r3, r8, ip
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0xe4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0xe2>
 800048c:	428b      	cmp	r3, r1
 800048e:	f200 80e9 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 8000492:	4684      	mov	ip, r0
 8000494:	1ac9      	subs	r1, r1, r3
 8000496:	b2a3      	uxth	r3, r4
 8000498:	fbb1 f0fe 	udiv	r0, r1, lr
 800049c:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004a4:	fb08 f800 	mul.w	r8, r8, r0
 80004a8:	45a0      	cmp	r8, r4
 80004aa:	d907      	bls.n	80004bc <__udivmoddi4+0x10c>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004b2:	d202      	bcs.n	80004ba <__udivmoddi4+0x10a>
 80004b4:	45a0      	cmp	r8, r4
 80004b6:	f200 80d9 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004ba:	4618      	mov	r0, r3
 80004bc:	eba4 0408 	sub.w	r4, r4, r8
 80004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004c4:	e7bf      	b.n	8000446 <__udivmoddi4+0x96>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d909      	bls.n	80004de <__udivmoddi4+0x12e>
 80004ca:	2d00      	cmp	r5, #0
 80004cc:	f000 80b1 	beq.w	8000632 <__udivmoddi4+0x282>
 80004d0:	2600      	movs	r6, #0
 80004d2:	e9c5 0100 	strd	r0, r1, [r5]
 80004d6:	4630      	mov	r0, r6
 80004d8:	4631      	mov	r1, r6
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	fab3 f683 	clz	r6, r3
 80004e2:	2e00      	cmp	r6, #0
 80004e4:	d14a      	bne.n	800057c <__udivmoddi4+0x1cc>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d302      	bcc.n	80004f0 <__udivmoddi4+0x140>
 80004ea:	4282      	cmp	r2, r0
 80004ec:	f200 80b8 	bhi.w	8000660 <__udivmoddi4+0x2b0>
 80004f0:	1a84      	subs	r4, r0, r2
 80004f2:	eb61 0103 	sbc.w	r1, r1, r3
 80004f6:	2001      	movs	r0, #1
 80004f8:	468c      	mov	ip, r1
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d0a8      	beq.n	8000450 <__udivmoddi4+0xa0>
 80004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000502:	e7a5      	b.n	8000450 <__udivmoddi4+0xa0>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f603 	lsr.w	r6, r0, r3
 800050c:	4097      	lsls	r7, r2
 800050e:	fa01 f002 	lsl.w	r0, r1, r2
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	40d9      	lsrs	r1, r3
 8000518:	4330      	orrs	r0, r6
 800051a:	0c03      	lsrs	r3, r0, #16
 800051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000520:	fa1f f887 	uxth.w	r8, r7
 8000524:	fb0e 1116 	mls	r1, lr, r6, r1
 8000528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800052c:	fb06 f108 	mul.w	r1, r6, r8
 8000530:	4299      	cmp	r1, r3
 8000532:	fa04 f402 	lsl.w	r4, r4, r2
 8000536:	d909      	bls.n	800054c <__udivmoddi4+0x19c>
 8000538:	18fb      	adds	r3, r7, r3
 800053a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800053e:	f080 808d 	bcs.w	800065c <__udivmoddi4+0x2ac>
 8000542:	4299      	cmp	r1, r3
 8000544:	f240 808a 	bls.w	800065c <__udivmoddi4+0x2ac>
 8000548:	3e02      	subs	r6, #2
 800054a:	443b      	add	r3, r7
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b281      	uxth	r1, r0
 8000550:	fbb3 f0fe 	udiv	r0, r3, lr
 8000554:	fb0e 3310 	mls	r3, lr, r0, r3
 8000558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055c:	fb00 f308 	mul.w	r3, r0, r8
 8000560:	428b      	cmp	r3, r1
 8000562:	d907      	bls.n	8000574 <__udivmoddi4+0x1c4>
 8000564:	1879      	adds	r1, r7, r1
 8000566:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800056a:	d273      	bcs.n	8000654 <__udivmoddi4+0x2a4>
 800056c:	428b      	cmp	r3, r1
 800056e:	d971      	bls.n	8000654 <__udivmoddi4+0x2a4>
 8000570:	3802      	subs	r0, #2
 8000572:	4439      	add	r1, r7
 8000574:	1acb      	subs	r3, r1, r3
 8000576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800057a:	e778      	b.n	800046e <__udivmoddi4+0xbe>
 800057c:	f1c6 0c20 	rsb	ip, r6, #32
 8000580:	fa03 f406 	lsl.w	r4, r3, r6
 8000584:	fa22 f30c 	lsr.w	r3, r2, ip
 8000588:	431c      	orrs	r4, r3
 800058a:	fa20 f70c 	lsr.w	r7, r0, ip
 800058e:	fa01 f306 	lsl.w	r3, r1, r6
 8000592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000596:	fa21 f10c 	lsr.w	r1, r1, ip
 800059a:	431f      	orrs	r7, r3
 800059c:	0c3b      	lsrs	r3, r7, #16
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fa1f f884 	uxth.w	r8, r4
 80005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ae:	fb09 fa08 	mul.w	sl, r9, r8
 80005b2:	458a      	cmp	sl, r1
 80005b4:	fa02 f206 	lsl.w	r2, r2, r6
 80005b8:	fa00 f306 	lsl.w	r3, r0, r6
 80005bc:	d908      	bls.n	80005d0 <__udivmoddi4+0x220>
 80005be:	1861      	adds	r1, r4, r1
 80005c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80005c4:	d248      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 80005c6:	458a      	cmp	sl, r1
 80005c8:	d946      	bls.n	8000658 <__udivmoddi4+0x2a8>
 80005ca:	f1a9 0902 	sub.w	r9, r9, #2
 80005ce:	4421      	add	r1, r4
 80005d0:	eba1 010a 	sub.w	r1, r1, sl
 80005d4:	b2bf      	uxth	r7, r7
 80005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005da:	fb0e 1110 	mls	r1, lr, r0, r1
 80005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005e2:	fb00 f808 	mul.w	r8, r0, r8
 80005e6:	45b8      	cmp	r8, r7
 80005e8:	d907      	bls.n	80005fa <__udivmoddi4+0x24a>
 80005ea:	19e7      	adds	r7, r4, r7
 80005ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80005f0:	d22e      	bcs.n	8000650 <__udivmoddi4+0x2a0>
 80005f2:	45b8      	cmp	r8, r7
 80005f4:	d92c      	bls.n	8000650 <__udivmoddi4+0x2a0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	4427      	add	r7, r4
 80005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005fe:	eba7 0708 	sub.w	r7, r7, r8
 8000602:	fba0 8902 	umull	r8, r9, r0, r2
 8000606:	454f      	cmp	r7, r9
 8000608:	46c6      	mov	lr, r8
 800060a:	4649      	mov	r1, r9
 800060c:	d31a      	bcc.n	8000644 <__udivmoddi4+0x294>
 800060e:	d017      	beq.n	8000640 <__udivmoddi4+0x290>
 8000610:	b15d      	cbz	r5, 800062a <__udivmoddi4+0x27a>
 8000612:	ebb3 020e 	subs.w	r2, r3, lr
 8000616:	eb67 0701 	sbc.w	r7, r7, r1
 800061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800061e:	40f2      	lsrs	r2, r6
 8000620:	ea4c 0202 	orr.w	r2, ip, r2
 8000624:	40f7      	lsrs	r7, r6
 8000626:	e9c5 2700 	strd	r2, r7, [r5]
 800062a:	2600      	movs	r6, #0
 800062c:	4631      	mov	r1, r6
 800062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000632:	462e      	mov	r6, r5
 8000634:	4628      	mov	r0, r5
 8000636:	e70b      	b.n	8000450 <__udivmoddi4+0xa0>
 8000638:	4606      	mov	r6, r0
 800063a:	e6e9      	b.n	8000410 <__udivmoddi4+0x60>
 800063c:	4618      	mov	r0, r3
 800063e:	e6fd      	b.n	800043c <__udivmoddi4+0x8c>
 8000640:	4543      	cmp	r3, r8
 8000642:	d2e5      	bcs.n	8000610 <__udivmoddi4+0x260>
 8000644:	ebb8 0e02 	subs.w	lr, r8, r2
 8000648:	eb69 0104 	sbc.w	r1, r9, r4
 800064c:	3801      	subs	r0, #1
 800064e:	e7df      	b.n	8000610 <__udivmoddi4+0x260>
 8000650:	4608      	mov	r0, r1
 8000652:	e7d2      	b.n	80005fa <__udivmoddi4+0x24a>
 8000654:	4660      	mov	r0, ip
 8000656:	e78d      	b.n	8000574 <__udivmoddi4+0x1c4>
 8000658:	4681      	mov	r9, r0
 800065a:	e7b9      	b.n	80005d0 <__udivmoddi4+0x220>
 800065c:	4666      	mov	r6, ip
 800065e:	e775      	b.n	800054c <__udivmoddi4+0x19c>
 8000660:	4630      	mov	r0, r6
 8000662:	e74a      	b.n	80004fa <__udivmoddi4+0x14a>
 8000664:	f1ac 0c02 	sub.w	ip, ip, #2
 8000668:	4439      	add	r1, r7
 800066a:	e713      	b.n	8000494 <__udivmoddi4+0xe4>
 800066c:	3802      	subs	r0, #2
 800066e:	443c      	add	r4, r7
 8000670:	e724      	b.n	80004bc <__udivmoddi4+0x10c>
 8000672:	bf00      	nop

08000674 <__aeabi_idiv0>:
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	4a06      	ldr	r2, [pc, #24]	; (80006a8 <vApplicationGetIdleTaskMemory+0x30>)
 800068e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	24001948 	.word	0x24001948
 80006a8:	240019fc 	.word	0x240019fc

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b5b0      	push	{r4, r5, r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <main+0xc4>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d138      	bne.n	8000730 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <main+0xc4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006c6:	f3bf 8f4f 	dsb	sy
}
 80006ca:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006cc:	4b28      	ldr	r3, [pc, #160]	; (8000770 <main+0xc4>)
 80006ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d6:	0b5b      	lsrs	r3, r3, #13
 80006d8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80006dc:	623b      	str	r3, [r7, #32]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80006de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e0:	08db      	lsrs	r3, r3, #3
 80006e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80006e6:	61fb      	str	r3, [r7, #28]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006e8:	6a3b      	ldr	r3, [r7, #32]
 80006ea:	015a      	lsls	r2, r3, #5
 80006ec:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80006f0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80006f2:	69fa      	ldr	r2, [r7, #28]
 80006f4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80006f6:	491e      	ldr	r1, [pc, #120]	; (8000770 <main+0xc4>)
 80006f8:	4313      	orrs	r3, r2
 80006fa:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	1e5a      	subs	r2, r3, #1
 8000702:	61fa      	str	r2, [r7, #28]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1ef      	bne.n	80006e8 <main+0x3c>
    } while(sets-- != 0U);
 8000708:	6a3b      	ldr	r3, [r7, #32]
 800070a:	1e5a      	subs	r2, r3, #1
 800070c:	623a      	str	r2, [r7, #32]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1e5      	bne.n	80006de <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000712:	f3bf 8f4f 	dsb	sy
}
 8000716:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <main+0xc4>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <main+0xc4>)
 800071e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000722:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000724:	f3bf 8f4f 	dsb	sy
}
 8000728:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800072a:	f3bf 8f6f 	isb	sy
}
 800072e:	e000      	b.n	8000732 <main+0x86>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000730:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fe4d 	bl	80013d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f821 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f917 	bl	800096c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800073e:	f000 f897 	bl	8000870 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000742:	f000 f8e1 	bl	8000908 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <main+0xc8>)
 8000748:	463c      	mov	r4, r7
 800074a:	461d      	mov	r5, r3
 800074c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800074e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000750:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000754:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000758:	463b      	mov	r3, r7
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f007 ff34 	bl	80085ca <osThreadCreate>
 8000762:	4603      	mov	r3, r0
 8000764:	4a04      	ldr	r2, [pc, #16]	; (8000778 <main+0xcc>)
 8000766:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000768:	f007 ff18 	bl	800859c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800076c:	e7fe      	b.n	800076c <main+0xc0>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
 8000774:	08018b80 	.word	0x08018b80
 8000778:	24009f00 	.word	0x24009f00

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	; 0x70
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	224c      	movs	r2, #76	; 0x4c
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f017 fa51 	bl	8017c32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f017 fa4b 	bl	8017c32 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800079c:	2002      	movs	r0, #2
 800079e:	f003 f82b 	bl	80037f8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <SystemClock_Config+0xec>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	4a2f      	ldr	r2, [pc, #188]	; (8000868 <SystemClock_Config+0xec>)
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b2:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <SystemClock_Config+0xec>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <SystemClock_Config+0xf0>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	4a2a      	ldr	r2, [pc, #168]	; (800086c <SystemClock_Config+0xf0>)
 80007c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007c6:	6193      	str	r3, [r2, #24]
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <SystemClock_Config+0xf0>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d4:	bf00      	nop
 80007d6:	4b25      	ldr	r3, [pc, #148]	; (800086c <SystemClock_Config+0xf0>)
 80007d8:	699b      	ldr	r3, [r3, #24]
 80007da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e2:	d1f8      	bne.n	80007d6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e4:	2301      	movs	r3, #1
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007f2:	2302      	movs	r3, #2
 80007f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f6:	2301      	movs	r3, #1
 80007f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007fa:	233c      	movs	r3, #60	; 0x3c
 80007fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000802:	2308      	movs	r3, #8
 8000804:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000806:	2302      	movs	r3, #2
 8000808:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800080a:	230c      	movs	r3, #12
 800080c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080e:	2300      	movs	r3, #0
 8000810:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081a:	4618      	mov	r0, r3
 800081c:	f003 f836 	bl	800388c <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000826:	f000 f971 	bl	8000b0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	233f      	movs	r3, #63	; 0x3f
 800082c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2303      	movs	r3, #3
 8000830:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800083e:	2350      	movs	r3, #80	; 0x50
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000848:	2340      	movs	r3, #64	; 0x40
 800084a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f003 fc47 	bl	80040e4 <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800085c:	f000 f956 	bl	8000b0c <Error_Handler>
  }
}
 8000860:	bf00      	nop
 8000862:	3770      	adds	r7, #112	; 0x70
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	58000400 	.word	0x58000400
 800086c:	58024800 	.word	0x58024800

08000870 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_USART3_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_USART3_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART3_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART3_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_USART3_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008ba:	f005 fe1d 	bl	80064f8 <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f922 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008cc:	f006 fdb2 	bl	8007434 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f919 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008de:	f006 fde7 	bl	80074b0 <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f910 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_USART3_UART_Init+0x90>)
 80008ee:	f006 fd68 	bl	80073c2 <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f908 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24009f04 	.word	0x24009f04
 8000904:	40004800 	.word	0x40004800

08000908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000910:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000914:	2209      	movs	r2, #9
 8000916:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091a:	2202      	movs	r2, #2
 800091c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092c:	2201      	movs	r2, #1
 800092e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093e:	2201      	movs	r2, #1
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000950:	f002 fe09 	bl	8003566 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800095a:	f000 f8d7 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24009f94 	.word	0x24009f94
 8000968:	40080000 	.word	0x40080000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b50      	ldr	r3, [pc, #320]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a4e      	ldr	r2, [pc, #312]	; (8000ac4 <MX_GPIO_Init+0x158>)
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a0:	4b48      	ldr	r3, [pc, #288]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	4a47      	ldr	r2, [pc, #284]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a3f      	ldr	r2, [pc, #252]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009dc:	4b39      	ldr	r3, [pc, #228]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a38      	ldr	r2, [pc, #224]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <MX_GPIO_Init+0x158>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0308 	and.w	r3, r3, #8
 8000a14:	60bb      	str	r3, [r7, #8]
 8000a16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a18:	4b2a      	ldr	r3, [pc, #168]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <MX_GPIO_Init+0x158>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a3c:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x15c>)
 8000a3e:	f002 fd79 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4821      	ldr	r0, [pc, #132]	; (8000acc <MX_GPIO_Init+0x160>)
 8000a48:	f002 fd74 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a52:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0x164>)
 8000a64:	f002 fbb6 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000a68:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_GPIO_Init+0x15c>)
 8000a82:	f002 fba7 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a86:	2340      	movs	r3, #64	; 0x40
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <MX_GPIO_Init+0x160>)
 8000a9e:	f002 fb99 	bl	80031d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_GPIO_Init+0x160>)
 8000ab6:	f002 fb8d 	bl	80031d4 <HAL_GPIO_Init>

}
 8000aba:	bf00      	nop
 8000abc:	3730      	adds	r7, #48	; 0x30
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	58024400 	.word	0x58024400
 8000ac8:	58020400 	.word	0x58020400
 8000acc:	58021800 	.word	0x58021800
 8000ad0:	58020800 	.word	0x58020800

08000ad4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000adc:	f007 f878 	bl	8007bd0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f007 fdbe 	bl	8008662 <osDelay>
 8000ae6:	e7fb      	b.n	8000ae0 <StartDefaultTask+0xc>

08000ae8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d101      	bne.n	8000afe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000afa:	f000 fca5 	bl	8001448 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010000 	.word	0x40010000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x38>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b24:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <HAL_MspInit+0x38>)
 8000b26:	f043 0302 	orr.w	r3, r3, #2
 8000b2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_MspInit+0x38>)
 8000b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	210f      	movs	r1, #15
 8000b40:	f06f 0001 	mvn.w	r0, #1
 8000b44:	f000 fd9c 	bl	8001680 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024400 	.word	0x58024400

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0b8      	sub	sp, #224	; 0xe0
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	22bc      	movs	r2, #188	; 0xbc
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f017 f85c 	bl	8017c32 <memset>
  if(huart->Instance==USART3)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a25      	ldr	r2, [pc, #148]	; (8000c14 <HAL_UART_MspInit+0xc0>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d142      	bne.n	8000c0a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b84:	2302      	movs	r3, #2
 8000b86:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 fe74 	bl	8004880 <HAL_RCCEx_PeriphCLKConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b9e:	f7ff ffb5 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_UART_MspInit+0xc4>)
 8000ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ba8:	4a1b      	ldr	r2, [pc, #108]	; (8000c18 <HAL_UART_MspInit+0xc4>)
 8000baa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bb2:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_UART_MspInit+0xc4>)
 8000bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_UART_MspInit+0xc4>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0xc4>)
 8000bc8:	f043 0308 	orr.w	r3, r3, #8
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0xc4>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bde:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bfe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	; (8000c1c <HAL_UART_MspInit+0xc8>)
 8000c06:	f002 fae5 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	37e0      	adds	r7, #224	; 0xe0
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40004800 	.word	0x40004800
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	58020c00 	.word	0x58020c00

08000c20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b0b8      	sub	sp, #224	; 0xe0
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	22bc      	movs	r2, #188	; 0xbc
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f016 fff6 	bl	8017c32 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <HAL_PCD_MspInit+0xe8>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d156      	bne.n	8000cfe <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c54:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000c56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c5e:	f107 0310 	add.w	r3, r7, #16
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fe0c 	bl	8004880 <HAL_RCCEx_PeriphCLKConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000c6e:	f7ff ff4d 	bl	8000b0c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000c72:	f002 fdfb 	bl	800386c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_PCD_MspInit+0xec>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <HAL_PCD_MspInit+0xec>)
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_PCD_MspInit+0xec>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c94:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cae:	230a      	movs	r3, #10
 8000cb0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4815      	ldr	r0, [pc, #84]	; (8000d10 <HAL_PCD_MspInit+0xf0>)
 8000cbc:	f002 fa8a 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cd8:	4619      	mov	r1, r3
 8000cda:	480d      	ldr	r0, [pc, #52]	; (8000d10 <HAL_PCD_MspInit+0xf0>)
 8000cdc:	f002 fa7a 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ce0:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_PCD_MspInit+0xec>)
 8000ce2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce6:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <HAL_PCD_MspInit+0xec>)
 8000ce8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_PCD_MspInit+0xec>)
 8000cf2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	37e0      	adds	r7, #224	; 0xe0
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40080000 	.word	0x40080000
 8000d0c:	58024400 	.word	0x58024400
 8000d10:	58020000 	.word	0x58020000

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08e      	sub	sp, #56	; 0x38
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b0f      	cmp	r3, #15
 8000d20:	d844      	bhi.n	8000dac <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000d22:	2200      	movs	r2, #0
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	2019      	movs	r0, #25
 8000d28:	f000 fcaa 	bl	8001680 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d2c:	2019      	movs	r0, #25
 8000d2e:	f000 fcc1 	bl	80016b4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d32:	4a24      	ldr	r2, [pc, #144]	; (8000dc4 <HAL_InitTick+0xb0>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d38:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <HAL_InitTick+0xb4>)
 8000d3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d3e:	4a22      	ldr	r2, [pc, #136]	; (8000dc8 <HAL_InitTick+0xb4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_InitTick+0xb4>)
 8000d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d56:	f107 020c 	add.w	r2, r7, #12
 8000d5a:	f107 0310 	add.w	r3, r7, #16
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fd4b 	bl	80047fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000d66:	f003 fd33 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d72:	4a16      	ldr	r2, [pc, #88]	; (8000dcc <HAL_InitTick+0xb8>)
 8000d74:	fba2 2303 	umull	r2, r3, r2, r3
 8000d78:	0c9b      	lsrs	r3, r3, #18
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <HAL_InitTick+0xc0>)
 8000d82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000d86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d8c:	4a10      	ldr	r2, [pc, #64]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d90:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000d9e:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000da0:	f005 f8d0 	bl	8005f44 <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d107      	bne.n	8000dba <HAL_InitTick+0xa6>
 8000daa:	e001      	b.n	8000db0 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e005      	b.n	8000dbc <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <HAL_InitTick+0xbc>)
 8000db2:	f005 f929 	bl	8006008 <HAL_TIM_Base_Start_IT>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3738      	adds	r7, #56	; 0x38
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	24000008 	.word	0x24000008
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	2400a39c 	.word	0x2400a39c
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM1_UP_IRQHandler+0x10>)
 8000e0a:	f005 f975 	bl	80060f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2400a39c 	.word	0x2400a39c

08000e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	return 1;
 8000e1c:	2301      	movs	r3, #1
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <_kill>:

int _kill(int pid, int sig)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <_kill+0x20>)
 8000e34:	2216      	movs	r2, #22
 8000e36:	601a      	str	r2, [r3, #0]
	return -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	2400d700 	.word	0x2400d700

08000e4c <_exit>:

void _exit (int status)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ffe5 	bl	8000e28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e5e:	e7fe      	b.n	8000e5e <_exit+0x12>

08000e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	e00a      	b.n	8000e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e72:	f3af 8000 	nop.w
 8000e76:	4601      	mov	r1, r0
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	1c5a      	adds	r2, r3, #1
 8000e7c:	60ba      	str	r2, [r7, #8]
 8000e7e:	b2ca      	uxtb	r2, r1
 8000e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf0      	blt.n	8000e72 <_read+0x12>
	}

return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	60f8      	str	r0, [r7, #12]
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e009      	b.n	8000ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1c5a      	adds	r2, r3, #1
 8000eb0:	60ba      	str	r2, [r7, #8]
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	dbf1      	blt.n	8000eac <_write+0x12>
	}
	return len;
 8000ec8:	687b      	ldr	r3, [r7, #4]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <_close>:

int _close(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efa:	605a      	str	r2, [r3, #4]
	return 0;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_isatty>:

int _isatty(int file)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
	return 1;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
	...

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d205      	bcs.n	8000f78 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	; (8000fa8 <_sbrk+0x6c>)
 8000f6e:	220c      	movs	r2, #12
 8000f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f76:	e009      	b.n	8000f8c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f78:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7e:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <_sbrk+0x64>)
 8000f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	371c      	adds	r7, #28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	24080000 	.word	0x24080000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	24001bfc 	.word	0x24001bfc
 8000fa4:	2400d718 	.word	0x2400d718
 8000fa8:	2400d700 	.word	0x2400d700

08000fac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb0:	4b37      	ldr	r3, [pc, #220]	; (8001090 <SystemInit+0xe4>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a36      	ldr	r2, [pc, #216]	; (8001090 <SystemInit+0xe4>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc0:	4b34      	ldr	r3, [pc, #208]	; (8001094 <SystemInit+0xe8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 030f 	and.w	r3, r3, #15
 8000fc8:	2b06      	cmp	r3, #6
 8000fca:	d807      	bhi.n	8000fdc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fcc:	4b31      	ldr	r3, [pc, #196]	; (8001094 <SystemInit+0xe8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f023 030f 	bic.w	r3, r3, #15
 8000fd4:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <SystemInit+0xe8>)
 8000fd6:	f043 0307 	orr.w	r3, r3, #7
 8000fda:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fdc:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <SystemInit+0xec>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a2d      	ldr	r2, [pc, #180]	; (8001098 <SystemInit+0xec>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <SystemInit+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fee:	4b2a      	ldr	r3, [pc, #168]	; (8001098 <SystemInit+0xec>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4929      	ldr	r1, [pc, #164]	; (8001098 <SystemInit+0xec>)
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <SystemInit+0xf0>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ffa:	4b26      	ldr	r3, [pc, #152]	; (8001094 <SystemInit+0xe8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	2b00      	cmp	r3, #0
 8001004:	d007      	beq.n	8001016 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <SystemInit+0xe8>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 030f 	bic.w	r3, r3, #15
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <SystemInit+0xe8>)
 8001010:	f043 0307 	orr.w	r3, r3, #7
 8001014:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <SystemInit+0xec>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <SystemInit+0xec>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001022:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <SystemInit+0xec>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <SystemInit+0xec>)
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <SystemInit+0xf4>)
 800102c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800102e:	4b1a      	ldr	r3, [pc, #104]	; (8001098 <SystemInit+0xec>)
 8001030:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <SystemInit+0xf8>)
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001034:	4b18      	ldr	r3, [pc, #96]	; (8001098 <SystemInit+0xec>)
 8001036:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <SystemInit+0xfc>)
 8001038:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800103a:	4b17      	ldr	r3, [pc, #92]	; (8001098 <SystemInit+0xec>)
 800103c:	2200      	movs	r2, #0
 800103e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <SystemInit+0xec>)
 8001042:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <SystemInit+0xfc>)
 8001044:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <SystemInit+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <SystemInit+0xec>)
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <SystemInit+0xfc>)
 8001050:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <SystemInit+0xec>)
 8001054:	2200      	movs	r2, #0
 8001056:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <SystemInit+0xec>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <SystemInit+0xec>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <SystemInit+0xec>)
 8001066:	2200      	movs	r2, #0
 8001068:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <SystemInit+0x100>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <SystemInit+0x104>)
 8001070:	4013      	ands	r3, r2
 8001072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001076:	d202      	bcs.n	800107e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <SystemInit+0x108>)
 800107a:	2201      	movs	r2, #1
 800107c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <SystemInit+0x10c>)
 8001080:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001084:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	52002000 	.word	0x52002000
 8001098:	58024400 	.word	0x58024400
 800109c:	eaf6ed7f 	.word	0xeaf6ed7f
 80010a0:	02020200 	.word	0x02020200
 80010a4:	01ff0000 	.word	0x01ff0000
 80010a8:	01010280 	.word	0x01010280
 80010ac:	5c001000 	.word	0x5c001000
 80010b0:	ffff0000 	.word	0xffff0000
 80010b4:	51008108 	.word	0x51008108
 80010b8:	52004000 	.word	0x52004000

080010bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff ff74 	bl	8000fac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ea:	f016 fd5f 	bl	8017bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010ee:	f7ff fadd 	bl	80006ac <main>
  bx  lr
 80010f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010fc:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8001100:	0801bd48 	.word	0x0801bd48
  ldr r2, =_sbss
 8001104:	2400192c 	.word	0x2400192c
  ldr r4, =_ebss
 8001108:	2400d714 	.word	0x2400d714

0800110c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC3_IRQHandler>

0800110e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00b      	beq.n	8001136 <LAN8742_RegisterBusIO+0x28>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d007      	beq.n	8001136 <LAN8742_RegisterBusIO+0x28>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <LAN8742_RegisterBusIO+0x28>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800113a:	e014      	b.n	8001166 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	2300      	movs	r3, #0
 8001184:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d17c      	bne.n	800128c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2220      	movs	r2, #32
 80011a4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
 80011aa:	e01c      	b.n	80011e6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	f107 0208 	add.w	r2, r7, #8
 80011b4:	2112      	movs	r1, #18
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	4798      	blx	r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da03      	bge.n	80011c8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80011c0:	f06f 0304 	mvn.w	r3, #4
 80011c4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80011c6:	e00b      	b.n	80011e0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	f003 031f 	and.w	r3, r3, #31
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d105      	bne.n	80011e0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
         break;
 80011de:	e005      	b.n	80011ec <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	2b1f      	cmp	r3, #31
 80011ea:	d9df      	bls.n	80011ac <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b1f      	cmp	r3, #31
 80011f2:	d902      	bls.n	80011fa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80011f4:	f06f 0302 	mvn.w	r3, #2
 80011f8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d145      	bne.n	800128c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6810      	ldr	r0, [r2, #0]
 8001208:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800120c:	2100      	movs	r1, #0
 800120e:	4798      	blx	r3
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	db37      	blt.n	8001286 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6810      	ldr	r0, [r2, #0]
 800121e:	f107 0208 	add.w	r2, r7, #8
 8001222:	2100      	movs	r1, #0
 8001224:	4798      	blx	r3
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	db28      	blt.n	800127e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4798      	blx	r3
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001236:	e01c      	b.n	8001272 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4798      	blx	r3
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800124a:	d80e      	bhi.n	800126a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6810      	ldr	r0, [r2, #0]
 8001254:	f107 0208 	add.w	r2, r7, #8
 8001258:	2100      	movs	r1, #0
 800125a:	4798      	blx	r3
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	da07      	bge.n	8001272 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001262:	f06f 0304 	mvn.w	r3, #4
 8001266:	613b      	str	r3, [r7, #16]
                 break;
 8001268:	e010      	b.n	800128c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800126a:	f06f 0301 	mvn.w	r3, #1
 800126e:	613b      	str	r3, [r7, #16]
               break;
 8001270:	e00c      	b.n	800128c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1dd      	bne.n	8001238 <LAN8742_Init+0xc6>
 800127c:	e006      	b.n	800128c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800127e:	f06f 0304 	mvn.w	r3, #4
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	e002      	b.n	800128c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001286:	f06f 0303 	mvn.w	r3, #3
 800128a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d112      	bne.n	80012b8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4798      	blx	r3
 8001298:	4603      	mov	r3, r0
 800129a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800129c:	bf00      	nop
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	4798      	blx	r3
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012b0:	d9f5      	bls.n	800129e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80012b8:	693b      	ldr	r3, [r7, #16]
 }
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b084      	sub	sp, #16
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6810      	ldr	r0, [r2, #0]
 80012d6:	f107 020c 	add.w	r2, r7, #12
 80012da:	2101      	movs	r1, #1
 80012dc:	4798      	blx	r3
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	da02      	bge.n	80012ea <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80012e4:	f06f 0304 	mvn.w	r3, #4
 80012e8:	e06e      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	6810      	ldr	r0, [r2, #0]
 80012f2:	f107 020c 	add.w	r2, r7, #12
 80012f6:	2101      	movs	r1, #1
 80012f8:	4798      	blx	r3
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da02      	bge.n	8001306 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001300:	f06f 0304 	mvn.w	r3, #4
 8001304:	e060      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001310:	2301      	movs	r3, #1
 8001312:	e059      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6810      	ldr	r0, [r2, #0]
 800131c:	f107 020c 	add.w	r2, r7, #12
 8001320:	2100      	movs	r1, #0
 8001322:	4798      	blx	r3
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	da02      	bge.n	8001330 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800132a:	f06f 0304 	mvn.w	r3, #4
 800132e:	e04b      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <LAN8742_GetLinkState+0x90>
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800134e:	2302      	movs	r3, #2
 8001350:	e03a      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800135c:	2303      	movs	r3, #3
 800135e:	e033      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800136a:	2304      	movs	r3, #4
 800136c:	e02c      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800136e:	2305      	movs	r3, #5
 8001370:	e02a      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6810      	ldr	r0, [r2, #0]
 800137a:	f107 020c 	add.w	r2, r7, #12
 800137e:	211f      	movs	r1, #31
 8001380:	4798      	blx	r3
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	da02      	bge.n	800138e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001388:	f06f 0304 	mvn.w	r3, #4
 800138c:	e01c      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001398:	2306      	movs	r3, #6
 800139a:	e015      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 031c 	and.w	r3, r3, #28
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	d101      	bne.n	80013aa <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013a6:	2302      	movs	r3, #2
 80013a8:	e00e      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f003 031c 	and.w	r3, r3, #28
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d101      	bne.n	80013b8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e007      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f003 031c 	and.w	r3, r3, #28
 80013be:	2b14      	cmp	r3, #20
 80013c0:	d101      	bne.n	80013c6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013c2:	2304      	movs	r3, #4
 80013c4:	e000      	b.n	80013c8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013c6:	2305      	movs	r3, #5
    }				
  }
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d6:	2003      	movs	r0, #3
 80013d8:	f000 f947 	bl	800166a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013dc:	f003 f838 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80013e0:	4602      	mov	r2, r0
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_Init+0x68>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	4913      	ldr	r1, [pc, #76]	; (800143c <HAL_Init+0x6c>)
 80013ee:	5ccb      	ldrb	r3, [r1, r3]
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
 80013f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013fa:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <HAL_Init+0x68>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_Init+0x6c>)
 8001404:	5cd3      	ldrb	r3, [r2, r3]
 8001406:	f003 031f 	and.w	r3, r3, #31
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_Init+0x70>)
 8001412:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <HAL_Init+0x74>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800141a:	200f      	movs	r0, #15
 800141c:	f7ff fc7a 	bl	8000d14 <HAL_InitTick>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e002      	b.n	8001430 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800142a:	f7ff fb75 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	58024400 	.word	0x58024400
 800143c:	0801ba68 	.word	0x0801ba68
 8001440:	24000004 	.word	0x24000004
 8001444:	24000000 	.word	0x24000000

08001448 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x20>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x24>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a04      	ldr	r2, [pc, #16]	; (800146c <HAL_IncTick+0x24>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	2400000c 	.word	0x2400000c
 800146c:	2400a3e8 	.word	0x2400a3e8

08001470 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return uwTick;
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <HAL_GetTick+0x14>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	2400a3e8 	.word	0x2400a3e8

08001488 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001490:	f7ff ffee 	bl	8001470 <HAL_GetTick>
 8001494:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80014a0:	d005      	beq.n	80014ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_Delay+0x44>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4413      	add	r3, r2
 80014ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ae:	bf00      	nop
 80014b0:	f7ff ffde 	bl	8001470 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8f7      	bhi.n	80014b0 <HAL_Delay+0x28>
  {
  }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2400000c 	.word	0x2400000c

080014d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <HAL_GetREVID+0x14>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	0c1b      	lsrs	r3, r3, #16
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	5c001000 	.word	0x5c001000

080014e8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80014f8:	4904      	ldr	r1, [pc, #16]	; (800150c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	58000400 	.word	0x58000400

08001510 <__NVIC_SetPriorityGrouping>:
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <__NVIC_SetPriorityGrouping+0x40>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800152c:	4013      	ands	r3, r2
 800152e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	4313      	orrs	r3, r2
 800153c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <__NVIC_SetPriorityGrouping+0x40>)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	60d3      	str	r3, [r2, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	05fa0000 	.word	0x05fa0000

08001558 <__NVIC_GetPriorityGrouping>:
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <__NVIC_GetPriorityGrouping+0x18>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	f003 0307 	and.w	r3, r3, #7
}
 8001566:	4618      	mov	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_EnableIRQ>:
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	2b00      	cmp	r3, #0
 8001584:	db0b      	blt.n	800159e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	f003 021f 	and.w	r2, r3, #31
 800158c:	4907      	ldr	r1, [pc, #28]	; (80015ac <__NVIC_EnableIRQ+0x38>)
 800158e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001592:	095b      	lsrs	r3, r3, #5
 8001594:	2001      	movs	r0, #1
 8001596:	fa00 f202 	lsl.w	r2, r0, r2
 800159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	; (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	; (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	88fb      	ldrh	r3, [r7, #6]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	; 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr

0800166a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ff4c 	bl	8001510 <__NVIC_SetPriorityGrouping>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
 800168c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800168e:	f7ff ff63 	bl	8001558 <__NVIC_GetPriorityGrouping>
 8001692:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	68b9      	ldr	r1, [r7, #8]
 8001698:	6978      	ldr	r0, [r7, #20]
 800169a:	f7ff ffb3 	bl	8001604 <NVIC_EncodePriority>
 800169e:	4602      	mov	r2, r0
 80016a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff82 	bl	80015b0 <__NVIC_SetPriority>
}
 80016ac:	bf00      	nop
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff56 	bl	8001574 <__NVIC_EnableIRQ>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d101      	bne.n	80016e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e0c6      	b.n	8001870 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f006 fad2 	bl	8007c94 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2223      	movs	r2, #35	; 0x23
 80016f4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b60      	ldr	r3, [pc, #384]	; (8001878 <HAL_ETH_Init+0x1a8>)
 80016f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016fc:	4a5e      	ldr	r2, [pc, #376]	; (8001878 <HAL_ETH_Init+0x1a8>)
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001706:	4b5c      	ldr	r3, [pc, #368]	; (8001878 <HAL_ETH_Init+0x1a8>)
 8001708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7a1b      	ldrb	r3, [r3, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d103      	bne.n	8001724 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fee3 	bl	80014e8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001722:	e003      	b.n	800172c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001724:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001728:	f7ff fede 	bl	80014e8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001744:	f7ff fe94 	bl	8001470 <HAL_GetTick>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800174a:	e00f      	b.n	800176c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800174c:	f7ff fe90 	bl	8001470 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800175a:	d907      	bls.n	800176c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2204      	movs	r2, #4
 8001760:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	22e0      	movs	r2, #224	; 0xe0
 8001766:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e081      	b.n	8001870 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1e6      	bne.n	800174c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f001 f9ae 	bl	8002ae0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001784:	f002 ffde 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8001788:	4603      	mov	r3, r0
 800178a:	4a3c      	ldr	r2, [pc, #240]	; (800187c <HAL_ETH_Init+0x1ac>)
 800178c:	fba2 2303 	umull	r2, r3, r2, r3
 8001790:	0c9a      	lsrs	r2, r3, #18
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3a01      	subs	r2, #1
 8001798:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f001 f901 	bl	80029a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80017b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80017bc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	22e0      	movs	r2, #224	; 0xe0
 80017d4:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e04a      	b.n	8001870 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	f241 1308 	movw	r3, #4360	; 0x1108
 80017e2:	4413      	add	r3, r2
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4b26      	ldr	r3, [pc, #152]	; (8001880 <HAL_ETH_Init+0x1b0>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6952      	ldr	r2, [r2, #20]
 80017ee:	0052      	lsls	r2, r2, #1
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	6809      	ldr	r1, [r1, #0]
 80017f4:	431a      	orrs	r2, r3
 80017f6:	f241 1308 	movw	r3, #4360	; 0x1108
 80017fa:	440b      	add	r3, r1
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f001 f9c6 	bl	8002b90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f001 fa0a 	bl	8002c1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	3305      	adds	r3, #5
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	021a      	lsls	r2, r3, #8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	3304      	adds	r3, #4
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	3303      	adds	r3, #3
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	061a      	lsls	r2, r3, #24
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	3302      	adds	r3, #2
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	041b      	lsls	r3, r3, #16
 800183c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	3301      	adds	r3, #1
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001848:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001856:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001858:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2210      	movs	r2, #16
 8001866:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2210      	movs	r2, #16
 800186c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	58024400 	.word	0x58024400
 800187c:	431bde83 	.word	0x431bde83
 8001880:	ffff8001 	.word	0xffff8001

08001884 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	3310      	adds	r3, #16
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4413      	add	r3, r2
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <HAL_ETH_DescAssignMemory+0x28>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	2b03      	cmp	r3, #3
 80018aa:	d904      	bls.n	80018b6 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e021      	b.n	80018fa <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00b      	beq.n	80018ec <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001906:	b480      	push	{r7}
 8001908:	b085      	sub	sp, #20
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001912:	2b10      	cmp	r3, #16
 8001914:	d174      	bne.n	8001a00 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2223      	movs	r2, #35	; 0x23
 800191a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e00f      	b.n	8001942 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3310      	adds	r3, #16
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	4413      	add	r3, r2
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3301      	adds	r3, #1
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2b03      	cmp	r3, #3
 8001946:	d9ec      	bls.n	8001922 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0202 	orr.w	r2, r2, #2
 800195c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	f241 1304 	movw	r3, #4356	; 0x1104
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6811      	ldr	r1, [r2, #0]
 8001992:	f043 0201 	orr.w	r2, r3, #1
 8001996:	f241 1304 	movw	r3, #4356	; 0x1104
 800199a:	440b      	add	r3, r1
 800199c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	f241 1308 	movw	r3, #4360	; 0x1108
 80019a6:	4413      	add	r3, r2
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6811      	ldr	r1, [r2, #0]
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80019b6:	440b      	add	r3, r1
 80019b8:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80019cc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019d0:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	f241 1334 	movw	r3, #4404	; 0x1134
 80019da:	4413      	add	r3, r2
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	6811      	ldr	r1, [r2, #0]
 80019e2:	f24d 0241 	movw	r2, #53313	; 0xd041
 80019e6:	431a      	orrs	r2, r3
 80019e8:	f241 1334 	movw	r3, #4404	; 0x1134
 80019ec:	440b      	add	r3, r1
 80019ee:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2210      	movs	r2, #16
 80019f4:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2222      	movs	r2, #34	; 0x22
 80019fa:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e000      	b.n	8001a02 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
  }
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d067      	beq.n	8001af0 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2223      	movs	r2, #35	; 0x23
 8001a24:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a2e:	4413      	add	r3, r2
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6811      	ldr	r1, [r2, #0]
 8001a36:	4a32      	ldr	r2, [pc, #200]	; (8001b00 <HAL_ETH_Stop_IT+0xf0>)
 8001a38:	401a      	ands	r2, r3
 8001a3a:	f241 1334 	movw	r3, #4404	; 0x1134
 8001a3e:	440b      	add	r3, r1
 8001a40:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6811      	ldr	r1, [r2, #0]
 8001a52:	f023 0201 	bic.w	r2, r3, #1
 8001a56:	f241 1304 	movw	r3, #4356	; 0x1104
 8001a5a:	440b      	add	r3, r1
 8001a5c:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a66:	4413      	add	r3, r2
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6811      	ldr	r1, [r2, #0]
 8001a6e:	f023 0201 	bic.w	r2, r3, #1
 8001a72:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a76:	440b      	add	r3, r1
 8001a78:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0202 	bic.w	r2, r2, #2
 8001aac:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e00f      	b.n	8001ad4 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3310      	adds	r3, #16
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	d9ec      	bls.n	8001ab4 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2210      	movs	r2, #16
 8001aea:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e000      	b.n	8001af2 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
  }
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	ffff2fbe 	.word	0xffff2fbe

08001b04 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d107      	bne.n	8001b26 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1a:	f043 0201 	orr.w	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e073      	b.n	8001c0e <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d16e      	bne.n	8001c0c <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f001 f8d0 	bl	8002cd8 <ETH_Prepare_Tx_Descriptors>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b42:	f043 0202 	orr.w	r2, r3, #2
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e05f      	b.n	8001c0e <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3206      	adds	r2, #6
 8001b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	629a      	str	r2, [r3, #40]	; 0x28
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	2b03      	cmp	r3, #3
 8001b6c:	d904      	bls.n	8001b78 <HAL_ETH_Transmit+0x74>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b72:	1f1a      	subs	r2, r3, #4
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68fa      	ldr	r2, [r7, #12]
 8001b82:	3106      	adds	r1, #6
 8001b84:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001b88:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001b8c:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8001b8e:	f7ff fc6f 	bl	8001470 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001b94:	e034      	b.n	8001c00 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d011      	beq.n	8001bcc <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bac:	f043 0208 	orr.w	r2, r3, #8
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	22e0      	movs	r2, #224	; 0xe0
 8001bc6:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e020      	b.n	8001c0e <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bd2:	d015      	beq.n	8001c00 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8001bd4:	f7ff fc4c 	bl	8001470 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d302      	bcc.n	8001bea <HAL_ETH_Transmit+0xe6>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bee:	f043 0204 	orr.w	r2, r3, #4
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	22e0      	movs	r2, #224	; 0xe0
 8001bfa:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e006      	b.n	8001c0e <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	dbc6      	blt.n	8001b96 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b089      	sub	sp, #36	; 0x24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3344      	adds	r3, #68	; 0x44
 8001c22:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d06b      	beq.n	8001d20 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e0ce      	b.n	8001dea <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d036      	beq.n	8001ccc <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	3301      	adds	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d902      	bls.n	8001c80 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b04      	subs	r3, #4
 8001c7e:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	69fa      	ldr	r2, [r7, #28]
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db11      	blt.n	8001cb6 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00b      	beq.n	8001cb6 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	61fb      	str	r3, [r7, #28]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	d902      	bls.n	8001cb6 <HAL_ETH_IsRxDataAvailable+0xa0>
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	3b04      	subs	r3, #4
 8001cb4:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e08e      	b.n	8001dea <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d012      	beq.n	8001cfe <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d902      	bls.n	8001cf2 <HAL_ETH_IsRxDataAvailable+0xdc>
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	69fa      	ldr	r2, [r7, #28]
 8001cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	e010      	b.n	8001d20 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	3301      	adds	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	3301      	adds	r3, #1
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d902      	bls.n	8001d16 <HAL_ETH_IsRxDataAvailable+0x100>
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3b04      	subs	r3, #4
 8001d14:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	69fa      	ldr	r2, [r7, #28]
 8001d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db02      	blt.n	8001d2e <HAL_ETH_IsRxDataAvailable+0x118>
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d98e      	bls.n	8001c4c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d056      	beq.n	8001de2 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e03b      	b.n	8001dcc <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001d54:	69bb      	ldr	r3, [r7, #24]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d62:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d009      	beq.n	8001d80 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d20d      	bcs.n	8001dc6 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3301      	adds	r3, #1
 8001dae:	61fb      	str	r3, [r7, #28]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d902      	bls.n	8001dbc <HAL_ETH_IsRxDataAvailable+0x1a6>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b04      	subs	r3, #4
 8001dba:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc4:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3bf      	bcc.n	8001d54 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f241 1328 	movw	r3, #4392	; 0x1128
 8001dde:	440b      	add	r3, r1
 8001de0:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]

  return 0;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b08a      	sub	sp, #40	; 0x28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3344      	adds	r3, #68	; 0x44
 8001e04:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d104      	bne.n	8001e2e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e07d      	b.n	8001f2a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff feed 	bl	8001c16 <HAL_ETH_IsRxDataAvailable>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e071      	b.n	8001f2a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
 8001e5a:	e031      	b.n	8001ec0 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	461a      	mov	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695a      	ldr	r2, [r3, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	461a      	mov	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001e96:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d902      	bls.n	8001eaa <HAL_ETH_GetRxDataBuffer+0xb4>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001eba:	6a3b      	ldr	r3, [r7, #32]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	623b      	str	r3, [r7, #32]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d3c7      	bcc.n	8001e5c <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d803      	bhi.n	8001ef6 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	68fa      	ldr	r2, [r7, #12]
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	e018      	b.n	8001f28 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d012      	beq.n	8001f24 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	461a      	mov	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695b      	ldr	r3, [r3, #20]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	1ad2      	subs	r2, r2, r3
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	e001      	b.n	8001f28 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b086      	sub	sp, #24
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3344      	adds	r3, #68	; 0x44
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d107      	bne.n	8001f60 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff fe60 	bl	8001c16 <HAL_ETH_IsRxDataAvailable>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e017      	b.n	8001f90 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	699a      	ldr	r2, [r3, #24]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4413      	add	r3, r2
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b03      	cmp	r3, #3
 8001f70:	d902      	bls.n	8001f78 <HAL_ETH_GetRxDataLength+0x46>
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3b04      	subs	r3, #4
 8001f76:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3344      	adds	r3, #68	; 0x44
 8001fa4:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb4:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e057      	b.n	8002078 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	e03b      	b.n	8002054 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fea:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	695a      	ldr	r2, [r3, #20]
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3b01      	subs	r3, #1
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	429a      	cmp	r2, r3
 8002030:	d20d      	bcs.n	800204e <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3301      	adds	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d902      	bls.n	8002044 <HAL_ETH_BuildRxDescriptors+0xac>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b04      	subs	r3, #4
 8002042:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800204c:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	3301      	adds	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	d3bf      	bcc.n	8001fdc <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	f241 1328 	movw	r3, #4392	; 0x1128
 8002066:	440b      	add	r3, r1
 8002068:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3724      	adds	r7, #36	; 0x24
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
 8002090:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e03e      	b.n	8002124 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020ae:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	055b      	lsls	r3, r3, #21
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	041b      	lsls	r3, r3, #16
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f043 030c 	orr.w	r3, r3, #12
 80020d2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80020e6:	f7ff f9c3 	bl	8001470 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80020ec:	e009      	b.n	8002102 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80020ee:	f7ff f9bf 	bl	8001470 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020fc:	d901      	bls.n	8002102 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e010      	b.n	8002124 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ed      	bne.n	80020ee <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800211a:	b29b      	uxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e03c      	b.n	80021c8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002156:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	055b      	lsls	r3, r3, #21
 8002162:	4313      	orrs	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	4313      	orrs	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 030c 	bic.w	r3, r3, #12
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b29a      	uxth	r2, r3
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_ETH_WritePHYRegister+0xa4>)
 800218e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_ETH_WritePHYRegister+0xa4>)
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800219a:	f7ff f969 	bl	8001470 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021a0:	e009      	b.n	80021b6 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80021a2:	f7ff f965 	bl	8001470 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b0:	d901      	bls.n	80021b6 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e008      	b.n	80021c8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ed      	bne.n	80021a2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3718      	adds	r7, #24
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40028000 	.word	0x40028000

080021d4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e1c3      	b.n	8002570 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0310 	and.w	r3, r3, #16
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf0c      	ite	eq
 8002264:	2301      	moveq	r3, #1
 8002266:	2300      	movne	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800227a:	2b00      	cmp	r3, #0
 800227c:	bf14      	ite	ne
 800227e:	2301      	movne	r3, #1
 8002280:	2300      	moveq	r3, #0
 8002282:	b2db      	uxtb	r3, r3
 8002284:	461a      	mov	r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bf14      	ite	ne
 80022ce:	2301      	movne	r3, #1
 80022d0:	2300      	moveq	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	bf0c      	ite	eq
 80022e8:	2301      	moveq	r3, #1
 80022ea:	2300      	movne	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	461a      	mov	r2, r3
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	bf0c      	ite	eq
 8002302:	2301      	moveq	r3, #1
 8002304:	2300      	movne	r3, #0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf14      	ite	ne
 800231c:	2301      	movne	r3, #1
 800231e:	2300      	moveq	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	461a      	mov	r2, r3
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234c:	2b00      	cmp	r3, #0
 800234e:	bf14      	ite	ne
 8002350:	2301      	movne	r3, #1
 8002352:	2300      	moveq	r3, #0
 8002354:	b2db      	uxtb	r3, r3
 8002356:	461a      	mov	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002366:	2b00      	cmp	r3, #0
 8002368:	bf14      	ite	ne
 800236a:	2301      	movne	r3, #1
 800236c:	2300      	moveq	r3, #0
 800236e:	b2db      	uxtb	r3, r3
 8002370:	461a      	mov	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	bf14      	ite	ne
 8002392:	2301      	movne	r3, #1
 8002394:	2300      	moveq	r3, #0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf0c      	ite	eq
 80023c8:	2301      	moveq	r3, #1
 80023ca:	2300      	movne	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	461a      	mov	r2, r3
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	461a      	mov	r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0e5b      	lsrs	r3, r3, #25
 8002432:	f003 021f 	and.w	r2, r3, #31
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 020f 	and.w	r2, r3, #15
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	bf14      	ite	ne
 8002472:	2301      	movne	r3, #1
 8002474:	2300      	moveq	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	bf0c      	ite	eq
 800248e:	2301      	moveq	r3, #1
 8002490:	2300      	movne	r3, #0
 8002492:	b2db      	uxtb	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	461a      	mov	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80024fc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800250c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf14      	ite	ne
 8002524:	2301      	movne	r3, #1
 8002526:	2300      	moveq	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	461a      	mov	r2, r3
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e00a      	b.n	80025a6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	2b10      	cmp	r3, #16
 8002596:	d105      	bne.n	80025a4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f860 	bl	8002660 <ETH_SetMACConfig>

    return HAL_OK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	e000      	b.n	80025a6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80025ca:	f002 f8bb 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80025ce:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d908      	bls.n	80025ea <HAL_ETH_SetMDIOClockRange+0x3a>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d804      	bhi.n	80025ea <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	e027      	b.n	800263a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d908      	bls.n	8002604 <HAL_ETH_SetMDIOClockRange+0x54>
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d204      	bcs.n	8002604 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	e01a      	b.n	800263a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4a13      	ldr	r2, [pc, #76]	; (8002654 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d303      	bcc.n	8002614 <HAL_ETH_SetMDIOClockRange+0x64>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	4a12      	ldr	r2, [pc, #72]	; (8002658 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d911      	bls.n	8002638 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4a10      	ldr	r2, [pc, #64]	; (8002658 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d908      	bls.n	800262e <HAL_ETH_SetMDIOClockRange+0x7e>
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <HAL_ETH_SetMDIOClockRange+0xac>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d804      	bhi.n	800262e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	e005      	b.n	800263a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e000      	b.n	800263a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002638:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	01312cff 	.word	0x01312cff
 8002650:	02160ebf 	.word	0x02160ebf
 8002654:	03938700 	.word	0x03938700
 8002658:	05f5e0ff 	.word	0x05f5e0ff
 800265c:	08f0d17f 	.word	0x08f0d17f

08002660 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002672:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	791b      	ldrb	r3, [r3, #4]
 8002678:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800267a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	7b1b      	ldrb	r3, [r3, #12]
 8002680:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002682:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	7b5b      	ldrb	r3, [r3, #13]
 8002688:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800268a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	7b9b      	ldrb	r3, [r3, #14]
 8002690:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002692:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	7bdb      	ldrb	r3, [r3, #15]
 8002698:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800269a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	7c12      	ldrb	r2, [r2, #16]
 80026a0:	2a00      	cmp	r2, #0
 80026a2:	d102      	bne.n	80026aa <ETH_SetMACConfig+0x4a>
 80026a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80026a8:	e000      	b.n	80026ac <ETH_SetMACConfig+0x4c>
 80026aa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80026ac:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	7c52      	ldrb	r2, [r2, #17]
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	d102      	bne.n	80026bc <ETH_SetMACConfig+0x5c>
 80026b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026ba:	e000      	b.n	80026be <ETH_SetMACConfig+0x5e>
 80026bc:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80026be:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7c9b      	ldrb	r3, [r3, #18]
 80026c4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80026c6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80026cc:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80026d2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7f1b      	ldrb	r3, [r3, #28]
 80026d8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80026da:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	7f5b      	ldrb	r3, [r3, #29]
 80026e0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80026e2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	7f92      	ldrb	r2, [r2, #30]
 80026e8:	2a00      	cmp	r2, #0
 80026ea:	d102      	bne.n	80026f2 <ETH_SetMACConfig+0x92>
 80026ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f0:	e000      	b.n	80026f4 <ETH_SetMACConfig+0x94>
 80026f2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80026f4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	7fdb      	ldrb	r3, [r3, #31]
 80026fa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80026fc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002704:	2a00      	cmp	r2, #0
 8002706:	d102      	bne.n	800270e <ETH_SetMACConfig+0xae>
 8002708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270c:	e000      	b.n	8002710 <ETH_SetMACConfig+0xb0>
 800270e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002710:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002716:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800271e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002720:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b56      	ldr	r3, [pc, #344]	; (800288c <ETH_SetMACConfig+0x22c>)
 8002732:	4013      	ands	r3, r2
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	430b      	orrs	r3, r1
 800273c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002742:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800274a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800274c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002754:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002756:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800275e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002760:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002768:	2a00      	cmp	r2, #0
 800276a:	d102      	bne.n	8002772 <ETH_SetMACConfig+0x112>
 800276c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0x114>
 8002772:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002774:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800277a:	4313      	orrs	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <ETH_SetMACConfig+0x230>)
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	430b      	orrs	r3, r1
 8002790:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002798:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	4b3a      	ldr	r3, [pc, #232]	; (8002894 <ETH_SetMACConfig+0x234>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	68f9      	ldr	r1, [r7, #12]
 80027b2:	430b      	orrs	r3, r1
 80027b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80027bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027c2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027ca:	2a00      	cmp	r2, #0
 80027cc:	d101      	bne.n	80027d2 <ETH_SetMACConfig+0x172>
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	e000      	b.n	80027d4 <ETH_SetMACConfig+0x174>
 80027d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80027d4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	68f9      	ldr	r1, [r7, #12]
 80027f2:	430b      	orrs	r3, r1
 80027f4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80027fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002804:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f023 0103 	bic.w	r1, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	430a      	orrs	r2, r1
 800281e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800282a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002846:	2a00      	cmp	r2, #0
 8002848:	d101      	bne.n	800284e <ETH_SetMACConfig+0x1ee>
 800284a:	2240      	movs	r2, #64	; 0x40
 800284c:	e000      	b.n	8002850 <ETH_SetMACConfig+0x1f0>
 800284e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002850:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002858:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800285a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002862:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002864:	4313      	orrs	r3, r2
 8002866:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002870:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	430a      	orrs	r2, r1
 800287c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	00048083 	.word	0x00048083
 8002890:	c0f88000 	.word	0xc0f88000
 8002894:	fffffef0 	.word	0xfffffef0

08002898 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b38      	ldr	r3, [pc, #224]	; (8002990 <ETH_SetDMAConfig+0xf8>)
 80028ae:	4013      	ands	r3, r2
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	6812      	ldr	r2, [r2, #0]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	6809      	ldr	r1, [r1, #0]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80028be:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	791b      	ldrb	r3, [r3, #4]
 80028c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028ca:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	7b1b      	ldrb	r3, [r3, #12]
 80028d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f241 0304 	movw	r3, #4100	; 0x1004
 80028de:	4413      	add	r3, r2
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <ETH_SetDMAConfig+0xfc>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6811      	ldr	r1, [r2, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	f241 0304 	movw	r3, #4100	; 0x1004
 80028f2:	440b      	add	r3, r1
 80028f4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	7b5b      	ldrb	r3, [r3, #13]
 80028fa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <ETH_SetDMAConfig+0x100>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	431a      	orrs	r2, r3
 800291a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800291e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	7d1b      	ldrb	r3, [r3, #20]
 8002928:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800292a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	7f5b      	ldrb	r3, [r3, #29]
 8002930:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	f241 1304 	movw	r3, #4356	; 0x1104
 800293e:	4413      	add	r3, r2
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b16      	ldr	r3, [pc, #88]	; (800299c <ETH_SetDMAConfig+0x104>)
 8002944:	4013      	ands	r3, r2
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6811      	ldr	r1, [r2, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	431a      	orrs	r2, r3
 800294e:	f241 1304 	movw	r3, #4356	; 0x1104
 8002952:	440b      	add	r3, r1
 8002954:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	7f1b      	ldrb	r3, [r3, #28]
 800295a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002960:	4313      	orrs	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	f241 1308 	movw	r3, #4360	; 0x1108
 800296c:	4413      	add	r3, r2
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <ETH_SetDMAConfig+0x108>)
 8002972:	4013      	ands	r3, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6811      	ldr	r1, [r2, #0]
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	431a      	orrs	r2, r3
 800297c:	f241 1308 	movw	r3, #4360	; 0x1108
 8002980:	440b      	add	r3, r1
 8002982:	601a      	str	r2, [r3, #0]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	ffff87fd 	.word	0xffff87fd
 8002994:	ffff2ffe 	.word	0xffff2ffe
 8002998:	fffec000 	.word	0xfffec000
 800299c:	ffc0efef 	.word	0xffc0efef
 80029a0:	7fc0ffff 	.word	0x7fc0ffff

080029a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b0a4      	sub	sp, #144	; 0x90
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029b2:	2300      	movs	r3, #0
 80029b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80029c8:	2301      	movs	r3, #1
 80029ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80029da:	2301      	movs	r3, #1
 80029dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80029f0:	2300      	movs	r3, #0
 80029f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80029fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002a00:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002a26:	2300      	movs	r3, #0
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002a30:	2300      	movs	r3, #0
 8002a32:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002a3c:	2320      	movs	r3, #32
 8002a3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002a42:	2301      	movs	r3, #1
 8002a44:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002a4e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002a54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002a60:	2302      	movs	r3, #2
 8002a62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002a82:	2301      	movs	r3, #1
 8002a84:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fde6 	bl	8002660 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002aae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ab2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002abc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002ac4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002aca:	f107 0308 	add.w	r3, r7, #8
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff fee1 	bl	8002898 <ETH_SetDMAConfig>
}
 8002ad6:	bf00      	nop
 8002ad8:	3790      	adds	r7, #144	; 0x90
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002af0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002afa:	f001 fe23 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8002afe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4a1e      	ldr	r2, [pc, #120]	; (8002b7c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d908      	bls.n	8002b1a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d804      	bhi.n	8002b1a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	e027      	b.n	8002b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	4a18      	ldr	r2, [pc, #96]	; (8002b80 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d908      	bls.n	8002b34 <ETH_MAC_MDIO_ClkConfig+0x54>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d204      	bcs.n	8002b34 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e01a      	b.n	8002b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d303      	bcc.n	8002b44 <ETH_MAC_MDIO_ClkConfig+0x64>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d911      	bls.n	8002b68 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d908      	bls.n	8002b5e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4a0f      	ldr	r2, [pc, #60]	; (8002b8c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d804      	bhi.n	8002b5e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e005      	b.n	8002b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e000      	b.n	8002b6a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002b68:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002b74:	bf00      	nop
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	01312cff 	.word	0x01312cff
 8002b80:	02160ebf 	.word	0x02160ebf
 8002b84:	03938700 	.word	0x03938700
 8002b88:	05f5e0ff 	.word	0x05f5e0ff
 8002b8c:	08f0d17f 	.word	0x08f0d17f

08002b90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	e01d      	b.n	8002bda <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68d9      	ldr	r1, [r3, #12]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	3206      	adds	r2, #6
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d9de      	bls.n	8002b9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	f241 132c 	movw	r3, #4396	; 0x112c
 8002bee:	4413      	add	r3, r2
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68d9      	ldr	r1, [r3, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	f241 1314 	movw	r3, #4372	; 0x1114
 8002c00:	4413      	add	r3, r2
 8002c02:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002c10:	601a      	str	r2, [r3, #0]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b085      	sub	sp, #20
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e024      	b.n	8002c76 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6919      	ldr	r1, [r3, #16]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	440b      	add	r3, r1
 8002c3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2200      	movs	r2, #0
 8002c48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3310      	adds	r3, #16
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d9d7      	bls.n	8002c2c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	f241 1330 	movw	r3, #4400	; 0x1130
 8002ca2:	4413      	add	r3, r2
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6919      	ldr	r1, [r3, #16]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	f241 131c 	movw	r3, #4380	; 0x111c
 8002cb4:	4413      	add	r3, r2
 8002cb6:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f241 1328 	movw	r3, #4392	; 0x1128
 8002cc8:	4413      	add	r3, r2
 8002cca:	6019      	str	r1, [r3, #0]
}
 8002ccc:	bf00      	nop
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b08d      	sub	sp, #52	; 0x34
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	3318      	adds	r3, #24
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d02:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d1a:	d007      	beq.n	8002d2c <ETH_Prepare_Tx_Descriptors+0x54>
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d20:	3304      	adds	r3, #4
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e24a      	b.n	80031c6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d044      	beq.n	8002dc6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	4b72      	ldr	r3, [pc, #456]	; (8002f0c <ETH_Prepare_Tx_Descriptors+0x234>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d027      	beq.n	8002dc6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002d76:	6a3b      	ldr	r3, [r7, #32]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	041b      	lsls	r3, r3, #16
 8002d82:	431a      	orrs	r2, r3
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	431a      	orrs	r2, r3
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002db4:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00e      	beq.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	4b4e      	ldr	r3, [pc, #312]	; (8002f10 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	6992      	ldr	r2, [r2, #24]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <ETH_Prepare_Tx_Descriptors+0x130>
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d030      	beq.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	3301      	adds	r3, #1
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d902      	bls.n	8002e32 <ETH_Prepare_Tx_Descriptors+0x15a>
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	3b04      	subs	r3, #4
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3e:	3301      	adds	r3, #1
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e4e:	d10c      	bne.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e58:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002e66:	2302      	movs	r3, #2
 8002e68:	e1ad      	b.n	80031c6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	69fa      	ldr	r2, [r7, #28]
 8002e84:	6852      	ldr	r2, [r2, #4]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	69fa      	ldr	r2, [r7, #28]
 8002eae:	6852      	ldr	r2, [r2, #4]
 8002eb0:	0412      	lsls	r2, r2, #16
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e008      	b.n	8002ecc <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d021      	beq.n	8002f1c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	04db      	lsls	r3, r3, #19
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	69d2      	ldr	r2, [r2, #28]
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e02e      	b.n	8002f6a <ETH_Prepare_Tx_Descriptors+0x292>
 8002f0c:	ffff0000 	.word	0xffff0000
 8002f10:	ffffc000 	.word	0xffffc000
 8002f14:	c000ffff 	.word	0xc000ffff
 8002f18:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	4b93      	ldr	r3, [pc, #588]	; (8003170 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002f22:	4013      	ands	r3, r2
 8002f24:	68ba      	ldr	r2, [r7, #8]
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0320 	and.w	r3, r3, #32
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0304 	and.w	r3, r3, #4
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f82:	431a      	orrs	r2, r3
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80cb 	beq.w	8003150 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002fba:	6a3b      	ldr	r3, [r7, #32]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002fcc:	e0c0      	b.n	8003150 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fdc:	3301      	adds	r3, #1
 8002fde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d902      	bls.n	8002fec <ETH_Prepare_Tx_Descriptors+0x314>
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	3b04      	subs	r3, #4
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800300a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800300e:	d007      	beq.n	8003020 <ETH_Prepare_Tx_Descriptors+0x348>
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003014:	3304      	adds	r3, #4
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d026      	beq.n	800306e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800302c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
 8003032:	e016      	b.n	8003062 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	3301      	adds	r3, #1
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	2b03      	cmp	r3, #3
 800304a:	d902      	bls.n	8003052 <ETH_Prepare_Tx_Descriptors+0x37a>
 800304c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304e:	3b04      	subs	r3, #4
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800305a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	3301      	adds	r3, #1
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
 8003062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003066:	429a      	cmp	r2, r3
 8003068:	d3e4      	bcc.n	8003034 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 800306a:	2302      	movs	r3, #2
 800306c:	e0ab      	b.n	80031c6 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 800306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003070:	3301      	adds	r3, #1
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	461a      	mov	r2, r3
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	4b3a      	ldr	r3, [pc, #232]	; (8003174 <ETH_Prepare_Tx_Descriptors+0x49c>)
 800308a:	4013      	ands	r3, r2
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	6852      	ldr	r2, [r2, #4]
 8003090:	431a      	orrs	r2, r3
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d012      	beq.n	80030c4 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	4b31      	ldr	r3, [pc, #196]	; (8003178 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	6852      	ldr	r2, [r2, #4]
 80030ba:	0412      	lsls	r2, r2, #16
 80030bc:	431a      	orrs	r2, r3
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	609a      	str	r2, [r3, #8]
 80030c2:	e008      	b.n	80030d6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	2200      	movs	r2, #0
 80030c8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	6a3a      	ldr	r2, [r7, #32]
 80030d4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00f      	beq.n	8003102 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	4b25      	ldr	r3, [pc, #148]	; (800317c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	69d2      	ldr	r2, [r2, #28]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030fc:	6a3b      	ldr	r3, [r7, #32]
 80030fe:	60da      	str	r2, [r3, #12]
 8003100:	e017      	b.n	8003132 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003108:	4013      	ands	r3, r2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	6852      	ldr	r2, [r2, #4]
 800310e:	431a      	orrs	r2, r3
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	431a      	orrs	r2, r3
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	3301      	adds	r3, #1
 8003136:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f af3a 	bne.w	8002fce <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00f      	beq.n	8003180 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	609a      	str	r2, [r3, #8]
 800316c:	e00e      	b.n	800318c <ETH_Prepare_Tx_Descriptors+0x4b4>
 800316e:	bf00      	nop
 8003170:	ffff8000 	.word	0xffff8000
 8003174:	ffffc000 	.word	0xffffc000
 8003178:	c000ffff 	.word	0xc000ffff
 800317c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003180:	6a3b      	ldr	r3, [r7, #32]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	3304      	adds	r3, #4
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ac:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ae:	b672      	cpsid	i
}
 80031b0:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4413      	add	r3, r2
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80031c0:	b662      	cpsie	i
}
 80031c2:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3734      	adds	r7, #52	; 0x34
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80031e2:	4b89      	ldr	r3, [pc, #548]	; (8003408 <HAL_GPIO_Init+0x234>)
 80031e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80031e6:	e194      	b.n	8003512 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	2101      	movs	r1, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8186 	beq.w	800350c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b01      	cmp	r3, #1
 800320a:	d005      	beq.n	8003218 <HAL_GPIO_Init+0x44>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d130      	bne.n	800327a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800324e:	2201      	movs	r2, #1
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	091b      	lsrs	r3, r3, #4
 8003264:	f003 0201 	and.w	r2, r3, #1
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	2b03      	cmp	r3, #3
 8003284:	d017      	beq.n	80032b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	2203      	movs	r2, #3
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	43db      	mvns	r3, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4013      	ands	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d123      	bne.n	800330a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	220f      	movs	r2, #15
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	08da      	lsrs	r2, r3, #3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3208      	adds	r2, #8
 8003304:	69b9      	ldr	r1, [r7, #24]
 8003306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	fa02 f303 	lsl.w	r3, r2, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 80e0 	beq.w	800350c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334c:	4b2f      	ldr	r3, [pc, #188]	; (800340c <HAL_GPIO_Init+0x238>)
 800334e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003352:	4a2e      	ldr	r2, [pc, #184]	; (800340c <HAL_GPIO_Init+0x238>)
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800335c:	4b2b      	ldr	r3, [pc, #172]	; (800340c <HAL_GPIO_Init+0x238>)
 800335e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800336a:	4a29      	ldr	r2, [pc, #164]	; (8003410 <HAL_GPIO_Init+0x23c>)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	089b      	lsrs	r3, r3, #2
 8003370:	3302      	adds	r3, #2
 8003372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003376:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	220f      	movs	r2, #15
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_GPIO_Init+0x240>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d052      	beq.n	800343c <HAL_GPIO_Init+0x268>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_GPIO_Init+0x244>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_GPIO_Init+0x22e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a1e      	ldr	r2, [pc, #120]	; (800341c <HAL_GPIO_Init+0x248>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d02b      	beq.n	80033fe <HAL_GPIO_Init+0x22a>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a1d      	ldr	r2, [pc, #116]	; (8003420 <HAL_GPIO_Init+0x24c>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d025      	beq.n	80033fa <HAL_GPIO_Init+0x226>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a1c      	ldr	r2, [pc, #112]	; (8003424 <HAL_GPIO_Init+0x250>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d01f      	beq.n	80033f6 <HAL_GPIO_Init+0x222>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <HAL_GPIO_Init+0x254>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d019      	beq.n	80033f2 <HAL_GPIO_Init+0x21e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	; (800342c <HAL_GPIO_Init+0x258>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <HAL_GPIO_Init+0x21a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_GPIO_Init+0x25c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00d      	beq.n	80033ea <HAL_GPIO_Init+0x216>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a18      	ldr	r2, [pc, #96]	; (8003434 <HAL_GPIO_Init+0x260>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d007      	beq.n	80033e6 <HAL_GPIO_Init+0x212>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a17      	ldr	r2, [pc, #92]	; (8003438 <HAL_GPIO_Init+0x264>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d101      	bne.n	80033e2 <HAL_GPIO_Init+0x20e>
 80033de:	2309      	movs	r3, #9
 80033e0:	e02d      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033e2:	230a      	movs	r3, #10
 80033e4:	e02b      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033e6:	2308      	movs	r3, #8
 80033e8:	e029      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033ea:	2307      	movs	r3, #7
 80033ec:	e027      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033ee:	2306      	movs	r3, #6
 80033f0:	e025      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033f2:	2305      	movs	r3, #5
 80033f4:	e023      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033f6:	2304      	movs	r3, #4
 80033f8:	e021      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033fa:	2303      	movs	r3, #3
 80033fc:	e01f      	b.n	800343e <HAL_GPIO_Init+0x26a>
 80033fe:	2302      	movs	r3, #2
 8003400:	e01d      	b.n	800343e <HAL_GPIO_Init+0x26a>
 8003402:	2301      	movs	r3, #1
 8003404:	e01b      	b.n	800343e <HAL_GPIO_Init+0x26a>
 8003406:	bf00      	nop
 8003408:	58000080 	.word	0x58000080
 800340c:	58024400 	.word	0x58024400
 8003410:	58000400 	.word	0x58000400
 8003414:	58020000 	.word	0x58020000
 8003418:	58020400 	.word	0x58020400
 800341c:	58020800 	.word	0x58020800
 8003420:	58020c00 	.word	0x58020c00
 8003424:	58021000 	.word	0x58021000
 8003428:	58021400 	.word	0x58021400
 800342c:	58021800 	.word	0x58021800
 8003430:	58021c00 	.word	0x58021c00
 8003434:	58022000 	.word	0x58022000
 8003438:	58022400 	.word	0x58022400
 800343c:	2300      	movs	r3, #0
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	f002 0203 	and.w	r2, r2, #3
 8003444:	0092      	lsls	r2, r2, #2
 8003446:	4093      	lsls	r3, r2
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800344e:	4938      	ldr	r1, [pc, #224]	; (8003530 <HAL_GPIO_Init+0x35c>)
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	089b      	lsrs	r3, r3, #2
 8003454:	3302      	adds	r3, #2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800345c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003482:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80034b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	3301      	adds	r3, #1
 8003510:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	f47f ae63 	bne.w	80031e8 <HAL_GPIO_Init+0x14>
  }
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	3724      	adds	r7, #36	; 0x24
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	58000400 	.word	0x58000400

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003568:	b08f      	sub	sp, #60	; 0x3c
 800356a:	af0a      	add	r7, sp, #40	; 0x28
 800356c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e116      	b.n	80037a6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fb44 	bl	8000c20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f004 f874 	bl	80076a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	687e      	ldr	r6, [r7, #4]
 80035c4:	466d      	mov	r5, sp
 80035c6:	f106 0410 	add.w	r4, r6, #16
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035da:	1d33      	adds	r3, r6, #4
 80035dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	f003 fff2 	bl	80075c8 <USB_CoreInit>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e0d7      	b.n	80037a6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f004 f862 	bl	80076c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]
 8003606:	e04a      	b.n	800369e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	333d      	adds	r3, #61	; 0x3d
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800361c:	7bfa      	ldrb	r2, [r7, #15]
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	333c      	adds	r3, #60	; 0x3c
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003630:	7bfa      	ldrb	r2, [r7, #15]
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	b298      	uxth	r0, r3
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3342      	adds	r3, #66	; 0x42
 8003644:	4602      	mov	r2, r0
 8003646:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	333f      	adds	r3, #63	; 0x3f
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800365c:	7bfa      	ldrb	r2, [r7, #15]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	3344      	adds	r3, #68	; 0x44
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003670:	7bfa      	ldrb	r2, [r7, #15]
 8003672:	6879      	ldr	r1, [r7, #4]
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	3348      	adds	r3, #72	; 0x48
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003684:	7bfa      	ldrb	r2, [r7, #15]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	3350      	adds	r3, #80	; 0x50
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	3301      	adds	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	7bfa      	ldrb	r2, [r7, #15]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d3af      	bcc.n	8003608 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]
 80036ac:	e044      	b.n	8003738 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80036c0:	2200      	movs	r2, #0
 80036c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036da:	7bfa      	ldrb	r2, [r7, #15]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003706:	7bfa      	ldrb	r2, [r7, #15]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800371c:	7bfa      	ldrb	r2, [r7, #15]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	3301      	adds	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	429a      	cmp	r2, r3
 8003740:	d3b5      	bcc.n	80036ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	687e      	ldr	r6, [r7, #4]
 800374a:	466d      	mov	r5, sp
 800374c:	f106 0410 	add.w	r4, r6, #16
 8003750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800375c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003760:	1d33      	adds	r3, r6, #4
 8003762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003764:	6838      	ldr	r0, [r7, #0]
 8003766:	f003 fffb 	bl	8007760 <USB_DevInit>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e014      	b.n	80037a6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f80b 	bl	80037b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 f9b5 	bl	8007b0e <USB_DevDisconnect>

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080037b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037de:	4b05      	ldr	r3, [pc, #20]	; (80037f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	10000003 	.word	0x10000003

080037f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_PWREx_ConfigSupply+0x70>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b04      	cmp	r3, #4
 800380a:	d00a      	beq.n	8003822 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800380c:	4b16      	ldr	r3, [pc, #88]	; (8003868 <HAL_PWREx_ConfigSupply+0x70>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d001      	beq.n	800381e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e01f      	b.n	800385e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e01d      	b.n	800385e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003822:	4b11      	ldr	r3, [pc, #68]	; (8003868 <HAL_PWREx_ConfigSupply+0x70>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	f023 0207 	bic.w	r2, r3, #7
 800382a:	490f      	ldr	r1, [pc, #60]	; (8003868 <HAL_PWREx_ConfigSupply+0x70>)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4313      	orrs	r3, r2
 8003830:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003832:	f7fd fe1d 	bl	8001470 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003838:	e009      	b.n	800384e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800383a:	f7fd fe19 	bl	8001470 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003848:	d901      	bls.n	800384e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e007      	b.n	800385e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800384e:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_PWREx_ConfigSupply+0x70>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800385a:	d1ee      	bne.n	800383a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	58024800 	.word	0x58024800

0800386c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a04      	ldr	r2, [pc, #16]	; (8003888 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003876:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387a:	60d3      	str	r3, [r2, #12]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	58024800 	.word	0x58024800

0800388c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b08c      	sub	sp, #48	; 0x30
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d102      	bne.n	80038a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f000 bc1c 	b.w	80040d8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 8087 	beq.w	80039bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ae:	4b9e      	ldr	r3, [pc, #632]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80038b8:	4b9b      	ldr	r3, [pc, #620]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d007      	beq.n	80038d4 <HAL_RCC_OscConfig+0x48>
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b18      	cmp	r3, #24
 80038c8:	d110      	bne.n	80038ec <HAL_RCC_OscConfig+0x60>
 80038ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d10b      	bne.n	80038ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	4b94      	ldr	r3, [pc, #592]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d06c      	beq.n	80039ba <HAL_RCC_OscConfig+0x12e>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d168      	bne.n	80039ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e3f5      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f4:	d106      	bne.n	8003904 <HAL_RCC_OscConfig+0x78>
 80038f6:	4b8c      	ldr	r3, [pc, #560]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a8b      	ldr	r2, [pc, #556]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80038fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003900:	6013      	str	r3, [r2, #0]
 8003902:	e02e      	b.n	8003962 <HAL_RCC_OscConfig+0xd6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10c      	bne.n	8003926 <HAL_RCC_OscConfig+0x9a>
 800390c:	4b86      	ldr	r3, [pc, #536]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a85      	ldr	r2, [pc, #532]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003916:	6013      	str	r3, [r2, #0]
 8003918:	4b83      	ldr	r3, [pc, #524]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a82      	ldr	r2, [pc, #520]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e01d      	b.n	8003962 <HAL_RCC_OscConfig+0xd6>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800392e:	d10c      	bne.n	800394a <HAL_RCC_OscConfig+0xbe>
 8003930:	4b7d      	ldr	r3, [pc, #500]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a7c      	ldr	r2, [pc, #496]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b7a      	ldr	r3, [pc, #488]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a79      	ldr	r2, [pc, #484]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003946:	6013      	str	r3, [r2, #0]
 8003948:	e00b      	b.n	8003962 <HAL_RCC_OscConfig+0xd6>
 800394a:	4b77      	ldr	r3, [pc, #476]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a76      	ldr	r2, [pc, #472]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003954:	6013      	str	r3, [r2, #0]
 8003956:	4b74      	ldr	r3, [pc, #464]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a73      	ldr	r2, [pc, #460]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 800395c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d013      	beq.n	8003992 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396a:	f7fd fd81 	bl	8001470 <HAL_GetTick>
 800396e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003972:	f7fd fd7d 	bl	8001470 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e3a9      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003984:	4b68      	ldr	r3, [pc, #416]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0xe6>
 8003990:	e014      	b.n	80039bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003992:	f7fd fd6d 	bl	8001470 <HAL_GetTick>
 8003996:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003998:	e008      	b.n	80039ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800399a:	f7fd fd69 	bl	8001470 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	d901      	bls.n	80039ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e395      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80039ac:	4b5e      	ldr	r3, [pc, #376]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1f0      	bne.n	800399a <HAL_RCC_OscConfig+0x10e>
 80039b8:	e000      	b.n	80039bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80ca 	beq.w	8003b5e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ca:	4b57      	ldr	r3, [pc, #348]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039d4:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d007      	beq.n	80039f0 <HAL_RCC_OscConfig+0x164>
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	2b18      	cmp	r3, #24
 80039e4:	d156      	bne.n	8003a94 <HAL_RCC_OscConfig+0x208>
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d151      	bne.n	8003a94 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f0:	4b4d      	ldr	r3, [pc, #308]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d005      	beq.n	8003a08 <HAL_RCC_OscConfig+0x17c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d101      	bne.n	8003a08 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e367      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a08:	4b47      	ldr	r3, [pc, #284]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 0219 	bic.w	r2, r3, #25
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	4944      	ldr	r1, [pc, #272]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a1a:	f7fd fd29 	bl	8001470 <HAL_GetTick>
 8003a1e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a22:	f7fd fd25 	bl	8001470 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e351      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a34:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0f0      	beq.n	8003a22 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	f7fd fd46 	bl	80014d0 <HAL_GetREVID>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d817      	bhi.n	8003a7e <HAL_RCC_OscConfig+0x1f2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d108      	bne.n	8003a68 <HAL_RCC_OscConfig+0x1dc>
 8003a56:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a5e:	4a32      	ldr	r2, [pc, #200]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a64:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a66:	e07a      	b.n	8003b5e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a68:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	031b      	lsls	r3, r3, #12
 8003a76:	492c      	ldr	r1, [pc, #176]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7e:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	061b      	lsls	r3, r3, #24
 8003a8c:	4926      	ldr	r1, [pc, #152]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a92:	e064      	b.n	8003b5e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d047      	beq.n	8003b2c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f023 0219 	bic.w	r2, r3, #25
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	491f      	ldr	r1, [pc, #124]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aae:	f7fd fcdf 	bl	8001470 <HAL_GetTick>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ab6:	f7fd fcdb 	bl	8001470 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e307      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d0f0      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad4:	f7fd fcfc 	bl	80014d0 <HAL_GetREVID>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d817      	bhi.n	8003b12 <HAL_RCC_OscConfig+0x286>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b40      	cmp	r3, #64	; 0x40
 8003ae8:	d108      	bne.n	8003afc <HAL_RCC_OscConfig+0x270>
 8003aea:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003af2:	4a0d      	ldr	r2, [pc, #52]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	6053      	str	r3, [r2, #4]
 8003afa:	e030      	b.n	8003b5e <HAL_RCC_OscConfig+0x2d2>
 8003afc:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	4907      	ldr	r1, [pc, #28]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	604b      	str	r3, [r1, #4]
 8003b10:	e025      	b.n	8003b5e <HAL_RCC_OscConfig+0x2d2>
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	4901      	ldr	r1, [pc, #4]	; (8003b28 <HAL_RCC_OscConfig+0x29c>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
 8003b26:	e01a      	b.n	8003b5e <HAL_RCC_OscConfig+0x2d2>
 8003b28:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2c:	4b9e      	ldr	r3, [pc, #632]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a9d      	ldr	r2, [pc, #628]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fd fc9a 	bl	8001470 <HAL_GetTick>
 8003b3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fd fc96 	bl	8001470 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e2c2      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b52:	4b95      	ldr	r3, [pc, #596]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a9 	beq.w	8003cbe <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b6c:	4b8e      	ldr	r3, [pc, #568]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b74:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b76:	4b8c      	ldr	r3, [pc, #560]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d007      	beq.n	8003b92 <HAL_RCC_OscConfig+0x306>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b18      	cmp	r3, #24
 8003b86:	d13a      	bne.n	8003bfe <HAL_RCC_OscConfig+0x372>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d135      	bne.n	8003bfe <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b92:	4b85      	ldr	r3, [pc, #532]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_RCC_OscConfig+0x31e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d001      	beq.n	8003baa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e296      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003baa:	f7fd fc91 	bl	80014d0 <HAL_GetREVID>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d817      	bhi.n	8003be8 <HAL_RCC_OscConfig+0x35c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	2b20      	cmp	r3, #32
 8003bbe:	d108      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x346>
 8003bc0:	4b79      	ldr	r3, [pc, #484]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003bc8:	4a77      	ldr	r2, [pc, #476]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bd0:	e075      	b.n	8003cbe <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bd2:	4b75      	ldr	r3, [pc, #468]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	069b      	lsls	r3, r3, #26
 8003be0:	4971      	ldr	r1, [pc, #452]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003be6:	e06a      	b.n	8003cbe <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003be8:	4b6f      	ldr	r3, [pc, #444]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	061b      	lsls	r3, r3, #24
 8003bf6:	496c      	ldr	r1, [pc, #432]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bfc:	e05f      	b.n	8003cbe <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d042      	beq.n	8003c8c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c06:	4b68      	ldr	r3, [pc, #416]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a67      	ldr	r2, [pc, #412]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd fc2d 	bl	8001470 <HAL_GetTick>
 8003c16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003c1a:	f7fd fc29 	bl	8001470 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e255      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c2c:	4b5e      	ldr	r3, [pc, #376]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003c38:	f7fd fc4a 	bl	80014d0 <HAL_GetREVID>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d817      	bhi.n	8003c76 <HAL_RCC_OscConfig+0x3ea>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d108      	bne.n	8003c60 <HAL_RCC_OscConfig+0x3d4>
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c56:	4a54      	ldr	r2, [pc, #336]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c5c:	6053      	str	r3, [r2, #4]
 8003c5e:	e02e      	b.n	8003cbe <HAL_RCC_OscConfig+0x432>
 8003c60:	4b51      	ldr	r3, [pc, #324]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	069b      	lsls	r3, r3, #26
 8003c6e:	494e      	ldr	r1, [pc, #312]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	604b      	str	r3, [r1, #4]
 8003c74:	e023      	b.n	8003cbe <HAL_RCC_OscConfig+0x432>
 8003c76:	4b4c      	ldr	r3, [pc, #304]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	061b      	lsls	r3, r3, #24
 8003c84:	4948      	ldr	r1, [pc, #288]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60cb      	str	r3, [r1, #12]
 8003c8a:	e018      	b.n	8003cbe <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c8c:	4b46      	ldr	r3, [pc, #280]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a45      	ldr	r2, [pc, #276]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c98:	f7fd fbea 	bl	8001470 <HAL_GetTick>
 8003c9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c9e:	e008      	b.n	8003cb2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003ca0:	f7fd fbe6 	bl	8001470 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e212      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003cb2:	4b3d      	ldr	r3, [pc, #244]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f0      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d036      	beq.n	8003d38 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d019      	beq.n	8003d06 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cd2:	4b35      	ldr	r3, [pc, #212]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd6:	4a34      	ldr	r2, [pc, #208]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cde:	f7fd fbc7 	bl	8001470 <HAL_GetTick>
 8003ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fbc3 	bl	8001470 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e1ef      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cf8:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x45a>
 8003d04:	e018      	b.n	8003d38 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d06:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0a:	4a27      	ldr	r2, [pc, #156]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d12:	f7fd fbad 	bl	8001470 <HAL_GetTick>
 8003d16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d18:	e008      	b.n	8003d2c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1a:	f7fd fba9 	bl	8001470 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e1d5      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1f0      	bne.n	8003d1a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d039      	beq.n	8003db8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d019      	beq.n	8003d80 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d4c:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d58:	f7fd fb8a 	bl	8001470 <HAL_GetTick>
 8003d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d60:	f7fd fb86 	bl	8001470 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e1b2      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d72:	4b0d      	ldr	r3, [pc, #52]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d0f0      	beq.n	8003d60 <HAL_RCC_OscConfig+0x4d4>
 8003d7e:	e01b      	b.n	8003db8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a08      	ldr	r2, [pc, #32]	; (8003da8 <HAL_RCC_OscConfig+0x51c>)
 8003d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fb70 	bl	8001470 <HAL_GetTick>
 8003d90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003d94:	f7fd fb6c 	bl	8001470 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d904      	bls.n	8003dac <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e198      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003dac:	4ba3      	ldr	r3, [pc, #652]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1ed      	bne.n	8003d94 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 8081 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dc6:	4b9e      	ldr	r3, [pc, #632]	; (8004040 <HAL_RCC_OscConfig+0x7b4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a9d      	ldr	r2, [pc, #628]	; (8004040 <HAL_RCC_OscConfig+0x7b4>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dd2:	f7fd fb4d 	bl	8001470 <HAL_GetTick>
 8003dd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003dda:	f7fd fb49 	bl	8001470 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b64      	cmp	r3, #100	; 0x64
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e175      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dec:	4b94      	ldr	r3, [pc, #592]	; (8004040 <HAL_RCC_OscConfig+0x7b4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d106      	bne.n	8003e0e <HAL_RCC_OscConfig+0x582>
 8003e00:	4b8e      	ldr	r3, [pc, #568]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	4a8d      	ldr	r2, [pc, #564]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0c:	e02d      	b.n	8003e6a <HAL_RCC_OscConfig+0x5de>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCC_OscConfig+0x5a4>
 8003e16:	4b89      	ldr	r3, [pc, #548]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a88      	ldr	r2, [pc, #544]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70
 8003e22:	4b86      	ldr	r3, [pc, #536]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a85      	ldr	r2, [pc, #532]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e28:	f023 0304 	bic.w	r3, r3, #4
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	e01c      	b.n	8003e6a <HAL_RCC_OscConfig+0x5de>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b05      	cmp	r3, #5
 8003e36:	d10c      	bne.n	8003e52 <HAL_RCC_OscConfig+0x5c6>
 8003e38:	4b80      	ldr	r3, [pc, #512]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a7f      	ldr	r2, [pc, #508]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e3e:	f043 0304 	orr.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
 8003e44:	4b7d      	ldr	r3, [pc, #500]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a7c      	ldr	r2, [pc, #496]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	e00b      	b.n	8003e6a <HAL_RCC_OscConfig+0x5de>
 8003e52:	4b7a      	ldr	r3, [pc, #488]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	4a79      	ldr	r2, [pc, #484]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5e:	4b77      	ldr	r3, [pc, #476]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a76      	ldr	r2, [pc, #472]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d015      	beq.n	8003e9e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fd fafd 	bl	8001470 <HAL_GetTick>
 8003e76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fd faf9 	bl	8001470 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e123      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e90:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ee      	beq.n	8003e7a <HAL_RCC_OscConfig+0x5ee>
 8003e9c:	e014      	b.n	8003ec8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fae7 	bl	8001470 <HAL_GetTick>
 8003ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd fae3 	bl	8001470 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e10d      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ebc:	4b5f      	ldr	r3, [pc, #380]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1ee      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8102 	beq.w	80040d6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ed2:	4b5a      	ldr	r3, [pc, #360]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eda:	2b18      	cmp	r3, #24
 8003edc:	f000 80bd 	beq.w	800405a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	f040 8095 	bne.w	8004014 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b54      	ldr	r3, [pc, #336]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a53      	ldr	r2, [pc, #332]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fd fabb 	bl	8001470 <HAL_GetTick>
 8003efa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efe:	f7fd fab7 	bl	8001470 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e0e3      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003f10:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f0      	bne.n	8003efe <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1c:	4b47      	ldr	r3, [pc, #284]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f20:	4b48      	ldr	r3, [pc, #288]	; (8004044 <HAL_RCC_OscConfig+0x7b8>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003f2c:	0112      	lsls	r2, r2, #4
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	4942      	ldr	r1, [pc, #264]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	628b      	str	r3, [r1, #40]	; 0x28
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	3b01      	subs	r3, #1
 8003f46:	025b      	lsls	r3, r3, #9
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	3b01      	subs	r3, #1
 8003f52:	041b      	lsls	r3, r3, #16
 8003f54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	061b      	lsls	r3, r3, #24
 8003f62:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f66:	4935      	ldr	r1, [pc, #212]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003f6c:	4b33      	ldr	r3, [pc, #204]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f70:	4a32      	ldr	r2, [pc, #200]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f78:	4b30      	ldr	r3, [pc, #192]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f7c:	4b32      	ldr	r3, [pc, #200]	; (8004048 <HAL_RCC_OscConfig+0x7bc>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f84:	00d2      	lsls	r2, r2, #3
 8003f86:	492d      	ldr	r1, [pc, #180]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f8c:	4b2b      	ldr	r3, [pc, #172]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	f023 020c 	bic.w	r2, r3, #12
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	4928      	ldr	r1, [pc, #160]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f9e:	4b27      	ldr	r3, [pc, #156]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	f023 0202 	bic.w	r2, r3, #2
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	4924      	ldr	r1, [pc, #144]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb4:	4a21      	ldr	r2, [pc, #132]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fbc:	4b1f      	ldr	r3, [pc, #124]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003fc8:	4b1c      	ldr	r3, [pc, #112]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	4a1b      	ldr	r2, [pc, #108]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003fd4:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	4a18      	ldr	r2, [pc, #96]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8003fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd fa40 	bl	8001470 <HAL_GetTick>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff4:	f7fd fa3c 	bl	8001470 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e068      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004006:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x768>
 8004012:	e060      	b.n	80040d6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004014:	4b09      	ldr	r3, [pc, #36]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a08      	ldr	r2, [pc, #32]	; (800403c <HAL_RCC_OscConfig+0x7b0>)
 800401a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800401e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fd fa26 	bl	8001470 <HAL_GetTick>
 8004024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004026:	e011      	b.n	800404c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fd fa22 	bl	8001470 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d90a      	bls.n	800404c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e04e      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
 800403a:	bf00      	nop
 800403c:	58024400 	.word	0x58024400
 8004040:	58024800 	.word	0x58024800
 8004044:	fffffc0c 	.word	0xfffffc0c
 8004048:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800404c:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_RCC_OscConfig+0x854>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1e7      	bne.n	8004028 <HAL_RCC_OscConfig+0x79c>
 8004058:	e03d      	b.n	80040d6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_RCC_OscConfig+0x854>)
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004060:	4b1f      	ldr	r3, [pc, #124]	; (80040e0 <HAL_RCC_OscConfig+0x854>)
 8004062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004064:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	2b01      	cmp	r3, #1
 800406c:	d031      	beq.n	80040d2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f003 0203 	and.w	r2, r3, #3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004078:	429a      	cmp	r2, r3
 800407a:	d12a      	bne.n	80040d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d122      	bne.n	80040d2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d11a      	bne.n	80040d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	0a5b      	lsrs	r3, r3, #9
 80040a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d111      	bne.n	80040d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d108      	bne.n	80040d2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	0e1b      	lsrs	r3, r3, #24
 80040c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d001      	beq.n	80040d6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3730      	adds	r7, #48	; 0x30
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	58024400 	.word	0x58024400

080040e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e19c      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f8:	4b8a      	ldr	r3, [pc, #552]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	683a      	ldr	r2, [r7, #0]
 8004102:	429a      	cmp	r2, r3
 8004104:	d910      	bls.n	8004128 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004106:	4b87      	ldr	r3, [pc, #540]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 020f 	bic.w	r2, r3, #15
 800410e:	4985      	ldr	r1, [pc, #532]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	4313      	orrs	r3, r2
 8004114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b83      	ldr	r3, [pc, #524]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e184      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	4b7b      	ldr	r3, [pc, #492]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004140:	429a      	cmp	r2, r3
 8004142:	d908      	bls.n	8004156 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004144:	4b78      	ldr	r3, [pc, #480]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	4975      	ldr	r1, [pc, #468]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004152:	4313      	orrs	r3, r2
 8004154:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d010      	beq.n	8004184 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	4b70      	ldr	r3, [pc, #448]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800416e:	429a      	cmp	r2, r3
 8004170:	d908      	bls.n	8004184 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004172:	4b6d      	ldr	r3, [pc, #436]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	496a      	ldr	r1, [pc, #424]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004180:	4313      	orrs	r3, r2
 8004182:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	699a      	ldr	r2, [r3, #24]
 8004194:	4b64      	ldr	r3, [pc, #400]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800419c:	429a      	cmp	r2, r3
 800419e:	d908      	bls.n	80041b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041a0:	4b61      	ldr	r3, [pc, #388]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	495e      	ldr	r1, [pc, #376]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d010      	beq.n	80041e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	69da      	ldr	r2, [r3, #28]
 80041c2:	4b59      	ldr	r3, [pc, #356]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d908      	bls.n	80041e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80041ce:	4b56      	ldr	r3, [pc, #344]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4953      	ldr	r1, [pc, #332]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d010      	beq.n	800420e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	4b4d      	ldr	r3, [pc, #308]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d908      	bls.n	800420e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041fc:	4b4a      	ldr	r3, [pc, #296]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	f023 020f 	bic.w	r2, r3, #15
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4947      	ldr	r1, [pc, #284]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 800420a:	4313      	orrs	r3, r2
 800420c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	2b00      	cmp	r3, #0
 8004218:	d055      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800421a:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4940      	ldr	r1, [pc, #256]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004228:	4313      	orrs	r3, r2
 800422a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b02      	cmp	r3, #2
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004234:	4b3c      	ldr	r3, [pc, #240]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d121      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0f6      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800424c:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d115      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0ea      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004264:	4b30      	ldr	r3, [pc, #192]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d109      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0de      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004274:	4b2c      	ldr	r3, [pc, #176]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e0d6      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004284:	4b28      	ldr	r3, [pc, #160]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f023 0207 	bic.w	r2, r3, #7
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	4925      	ldr	r1, [pc, #148]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 8004292:	4313      	orrs	r3, r2
 8004294:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004296:	f7fd f8eb 	bl	8001470 <HAL_GetTick>
 800429a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429c:	e00a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429e:	f7fd f8e7 	bl	8001470 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e0be      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	4b1c      	ldr	r3, [pc, #112]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d1eb      	bne.n	800429e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d010      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68da      	ldr	r2, [r3, #12]
 80042d6:	4b14      	ldr	r3, [pc, #80]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	429a      	cmp	r2, r3
 80042e0:	d208      	bcs.n	80042f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e2:	4b11      	ldr	r3, [pc, #68]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	f023 020f 	bic.w	r2, r3, #15
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	490e      	ldr	r1, [pc, #56]	; (8004328 <HAL_RCC_ClockConfig+0x244>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042f4:	4b0b      	ldr	r3, [pc, #44]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 030f 	and.w	r3, r3, #15
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d214      	bcs.n	800432c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004302:	4b08      	ldr	r3, [pc, #32]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 020f 	bic.w	r2, r3, #15
 800430a:	4906      	ldr	r1, [pc, #24]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004312:	4b04      	ldr	r3, [pc, #16]	; (8004324 <HAL_RCC_ClockConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	429a      	cmp	r2, r3
 800431e:	d005      	beq.n	800432c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e086      	b.n	8004432 <HAL_RCC_ClockConfig+0x34e>
 8004324:	52002000 	.word	0x52002000
 8004328:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b00      	cmp	r3, #0
 8004336:	d010      	beq.n	800435a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	4b3f      	ldr	r3, [pc, #252]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004344:	429a      	cmp	r2, r3
 8004346:	d208      	bcs.n	800435a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004348:	4b3c      	ldr	r3, [pc, #240]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	4939      	ldr	r1, [pc, #228]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 8004356:	4313      	orrs	r3, r2
 8004358:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d010      	beq.n	8004388 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004372:	429a      	cmp	r2, r3
 8004374:	d208      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004376:	4b31      	ldr	r3, [pc, #196]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	492e      	ldr	r1, [pc, #184]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 8004384:	4313      	orrs	r3, r2
 8004386:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d010      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699a      	ldr	r2, [r3, #24]
 8004398:	4b28      	ldr	r3, [pc, #160]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d208      	bcs.n	80043b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 80043a6:	69db      	ldr	r3, [r3, #28]
 80043a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	4922      	ldr	r1, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69da      	ldr	r2, [r3, #28]
 80043c6:	4b1d      	ldr	r3, [pc, #116]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d208      	bcs.n	80043e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80043d2:	4b1a      	ldr	r3, [pc, #104]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	4917      	ldr	r1, [pc, #92]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043e4:	f000 f834 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80043e8:	4602      	mov	r2, r0
 80043ea:	4b14      	ldr	r3, [pc, #80]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	0a1b      	lsrs	r3, r3, #8
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	4912      	ldr	r1, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x35c>)
 80043f6:	5ccb      	ldrb	r3, [r1, r3]
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004400:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004402:	4b0e      	ldr	r3, [pc, #56]	; (800443c <HAL_RCC_ClockConfig+0x358>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	4a0d      	ldr	r2, [pc, #52]	; (8004440 <HAL_RCC_ClockConfig+0x35c>)
 800440c:	5cd3      	ldrb	r3, [r2, r3]
 800440e:	f003 031f 	and.w	r3, r3, #31
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x360>)
 800441a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800441c:	4a0a      	ldr	r2, [pc, #40]	; (8004448 <HAL_RCC_ClockConfig+0x364>)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <HAL_RCC_ClockConfig+0x368>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fc fc74 	bl	8000d14 <HAL_InitTick>
 800442c:	4603      	mov	r3, r0
 800442e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004430:	7bfb      	ldrb	r3, [r7, #15]
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	58024400 	.word	0x58024400
 8004440:	0801ba68 	.word	0x0801ba68
 8004444:	24000004 	.word	0x24000004
 8004448:	24000000 	.word	0x24000000
 800444c:	24000008 	.word	0x24000008

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	; 0x24
 8004454:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004456:	4bb3      	ldr	r3, [pc, #716]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800445e:	2b18      	cmp	r3, #24
 8004460:	f200 8155 	bhi.w	800470e <HAL_RCC_GetSysClockFreq+0x2be>
 8004464:	a201      	add	r2, pc, #4	; (adr r2, 800446c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	080044d1 	.word	0x080044d1
 8004470:	0800470f 	.word	0x0800470f
 8004474:	0800470f 	.word	0x0800470f
 8004478:	0800470f 	.word	0x0800470f
 800447c:	0800470f 	.word	0x0800470f
 8004480:	0800470f 	.word	0x0800470f
 8004484:	0800470f 	.word	0x0800470f
 8004488:	0800470f 	.word	0x0800470f
 800448c:	080044f7 	.word	0x080044f7
 8004490:	0800470f 	.word	0x0800470f
 8004494:	0800470f 	.word	0x0800470f
 8004498:	0800470f 	.word	0x0800470f
 800449c:	0800470f 	.word	0x0800470f
 80044a0:	0800470f 	.word	0x0800470f
 80044a4:	0800470f 	.word	0x0800470f
 80044a8:	0800470f 	.word	0x0800470f
 80044ac:	080044fd 	.word	0x080044fd
 80044b0:	0800470f 	.word	0x0800470f
 80044b4:	0800470f 	.word	0x0800470f
 80044b8:	0800470f 	.word	0x0800470f
 80044bc:	0800470f 	.word	0x0800470f
 80044c0:	0800470f 	.word	0x0800470f
 80044c4:	0800470f 	.word	0x0800470f
 80044c8:	0800470f 	.word	0x0800470f
 80044cc:	08004503 	.word	0x08004503
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044d0:	4b94      	ldr	r3, [pc, #592]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0320 	and.w	r3, r3, #32
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d009      	beq.n	80044f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044dc:	4b91      	ldr	r3, [pc, #580]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	08db      	lsrs	r3, r3, #3
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	4a90      	ldr	r2, [pc, #576]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
 80044ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80044ee:	e111      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044f0:	4b8d      	ldr	r3, [pc, #564]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044f2:	61bb      	str	r3, [r7, #24]
    break;
 80044f4:	e10e      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80044f6:	4b8d      	ldr	r3, [pc, #564]	; (800472c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044f8:	61bb      	str	r3, [r7, #24]
    break;
 80044fa:	e10b      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80044fc:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044fe:	61bb      	str	r3, [r7, #24]
    break;
 8004500:	e108      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004502:	4b88      	ldr	r3, [pc, #544]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800450c:	4b85      	ldr	r3, [pc, #532]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	091b      	lsrs	r3, r3, #4
 8004512:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004516:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004518:	4b82      	ldr	r3, [pc, #520]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004522:	4b80      	ldr	r3, [pc, #512]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004526:	08db      	lsrs	r3, r3, #3
 8004528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80e1 	beq.w	8004708 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	f000 8083 	beq.w	8004654 <HAL_RCC_GetSysClockFreq+0x204>
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2b02      	cmp	r3, #2
 8004552:	f200 80a1 	bhi.w	8004698 <HAL_RCC_GetSysClockFreq+0x248>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_RCC_GetSysClockFreq+0x114>
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d056      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004562:	e099      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004564:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0320 	and.w	r3, r3, #32
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02d      	beq.n	80045cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004570:	4b6c      	ldr	r3, [pc, #432]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	08db      	lsrs	r3, r3, #3
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	4a6b      	ldr	r2, [pc, #428]	; (8004728 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
 8004580:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	ee07 3a90 	vmov	s15, r3
 8004588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800459a:	4b62      	ldr	r3, [pc, #392]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80045ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80045ca:	e087      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	ee07 3a90 	vmov	s15, r3
 80045d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004738 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045de:	4b51      	ldr	r3, [pc, #324]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80045f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800460a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460e:	e065      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800473c <HAL_RCC_GetSysClockFreq+0x2ec>
 800461e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004622:	4b40      	ldr	r3, [pc, #256]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004632:	ed97 6a02 	vldr	s12, [r7, #8]
 8004636:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800463a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004652:	e043      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004740 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004666:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004676:	ed97 6a02 	vldr	s12, [r7, #8]
 800467a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 800467e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800468a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004696:	e021      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800473c <HAL_RCC_GetSysClockFreq+0x2ec>
 80046a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046aa:	4b1e      	ldr	r3, [pc, #120]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80046be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004734 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80046dc:	4b11      	ldr	r3, [pc, #68]	; (8004724 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	0a5b      	lsrs	r3, r3, #9
 80046e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046e6:	3301      	adds	r3, #1
 80046e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	ee07 3a90 	vmov	s15, r3
 80046f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80046f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004700:	ee17 3a90 	vmov	r3, s15
 8004704:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004706:	e005      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
    break;
 800470c:	e002      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800470e:	4b07      	ldr	r3, [pc, #28]	; (800472c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004710:	61bb      	str	r3, [r7, #24]
    break;
 8004712:	bf00      	nop
  }

  return sysclockfreq;
 8004714:	69bb      	ldr	r3, [r7, #24]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3724      	adds	r7, #36	; 0x24
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	58024400 	.word	0x58024400
 8004728:	03d09000 	.word	0x03d09000
 800472c:	003d0900 	.word	0x003d0900
 8004730:	007a1200 	.word	0x007a1200
 8004734:	46000000 	.word	0x46000000
 8004738:	4c742400 	.word	0x4c742400
 800473c:	4a742400 	.word	0x4a742400
 8004740:	4af42400 	.word	0x4af42400

08004744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800474a:	f7ff fe81 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800474e:	4602      	mov	r2, r0
 8004750:	4b10      	ldr	r3, [pc, #64]	; (8004794 <HAL_RCC_GetHCLKFreq+0x50>)
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	f003 030f 	and.w	r3, r3, #15
 800475a:	490f      	ldr	r1, [pc, #60]	; (8004798 <HAL_RCC_GetHCLKFreq+0x54>)
 800475c:	5ccb      	ldrb	r3, [r1, r3]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	fa22 f303 	lsr.w	r3, r2, r3
 8004766:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <HAL_RCC_GetHCLKFreq+0x50>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	4a09      	ldr	r2, [pc, #36]	; (8004798 <HAL_RCC_GetHCLKFreq+0x54>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	fa22 f303 	lsr.w	r3, r2, r3
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <HAL_RCC_GetHCLKFreq+0x58>)
 8004780:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004782:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <HAL_RCC_GetHCLKFreq+0x58>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	58024400 	.word	0x58024400
 8004798:	0801ba68 	.word	0x0801ba68
 800479c:	24000004 	.word	0x24000004
 80047a0:	24000000 	.word	0x24000000

080047a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80047a8:	f7ff ffcc 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	091b      	lsrs	r3, r3, #4
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	4904      	ldr	r1, [pc, #16]	; (80047cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ba:	5ccb      	ldrb	r3, [r1, r3]
 80047bc:	f003 031f 	and.w	r3, r3, #31
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	58024400 	.word	0x58024400
 80047cc:	0801ba68 	.word	0x0801ba68

080047d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047d4:	f7ff ffb6 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	4904      	ldr	r1, [pc, #16]	; (80047f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58024400 	.word	0x58024400
 80047f8:	0801ba68 	.word	0x0801ba68

080047fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	223f      	movs	r2, #63	; 0x3f
 800480a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800480c:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0207 	and.w	r2, r3, #7
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004818:	4b17      	ldr	r3, [pc, #92]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004824:	4b14      	ldr	r3, [pc, #80]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f003 020f 	and.w	r2, r3, #15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004854:	4b08      	ldr	r3, [pc, #32]	; (8004878 <HAL_RCC_GetClockConfig+0x7c>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004860:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_RCC_GetClockConfig+0x80>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	601a      	str	r2, [r3, #0]
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	58024400 	.word	0x58024400
 800487c:	52002000 	.word	0x52002000

08004880 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004888:	2300      	movs	r3, #0
 800488a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800488c:	2300      	movs	r3, #0
 800488e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048a4:	d02a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80048aa:	d824      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048b0:	d018      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048b6:	d81e      	bhi.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048c0:	d007      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048c2:	e018      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c4:	4bab      	ldr	r3, [pc, #684]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4aaa      	ldr	r2, [pc, #680]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80048ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048d0:	e015      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3304      	adds	r3, #4
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f9cf 	bl	8005c7c <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048e2:	e00c      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3324      	adds	r3, #36	; 0x24
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 fa78 	bl	8005de0 <RCCEx_PLL3_Config>
 80048f0:	4603      	mov	r3, r0
 80048f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80048f4:	e003      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	75fb      	strb	r3, [r7, #23]
      break;
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80048fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d109      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004904:	4b9b      	ldr	r3, [pc, #620]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004908:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004910:	4998      	ldr	r1, [pc, #608]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	650b      	str	r3, [r1, #80]	; 0x50
 8004916:	e001      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d03d      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	2b04      	cmp	r3, #4
 800492e:	d826      	bhi.n	800497e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	0800494d 	.word	0x0800494d
 800493c:	0800495b 	.word	0x0800495b
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004985 	.word	0x08004985
 8004948:	08004985 	.word	0x08004985
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800494c:	4b89      	ldr	r3, [pc, #548]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4a88      	ldr	r2, [pc, #544]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004952:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004956:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004958:	e015      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	3304      	adds	r3, #4
 800495e:	2100      	movs	r1, #0
 8004960:	4618      	mov	r0, r3
 8004962:	f001 f98b 	bl	8005c7c <RCCEx_PLL2_Config>
 8004966:	4603      	mov	r3, r0
 8004968:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800496a:	e00c      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3324      	adds	r3, #36	; 0x24
 8004970:	2100      	movs	r1, #0
 8004972:	4618      	mov	r0, r3
 8004974:	f001 fa34 	bl	8005de0 <RCCEx_PLL3_Config>
 8004978:	4603      	mov	r3, r0
 800497a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800497c:	e003      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
      break;
 8004982:	e000      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004984:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004986:	7dfb      	ldrb	r3, [r7, #23]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d109      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800498c:	4b79      	ldr	r3, [pc, #484]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800498e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004990:	f023 0207 	bic.w	r2, r3, #7
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	4976      	ldr	r1, [pc, #472]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	650b      	str	r3, [r1, #80]	; 0x50
 800499e:	e001      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	7dfb      	ldrb	r3, [r7, #23]
 80049a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d042      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049b8:	d02b      	beq.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80049ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049be:	d825      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049c0:	2bc0      	cmp	r3, #192	; 0xc0
 80049c2:	d028      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049c4:	2bc0      	cmp	r3, #192	; 0xc0
 80049c6:	d821      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049c8:	2b80      	cmp	r3, #128	; 0x80
 80049ca:	d016      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80049cc:	2b80      	cmp	r3, #128	; 0x80
 80049ce:	d81d      	bhi.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80049d4:	2b40      	cmp	r3, #64	; 0x40
 80049d6:	d007      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80049d8:	e018      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049da:	4b66      	ldr	r3, [pc, #408]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	4a65      	ldr	r2, [pc, #404]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80049e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049e6:	e017      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	2100      	movs	r1, #0
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 f944 	bl	8005c7c <RCCEx_PLL2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80049f8:	e00e      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3324      	adds	r3, #36	; 0x24
 80049fe:	2100      	movs	r1, #0
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f9ed 	bl	8005de0 <RCCEx_PLL3_Config>
 8004a06:	4603      	mov	r3, r0
 8004a08:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004a0a:	e005      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a10:	e002      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a18:	7dfb      	ldrb	r3, [r7, #23]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a1e:	4b55      	ldr	r3, [pc, #340]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a22:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	4952      	ldr	r1, [pc, #328]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	650b      	str	r3, [r1, #80]	; 0x50
 8004a30:	e001      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d049      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a4c:	d030      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004a4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a52:	d82a      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a54:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a58:	d02c      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004a5a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004a5e:	d824      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a64:	d018      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004a70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a74:	d007      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004a76:	e018      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a78:	4b3e      	ldr	r3, [pc, #248]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a3d      	ldr	r2, [pc, #244]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004a7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004a84:	e017      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f001 f8f5 	bl	8005c7c <RCCEx_PLL2_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004a96:	e00e      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3324      	adds	r3, #36	; 0x24
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 f99e 	bl	8005de0 <RCCEx_PLL3_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004aa8:	e005      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	75fb      	strb	r3, [r7, #23]
      break;
 8004aae:	e002      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab6:	7dfb      	ldrb	r3, [r7, #23]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d10a      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004abc:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004aca:	492a      	ldr	r1, [pc, #168]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	658b      	str	r3, [r1, #88]	; 0x58
 8004ad0:	e001      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04c      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004aec:	d030      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004aee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af2:	d82a      	bhi.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004af4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af8:	d02c      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004afa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004afe:	d824      	bhi.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b04:	d018      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004b06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b0a:	d81e      	bhi.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b14:	d007      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004b16:	e018      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b18:	4b16      	ldr	r3, [pc, #88]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b24:	e017      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 f8a5 	bl	8005c7c <RCCEx_PLL2_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004b36:	e00e      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	3324      	adds	r3, #36	; 0x24
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 f94e 	bl	8005de0 <RCCEx_PLL3_Config>
 8004b44:	4603      	mov	r3, r0
 8004b46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004b48:	e005      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8004b4e:	e002      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8004b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b56:	7dfb      	ldrb	r3, [r7, #23]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004b6a:	4902      	ldr	r1, [pc, #8]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	658b      	str	r3, [r1, #88]	; 0x58
 8004b70:	e004      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004b72:	bf00      	nop
 8004b74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b78:	7dfb      	ldrb	r3, [r7, #23]
 8004b7a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d032      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8c:	2b30      	cmp	r3, #48	; 0x30
 8004b8e:	d01c      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004b90:	2b30      	cmp	r3, #48	; 0x30
 8004b92:	d817      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b94:	2b20      	cmp	r3, #32
 8004b96:	d00c      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d813      	bhi.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d016      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba4:	4baf      	ldr	r3, [pc, #700]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba8:	4aae      	ldr	r2, [pc, #696]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004bb0:	e00e      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	2102      	movs	r1, #2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f001 f85f 	bl	8005c7c <RCCEx_PLL2_Config>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004bc2:	e005      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	e002      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004bce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004bd6:	4ba3      	ldr	r3, [pc, #652]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004be2:	49a0      	ldr	r1, [pc, #640]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004be8:	e001      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
 8004bec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d047      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c02:	d030      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c08:	d82a      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c0e:	d02c      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8004c10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c14:	d824      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1a:	d018      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c20:	d81e      	bhi.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d007      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004c2c:	e018      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2e:	4b8d      	ldr	r3, [pc, #564]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c32:	4a8c      	ldr	r2, [pc, #560]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c3a:	e017      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 f81a 	bl	8005c7c <RCCEx_PLL2_Config>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c4c:	e00e      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	3324      	adds	r3, #36	; 0x24
 8004c52:	2100      	movs	r1, #0
 8004c54:	4618      	mov	r0, r3
 8004c56:	f001 f8c3 	bl	8005de0 <RCCEx_PLL3_Config>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004c5e:	e005      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
      break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c66:	bf00      	nop
 8004c68:	e000      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8004c6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004c72:	4b7c      	ldr	r3, [pc, #496]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c76:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	4979      	ldr	r1, [pc, #484]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	650b      	str	r3, [r1, #80]	; 0x50
 8004c84:	e001      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
 8004c88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d049      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c9e:	d02e      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8004ca0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ca4:	d828      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004ca6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004caa:	d02a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8004cac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004cb0:	d822      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004cb2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cb6:	d026      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004cb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cbc:	d81c      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc2:	d010      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc8:	d816      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d01d      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8004cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd2:	d111      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 ffce 	bl	8005c7c <RCCEx_PLL2_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004ce4:	e012      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3324      	adds	r3, #36	; 0x24
 8004cea:	2101      	movs	r1, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 f877 	bl	8005de0 <RCCEx_PLL3_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004cf6:	e009      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfc:	e006      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e004      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d02:	bf00      	nop
 8004d04:	e002      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d0c:	7dfb      	ldrb	r3, [r7, #23]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004d12:	4b54      	ldr	r3, [pc, #336]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	4951      	ldr	r1, [pc, #324]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	650b      	str	r3, [r1, #80]	; 0x50
 8004d24:	e001      	b.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d26:	7dfb      	ldrb	r3, [r7, #23]
 8004d28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d04b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d40:	d02e      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d46:	d828      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4c:	d02a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d52:	d822      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d58:	d026      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d5e:	d81c      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d64:	d010      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8004d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6a:	d816      	bhi.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01d      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004d70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d74:	d111      	bne.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 ff7d 	bl	8005c7c <RCCEx_PLL2_Config>
 8004d82:	4603      	mov	r3, r0
 8004d84:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d86:	e012      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3324      	adds	r3, #36	; 0x24
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 f826 	bl	8005de0 <RCCEx_PLL3_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004d98:	e009      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
      break;
 8004d9e:	e006      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004da0:	bf00      	nop
 8004da2:	e004      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004da4:	bf00      	nop
 8004da6:	e002      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8004dac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10a      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004db4:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004dc2:	4928      	ldr	r1, [pc, #160]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	658b      	str	r3, [r1, #88]	; 0x58
 8004dc8:	e001      	b.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d02f      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de2:	d00e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004de4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004de8:	d814      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d015      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004dee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004df2:	d10f      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b1b      	ldr	r3, [pc, #108]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4a1a      	ldr	r2, [pc, #104]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e00:	e00c      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	3304      	adds	r3, #4
 8004e06:	2101      	movs	r1, #1
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 ff37 	bl	8005c7c <RCCEx_PLL2_Config>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004e12:	e003      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	75fb      	strb	r3, [r7, #23]
      break;
 8004e18:	e000      	b.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e1c:	7dfb      	ldrb	r3, [r7, #23]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2e:	490d      	ldr	r1, [pc, #52]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	650b      	str	r3, [r1, #80]	; 0x50
 8004e34:	e001      	b.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d033      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	2b03      	cmp	r3, #3
 8004e4c:	d81c      	bhi.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e8f 	.word	0x08004e8f
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e77 	.word	0x08004e77
 8004e60:	08004e8f 	.word	0x08004e8f
 8004e64:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e68:	4bb8      	ldr	r3, [pc, #736]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4ab7      	ldr	r2, [pc, #732]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e74:	e00c      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fefd 	bl	8005c7c <RCCEx_PLL2_Config>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004e86:	e003      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8c:	e000      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8004e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d109      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e96:	4bad      	ldr	r3, [pc, #692]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	49aa      	ldr	r1, [pc, #680]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004ea8:	e001      	b.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eaa:	7dfb      	ldrb	r3, [r7, #23]
 8004eac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 8086 	beq.w	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ebc:	4ba4      	ldr	r3, [pc, #656]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4aa3      	ldr	r2, [pc, #652]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ec8:	f7fc fad2 	bl	8001470 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ece:	e009      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ed0:	f7fc face 	bl	8001470 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d902      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	75fb      	strb	r3, [r7, #23]
        break;
 8004ee2:	e005      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee4:	4b9a      	ldr	r3, [pc, #616]	; (8005150 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d166      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004ef6:	4b95      	ldr	r3, [pc, #596]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004ef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f00:	4053      	eors	r3, r2
 8004f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d013      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f0a:	4b90      	ldr	r3, [pc, #576]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f14:	4b8d      	ldr	r3, [pc, #564]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	4a8c      	ldr	r2, [pc, #560]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f20:	4b8a      	ldr	r3, [pc, #552]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a89      	ldr	r2, [pc, #548]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004f2c:	4a87      	ldr	r2, [pc, #540]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3c:	d115      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fc fa97 	bl	8001470 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f44:	e00b      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f46:	f7fc fa93 	bl	8001470 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d902      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004f5c:	e005      	b.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f5e:	4b7b      	ldr	r3, [pc, #492]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0ed      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d126      	bne.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f7e:	d10d      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004f80:	4b72      	ldr	r3, [pc, #456]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004f8e:	0919      	lsrs	r1, r3, #4
 8004f90:	4b70      	ldr	r3, [pc, #448]	; (8005154 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	496d      	ldr	r1, [pc, #436]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
 8004f9a:	e005      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004f9c:	4b6b      	ldr	r3, [pc, #428]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4a6a      	ldr	r2, [pc, #424]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004fa6:	6113      	str	r3, [r2, #16]
 8004fa8:	4b68      	ldr	r3, [pc, #416]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004faa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb6:	4965      	ldr	r1, [pc, #404]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	670b      	str	r3, [r1, #112]	; 0x70
 8004fbc:	e004      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fbe:	7dfb      	ldrb	r3, [r7, #23]
 8004fc0:	75bb      	strb	r3, [r7, #22]
 8004fc2:	e001      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d07e      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fd8:	2b28      	cmp	r3, #40	; 0x28
 8004fda:	d867      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	080050b3 	.word	0x080050b3
 8004fe8:	080050ad 	.word	0x080050ad
 8004fec:	080050ad 	.word	0x080050ad
 8004ff0:	080050ad 	.word	0x080050ad
 8004ff4:	080050ad 	.word	0x080050ad
 8004ff8:	080050ad 	.word	0x080050ad
 8004ffc:	080050ad 	.word	0x080050ad
 8005000:	080050ad 	.word	0x080050ad
 8005004:	08005089 	.word	0x08005089
 8005008:	080050ad 	.word	0x080050ad
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050ad 	.word	0x080050ad
 8005014:	080050ad 	.word	0x080050ad
 8005018:	080050ad 	.word	0x080050ad
 800501c:	080050ad 	.word	0x080050ad
 8005020:	080050ad 	.word	0x080050ad
 8005024:	0800509b 	.word	0x0800509b
 8005028:	080050ad 	.word	0x080050ad
 800502c:	080050ad 	.word	0x080050ad
 8005030:	080050ad 	.word	0x080050ad
 8005034:	080050ad 	.word	0x080050ad
 8005038:	080050ad 	.word	0x080050ad
 800503c:	080050ad 	.word	0x080050ad
 8005040:	080050ad 	.word	0x080050ad
 8005044:	080050b3 	.word	0x080050b3
 8005048:	080050ad 	.word	0x080050ad
 800504c:	080050ad 	.word	0x080050ad
 8005050:	080050ad 	.word	0x080050ad
 8005054:	080050ad 	.word	0x080050ad
 8005058:	080050ad 	.word	0x080050ad
 800505c:	080050ad 	.word	0x080050ad
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050b3 	.word	0x080050b3
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050ad 	.word	0x080050ad
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050ad 	.word	0x080050ad
 8005080:	080050ad 	.word	0x080050ad
 8005084:	080050b3 	.word	0x080050b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	2101      	movs	r1, #1
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fdf4 	bl	8005c7c <RCCEx_PLL2_Config>
 8005094:	4603      	mov	r3, r0
 8005096:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005098:	e00c      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3324      	adds	r3, #36	; 0x24
 800509e:	2101      	movs	r1, #1
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 fe9d 	bl	8005de0 <RCCEx_PLL3_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80050aa:	e003      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75fb      	strb	r3, [r7, #23]
      break;
 80050b0:	e000      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80050b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050c6:	4921      	ldr	r1, [pc, #132]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	654b      	str	r3, [r1, #84]	; 0x54
 80050cc:	e001      	b.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ce:	7dfb      	ldrb	r3, [r7, #23]
 80050d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d03e      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d820      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80050e6:	a201      	add	r2, pc, #4	; (adr r2, 80050ec <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80050e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ec:	0800512f 	.word	0x0800512f
 80050f0:	08005105 	.word	0x08005105
 80050f4:	08005117 	.word	0x08005117
 80050f8:	0800512f 	.word	0x0800512f
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	0800512f 	.word	0x0800512f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	2101      	movs	r1, #1
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fdb6 	bl	8005c7c <RCCEx_PLL2_Config>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005114:	e00c      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3324      	adds	r3, #36	; 0x24
 800511a:	2101      	movs	r1, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fe5f 	bl	8005de0 <RCCEx_PLL3_Config>
 8005122:	4603      	mov	r3, r0
 8005124:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005126:	e003      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	75fb      	strb	r3, [r7, #23]
      break;
 800512c:	e000      	b.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800512e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d110      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513a:	f023 0207 	bic.w	r2, r3, #7
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005142:	4902      	ldr	r1, [pc, #8]	; (800514c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8005144:	4313      	orrs	r3, r2
 8005146:	654b      	str	r3, [r1, #84]	; 0x54
 8005148:	e008      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	58024800 	.word	0x58024800
 8005154:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d039      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	2b05      	cmp	r3, #5
 8005170:	d820      	bhi.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8005172:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	080051bb 	.word	0x080051bb
 800517c:	08005191 	.word	0x08005191
 8005180:	080051a3 	.word	0x080051a3
 8005184:	080051bb 	.word	0x080051bb
 8005188:	080051bb 	.word	0x080051bb
 800518c:	080051bb 	.word	0x080051bb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	2101      	movs	r1, #1
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd70 	bl	8005c7c <RCCEx_PLL2_Config>
 800519c:	4603      	mov	r3, r0
 800519e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051a0:	e00c      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3324      	adds	r3, #36	; 0x24
 80051a6:	2101      	movs	r1, #1
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fe19 	bl	8005de0 <RCCEx_PLL3_Config>
 80051ae:	4603      	mov	r3, r0
 80051b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80051b2:	e003      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
      break;
 80051b8:	e000      	b.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80051ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d10a      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051c2:	4bb7      	ldr	r3, [pc, #732]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c6:	f023 0207 	bic.w	r2, r3, #7
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d0:	49b3      	ldr	r1, [pc, #716]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	658b      	str	r3, [r1, #88]	; 0x58
 80051d6:	e001      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
 80051da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d04b      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f2:	d02e      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80051f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051f8:	d828      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80051fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051fe:	d02a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d822      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005206:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800520a:	d026      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800520c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005210:	d81c      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8005212:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005216:	d010      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8005218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521c:	d816      	bhi.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01d      	beq.n	800525e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005222:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005226:	d111      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fd24 	bl	8005c7c <RCCEx_PLL2_Config>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005238:	e012      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3324      	adds	r3, #36	; 0x24
 800523e:	2102      	movs	r1, #2
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fdcd 	bl	8005de0 <RCCEx_PLL3_Config>
 8005246:	4603      	mov	r3, r0
 8005248:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800524a:	e009      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	e006      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005252:	bf00      	nop
 8005254:	e004      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800525e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005260:	7dfb      	ldrb	r3, [r7, #23]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005266:	4b8e      	ldr	r3, [pc, #568]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005274:	498a      	ldr	r1, [pc, #552]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005276:	4313      	orrs	r3, r2
 8005278:	654b      	str	r3, [r1, #84]	; 0x54
 800527a:	e001      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
 800527e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005288:	2b00      	cmp	r3, #0
 800528a:	d04b      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005292:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005296:	d02e      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8005298:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800529c:	d828      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800529e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a2:	d02a      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80052a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a8:	d822      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80052aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052ae:	d026      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80052b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052b4:	d81c      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80052b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ba:	d010      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052c0:	d816      	bhi.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01d      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ca:	d111      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3304      	adds	r3, #4
 80052d0:	2100      	movs	r1, #0
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fcd2 	bl	8005c7c <RCCEx_PLL2_Config>
 80052d8:	4603      	mov	r3, r0
 80052da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052dc:	e012      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3324      	adds	r3, #36	; 0x24
 80052e2:	2102      	movs	r1, #2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 fd7b 	bl	8005de0 <RCCEx_PLL3_Config>
 80052ea:	4603      	mov	r3, r0
 80052ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80052ee:	e009      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	75fb      	strb	r3, [r7, #23]
      break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052f6:	bf00      	nop
 80052f8:	e004      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8005302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005304:	7dfb      	ldrb	r3, [r7, #23]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800530a:	4b65      	ldr	r3, [pc, #404]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005318:	4961      	ldr	r1, [pc, #388]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800531a:	4313      	orrs	r3, r2
 800531c:	658b      	str	r3, [r1, #88]	; 0x58
 800531e:	e001      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b00      	cmp	r3, #0
 800532e:	d04b      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005336:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800533a:	d02e      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800533c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005340:	d828      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005346:	d02a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8005348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800534c:	d822      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800534e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005352:	d026      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005354:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005358:	d81c      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800535a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800535e:	d010      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005360:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005364:	d816      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01d      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800536a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536e:	d111      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2100      	movs	r1, #0
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fc80 	bl	8005c7c <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005380:	e012      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3324      	adds	r3, #36	; 0x24
 8005386:	2102      	movs	r1, #2
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fd29 	bl	8005de0 <RCCEx_PLL3_Config>
 800538e:	4603      	mov	r3, r0
 8005390:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005392:	e009      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	75fb      	strb	r3, [r7, #23]
      break;
 8005398:	e006      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800539a:	bf00      	nop
 800539c:	e004      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80053a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80053ae:	4b3c      	ldr	r3, [pc, #240]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053bc:	4938      	ldr	r1, [pc, #224]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	658b      	str	r3, [r1, #88]	; 0x58
 80053c2:	e001      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c4:	7dfb      	ldrb	r3, [r7, #23]
 80053c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0308 	and.w	r3, r3, #8
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053de:	d10a      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3324      	adds	r3, #36	; 0x24
 80053e4:	2102      	movs	r1, #2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fcfa 	bl	8005de0 <RCCEx_PLL3_Config>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80053f6:	4b2a      	ldr	r3, [pc, #168]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80053f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005404:	4926      	ldr	r1, [pc, #152]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005406:	4313      	orrs	r3, r2
 8005408:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b00      	cmp	r3, #0
 8005414:	d01a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800541c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005420:	d10a      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	3324      	adds	r3, #36	; 0x24
 8005426:	2102      	movs	r1, #2
 8005428:	4618      	mov	r0, r3
 800542a:	f000 fcd9 	bl	8005de0 <RCCEx_PLL3_Config>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005438:	4b19      	ldr	r3, [pc, #100]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005446:	4916      	ldr	r1, [pc, #88]	; (80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8005448:	4313      	orrs	r3, r2
 800544a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d036      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800545e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005462:	d01f      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005468:	d817      	bhi.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800546e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005472:	d009      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8005474:	e011      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fbfd 	bl	8005c7c <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005486:	e00e      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	3324      	adds	r3, #36	; 0x24
 800548c:	2102      	movs	r1, #2
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fca6 	bl	8005de0 <RCCEx_PLL3_Config>
 8005494:	4603      	mov	r3, r0
 8005496:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005498:	e005      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	75fb      	strb	r3, [r7, #23]
      break;
 800549e:	e002      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80054a0:	58024400 	.word	0x58024400
      break;
 80054a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054ac:	4b93      	ldr	r3, [pc, #588]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80054ba:	4990      	ldr	r1, [pc, #576]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	658b      	str	r3, [r1, #88]	; 0x58
 80054c0:	e001      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c2:	7dfb      	ldrb	r3, [r7, #23]
 80054c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d033      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054dc:	d01c      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80054de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80054e2:	d816      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e8:	d003      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80054ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054ee:	d007      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80054f0:	e00f      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054f2:	4b82      	ldr	r3, [pc, #520]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	4a81      	ldr	r2, [pc, #516]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80054f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80054fe:	e00c      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3324      	adds	r3, #36	; 0x24
 8005504:	2101      	movs	r1, #1
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fc6a 	bl	8005de0 <RCCEx_PLL3_Config>
 800550c:	4603      	mov	r3, r0
 800550e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005510:	e003      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
      break;
 8005516:	e000      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8005518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551a:	7dfb      	ldrb	r3, [r7, #23]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10a      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005520:	4b76      	ldr	r3, [pc, #472]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005524:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552e:	4973      	ldr	r1, [pc, #460]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	654b      	str	r3, [r1, #84]	; 0x54
 8005534:	e001      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d029      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800554e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005552:	d007      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8005554:	e00f      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005556:	4b69      	ldr	r3, [pc, #420]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555a:	4a68      	ldr	r2, [pc, #416]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800555c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005562:	e00b      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	3304      	adds	r3, #4
 8005568:	2102      	movs	r1, #2
 800556a:	4618      	mov	r0, r3
 800556c:	f000 fb86 	bl	8005c7c <RCCEx_PLL2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005574:	e002      	b.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
      break;
 800557a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557c:	7dfb      	ldrb	r3, [r7, #23]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005582:	4b5e      	ldr	r3, [pc, #376]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558e:	495b      	ldr	r1, [pc, #364]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005590:	4313      	orrs	r3, r2
 8005592:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005594:	e001      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	3324      	adds	r3, #36	; 0x24
 80055aa:	2102      	movs	r1, #2
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 fc17 	bl	8005de0 <RCCEx_PLL3_Config>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d001      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d030      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d0:	d017      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80055d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055d6:	d811      	bhi.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055dc:	d013      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80055de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055e2:	d80b      	bhi.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d010      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80055e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ec:	d106      	bne.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055ee:	4b43      	ldr	r3, [pc, #268]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f2:	4a42      	ldr	r2, [pc, #264]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80055f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80055fa:	e007      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005600:	e004      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800560a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d109      	bne.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005612:	4b3a      	ldr	r3, [pc, #232]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800561e:	4937      	ldr	r1, [pc, #220]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005620:	4313      	orrs	r3, r2
 8005622:	654b      	str	r3, [r1, #84]	; 0x54
 8005624:	e001      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005636:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800563a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	492e      	ldr	r1, [pc, #184]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005644:	4313      	orrs	r3, r2
 8005646:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d009      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005654:	4b29      	ldr	r3, [pc, #164]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005662:	4926      	ldr	r1, [pc, #152]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005674:	4b21      	ldr	r3, [pc, #132]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005678:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005680:	491e      	ldr	r1, [pc, #120]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005682:	4313      	orrs	r3, r2
 8005684:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005692:	4b1a      	ldr	r3, [pc, #104]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4a19      	ldr	r2, [pc, #100]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8005698:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800569c:	6113      	str	r3, [r2, #16]
 800569e:	4b17      	ldr	r3, [pc, #92]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056a8:	4914      	ldr	r1, [pc, #80]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da08      	bge.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80056b6:	4b11      	ldr	r3, [pc, #68]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c2:	490e      	ldr	r1, [pc, #56]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056d4:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	4906      	ldr	r1, [pc, #24]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80056e8:	7dbb      	ldrb	r3, [r7, #22]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e000      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	58024400 	.word	0x58024400

08005700 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005704:	f7ff f81e 	bl	8004744 <HAL_RCC_GetHCLKFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b06      	ldr	r3, [pc, #24]	; (8005724 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	4904      	ldr	r1, [pc, #16]	; (8005728 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	58024400 	.word	0x58024400
 8005728:	0801ba68 	.word	0x0801ba68

0800572c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005734:	4ba1      	ldr	r3, [pc, #644]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	f003 0303 	and.w	r3, r3, #3
 800573c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800573e:	4b9f      	ldr	r3, [pc, #636]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	0b1b      	lsrs	r3, r3, #12
 8005744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005748:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800574a:	4b9c      	ldr	r3, [pc, #624]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	091b      	lsrs	r3, r3, #4
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005756:	4b99      	ldr	r3, [pc, #612]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575a:	08db      	lsrs	r3, r3, #3
 800575c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	fb02 f303 	mul.w	r3, r2, r3
 8005766:	ee07 3a90 	vmov	s15, r3
 800576a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800576e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 8111 	beq.w	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b02      	cmp	r3, #2
 800577e:	f000 8083 	beq.w	8005888 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	2b02      	cmp	r3, #2
 8005786:	f200 80a1 	bhi.w	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d056      	beq.n	8005844 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005796:	e099      	b.n	80058cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005798:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02d      	beq.n	8005800 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057a4:	4b85      	ldr	r3, [pc, #532]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	08db      	lsrs	r3, r3, #3
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	4a84      	ldr	r2, [pc, #528]	; (80059c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057b0:	fa22 f303 	lsr.w	r3, r2, r3
 80057b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	ee07 3a90 	vmov	s15, r3
 80057c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80057fe:	e087      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	ee07 3a90 	vmov	s15, r3
 8005806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800580a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80059c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800580e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005812:	4b6a      	ldr	r3, [pc, #424]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800581a:	ee07 3a90 	vmov	s15, r3
 800581e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005822:	ed97 6a03 	vldr	s12, [r7, #12]
 8005826:	eddf 5a67 	vldr	s11, [pc, #412]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800582a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800583a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005842:	e065      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	ee07 3a90 	vmov	s15, r3
 800584a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800584e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005856:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005866:	ed97 6a03 	vldr	s12, [r7, #12]
 800586a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800586e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800587a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005886:	e043      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	ee07 3a90 	vmov	s15, r3
 800588e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005892:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b48      	ldr	r3, [pc, #288]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058ca:	e021      	b.n	8005910 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80059cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b37      	ldr	r3, [pc, #220]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80058f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80059c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800590e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005914:	0a5b      	lsrs	r3, r3, #9
 8005916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800591a:	ee07 3a90 	vmov	s15, r3
 800591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005922:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005926:	ee37 7a87 	vadd.f32	s14, s15, s14
 800592a:	edd7 6a07 	vldr	s13, [r7, #28]
 800592e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005936:	ee17 2a90 	vmov	r2, s15
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800593e:	4b1f      	ldr	r3, [pc, #124]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	0c1b      	lsrs	r3, r3, #16
 8005944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005948:	ee07 3a90 	vmov	s15, r3
 800594c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005954:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005958:	edd7 6a07 	vldr	s13, [r7, #28]
 800595c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005964:	ee17 2a90 	vmov	r2, s15
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800596c:	4b13      	ldr	r3, [pc, #76]	; (80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	0e1b      	lsrs	r3, r3, #24
 8005972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800597e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005982:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005986:	edd7 6a07 	vldr	s13, [r7, #28]
 800598a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800598e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005992:	ee17 2a90 	vmov	r2, s15
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	609a      	str	r2, [r3, #8]
}
 80059ae:	bf00      	nop
 80059b0:	3724      	adds	r7, #36	; 0x24
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	58024400 	.word	0x58024400
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	46000000 	.word	0x46000000
 80059c8:	4c742400 	.word	0x4c742400
 80059cc:	4a742400 	.word	0x4a742400
 80059d0:	4af42400 	.word	0x4af42400

080059d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b089      	sub	sp, #36	; 0x24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059dc:	4ba1      	ldr	r3, [pc, #644]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80059e6:	4b9f      	ldr	r3, [pc, #636]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ea:	0d1b      	lsrs	r3, r3, #20
 80059ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80059f2:	4b9c      	ldr	r3, [pc, #624]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80059fe:	4b99      	ldr	r3, [pc, #612]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8111 	beq.w	8005c44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	f000 8083 	beq.w	8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	f200 80a1 	bhi.w	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a32:	69bb      	ldr	r3, [r7, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d003      	beq.n	8005a40 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d056      	beq.n	8005aec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a3e:	e099      	b.n	8005b74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a40:	4b88      	ldr	r3, [pc, #544]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d02d      	beq.n	8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a4c:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	08db      	lsrs	r3, r3, #3
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	4a84      	ldr	r2, [pc, #528]	; (8005c68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a58:	fa22 f303 	lsr.w	r3, r2, r3
 8005a5c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	ee07 3a90 	vmov	s15, r3
 8005a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a76:	4b7b      	ldr	r3, [pc, #492]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005aa6:	e087      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	ee07 3a90 	vmov	s15, r3
 8005aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005c70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005aba:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ace:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005aea:	e065      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b59      	ldr	r3, [pc, #356]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b2e:	e043      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	ee07 3a90 	vmov	s15, r3
 8005b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b42:	4b48      	ldr	r3, [pc, #288]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b72:	e021      	b.n	8005bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b86:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b8e:	ee07 3a90 	vmov	s15, r3
 8005b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005c6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bb6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	0a5b      	lsrs	r3, r3, #9
 8005bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc2:	ee07 3a90 	vmov	s15, r3
 8005bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bde:	ee17 2a90 	vmov	r2, s15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0c:	ee17 2a90 	vmov	r2, s15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005c14:	4b13      	ldr	r3, [pc, #76]	; (8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c18:	0e1b      	lsrs	r3, r3, #24
 8005c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1e:	ee07 3a90 	vmov	s15, r3
 8005c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c3a:	ee17 2a90 	vmov	r2, s15
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c42:	e008      	b.n	8005c56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	609a      	str	r2, [r3, #8]
}
 8005c56:	bf00      	nop
 8005c58:	3724      	adds	r7, #36	; 0x24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	58024400 	.word	0x58024400
 8005c68:	03d09000 	.word	0x03d09000
 8005c6c:	46000000 	.word	0x46000000
 8005c70:	4c742400 	.word	0x4c742400
 8005c74:	4a742400 	.word	0x4a742400
 8005c78:	4af42400 	.word	0x4af42400

08005c7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c8a:	4b53      	ldr	r3, [pc, #332]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	f003 0303 	and.w	r3, r3, #3
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d101      	bne.n	8005c9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e099      	b.n	8005dce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005c9a:	4b4f      	ldr	r3, [pc, #316]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a4e      	ldr	r2, [pc, #312]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005ca0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fb fbe3 	bl	8001470 <HAL_GetTick>
 8005caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cac:	e008      	b.n	8005cc0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005cae:	f7fb fbdf 	bl	8001470 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e086      	b.n	8005dce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cc0:	4b45      	ldr	r3, [pc, #276]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005ccc:	4b42      	ldr	r3, [pc, #264]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	031b      	lsls	r3, r3, #12
 8005cda:	493f      	ldr	r1, [pc, #252]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	628b      	str	r3, [r1, #40]	; 0x28
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	3b01      	subs	r3, #1
 8005ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	025b      	lsls	r3, r3, #9
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	061b      	lsls	r3, r3, #24
 8005d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d10:	4931      	ldr	r1, [pc, #196]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d16:	4b30      	ldr	r3, [pc, #192]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	492d      	ldr	r1, [pc, #180]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d28:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	f023 0220 	bic.w	r2, r3, #32
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	4928      	ldr	r1, [pc, #160]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d3a:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4a26      	ldr	r2, [pc, #152]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d40:	f023 0310 	bic.w	r3, r3, #16
 8005d44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d46:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d4a:	4b24      	ldr	r3, [pc, #144]	; (8005ddc <RCCEx_PLL2_Config+0x160>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	69d2      	ldr	r2, [r2, #28]
 8005d52:	00d2      	lsls	r2, r2, #3
 8005d54:	4920      	ldr	r1, [pc, #128]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d5a:	4b1f      	ldr	r3, [pc, #124]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d60:	f043 0310 	orr.w	r3, r3, #16
 8005d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d106      	bne.n	8005d7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d6c:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	4a19      	ldr	r2, [pc, #100]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d78:	e00f      	b.n	8005d9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d106      	bne.n	8005d8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005d80:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	4a14      	ldr	r2, [pc, #80]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005d8c:	e005      	b.n	8005d9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005d8e:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d92:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005d9a:	4b0f      	ldr	r3, [pc, #60]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a0e      	ldr	r2, [pc, #56]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005da0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005da6:	f7fb fb63 	bl	8001470 <HAL_GetTick>
 8005daa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dac:	e008      	b.n	8005dc0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dae:	f7fb fb5f 	bl	8001470 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d901      	bls.n	8005dc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e006      	b.n	8005dce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <RCCEx_PLL2_Config+0x15c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0f0      	beq.n	8005dae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	58024400 	.word	0x58024400
 8005ddc:	ffff0007 	.word	0xffff0007

08005de0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dee:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d101      	bne.n	8005dfe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e099      	b.n	8005f32 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005dfe:	4b4f      	ldr	r3, [pc, #316]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a4e      	ldr	r2, [pc, #312]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0a:	f7fb fb31 	bl	8001470 <HAL_GetTick>
 8005e0e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e10:	e008      	b.n	8005e24 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005e12:	f7fb fb2d 	bl	8001470 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d901      	bls.n	8005e24 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e20:	2303      	movs	r3, #3
 8005e22:	e086      	b.n	8005f32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e24:	4b45      	ldr	r3, [pc, #276]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1f0      	bne.n	8005e12 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e30:	4b42      	ldr	r3, [pc, #264]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	051b      	lsls	r3, r3, #20
 8005e3e:	493f      	ldr	r1, [pc, #252]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	628b      	str	r3, [r1, #40]	; 0x28
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	3b01      	subs	r3, #1
 8005e54:	025b      	lsls	r3, r3, #9
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	061b      	lsls	r3, r3, #24
 8005e70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e74:	4931      	ldr	r1, [pc, #196]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e7a:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	492d      	ldr	r1, [pc, #180]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005e8c:	4b2b      	ldr	r3, [pc, #172]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	4928      	ldr	r1, [pc, #160]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005e9e:	4b27      	ldr	r3, [pc, #156]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea2:	4a26      	ldr	r2, [pc, #152]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005eaa:	4b24      	ldr	r3, [pc, #144]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eae:	4b24      	ldr	r3, [pc, #144]	; (8005f40 <RCCEx_PLL3_Config+0x160>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	69d2      	ldr	r2, [r2, #28]
 8005eb6:	00d2      	lsls	r2, r2, #3
 8005eb8:	4920      	ldr	r1, [pc, #128]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec2:	4a1e      	ldr	r2, [pc, #120]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d106      	bne.n	8005ede <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ed0:	4b1a      	ldr	r3, [pc, #104]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed4:	4a19      	ldr	r2, [pc, #100]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ed6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005eda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005edc:	e00f      	b.n	8005efe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d106      	bne.n	8005ef2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005ee4:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005eea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005eee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ef0:	e005      	b.n	8005efe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ef2:	4b12      	ldr	r3, [pc, #72]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ef6:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005ef8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005efe:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a0e      	ldr	r2, [pc, #56]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f0a:	f7fb fab1 	bl	8001470 <HAL_GetTick>
 8005f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f10:	e008      	b.n	8005f24 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f12:	f7fb faad 	bl	8001470 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d901      	bls.n	8005f24 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e006      	b.n	8005f32 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f24:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <RCCEx_PLL3_Config+0x15c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	ffff0007 	.word	0xffff0007

08005f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e049      	b.n	8005fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f841 	bl	8005ff2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 fa00 	bl	8006388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d001      	beq.n	8006020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e054      	b.n	80060ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d022      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604a:	d01d      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a22      	ldr	r2, [pc, #136]	; (80060dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d018      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a21      	ldr	r2, [pc, #132]	; (80060e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d013      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1f      	ldr	r2, [pc, #124]	; (80060e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d00e      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d009      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1c      	ldr	r2, [pc, #112]	; (80060ec <HAL_TIM_Base_Start_IT+0xe4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d004      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x80>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d115      	bne.n	80060b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	4b19      	ldr	r3, [pc, #100]	; (80060f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006090:	4013      	ands	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b06      	cmp	r3, #6
 8006098:	d015      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d011      	beq.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f042 0201 	orr.w	r2, r2, #1
 80060b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b2:	e008      	b.n	80060c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f042 0201 	orr.w	r2, r2, #1
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e000      	b.n	80060c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40001800 	.word	0x40001800
 80060f0:	40014000 	.word	0x40014000
 80060f4:	00010007 	.word	0x00010007

080060f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b02      	cmp	r3, #2
 800610c:	d122      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b02      	cmp	r3, #2
 800611a:	d11b      	bne.n	8006154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f06f 0202 	mvn.w	r2, #2
 8006124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f905 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 8006140:	e005      	b.n	800614e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f8f7 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 f908 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0304 	and.w	r3, r3, #4
 800615e:	2b04      	cmp	r3, #4
 8006160:	d122      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0304 	and.w	r3, r3, #4
 800616c:	2b04      	cmp	r3, #4
 800616e:	d11b      	bne.n	80061a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0204 	mvn.w	r2, #4
 8006178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f8db 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 8006194:	e005      	b.n	80061a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8cd 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f8de 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d122      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0308 	and.w	r3, r3, #8
 80061c0:	2b08      	cmp	r3, #8
 80061c2:	d11b      	bne.n	80061fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0208 	mvn.w	r2, #8
 80061cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2204      	movs	r2, #4
 80061d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8b1 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 80061e8:	e005      	b.n	80061f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f8a3 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f8b4 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b10      	cmp	r3, #16
 8006208:	d122      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d11b      	bne.n	8006250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f06f 0210 	mvn.w	r2, #16
 8006220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2208      	movs	r2, #8
 8006226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	2b00      	cmp	r3, #0
 8006234:	d003      	beq.n	800623e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f887 	bl	800634a <HAL_TIM_IC_CaptureCallback>
 800623c:	e005      	b.n	800624a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f879 	bl	8006336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f88a 	bl	800635e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	f003 0301 	and.w	r3, r3, #1
 800625a:	2b01      	cmp	r3, #1
 800625c:	d10e      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b01      	cmp	r3, #1
 800626a:	d107      	bne.n	800627c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f06f 0201 	mvn.w	r2, #1
 8006274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7fa fc36 	bl	8000ae8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b80      	cmp	r3, #128	; 0x80
 8006288:	d10e      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006294:	2b80      	cmp	r3, #128	; 0x80
 8006296:	d107      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80062a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f914 	bl	80064d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b6:	d10e      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c2:	2b80      	cmp	r3, #128	; 0x80
 80062c4:	d107      	bne.n	80062d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f907 	bl	80064e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e0:	2b40      	cmp	r3, #64	; 0x40
 80062e2:	d10e      	bne.n	8006302 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d107      	bne.n	8006302 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f838 	bl	8006372 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	f003 0320 	and.w	r3, r3, #32
 800630c:	2b20      	cmp	r3, #32
 800630e:	d10e      	bne.n	800632e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f003 0320 	and.w	r3, r3, #32
 800631a:	2b20      	cmp	r3, #32
 800631c:	d107      	bne.n	800632e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f06f 0220 	mvn.w	r2, #32
 8006326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f8c7 	bl	80064bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a40      	ldr	r2, [pc, #256]	; (800649c <TIM_Base_SetConfig+0x114>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a6:	d00f      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3d      	ldr	r2, [pc, #244]	; (80064a0 <TIM_Base_SetConfig+0x118>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a3c      	ldr	r2, [pc, #240]	; (80064a4 <TIM_Base_SetConfig+0x11c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a3b      	ldr	r2, [pc, #236]	; (80064a8 <TIM_Base_SetConfig+0x120>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_Base_SetConfig+0x40>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a3a      	ldr	r2, [pc, #232]	; (80064ac <TIM_Base_SetConfig+0x124>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d108      	bne.n	80063da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2f      	ldr	r2, [pc, #188]	; (800649c <TIM_Base_SetConfig+0x114>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2c      	ldr	r2, [pc, #176]	; (80064a0 <TIM_Base_SetConfig+0x118>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a2b      	ldr	r2, [pc, #172]	; (80064a4 <TIM_Base_SetConfig+0x11c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a2a      	ldr	r2, [pc, #168]	; (80064a8 <TIM_Base_SetConfig+0x120>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a29      	ldr	r2, [pc, #164]	; (80064ac <TIM_Base_SetConfig+0x124>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a28      	ldr	r2, [pc, #160]	; (80064b0 <TIM_Base_SetConfig+0x128>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <TIM_Base_SetConfig+0x12c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0x9a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <TIM_Base_SetConfig+0x130>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a10      	ldr	r2, [pc, #64]	; (800649c <TIM_Base_SetConfig+0x114>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <TIM_Base_SetConfig+0x124>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0xf8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a11      	ldr	r2, [pc, #68]	; (80064b0 <TIM_Base_SetConfig+0x128>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0xf8>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a10      	ldr	r2, [pc, #64]	; (80064b4 <TIM_Base_SetConfig+0x12c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0xf8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a0f      	ldr	r2, [pc, #60]	; (80064b8 <TIM_Base_SetConfig+0x130>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d103      	bne.n	8006488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	615a      	str	r2, [r3, #20]
}
 800648e:	bf00      	nop
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40000400 	.word	0x40000400
 80064a4:	40000800 	.word	0x40000800
 80064a8:	40000c00 	.word	0x40000c00
 80064ac:	40010400 	.word	0x40010400
 80064b0:	40014000 	.word	0x40014000
 80064b4:	40014400 	.word	0x40014400
 80064b8:	40014800 	.word	0x40014800

080064bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e042      	b.n	8006590 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fa fb19 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2224      	movs	r2, #36	; 0x24
 8006526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 0201 	bic.w	r2, r2, #1
 8006538:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f82c 	bl	8006598 <UART_SetConfig>
 8006540:	4603      	mov	r3, r0
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e022      	b.n	8006590 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fd80 	bl	8007058 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006566:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006576:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f042 0201 	orr.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fe07 	bl	800719c <UART_CheckIdleState>
 800658e:	4603      	mov	r3, r0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}

08006598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	b5b0      	push	{r4, r5, r7, lr}
 800659a:	b08e      	sub	sp, #56	; 0x38
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689a      	ldr	r2, [r3, #8]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	695b      	ldr	r3, [r3, #20]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	4bbf      	ldr	r3, [pc, #764]	; (80068c4 <UART_SetConfig+0x32c>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065ce:	430b      	orrs	r3, r1
 80065d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68da      	ldr	r2, [r3, #12]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4ab5      	ldr	r2, [pc, #724]	; (80068c8 <UART_SetConfig+0x330>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fe:	4313      	orrs	r3, r2
 8006600:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689a      	ldr	r2, [r3, #8]
 8006608:	4bb0      	ldr	r3, [pc, #704]	; (80068cc <UART_SetConfig+0x334>)
 800660a:	4013      	ands	r3, r2
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006612:	430b      	orrs	r3, r1
 8006614:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661c:	f023 010f 	bic.w	r1, r3, #15
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4aa7      	ldr	r2, [pc, #668]	; (80068d0 <UART_SetConfig+0x338>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d176      	bne.n	8006724 <UART_SetConfig+0x18c>
 8006636:	4ba7      	ldr	r3, [pc, #668]	; (80068d4 <UART_SetConfig+0x33c>)
 8006638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800663a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800663e:	2b28      	cmp	r3, #40	; 0x28
 8006640:	d86c      	bhi.n	800671c <UART_SetConfig+0x184>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <UART_SetConfig+0xb0>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	080066ed 	.word	0x080066ed
 800664c:	0800671d 	.word	0x0800671d
 8006650:	0800671d 	.word	0x0800671d
 8006654:	0800671d 	.word	0x0800671d
 8006658:	0800671d 	.word	0x0800671d
 800665c:	0800671d 	.word	0x0800671d
 8006660:	0800671d 	.word	0x0800671d
 8006664:	0800671d 	.word	0x0800671d
 8006668:	080066f5 	.word	0x080066f5
 800666c:	0800671d 	.word	0x0800671d
 8006670:	0800671d 	.word	0x0800671d
 8006674:	0800671d 	.word	0x0800671d
 8006678:	0800671d 	.word	0x0800671d
 800667c:	0800671d 	.word	0x0800671d
 8006680:	0800671d 	.word	0x0800671d
 8006684:	0800671d 	.word	0x0800671d
 8006688:	080066fd 	.word	0x080066fd
 800668c:	0800671d 	.word	0x0800671d
 8006690:	0800671d 	.word	0x0800671d
 8006694:	0800671d 	.word	0x0800671d
 8006698:	0800671d 	.word	0x0800671d
 800669c:	0800671d 	.word	0x0800671d
 80066a0:	0800671d 	.word	0x0800671d
 80066a4:	0800671d 	.word	0x0800671d
 80066a8:	08006705 	.word	0x08006705
 80066ac:	0800671d 	.word	0x0800671d
 80066b0:	0800671d 	.word	0x0800671d
 80066b4:	0800671d 	.word	0x0800671d
 80066b8:	0800671d 	.word	0x0800671d
 80066bc:	0800671d 	.word	0x0800671d
 80066c0:	0800671d 	.word	0x0800671d
 80066c4:	0800671d 	.word	0x0800671d
 80066c8:	0800670d 	.word	0x0800670d
 80066cc:	0800671d 	.word	0x0800671d
 80066d0:	0800671d 	.word	0x0800671d
 80066d4:	0800671d 	.word	0x0800671d
 80066d8:	0800671d 	.word	0x0800671d
 80066dc:	0800671d 	.word	0x0800671d
 80066e0:	0800671d 	.word	0x0800671d
 80066e4:	0800671d 	.word	0x0800671d
 80066e8:	08006715 	.word	0x08006715
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066f2:	e222      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80066fa:	e21e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006702:	e21a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800670a:	e216      	b.n	8006b3a <UART_SetConfig+0x5a2>
 800670c:	2320      	movs	r3, #32
 800670e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006712:	e212      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006714:	2340      	movs	r3, #64	; 0x40
 8006716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800671a:	e20e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006722:	e20a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a6b      	ldr	r2, [pc, #428]	; (80068d8 <UART_SetConfig+0x340>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d130      	bne.n	8006790 <UART_SetConfig+0x1f8>
 800672e:	4b69      	ldr	r3, [pc, #420]	; (80068d4 <UART_SetConfig+0x33c>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2b05      	cmp	r3, #5
 8006738:	d826      	bhi.n	8006788 <UART_SetConfig+0x1f0>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x1a8>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006759 	.word	0x08006759
 8006744:	08006761 	.word	0x08006761
 8006748:	08006769 	.word	0x08006769
 800674c:	08006771 	.word	0x08006771
 8006750:	08006779 	.word	0x08006779
 8006754:	08006781 	.word	0x08006781
 8006758:	2300      	movs	r3, #0
 800675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800675e:	e1ec      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006760:	2304      	movs	r3, #4
 8006762:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006766:	e1e8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006768:	2308      	movs	r3, #8
 800676a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800676e:	e1e4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006770:	2310      	movs	r3, #16
 8006772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006776:	e1e0      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006778:	2320      	movs	r3, #32
 800677a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800677e:	e1dc      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006780:	2340      	movs	r3, #64	; 0x40
 8006782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006786:	e1d8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006788:	2380      	movs	r3, #128	; 0x80
 800678a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800678e:	e1d4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a51      	ldr	r2, [pc, #324]	; (80068dc <UART_SetConfig+0x344>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d130      	bne.n	80067fc <UART_SetConfig+0x264>
 800679a:	4b4e      	ldr	r3, [pc, #312]	; (80068d4 <UART_SetConfig+0x33c>)
 800679c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b05      	cmp	r3, #5
 80067a4:	d826      	bhi.n	80067f4 <UART_SetConfig+0x25c>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x214>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067c5 	.word	0x080067c5
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067d5 	.word	0x080067d5
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ca:	e1b6      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067cc:	2304      	movs	r3, #4
 80067ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067d2:	e1b2      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067d4:	2308      	movs	r3, #8
 80067d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067da:	e1ae      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067dc:	2310      	movs	r3, #16
 80067de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067e2:	e1aa      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067e4:	2320      	movs	r3, #32
 80067e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067ea:	e1a6      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067ec:	2340      	movs	r3, #64	; 0x40
 80067ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067f2:	e1a2      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067f4:	2380      	movs	r3, #128	; 0x80
 80067f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80067fa:	e19e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a37      	ldr	r2, [pc, #220]	; (80068e0 <UART_SetConfig+0x348>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d130      	bne.n	8006868 <UART_SetConfig+0x2d0>
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <UART_SetConfig+0x33c>)
 8006808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800680a:	f003 0307 	and.w	r3, r3, #7
 800680e:	2b05      	cmp	r3, #5
 8006810:	d826      	bhi.n	8006860 <UART_SetConfig+0x2c8>
 8006812:	a201      	add	r2, pc, #4	; (adr r2, 8006818 <UART_SetConfig+0x280>)
 8006814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006818:	08006831 	.word	0x08006831
 800681c:	08006839 	.word	0x08006839
 8006820:	08006841 	.word	0x08006841
 8006824:	08006849 	.word	0x08006849
 8006828:	08006851 	.word	0x08006851
 800682c:	08006859 	.word	0x08006859
 8006830:	2300      	movs	r3, #0
 8006832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006836:	e180      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006838:	2304      	movs	r3, #4
 800683a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800683e:	e17c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006840:	2308      	movs	r3, #8
 8006842:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006846:	e178      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006848:	2310      	movs	r3, #16
 800684a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800684e:	e174      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006850:	2320      	movs	r3, #32
 8006852:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006856:	e170      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800685e:	e16c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006860:	2380      	movs	r3, #128	; 0x80
 8006862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006866:	e168      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1d      	ldr	r2, [pc, #116]	; (80068e4 <UART_SetConfig+0x34c>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d142      	bne.n	80068f8 <UART_SetConfig+0x360>
 8006872:	4b18      	ldr	r3, [pc, #96]	; (80068d4 <UART_SetConfig+0x33c>)
 8006874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	2b05      	cmp	r3, #5
 800687c:	d838      	bhi.n	80068f0 <UART_SetConfig+0x358>
 800687e:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x2ec>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	0800689d 	.word	0x0800689d
 8006888:	080068a5 	.word	0x080068a5
 800688c:	080068ad 	.word	0x080068ad
 8006890:	080068b5 	.word	0x080068b5
 8006894:	080068bd 	.word	0x080068bd
 8006898:	080068e9 	.word	0x080068e9
 800689c:	2300      	movs	r3, #0
 800689e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068a2:	e14a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068aa:	e146      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068b2:	e142      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ba:	e13e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068bc:	2320      	movs	r3, #32
 80068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068c2:	e13a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068c4:	cfff69f3 	.word	0xcfff69f3
 80068c8:	58000c00 	.word	0x58000c00
 80068cc:	11fff4ff 	.word	0x11fff4ff
 80068d0:	40011000 	.word	0x40011000
 80068d4:	58024400 	.word	0x58024400
 80068d8:	40004400 	.word	0x40004400
 80068dc:	40004800 	.word	0x40004800
 80068e0:	40004c00 	.word	0x40004c00
 80068e4:	40005000 	.word	0x40005000
 80068e8:	2340      	movs	r3, #64	; 0x40
 80068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068ee:	e124      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80068f6:	e120      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4acc      	ldr	r2, [pc, #816]	; (8006c30 <UART_SetConfig+0x698>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d176      	bne.n	80069f0 <UART_SetConfig+0x458>
 8006902:	4bcc      	ldr	r3, [pc, #816]	; (8006c34 <UART_SetConfig+0x69c>)
 8006904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006906:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800690a:	2b28      	cmp	r3, #40	; 0x28
 800690c:	d86c      	bhi.n	80069e8 <UART_SetConfig+0x450>
 800690e:	a201      	add	r2, pc, #4	; (adr r2, 8006914 <UART_SetConfig+0x37c>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	080069b9 	.word	0x080069b9
 8006918:	080069e9 	.word	0x080069e9
 800691c:	080069e9 	.word	0x080069e9
 8006920:	080069e9 	.word	0x080069e9
 8006924:	080069e9 	.word	0x080069e9
 8006928:	080069e9 	.word	0x080069e9
 800692c:	080069e9 	.word	0x080069e9
 8006930:	080069e9 	.word	0x080069e9
 8006934:	080069c1 	.word	0x080069c1
 8006938:	080069e9 	.word	0x080069e9
 800693c:	080069e9 	.word	0x080069e9
 8006940:	080069e9 	.word	0x080069e9
 8006944:	080069e9 	.word	0x080069e9
 8006948:	080069e9 	.word	0x080069e9
 800694c:	080069e9 	.word	0x080069e9
 8006950:	080069e9 	.word	0x080069e9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069e9 	.word	0x080069e9
 800695c:	080069e9 	.word	0x080069e9
 8006960:	080069e9 	.word	0x080069e9
 8006964:	080069e9 	.word	0x080069e9
 8006968:	080069e9 	.word	0x080069e9
 800696c:	080069e9 	.word	0x080069e9
 8006970:	080069e9 	.word	0x080069e9
 8006974:	080069d1 	.word	0x080069d1
 8006978:	080069e9 	.word	0x080069e9
 800697c:	080069e9 	.word	0x080069e9
 8006980:	080069e9 	.word	0x080069e9
 8006984:	080069e9 	.word	0x080069e9
 8006988:	080069e9 	.word	0x080069e9
 800698c:	080069e9 	.word	0x080069e9
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069d9 	.word	0x080069d9
 8006998:	080069e9 	.word	0x080069e9
 800699c:	080069e9 	.word	0x080069e9
 80069a0:	080069e9 	.word	0x080069e9
 80069a4:	080069e9 	.word	0x080069e9
 80069a8:	080069e9 	.word	0x080069e9
 80069ac:	080069e9 	.word	0x080069e9
 80069b0:	080069e9 	.word	0x080069e9
 80069b4:	080069e1 	.word	0x080069e1
 80069b8:	2301      	movs	r3, #1
 80069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069be:	e0bc      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069c0:	2304      	movs	r3, #4
 80069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069c6:	e0b8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069c8:	2308      	movs	r3, #8
 80069ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ce:	e0b4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069d0:	2310      	movs	r3, #16
 80069d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069d6:	e0b0      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069d8:	2320      	movs	r3, #32
 80069da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069de:	e0ac      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069e0:	2340      	movs	r3, #64	; 0x40
 80069e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069e6:	e0a8      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80069ee:	e0a4      	b.n	8006b3a <UART_SetConfig+0x5a2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a90      	ldr	r2, [pc, #576]	; (8006c38 <UART_SetConfig+0x6a0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d130      	bne.n	8006a5c <UART_SetConfig+0x4c4>
 80069fa:	4b8e      	ldr	r3, [pc, #568]	; (8006c34 <UART_SetConfig+0x69c>)
 80069fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fe:	f003 0307 	and.w	r3, r3, #7
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	d826      	bhi.n	8006a54 <UART_SetConfig+0x4bc>
 8006a06:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <UART_SetConfig+0x474>)
 8006a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0c:	08006a25 	.word	0x08006a25
 8006a10:	08006a2d 	.word	0x08006a2d
 8006a14:	08006a35 	.word	0x08006a35
 8006a18:	08006a3d 	.word	0x08006a3d
 8006a1c:	08006a45 	.word	0x08006a45
 8006a20:	08006a4d 	.word	0x08006a4d
 8006a24:	2300      	movs	r3, #0
 8006a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a2a:	e086      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a2c:	2304      	movs	r3, #4
 8006a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a32:	e082      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a34:	2308      	movs	r3, #8
 8006a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a3a:	e07e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a3c:	2310      	movs	r3, #16
 8006a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a42:	e07a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a44:	2320      	movs	r3, #32
 8006a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a4a:	e076      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a4c:	2340      	movs	r3, #64	; 0x40
 8006a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a52:	e072      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a54:	2380      	movs	r3, #128	; 0x80
 8006a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a5a:	e06e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <UART_SetConfig+0x6a4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d130      	bne.n	8006ac8 <UART_SetConfig+0x530>
 8006a66:	4b73      	ldr	r3, [pc, #460]	; (8006c34 <UART_SetConfig+0x69c>)
 8006a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	2b05      	cmp	r3, #5
 8006a70:	d826      	bhi.n	8006ac0 <UART_SetConfig+0x528>
 8006a72:	a201      	add	r2, pc, #4	; (adr r2, 8006a78 <UART_SetConfig+0x4e0>)
 8006a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a78:	08006a91 	.word	0x08006a91
 8006a7c:	08006a99 	.word	0x08006a99
 8006a80:	08006aa1 	.word	0x08006aa1
 8006a84:	08006aa9 	.word	0x08006aa9
 8006a88:	08006ab1 	.word	0x08006ab1
 8006a8c:	08006ab9 	.word	0x08006ab9
 8006a90:	2300      	movs	r3, #0
 8006a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a96:	e050      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006a98:	2304      	movs	r3, #4
 8006a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006a9e:	e04c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aa6:	e048      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006aa8:	2310      	movs	r3, #16
 8006aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006aae:	e044      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ab0:	2320      	movs	r3, #32
 8006ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ab6:	e040      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ab8:	2340      	movs	r3, #64	; 0x40
 8006aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006abe:	e03c      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ac0:	2380      	movs	r3, #128	; 0x80
 8006ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ac6:	e038      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5c      	ldr	r2, [pc, #368]	; (8006c40 <UART_SetConfig+0x6a8>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d130      	bne.n	8006b34 <UART_SetConfig+0x59c>
 8006ad2:	4b58      	ldr	r3, [pc, #352]	; (8006c34 <UART_SetConfig+0x69c>)
 8006ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d826      	bhi.n	8006b2c <UART_SetConfig+0x594>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0x54c>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006afd 	.word	0x08006afd
 8006ae8:	08006b05 	.word	0x08006b05
 8006aec:	08006b0d 	.word	0x08006b0d
 8006af0:	08006b15 	.word	0x08006b15
 8006af4:	08006b1d 	.word	0x08006b1d
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	2302      	movs	r3, #2
 8006afe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b02:	e01a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b04:	2304      	movs	r3, #4
 8006b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b0a:	e016      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b0c:	2308      	movs	r3, #8
 8006b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b12:	e012      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b14:	2310      	movs	r3, #16
 8006b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b1a:	e00e      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b1c:	2320      	movs	r3, #32
 8006b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b22:	e00a      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b24:	2340      	movs	r3, #64	; 0x40
 8006b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b2a:	e006      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006b32:	e002      	b.n	8006b3a <UART_SetConfig+0x5a2>
 8006b34:	2380      	movs	r3, #128	; 0x80
 8006b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a40      	ldr	r2, [pc, #256]	; (8006c40 <UART_SetConfig+0x6a8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	f040 80ef 	bne.w	8006d24 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006b46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b4a:	2b20      	cmp	r3, #32
 8006b4c:	dc46      	bgt.n	8006bdc <UART_SetConfig+0x644>
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	f2c0 8081 	blt.w	8006c56 <UART_SetConfig+0x6be>
 8006b54:	3b02      	subs	r3, #2
 8006b56:	2b1e      	cmp	r3, #30
 8006b58:	d87d      	bhi.n	8006c56 <UART_SetConfig+0x6be>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <UART_SetConfig+0x5c8>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006be3 	.word	0x08006be3
 8006b64:	08006c57 	.word	0x08006c57
 8006b68:	08006beb 	.word	0x08006beb
 8006b6c:	08006c57 	.word	0x08006c57
 8006b70:	08006c57 	.word	0x08006c57
 8006b74:	08006c57 	.word	0x08006c57
 8006b78:	08006bfb 	.word	0x08006bfb
 8006b7c:	08006c57 	.word	0x08006c57
 8006b80:	08006c57 	.word	0x08006c57
 8006b84:	08006c57 	.word	0x08006c57
 8006b88:	08006c57 	.word	0x08006c57
 8006b8c:	08006c57 	.word	0x08006c57
 8006b90:	08006c57 	.word	0x08006c57
 8006b94:	08006c57 	.word	0x08006c57
 8006b98:	08006c0b 	.word	0x08006c0b
 8006b9c:	08006c57 	.word	0x08006c57
 8006ba0:	08006c57 	.word	0x08006c57
 8006ba4:	08006c57 	.word	0x08006c57
 8006ba8:	08006c57 	.word	0x08006c57
 8006bac:	08006c57 	.word	0x08006c57
 8006bb0:	08006c57 	.word	0x08006c57
 8006bb4:	08006c57 	.word	0x08006c57
 8006bb8:	08006c57 	.word	0x08006c57
 8006bbc:	08006c57 	.word	0x08006c57
 8006bc0:	08006c57 	.word	0x08006c57
 8006bc4:	08006c57 	.word	0x08006c57
 8006bc8:	08006c57 	.word	0x08006c57
 8006bcc:	08006c57 	.word	0x08006c57
 8006bd0:	08006c57 	.word	0x08006c57
 8006bd4:	08006c57 	.word	0x08006c57
 8006bd8:	08006c49 	.word	0x08006c49
 8006bdc:	2b40      	cmp	r3, #64	; 0x40
 8006bde:	d036      	beq.n	8006c4e <UART_SetConfig+0x6b6>
 8006be0:	e039      	b.n	8006c56 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006be2:	f7fe fd8d 	bl	8005700 <HAL_RCCEx_GetD3PCLK1Freq>
 8006be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006be8:	e03b      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bea:	f107 0314 	add.w	r3, r7, #20
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fd9c 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006bf4:	69bb      	ldr	r3, [r7, #24]
 8006bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006bf8:	e033      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe fee8 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c08:	e02b      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <UART_SetConfig+0x69c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006c16:	4b07      	ldr	r3, [pc, #28]	; (8006c34 <UART_SetConfig+0x69c>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	08db      	lsrs	r3, r3, #3
 8006c1c:	f003 0303 	and.w	r3, r3, #3
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <UART_SetConfig+0x6ac>)
 8006c22:	fa22 f303 	lsr.w	r3, r2, r3
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c28:	e01b      	b.n	8006c62 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8006c2a:	4b06      	ldr	r3, [pc, #24]	; (8006c44 <UART_SetConfig+0x6ac>)
 8006c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c2e:	e018      	b.n	8006c62 <UART_SetConfig+0x6ca>
 8006c30:	40011400 	.word	0x40011400
 8006c34:	58024400 	.word	0x58024400
 8006c38:	40007800 	.word	0x40007800
 8006c3c:	40007c00 	.word	0x40007c00
 8006c40:	58000c00 	.word	0x58000c00
 8006c44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006c48:	4bc4      	ldr	r3, [pc, #784]	; (8006f5c <UART_SetConfig+0x9c4>)
 8006c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 81da 	beq.w	800701e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	4abc      	ldr	r2, [pc, #752]	; (8006f60 <UART_SetConfig+0x9c8>)
 8006c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c74:	461a      	mov	r2, r3
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c7c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	6a3a      	ldr	r2, [r7, #32]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d305      	bcc.n	8006c9a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c94:	6a3a      	ldr	r2, [r7, #32]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d903      	bls.n	8006ca2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006ca0:	e1bd      	b.n	800701e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f04f 0100 	mov.w	r1, #0
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	4aac      	ldr	r2, [pc, #688]	; (8006f60 <UART_SetConfig+0x9c8>)
 8006cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	f7f9 fb61 	bl	8000380 <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	f04f 0200 	mov.w	r2, #0
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	020b      	lsls	r3, r1, #8
 8006cd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cd4:	0202      	lsls	r2, r0, #8
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	6849      	ldr	r1, [r1, #4]
 8006cda:	0849      	lsrs	r1, r1, #1
 8006cdc:	4608      	mov	r0, r1
 8006cde:	f04f 0100 	mov.w	r1, #0
 8006ce2:	1814      	adds	r4, r2, r0
 8006ce4:	eb43 0501 	adc.w	r5, r3, r1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	461a      	mov	r2, r3
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	4620      	mov	r0, r4
 8006cf4:	4629      	mov	r1, r5
 8006cf6:	f7f9 fb43 	bl	8000380 <__aeabi_uldivmod>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4613      	mov	r3, r2
 8006d00:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d08:	d308      	bcc.n	8006d1c <UART_SetConfig+0x784>
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d10:	d204      	bcs.n	8006d1c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d18:	60da      	str	r2, [r3, #12]
 8006d1a:	e180      	b.n	800701e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006d22:	e17c      	b.n	800701e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2c:	f040 80be 	bne.w	8006eac <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8006d30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006d34:	2b20      	cmp	r3, #32
 8006d36:	dc49      	bgt.n	8006dcc <UART_SetConfig+0x834>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	db7c      	blt.n	8006e36 <UART_SetConfig+0x89e>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d87a      	bhi.n	8006e36 <UART_SetConfig+0x89e>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <UART_SetConfig+0x7b0>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006dd3 	.word	0x08006dd3
 8006d4c:	08006ddb 	.word	0x08006ddb
 8006d50:	08006e37 	.word	0x08006e37
 8006d54:	08006e37 	.word	0x08006e37
 8006d58:	08006de3 	.word	0x08006de3
 8006d5c:	08006e37 	.word	0x08006e37
 8006d60:	08006e37 	.word	0x08006e37
 8006d64:	08006e37 	.word	0x08006e37
 8006d68:	08006df3 	.word	0x08006df3
 8006d6c:	08006e37 	.word	0x08006e37
 8006d70:	08006e37 	.word	0x08006e37
 8006d74:	08006e37 	.word	0x08006e37
 8006d78:	08006e37 	.word	0x08006e37
 8006d7c:	08006e37 	.word	0x08006e37
 8006d80:	08006e37 	.word	0x08006e37
 8006d84:	08006e37 	.word	0x08006e37
 8006d88:	08006e03 	.word	0x08006e03
 8006d8c:	08006e37 	.word	0x08006e37
 8006d90:	08006e37 	.word	0x08006e37
 8006d94:	08006e37 	.word	0x08006e37
 8006d98:	08006e37 	.word	0x08006e37
 8006d9c:	08006e37 	.word	0x08006e37
 8006da0:	08006e37 	.word	0x08006e37
 8006da4:	08006e37 	.word	0x08006e37
 8006da8:	08006e37 	.word	0x08006e37
 8006dac:	08006e37 	.word	0x08006e37
 8006db0:	08006e37 	.word	0x08006e37
 8006db4:	08006e37 	.word	0x08006e37
 8006db8:	08006e37 	.word	0x08006e37
 8006dbc:	08006e37 	.word	0x08006e37
 8006dc0:	08006e37 	.word	0x08006e37
 8006dc4:	08006e37 	.word	0x08006e37
 8006dc8:	08006e29 	.word	0x08006e29
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d02e      	beq.n	8006e2e <UART_SetConfig+0x896>
 8006dd0:	e031      	b.n	8006e36 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fd fce7 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8006dd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006dd8:	e033      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dda:	f7fd fcf9 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8006dde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006de0:	e02f      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fe fca0 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006df0:	e027      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006df2:	f107 0308 	add.w	r3, r7, #8
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe fdec 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e00:	e01f      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e02:	4b58      	ldr	r3, [pc, #352]	; (8006f64 <UART_SetConfig+0x9cc>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d009      	beq.n	8006e22 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006e0e:	4b55      	ldr	r3, [pc, #340]	; (8006f64 <UART_SetConfig+0x9cc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	08db      	lsrs	r3, r3, #3
 8006e14:	f003 0303 	and.w	r3, r3, #3
 8006e18:	4a53      	ldr	r2, [pc, #332]	; (8006f68 <UART_SetConfig+0x9d0>)
 8006e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e20:	e00f      	b.n	8006e42 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006e22:	4b51      	ldr	r3, [pc, #324]	; (8006f68 <UART_SetConfig+0x9d0>)
 8006e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e26:	e00c      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006e28:	4b4c      	ldr	r3, [pc, #304]	; (8006f5c <UART_SetConfig+0x9c4>)
 8006e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e2c:	e009      	b.n	8006e42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e34:	e005      	b.n	8006e42 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006e40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80ea 	beq.w	800701e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4e:	4a44      	ldr	r2, [pc, #272]	; (8006f60 <UART_SetConfig+0x9c8>)
 8006e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e54:	461a      	mov	r2, r3
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e5c:	005a      	lsls	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	085b      	lsrs	r3, r3, #1
 8006e64:	441a      	add	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	2b0f      	cmp	r3, #15
 8006e74:	d916      	bls.n	8006ea4 <UART_SetConfig+0x90c>
 8006e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7c:	d212      	bcs.n	8006ea4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	f023 030f 	bic.w	r3, r3, #15
 8006e86:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	085b      	lsrs	r3, r3, #1
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f003 0307 	and.w	r3, r3, #7
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e96:	4313      	orrs	r3, r2
 8006e98:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	e0bc      	b.n	800701e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006eaa:	e0b8      	b.n	800701e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006eb0:	2b20      	cmp	r3, #32
 8006eb2:	dc4b      	bgt.n	8006f4c <UART_SetConfig+0x9b4>
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f2c0 8087 	blt.w	8006fc8 <UART_SetConfig+0xa30>
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	f200 8084 	bhi.w	8006fc8 <UART_SetConfig+0xa30>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0x930>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006f53 	.word	0x08006f53
 8006ecc:	08006f6d 	.word	0x08006f6d
 8006ed0:	08006fc9 	.word	0x08006fc9
 8006ed4:	08006fc9 	.word	0x08006fc9
 8006ed8:	08006f75 	.word	0x08006f75
 8006edc:	08006fc9 	.word	0x08006fc9
 8006ee0:	08006fc9 	.word	0x08006fc9
 8006ee4:	08006fc9 	.word	0x08006fc9
 8006ee8:	08006f85 	.word	0x08006f85
 8006eec:	08006fc9 	.word	0x08006fc9
 8006ef0:	08006fc9 	.word	0x08006fc9
 8006ef4:	08006fc9 	.word	0x08006fc9
 8006ef8:	08006fc9 	.word	0x08006fc9
 8006efc:	08006fc9 	.word	0x08006fc9
 8006f00:	08006fc9 	.word	0x08006fc9
 8006f04:	08006fc9 	.word	0x08006fc9
 8006f08:	08006f95 	.word	0x08006f95
 8006f0c:	08006fc9 	.word	0x08006fc9
 8006f10:	08006fc9 	.word	0x08006fc9
 8006f14:	08006fc9 	.word	0x08006fc9
 8006f18:	08006fc9 	.word	0x08006fc9
 8006f1c:	08006fc9 	.word	0x08006fc9
 8006f20:	08006fc9 	.word	0x08006fc9
 8006f24:	08006fc9 	.word	0x08006fc9
 8006f28:	08006fc9 	.word	0x08006fc9
 8006f2c:	08006fc9 	.word	0x08006fc9
 8006f30:	08006fc9 	.word	0x08006fc9
 8006f34:	08006fc9 	.word	0x08006fc9
 8006f38:	08006fc9 	.word	0x08006fc9
 8006f3c:	08006fc9 	.word	0x08006fc9
 8006f40:	08006fc9 	.word	0x08006fc9
 8006f44:	08006fc9 	.word	0x08006fc9
 8006f48:	08006fbb 	.word	0x08006fbb
 8006f4c:	2b40      	cmp	r3, #64	; 0x40
 8006f4e:	d037      	beq.n	8006fc0 <UART_SetConfig+0xa28>
 8006f50:	e03a      	b.n	8006fc8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f52:	f7fd fc27 	bl	80047a4 <HAL_RCC_GetPCLK1Freq>
 8006f56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f58:	e03c      	b.n	8006fd4 <UART_SetConfig+0xa3c>
 8006f5a:	bf00      	nop
 8006f5c:	003d0900 	.word	0x003d0900
 8006f60:	0801ba78 	.word	0x0801ba78
 8006f64:	58024400 	.word	0x58024400
 8006f68:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f6c:	f7fd fc30 	bl	80047d0 <HAL_RCC_GetPCLK2Freq>
 8006f70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006f72:	e02f      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f74:	f107 0314 	add.w	r3, r7, #20
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fe fbd7 	bl	800572c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f82:	e027      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f84:	f107 0308 	add.w	r3, r7, #8
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fd23 	bl	80059d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006f92:	e01f      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f94:	4b2c      	ldr	r3, [pc, #176]	; (8007048 <UART_SetConfig+0xab0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d009      	beq.n	8006fb4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006fa0:	4b29      	ldr	r3, [pc, #164]	; (8007048 <UART_SetConfig+0xab0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	08db      	lsrs	r3, r3, #3
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	4a28      	ldr	r2, [pc, #160]	; (800704c <UART_SetConfig+0xab4>)
 8006fac:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006fb2:	e00f      	b.n	8006fd4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <UART_SetConfig+0xab4>)
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fb8:	e00c      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006fba:	4b25      	ldr	r3, [pc, #148]	; (8007050 <UART_SetConfig+0xab8>)
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fbe:	e009      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006fc6:	e005      	b.n	8006fd4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006fd2:	bf00      	nop
    }

    if (pclk != 0U)
 8006fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d021      	beq.n	800701e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fde:	4a1d      	ldr	r2, [pc, #116]	; (8007054 <UART_SetConfig+0xabc>)
 8006fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	441a      	add	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007000:	2b0f      	cmp	r3, #15
 8007002:	d909      	bls.n	8007018 <UART_SetConfig+0xa80>
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800700a:	d205      	bcs.n	8007018 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	b29a      	uxth	r2, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	60da      	str	r2, [r3, #12]
 8007016:	e002      	b.n	800701e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2201      	movs	r2, #1
 800702a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800703a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800703e:	4618      	mov	r0, r3
 8007040:	3738      	adds	r7, #56	; 0x38
 8007042:	46bd      	mov	sp, r7
 8007044:	bdb0      	pop	{r4, r5, r7, pc}
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	003d0900 	.word	0x003d0900
 8007054:	0801ba78 	.word	0x0801ba78

08007058 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	430a      	orrs	r2, r1
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00a      	beq.n	80070c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	f003 0308 	and.w	r3, r3, #8
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	430a      	orrs	r2, r1
 80070e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00a      	beq.n	800710a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01a      	beq.n	800716e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007156:	d10a      	bne.n	800716e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	430a      	orrs	r2, r1
 800716c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	605a      	str	r2, [r3, #4]
  }
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af02      	add	r7, sp, #8
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071ac:	f7fa f960 	bl	8001470 <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d10e      	bne.n	80071de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f82f 	bl	8007232 <UART_WaitOnFlagUntilTimeout>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e025      	b.n	800722a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d10e      	bne.n	800720a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071f0:	9300      	str	r3, [sp, #0]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f819 	bl	8007232 <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d001      	beq.n	800720a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e00f      	b.n	800722a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2220      	movs	r2, #32
 800720e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2220      	movs	r2, #32
 8007216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2200      	movs	r2, #0
 800721e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b09c      	sub	sp, #112	; 0x70
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	603b      	str	r3, [r7, #0]
 800723e:	4613      	mov	r3, r2
 8007240:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007242:	e0a9      	b.n	8007398 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007246:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800724a:	f000 80a5 	beq.w	8007398 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800724e:	f7fa f90f 	bl	8001470 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800725a:	429a      	cmp	r2, r3
 800725c:	d302      	bcc.n	8007264 <UART_WaitOnFlagUntilTimeout+0x32>
 800725e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007260:	2b00      	cmp	r3, #0
 8007262:	d140      	bne.n	80072e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007274:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007278:	667b      	str	r3, [r7, #100]	; 0x64
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007284:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007288:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e6      	bne.n	8007264 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3308      	adds	r3, #8
 800729c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a0:	e853 3f00 	ldrex	r3, [r3]
 80072a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	f023 0301 	bic.w	r3, r3, #1
 80072ac:	663b      	str	r3, [r7, #96]	; 0x60
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3308      	adds	r3, #8
 80072b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80072b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072be:	e841 2300 	strex	r3, r2, [r1]
 80072c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1e5      	bne.n	8007296 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e069      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d051      	beq.n	8007398 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	69db      	ldr	r3, [r3, #28]
 80072fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007302:	d149      	bne.n	8007398 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800730c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800731c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007322:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800732c:	637b      	str	r3, [r7, #52]	; 0x34
 800732e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800733a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e6      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	3308      	adds	r3, #8
 8007346:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	613b      	str	r3, [r7, #16]
   return(result);
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	66bb      	str	r3, [r7, #104]	; 0x68
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	3308      	adds	r3, #8
 800735e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007360:	623a      	str	r2, [r7, #32]
 8007362:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	61bb      	str	r3, [r7, #24]
   return(result);
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e5      	bne.n	8007340 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2220      	movs	r2, #32
 8007388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007394:	2303      	movs	r3, #3
 8007396:	e010      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4013      	ands	r3, r2
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	f43f af46 	beq.w	8007244 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3770      	adds	r7, #112	; 0x70
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e027      	b.n	8007428 <HAL_UARTEx_DisableFifoMode+0x66>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2224      	movs	r2, #36	; 0x24
 80073e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007406:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007448:	2302      	movs	r3, #2
 800744a:	e02d      	b.n	80074a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2224      	movs	r2, #36	; 0x24
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	430a      	orrs	r2, r1
 8007486:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f84f 	bl	800752c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074a6:	2300      	movs	r3, #0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074c4:	2302      	movs	r3, #2
 80074c6:	e02d      	b.n	8007524 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2224      	movs	r2, #36	; 0x24
 80074d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0201 	bic.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f811 	bl	800752c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007538:	2b00      	cmp	r3, #0
 800753a:	d108      	bne.n	800754e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800754c:	e031      	b.n	80075b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800754e:	2310      	movs	r3, #16
 8007550:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007552:	2310      	movs	r3, #16
 8007554:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	0e5b      	lsrs	r3, r3, #25
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 0307 	and.w	r3, r3, #7
 8007564:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	0f5b      	lsrs	r3, r3, #29
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 0307 	and.w	r3, r3, #7
 8007574:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	7b3a      	ldrb	r2, [r7, #12]
 800757a:	4911      	ldr	r1, [pc, #68]	; (80075c0 <UARTEx_SetNbDataToProcess+0x94>)
 800757c:	5c8a      	ldrb	r2, [r1, r2]
 800757e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007582:	7b3a      	ldrb	r2, [r7, #12]
 8007584:	490f      	ldr	r1, [pc, #60]	; (80075c4 <UARTEx_SetNbDataToProcess+0x98>)
 8007586:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007588:	fb93 f3f2 	sdiv	r3, r3, r2
 800758c:	b29a      	uxth	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	7b7a      	ldrb	r2, [r7, #13]
 8007598:	4909      	ldr	r1, [pc, #36]	; (80075c0 <UARTEx_SetNbDataToProcess+0x94>)
 800759a:	5c8a      	ldrb	r2, [r1, r2]
 800759c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075a0:	7b7a      	ldrb	r2, [r7, #13]
 80075a2:	4908      	ldr	r1, [pc, #32]	; (80075c4 <UARTEx_SetNbDataToProcess+0x98>)
 80075a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	0801ba90 	.word	0x0801ba90
 80075c4:	0801ba98 	.word	0x0801ba98

080075c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075c8:	b084      	sub	sp, #16
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b084      	sub	sp, #16
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	f107 001c 	add.w	r0, r7, #28
 80075d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d120      	bne.n	8007622 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	4b2a      	ldr	r3, [pc, #168]	; (800769c <USB_CoreInit+0xd4>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d105      	bne.n	8007616 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 faa8 	bl	8007b6c <USB_CoreReset>
 800761c:	4603      	mov	r3, r0
 800761e:	73fb      	strb	r3, [r7, #15]
 8007620:	e01a      	b.n	8007658 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68db      	ldr	r3, [r3, #12]
 8007626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa9c 	bl	8007b6c <USB_CoreReset>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d106      	bne.n	800764c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	639a      	str	r2, [r3, #56]	; 0x38
 800764a:	e005      	b.n	8007658 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765a:	2b01      	cmp	r3, #1
 800765c:	d116      	bne.n	800768c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800766c:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <USB_CoreInit+0xd8>)
 800766e:	4313      	orrs	r3, r2
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f043 0206 	orr.w	r2, r3, #6
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	f043 0220 	orr.w	r2, r3, #32
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007698:	b004      	add	sp, #16
 800769a:	4770      	bx	lr
 800769c:	ffbdffbf 	.word	0xffbdffbf
 80076a0:	03ee0000 	.word	0x03ee0000

080076a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f023 0201 	bic.w	r2, r3, #1
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d115      	bne.n	8007714 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076f4:	2001      	movs	r0, #1
 80076f6:	f7f9 fec7 	bl	8001488 <HAL_Delay>
      ms++;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	3301      	adds	r3, #1
 80076fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fa25 	bl	8007b50 <USB_GetMode>
 8007706:	4603      	mov	r3, r0
 8007708:	2b01      	cmp	r3, #1
 800770a:	d01e      	beq.n	800774a <USB_SetCurrentMode+0x84>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b31      	cmp	r3, #49	; 0x31
 8007710:	d9f0      	bls.n	80076f4 <USB_SetCurrentMode+0x2e>
 8007712:	e01a      	b.n	800774a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007714:	78fb      	ldrb	r3, [r7, #3]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d115      	bne.n	8007746 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007726:	2001      	movs	r0, #1
 8007728:	f7f9 feae 	bl	8001488 <HAL_Delay>
      ms++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa0c 	bl	8007b50 <USB_GetMode>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d005      	beq.n	800774a <USB_SetCurrentMode+0x84>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b31      	cmp	r3, #49	; 0x31
 8007742:	d9f0      	bls.n	8007726 <USB_SetCurrentMode+0x60>
 8007744:	e001      	b.n	800774a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e005      	b.n	8007756 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b32      	cmp	r3, #50	; 0x32
 800774e:	d101      	bne.n	8007754 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e000      	b.n	8007756 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
	...

08007760 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007760:	b084      	sub	sp, #16
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800776e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800777a:	2300      	movs	r3, #0
 800777c:	613b      	str	r3, [r7, #16]
 800777e:	e009      	b.n	8007794 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3340      	adds	r3, #64	; 0x40
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	4413      	add	r3, r2
 800778a:	2200      	movs	r2, #0
 800778c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	3301      	adds	r3, #1
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	2b0e      	cmp	r3, #14
 8007798:	d9f2      	bls.n	8007780 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800779a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d11c      	bne.n	80077da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077ae:	f043 0302 	orr.w	r3, r3, #2
 80077b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	e005      	b.n	80077e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077ec:	461a      	mov	r2, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f8:	4619      	mov	r1, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007800:	461a      	mov	r2, r3
 8007802:	680b      	ldr	r3, [r1, #0]
 8007804:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007808:	2b01      	cmp	r3, #1
 800780a:	d10c      	bne.n	8007826 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007812:	2100      	movs	r1, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f961 	bl	8007adc <USB_SetDevSpeed>
 800781a:	e008      	b.n	800782e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800781c:	2101      	movs	r1, #1
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f95c 	bl	8007adc <USB_SetDevSpeed>
 8007824:	e003      	b.n	800782e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007826:	2103      	movs	r1, #3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f957 	bl	8007adc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800782e:	2110      	movs	r1, #16
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f8f3 	bl	8007a1c <USB_FlushTxFifo>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f91d 	bl	8007a80 <USB_FlushRxFifo>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007856:	461a      	mov	r2, r3
 8007858:	2300      	movs	r3, #0
 800785a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007862:	461a      	mov	r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800786e:	461a      	mov	r2, r3
 8007870:	2300      	movs	r3, #0
 8007872:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
 8007878:	e043      	b.n	8007902 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800788c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007890:	d118      	bne.n	80078c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a4:	461a      	mov	r2, r3
 80078a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078aa:	6013      	str	r3, [r2, #0]
 80078ac:	e013      	b.n	80078d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	461a      	mov	r2, r3
 80078bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	e008      	b.n	80078d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	461a      	mov	r2, r3
 80078d2:	2300      	movs	r3, #0
 80078d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e2:	461a      	mov	r2, r3
 80078e4:	2300      	movs	r3, #0
 80078e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	461a      	mov	r2, r3
 80078f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	3301      	adds	r3, #1
 8007900:	613b      	str	r3, [r7, #16]
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	429a      	cmp	r2, r3
 8007908:	d3b7      	bcc.n	800787a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800790a:	2300      	movs	r3, #0
 800790c:	613b      	str	r3, [r7, #16]
 800790e:	e043      	b.n	8007998 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007926:	d118      	bne.n	800795a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d10a      	bne.n	8007944 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	015a      	lsls	r2, r3, #5
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	4413      	add	r3, r2
 8007936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800793a:	461a      	mov	r2, r3
 800793c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007940:	6013      	str	r3, [r2, #0]
 8007942:	e013      	b.n	800796c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	015a      	lsls	r2, r3, #5
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4413      	add	r3, r2
 800794c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007950:	461a      	mov	r2, r3
 8007952:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007956:	6013      	str	r3, [r2, #0]
 8007958:	e008      	b.n	800796c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007966:	461a      	mov	r2, r3
 8007968:	2300      	movs	r3, #0
 800796a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007978:	461a      	mov	r2, r3
 800797a:	2300      	movs	r3, #0
 800797c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	461a      	mov	r2, r3
 800798c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007990:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	3301      	adds	r3, #1
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	693a      	ldr	r2, [r7, #16]
 800799c:	429a      	cmp	r2, r3
 800799e:	d3b7      	bcc.n	8007910 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80079c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80079c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f043 0210 	orr.w	r2, r3, #16
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	4b0e      	ldr	r3, [pc, #56]	; (8007a14 <USB_DevInit+0x2b4>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f043 0208 	orr.w	r2, r3, #8
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d105      	bne.n	8007a04 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699a      	ldr	r2, [r3, #24]
 80079fc:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <USB_DevInit+0x2b8>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a10:	b004      	add	sp, #16
 8007a12:	4770      	bx	lr
 8007a14:	803c3800 	.word	0x803c3800
 8007a18:	40000004 	.word	0x40000004

08007a1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	60fb      	str	r3, [r7, #12]
 8007a30:	4a12      	ldr	r2, [pc, #72]	; (8007a7c <USB_FlushTxFifo+0x60>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d901      	bls.n	8007a3a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e01a      	b.n	8007a70 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	daf3      	bge.n	8007a2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	019b      	lsls	r3, r3, #6
 8007a4a:	f043 0220 	orr.w	r2, r3, #32
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	4a08      	ldr	r2, [pc, #32]	; (8007a7c <USB_FlushTxFifo+0x60>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d901      	bls.n	8007a62 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e006      	b.n	8007a70 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	d0f1      	beq.n	8007a52 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3714      	adds	r7, #20
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr
 8007a7c:	00030d40 	.word	0x00030d40

08007a80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	4a11      	ldr	r2, [pc, #68]	; (8007ad8 <USB_FlushRxFifo+0x58>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d901      	bls.n	8007a9c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e017      	b.n	8007acc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	daf3      	bge.n	8007a8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2210      	movs	r2, #16
 8007aac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	60fb      	str	r3, [r7, #12]
 8007ab4:	4a08      	ldr	r2, [pc, #32]	; (8007ad8 <USB_FlushRxFifo+0x58>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d901      	bls.n	8007abe <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e006      	b.n	8007acc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	f003 0310 	and.w	r3, r3, #16
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d0f1      	beq.n	8007aae <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr
 8007ad8:	00030d40 	.word	0x00030d40

08007adc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	460b      	mov	r3, r1
 8007ae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007afc:	4313      	orrs	r3, r2
 8007afe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b28:	f023 0303 	bic.w	r3, r3, #3
 8007b2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b3c:	f043 0302 	orr.w	r3, r3, #2
 8007b40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
 8007b7e:	4a13      	ldr	r2, [pc, #76]	; (8007bcc <USB_CoreReset+0x60>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d901      	bls.n	8007b88 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e01a      	b.n	8007bbe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	daf3      	bge.n	8007b78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f043 0201 	orr.w	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	60fb      	str	r3, [r7, #12]
 8007ba6:	4a09      	ldr	r2, [pc, #36]	; (8007bcc <USB_CoreReset+0x60>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d901      	bls.n	8007bb0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e006      	b.n	8007bbe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	f003 0301 	and.w	r3, r3, #1
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d0f1      	beq.n	8007ba0 <USB_CoreReset+0x34>

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	00030d40 	.word	0x00030d40

08007bd0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007bd0:	b5b0      	push	{r4, r5, r7, lr}
 8007bd2:	b08c      	sub	sp, #48	; 0x30
 8007bd4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	2000      	movs	r0, #0
 8007bda:	f003 fd07 	bl	800b5ec <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007bde:	4b20      	ldr	r3, [pc, #128]	; (8007c60 <MX_LWIP_Init+0x90>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007be4:	4b1f      	ldr	r3, [pc, #124]	; (8007c64 <MX_LWIP_Init+0x94>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007bea:	4b1f      	ldr	r3, [pc, #124]	; (8007c68 <MX_LWIP_Init+0x98>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007bf0:	4b1e      	ldr	r3, [pc, #120]	; (8007c6c <MX_LWIP_Init+0x9c>)
 8007bf2:	9302      	str	r3, [sp, #8]
 8007bf4:	4b1e      	ldr	r3, [pc, #120]	; (8007c70 <MX_LWIP_Init+0xa0>)
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4b1a      	ldr	r3, [pc, #104]	; (8007c68 <MX_LWIP_Init+0x98>)
 8007bfe:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <MX_LWIP_Init+0x94>)
 8007c00:	4917      	ldr	r1, [pc, #92]	; (8007c60 <MX_LWIP_Init+0x90>)
 8007c02:	481c      	ldr	r0, [pc, #112]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c04:	f004 fb74 	bl	800c2f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007c08:	481a      	ldr	r0, [pc, #104]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c0a:	f004 fd2b 	bl	800c664 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007c0e:	4b19      	ldr	r3, [pc, #100]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c10:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007c14:	089b      	lsrs	r3, r3, #2
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d003      	beq.n	8007c28 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007c20:	4814      	ldr	r0, [pc, #80]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c22:	f004 fd2f 	bl	800c684 <netif_set_up>
 8007c26:	e002      	b.n	8007c2e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007c28:	4812      	ldr	r0, [pc, #72]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c2a:	f004 fd97 	bl	800c75c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007c2e:	4912      	ldr	r1, [pc, #72]	; (8007c78 <MX_LWIP_Init+0xa8>)
 8007c30:	4810      	ldr	r0, [pc, #64]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c32:	f004 fe2d 	bl	800c890 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <MX_LWIP_Init+0xac>)
 8007c38:	1d3c      	adds	r4, r7, #4
 8007c3a:	461d      	mov	r5, r3
 8007c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007c48:	1d3b      	adds	r3, r7, #4
 8007c4a:	490a      	ldr	r1, [pc, #40]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fcbc 	bl	80085ca <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007c52:	4808      	ldr	r0, [pc, #32]	; (8007c74 <MX_LWIP_Init+0xa4>)
 8007c54:	f00b ff80 	bl	8013b58 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007c58:	bf00      	nop
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c60:	2400a424 	.word	0x2400a424
 8007c64:	2400a428 	.word	0x2400a428
 8007c68:	2400a42c 	.word	0x2400a42c
 8007c6c:	0800b529 	.word	0x0800b529
 8007c70:	08008315 	.word	0x08008315
 8007c74:	2400a3ec 	.word	0x2400a3ec
 8007c78:	08007c81 	.word	0x08007c81
 8007c7c:	08018ba4 	.word	0x08018ba4

08007c80 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b08e      	sub	sp, #56	; 0x38
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	605a      	str	r2, [r3, #4]
 8007ca6:	609a      	str	r2, [r3, #8]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a59      	ldr	r2, [pc, #356]	; (8007e18 <HAL_ETH_MspInit+0x184>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	f040 80ab 	bne.w	8007e0e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007cb8:	4b58      	ldr	r3, [pc, #352]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cbe:	4a57      	ldr	r2, [pc, #348]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007cc8:	4b54      	ldr	r3, [pc, #336]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd2:	623b      	str	r3, [r7, #32]
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007cd6:	4b51      	ldr	r3, [pc, #324]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cdc:	4a4f      	ldr	r2, [pc, #316]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ce2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007ce6:	4b4d      	ldr	r3, [pc, #308]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cf0:	61fb      	str	r3, [r7, #28]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007cf4:	4b49      	ldr	r3, [pc, #292]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007cfa:	4a48      	ldr	r2, [pc, #288]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007d04:	4b45      	ldr	r3, [pc, #276]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d12:	4b42      	ldr	r3, [pc, #264]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d18:	4a40      	ldr	r2, [pc, #256]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d1a:	f043 0304 	orr.w	r3, r3, #4
 8007d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d22:	4b3e      	ldr	r3, [pc, #248]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d30:	4b3a      	ldr	r3, [pc, #232]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d36:	4a39      	ldr	r2, [pc, #228]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d40:	4b36      	ldr	r3, [pc, #216]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d4e:	4b33      	ldr	r3, [pc, #204]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d54:	4a31      	ldr	r2, [pc, #196]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d56:	f043 0302 	orr.w	r3, r3, #2
 8007d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d5e:	4b2f      	ldr	r3, [pc, #188]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007d6c:	4b2b      	ldr	r3, [pc, #172]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d72:	4a2a      	ldr	r2, [pc, #168]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007d7c:	4b27      	ldr	r3, [pc, #156]	; (8007e1c <HAL_ETH_MspInit+0x188>)
 8007d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007d8a:	2332      	movs	r3, #50	; 0x32
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d8e:	2302      	movs	r3, #2
 8007d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d96:	2300      	movs	r3, #0
 8007d98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007d9a:	230b      	movs	r3, #11
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007da2:	4619      	mov	r1, r3
 8007da4:	481e      	ldr	r0, [pc, #120]	; (8007e20 <HAL_ETH_MspInit+0x18c>)
 8007da6:	f7fb fa15 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007daa:	2386      	movs	r3, #134	; 0x86
 8007dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dae:	2302      	movs	r3, #2
 8007db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007db6:	2300      	movs	r3, #0
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007dba:	230b      	movs	r3, #11
 8007dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4817      	ldr	r0, [pc, #92]	; (8007e24 <HAL_ETH_MspInit+0x190>)
 8007dc6:	f7fb fa05 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007dca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ddc:	230b      	movs	r3, #11
 8007dde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007de4:	4619      	mov	r1, r3
 8007de6:	4810      	ldr	r0, [pc, #64]	; (8007e28 <HAL_ETH_MspInit+0x194>)
 8007de8:	f7fb f9f4 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007dec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007df0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007df2:	2302      	movs	r3, #2
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007df6:	2300      	movs	r3, #0
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007dfe:	230b      	movs	r3, #11
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e06:	4619      	mov	r1, r3
 8007e08:	4808      	ldr	r0, [pc, #32]	; (8007e2c <HAL_ETH_MspInit+0x198>)
 8007e0a:	f7fb f9e3 	bl	80031d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007e0e:	bf00      	nop
 8007e10:	3738      	adds	r7, #56	; 0x38
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	40028000 	.word	0x40028000
 8007e1c:	58024400 	.word	0x58024400
 8007e20:	58020800 	.word	0x58020800
 8007e24:	58020000 	.word	0x58020000
 8007e28:	58020400 	.word	0x58020400
 8007e2c:	58021800 	.word	0x58021800

08007e30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e30:	b5b0      	push	{r4, r5, r7, lr}
 8007e32:	b0ac      	sub	sp, #176	; 0xb0
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007e4a:	4b91      	ldr	r3, [pc, #580]	; (8008090 <low_level_init+0x260>)
 8007e4c:	4a91      	ldr	r2, [pc, #580]	; (8008094 <low_level_init+0x264>)
 8007e4e:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007e50:	2300      	movs	r3, #0
 8007e52:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007e56:	2380      	movs	r3, #128	; 0x80
 8007e58:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8007e5c:	23e1      	movs	r3, #225	; 0xe1
 8007e5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007e62:	2300      	movs	r3, #0
 8007e64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007e74:	4a86      	ldr	r2, [pc, #536]	; (8008090 <low_level_init+0x260>)
 8007e76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e7a:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007e7c:	4b84      	ldr	r3, [pc, #528]	; (8008090 <low_level_init+0x260>)
 8007e7e:	2201      	movs	r2, #1
 8007e80:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007e82:	4b83      	ldr	r3, [pc, #524]	; (8008090 <low_level_init+0x260>)
 8007e84:	4a84      	ldr	r2, [pc, #528]	; (8008098 <low_level_init+0x268>)
 8007e86:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007e88:	4b81      	ldr	r3, [pc, #516]	; (8008090 <low_level_init+0x260>)
 8007e8a:	4a84      	ldr	r2, [pc, #528]	; (800809c <low_level_init+0x26c>)
 8007e8c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8007e8e:	4b80      	ldr	r3, [pc, #512]	; (8008090 <low_level_init+0x260>)
 8007e90:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007e94:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007e96:	487e      	ldr	r0, [pc, #504]	; (8008090 <low_level_init+0x260>)
 8007e98:	f7f9 fc1a 	bl	80016d0 <HAL_ETH_Init>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007ea2:	2234      	movs	r2, #52	; 0x34
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	487e      	ldr	r0, [pc, #504]	; (80080a0 <low_level_init+0x270>)
 8007ea8:	f00f fec3 	bl	8017c32 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007eac:	4b7c      	ldr	r3, [pc, #496]	; (80080a0 <low_level_init+0x270>)
 8007eae:	2221      	movs	r2, #33	; 0x21
 8007eb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007eb2:	4b7b      	ldr	r3, [pc, #492]	; (80080a0 <low_level_init+0x270>)
 8007eb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007eb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007eba:	4b79      	ldr	r3, [pc, #484]	; (80080a0 <low_level_init+0x270>)
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007ec0:	4878      	ldr	r0, [pc, #480]	; (80080a4 <low_level_init+0x274>)
 8007ec2:	f004 f8cf 	bl	800c064 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2206      	movs	r2, #6
 8007eca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007ece:	4b70      	ldr	r3, [pc, #448]	; (8008090 <low_level_init+0x260>)
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007eda:	4b6d      	ldr	r3, [pc, #436]	; (8008090 <low_level_init+0x260>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	785a      	ldrb	r2, [r3, #1]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007ee6:	4b6a      	ldr	r3, [pc, #424]	; (8008090 <low_level_init+0x260>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	789a      	ldrb	r2, [r3, #2]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007ef2:	4b67      	ldr	r3, [pc, #412]	; (8008090 <low_level_init+0x260>)
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	78da      	ldrb	r2, [r3, #3]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007efe:	4b64      	ldr	r3, [pc, #400]	; (8008090 <low_level_init+0x260>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	791a      	ldrb	r2, [r3, #4]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f0a:	4b61      	ldr	r3, [pc, #388]	; (8008090 <low_level_init+0x260>)
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	795a      	ldrb	r2, [r3, #5]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f1c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f24:	f043 030a 	orr.w	r3, r3, #10
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8007f30:	2300      	movs	r3, #0
 8007f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f36:	e012      	b.n	8007f5e <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8007f38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007f40:	fb02 f303 	mul.w	r3, r2, r3
 8007f44:	4a58      	ldr	r2, [pc, #352]	; (80080a8 <low_level_init+0x278>)
 8007f46:	441a      	add	r2, r3
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8007f4e:	4850      	ldr	r0, [pc, #320]	; (8008090 <low_level_init+0x260>)
 8007f50:	f7f9 fc98 	bl	8001884 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8007f54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f58:	3301      	adds	r3, #1
 8007f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d9e8      	bls.n	8007f38 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8007f66:	2300      	movs	r3, #0
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 8007f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f72:	2101      	movs	r1, #1
 8007f74:	4618      	mov	r0, r3
 8007f76:	f000 fc25 	bl	80087c4 <osSemaphoreCreate>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	4a4b      	ldr	r2, [pc, #300]	; (80080ac <low_level_init+0x27c>)
 8007f7e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007f80:	4b4b      	ldr	r3, [pc, #300]	; (80080b0 <low_level_init+0x280>)
 8007f82:	f107 040c 	add.w	r4, r7, #12
 8007f86:	461d      	mov	r5, r3
 8007f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007f90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007f94:	f107 030c 	add.w	r3, r7, #12
 8007f98:	6879      	ldr	r1, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 fb15 	bl	80085ca <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007fa0:	4944      	ldr	r1, [pc, #272]	; (80080b4 <low_level_init+0x284>)
 8007fa2:	4845      	ldr	r0, [pc, #276]	; (80080b8 <low_level_init+0x288>)
 8007fa4:	f7f9 f8b3 	bl	800110e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007fa8:	4843      	ldr	r0, [pc, #268]	; (80080b8 <low_level_init+0x288>)
 8007faa:	f7f9 f8e2 	bl	8001172 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007fae:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d165      	bne.n	8008082 <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007fb6:	4840      	ldr	r0, [pc, #256]	; (80080b8 <low_level_init+0x288>)
 8007fb8:	f7f9 f983 	bl	80012c2 <LAN8742_GetLinkState>
 8007fbc:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007fc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	dc06      	bgt.n	8007fd6 <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f004 fc31 	bl	800c830 <netif_set_link_down>
      netif_set_down(netif);
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f004 fbc4 	bl	800c75c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007fd4:	e057      	b.n	8008086 <low_level_init+0x256>
 8007fd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fda:	3b02      	subs	r3, #2
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d82b      	bhi.n	8008038 <low_level_init+0x208>
 8007fe0:	a201      	add	r2, pc, #4	; (adr r2, 8007fe8 <low_level_init+0x1b8>)
 8007fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fe6:	bf00      	nop
 8007fe8:	08007ff9 	.word	0x08007ff9
 8007fec:	0800800b 	.word	0x0800800b
 8007ff0:	0800801b 	.word	0x0800801b
 8007ff4:	0800802b 	.word	0x0800802b
        duplex = ETH_FULLDUPLEX_MODE;
 8007ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008000:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008008:	e01f      	b.n	800804a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800800a:	2300      	movs	r3, #0
 800800c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008018:	e017      	b.n	800804a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800801a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800801e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008022:	2300      	movs	r3, #0
 8008024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008028:	e00f      	b.n	800804a <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800802a:	2300      	movs	r3, #0
 800802c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 8008030:	2300      	movs	r3, #0
 8008032:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008036:	e008      	b.n	800804a <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 8008038:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800803c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 8008040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 8008048:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800804a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800804e:	4619      	mov	r1, r3
 8008050:	480f      	ldr	r0, [pc, #60]	; (8008090 <low_level_init+0x260>)
 8008052:	f7fa f8bf 	bl	80021d4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8008056:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800805a:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800805c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008060:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008066:	4619      	mov	r1, r3
 8008068:	4809      	ldr	r0, [pc, #36]	; (8008090 <low_level_init+0x260>)
 800806a:	f7fa fa87 	bl	800257c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800806e:	4808      	ldr	r0, [pc, #32]	; (8008090 <low_level_init+0x260>)
 8008070:	f7f9 fc49 	bl	8001906 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f004 fb05 	bl	800c684 <netif_set_up>
    netif_set_link_up(netif);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f004 fba0 	bl	800c7c0 <netif_set_link_up>
}
 8008080:	e001      	b.n	8008086 <low_level_init+0x256>
    Error_Handler();
 8008082:	f7f8 fd43 	bl	8000b0c <Error_Handler>
}
 8008086:	bf00      	nop
 8008088:	37b0      	adds	r7, #176	; 0xb0
 800808a:	46bd      	mov	sp, r7
 800808c:	bdb0      	pop	{r4, r5, r7, pc}
 800808e:	bf00      	nop
 8008090:	2400a51c 	.word	0x2400a51c
 8008094:	40028000 	.word	0x40028000
 8008098:	240000fc 	.word	0x240000fc
 800809c:	2400009c 	.word	0x2400009c
 80080a0:	2400a5a4 	.word	0x2400a5a4
 80080a4:	0801baa0 	.word	0x0801baa0
 80080a8:	2400015c 	.word	0x2400015c
 80080ac:	24001c00 	.word	0x24001c00
 80080b0:	08018bc8 	.word	0x08018bc8
 80080b4:	24000010 	.word	0x24000010
 80080b8:	2400a4fc 	.word	0x2400a4fc

080080bc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b092      	sub	sp, #72	; 0x48
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 80080c6:	2300      	movs	r3, #0
 80080c8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80080d0:	f107 030c 	add.w	r3, r7, #12
 80080d4:	2230      	movs	r2, #48	; 0x30
 80080d6:	2100      	movs	r1, #0
 80080d8:	4618      	mov	r0, r3
 80080da:	f00f fdaa 	bl	8017c32 <memset>

  for(q = p; q != NULL; q = q->next)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	643b      	str	r3, [r7, #64]	; 0x40
 80080e2:	e049      	b.n	8008178 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 80080e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d902      	bls.n	80080f0 <low_level_output+0x34>
      return ERR_IF;
 80080ea:	f06f 030b 	mvn.w	r3, #11
 80080ee:	e056      	b.n	800819e <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 80080f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f2:	6859      	ldr	r1, [r3, #4]
 80080f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f6:	4613      	mov	r3, r2
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	4413      	add	r3, r2
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008102:	4413      	add	r3, r2
 8008104:	3b3c      	subs	r3, #60	; 0x3c
 8008106:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800810a:	895b      	ldrh	r3, [r3, #10]
 800810c:	4619      	mov	r1, r3
 800810e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008110:	4613      	mov	r3, r2
 8008112:	005b      	lsls	r3, r3, #1
 8008114:	4413      	add	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800811c:	4413      	add	r3, r2
 800811e:	3b38      	subs	r3, #56	; 0x38
 8008120:	6019      	str	r1, [r3, #0]

    if(i>0)
 8008122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008124:	2b00      	cmp	r3, #0
 8008126:	d012      	beq.n	800814e <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800812a:	1e5a      	subs	r2, r3, #1
 800812c:	f107 000c 	add.w	r0, r7, #12
 8008130:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008132:	460b      	mov	r3, r1
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	440b      	add	r3, r1
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	18c1      	adds	r1, r0, r3
 800813c:	4613      	mov	r3, r2
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008148:	4413      	add	r3, r2
 800814a:	3b34      	subs	r3, #52	; 0x34
 800814c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800814e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 8008156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008158:	4613      	mov	r3, r2
 800815a:	005b      	lsls	r3, r3, #1
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008164:	4413      	add	r3, r2
 8008166:	3b34      	subs	r3, #52	; 0x34
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]
    }

    i++;
 800816c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800816e:	3301      	adds	r3, #1
 8008170:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	643b      	str	r3, [r7, #64]	; 0x40
 8008178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d1b2      	bne.n	80080e4 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	891b      	ldrh	r3, [r3, #8]
 8008182:	461a      	mov	r2, r3
 8008184:	4b08      	ldr	r3, [pc, #32]	; (80081a8 <low_level_output+0xec>)
 8008186:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8008188:	4a07      	ldr	r2, [pc, #28]	; (80081a8 <low_level_output+0xec>)
 800818a:	f107 030c 	add.w	r3, r7, #12
 800818e:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8008190:	2214      	movs	r2, #20
 8008192:	4905      	ldr	r1, [pc, #20]	; (80081a8 <low_level_output+0xec>)
 8008194:	4805      	ldr	r0, [pc, #20]	; (80081ac <low_level_output+0xf0>)
 8008196:	f7f9 fcb5 	bl	8001b04 <HAL_ETH_Transmit>

  return errval;
 800819a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3748      	adds	r7, #72	; 0x48
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	2400a5a4 	.word	0x2400a5a4
 80081ac:	2400a51c 	.word	0x2400a51c

080081b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b098      	sub	sp, #96	; 0x60
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80081b8:	2300      	movs	r3, #0
 80081ba:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	2300      	movs	r3, #0
 80081c2:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80081c4:	f107 030c 	add.w	r3, r7, #12
 80081c8:	2230      	movs	r2, #48	; 0x30
 80081ca:	2100      	movs	r1, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f00f fd30 	bl	8017c32 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80081d2:	2300      	movs	r3, #0
 80081d4:	653b      	str	r3, [r7, #80]	; 0x50
 80081d6:	e015      	b.n	8008204 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 80081d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	f107 010c 	add.w	r1, r7, #12
 80081e0:	4613      	mov	r3, r2
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4419      	add	r1, r3
 80081ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80081ec:	4613      	mov	r3, r2
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80081f8:	4413      	add	r3, r2
 80081fa:	3b44      	subs	r3, #68	; 0x44
 80081fc:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80081fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008200:	3301      	adds	r3, #1
 8008202:	653b      	str	r3, [r7, #80]	; 0x50
 8008204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008206:	2b02      	cmp	r3, #2
 8008208:	d9e6      	bls.n	80081d8 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800820a:	f107 030c 	add.w	r3, r7, #12
 800820e:	4619      	mov	r1, r3
 8008210:	4828      	ldr	r0, [pc, #160]	; (80082b4 <low_level_input+0x104>)
 8008212:	f7f9 fdf0 	bl	8001df6 <HAL_ETH_GetRxDataBuffer>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d145      	bne.n	80082a8 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800821c:	f107 0308 	add.w	r3, r7, #8
 8008220:	4619      	mov	r1, r3
 8008222:	4824      	ldr	r0, [pc, #144]	; (80082b4 <low_level_input+0x104>)
 8008224:	f7f9 fe85 	bl	8001f32 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 8008228:	4822      	ldr	r0, [pc, #136]	; (80082b4 <low_level_input+0x104>)
 800822a:	f7f9 feb5 	bl	8001f98 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	64bb      	str	r3, [r7, #72]	; 0x48
 8008234:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8008236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008238:	2b00      	cmp	r3, #0
 800823a:	dd1d      	ble.n	8008278 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800823c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823e:	f003 021f 	and.w	r2, r3, #31
 8008242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008244:	4413      	add	r3, r2
 8008246:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800824a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800824c:	f3bf 8f4f 	dsb	sy
}
 8008250:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008252:	4a19      	ldr	r2, [pc, #100]	; (80082b8 <low_level_input+0x108>)
 8008254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008256:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800825a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825c:	3320      	adds	r3, #32
 800825e:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008262:	3b20      	subs	r3, #32
 8008264:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	dcf2      	bgt.n	8008252 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800826c:	f3bf 8f4f 	dsb	sy
}
 8008270:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008272:	f3bf 8f6f 	isb	sy
}
 8008276:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008278:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800827a:	4810      	ldr	r0, [pc, #64]	; (80082bc <low_level_input+0x10c>)
 800827c:	f003 ff6e 	bl	800c15c <memp_malloc_pool>
 8008280:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8008282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00f      	beq.n	80082a8 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8008288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800828a:	4a0d      	ldr	r2, [pc, #52]	; (80082c0 <low_level_input+0x110>)
 800828c:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	b299      	uxth	r1, r3
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	b292      	uxth	r2, r2
 8008298:	9201      	str	r2, [sp, #4]
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800829e:	2241      	movs	r2, #65	; 0x41
 80082a0:	2000      	movs	r0, #0
 80082a2:	f004 fce9 	bl	800cc78 <pbuf_alloced_custom>
 80082a6:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 80082a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3758      	adds	r7, #88	; 0x58
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	2400a51c 	.word	0x2400a51c
 80082b8:	e000ed00 	.word	0xe000ed00
 80082bc:	0801baa0 	.word	0x0801baa0
 80082c0:	08008371 	.word	0x08008371

080082c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80082d0:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <ethernetif_input+0x4c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80082d8:	4618      	mov	r0, r3
 80082da:	f000 faa5 	bl	8008828 <osSemaphoreWait>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d1f5      	bne.n	80082d0 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f7ff ff63 	bl	80081b0 <low_level_input>
 80082ea:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	68f9      	ldr	r1, [r7, #12]
 80082f8:	68b8      	ldr	r0, [r7, #8]
 80082fa:	4798      	blx	r3
 80082fc:	4603      	mov	r3, r0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d002      	beq.n	8008308 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8008302:	68b8      	ldr	r0, [r7, #8]
 8008304:	f004 fe72 	bl	800cfec <pbuf_free>
          }
        }
      } while(p!=NULL);
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1ea      	bne.n	80082e4 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800830e:	e7df      	b.n	80082d0 <ethernetif_input+0xc>
 8008310:	24001c00 	.word	0x24001c00

08008314 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <ethernetif_init+0x1c>
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <ethernetif_init+0x48>)
 8008324:	f240 2242 	movw	r2, #578	; 0x242
 8008328:	490d      	ldr	r1, [pc, #52]	; (8008360 <ethernetif_init+0x4c>)
 800832a:	480e      	ldr	r0, [pc, #56]	; (8008364 <ethernetif_init+0x50>)
 800832c:	f00f fce4 	bl	8017cf8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2273      	movs	r2, #115	; 0x73
 8008334:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2274      	movs	r2, #116	; 0x74
 800833c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a09      	ldr	r2, [pc, #36]	; (8008368 <ethernetif_init+0x54>)
 8008344:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a08      	ldr	r2, [pc, #32]	; (800836c <ethernetif_init+0x58>)
 800834a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f7ff fd6f 	bl	8007e30 <low_level_init>

  return ERR_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	08018be4 	.word	0x08018be4
 8008360:	08018c00 	.word	0x08018c00
 8008364:	08018c10 	.word	0x08018c10
 8008368:	08015a25 	.word	0x08015a25
 800836c:	080080bd 	.word	0x080080bd

08008370 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800837c:	68f9      	ldr	r1, [r7, #12]
 800837e:	4803      	ldr	r0, [pc, #12]	; (800838c <pbuf_free_custom+0x1c>)
 8008380:	f003 ff60 	bl	800c244 <memp_free_pool>
}
 8008384:	bf00      	nop
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}
 800838c:	0801baa0 	.word	0x0801baa0

08008390 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008394:	f7f9 f86c 	bl	8001470 <HAL_GetTick>
 8008398:	4603      	mov	r3, r0
}
 800839a:	4618      	mov	r0, r3
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80083a4:	4802      	ldr	r0, [pc, #8]	; (80083b0 <ETH_PHY_IO_Init+0x10>)
 80083a6:	f7fa f903 	bl	80025b0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	2400a51c 	.word	0x2400a51c

080083b4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	af00      	add	r7, sp, #0
  return 0;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	68f9      	ldr	r1, [r7, #12]
 80083d6:	4807      	ldr	r0, [pc, #28]	; (80083f4 <ETH_PHY_IO_ReadReg+0x30>)
 80083d8:	f7f9 fe54 	bl	8002084 <HAL_ETH_ReadPHYRegister>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e6:	e000      	b.n	80083ea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
 80083f2:	bf00      	nop
 80083f4:	2400a51c 	.word	0x2400a51c

080083f8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	68f9      	ldr	r1, [r7, #12]
 800840a:	4807      	ldr	r0, [pc, #28]	; (8008428 <ETH_PHY_IO_WriteReg+0x30>)
 800840c:	f7f9 fe8e 	bl	800212c <HAL_ETH_WritePHYRegister>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800841a:	e000      	b.n	800841e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	2400a51c 	.word	0x2400a51c

0800842c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008430:	f7f9 f81e 	bl	8001470 <HAL_GetTick>
 8008434:	4603      	mov	r3, r0
}
 8008436:	4618      	mov	r0, r3
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b0a0      	sub	sp, #128	; 0x80
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8008444:	2300      	movs	r3, #0
 8008446:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008448:	2300      	movs	r3, #0
 800844a:	67bb      	str	r3, [r7, #120]	; 0x78
 800844c:	2300      	movs	r3, #0
 800844e:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008454:	483a      	ldr	r0, [pc, #232]	; (8008540 <ethernet_link_thread+0x104>)
 8008456:	f7f8 ff34 	bl	80012c2 <LAN8742_GetLinkState>
 800845a:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800845c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800845e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008462:	089b      	lsrs	r3, r3, #2
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	b2db      	uxtb	r3, r3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00c      	beq.n	8008488 <ethernet_link_thread+0x4c>
 800846e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008470:	2b01      	cmp	r3, #1
 8008472:	dc09      	bgt.n	8008488 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 8008474:	4833      	ldr	r0, [pc, #204]	; (8008544 <ethernet_link_thread+0x108>)
 8008476:	f7f9 facb 	bl	8001a10 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800847a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800847c:	f004 f96e 	bl	800c75c <netif_set_down>
    netif_set_link_down(netif);
 8008480:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008482:	f004 f9d5 	bl	800c830 <netif_set_link_down>
 8008486:	e056      	b.n	8008536 <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800848a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800848e:	f003 0304 	and.w	r3, r3, #4
 8008492:	2b00      	cmp	r3, #0
 8008494:	d14f      	bne.n	8008536 <ethernet_link_thread+0xfa>
 8008496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008498:	2b01      	cmp	r3, #1
 800849a:	dd4c      	ble.n	8008536 <ethernet_link_thread+0xfa>
 800849c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849e:	3b02      	subs	r3, #2
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d82b      	bhi.n	80084fc <ethernet_link_thread+0xc0>
 80084a4:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <ethernet_link_thread+0x70>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084bd 	.word	0x080084bd
 80084b0:	080084cf 	.word	0x080084cf
 80084b4:	080084df 	.word	0x080084df
 80084b8:	080084ef 	.word	0x080084ef
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80084bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084c0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80084c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80084c8:	2301      	movs	r3, #1
 80084ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80084cc:	e017      	b.n	80084fe <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80084ce:	2300      	movs	r3, #0
 80084d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80084d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80084d8:	2301      	movs	r3, #1
 80084da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80084dc:	e00f      	b.n	80084fe <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80084de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084e2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80084e4:	2300      	movs	r3, #0
 80084e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80084e8:	2301      	movs	r3, #1
 80084ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80084ec:	e007      	b.n	80084fe <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80084f2:	2300      	movs	r3, #0
 80084f4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80084f6:	2301      	movs	r3, #1
 80084f8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80084fa:	e000      	b.n	80084fe <ethernet_link_thread+0xc2>
    default:
      break;
 80084fc:	bf00      	nop
    }

    if(linkchanged)
 80084fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d018      	beq.n	8008536 <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008504:	f107 0308 	add.w	r3, r7, #8
 8008508:	4619      	mov	r1, r3
 800850a:	480e      	ldr	r0, [pc, #56]	; (8008544 <ethernet_link_thread+0x108>)
 800850c:	f7f9 fe62 	bl	80021d4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8008510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008512:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008516:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	4619      	mov	r1, r3
 800851e:	4809      	ldr	r0, [pc, #36]	; (8008544 <ethernet_link_thread+0x108>)
 8008520:	f7fa f82c 	bl	800257c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8008524:	4807      	ldr	r0, [pc, #28]	; (8008544 <ethernet_link_thread+0x108>)
 8008526:	f7f9 f9ee 	bl	8001906 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800852a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800852c:	f004 f8aa 	bl	800c684 <netif_set_up>
      netif_set_link_up(netif);
 8008530:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008532:	f004 f945 	bl	800c7c0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008536:	2064      	movs	r0, #100	; 0x64
 8008538:	f000 f893 	bl	8008662 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800853c:	e78a      	b.n	8008454 <ethernet_link_thread+0x18>
 800853e:	bf00      	nop
 8008540:	2400a4fc 	.word	0x2400a4fc
 8008544:	2400a51c 	.word	0x2400a51c

08008548 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008552:	2300      	movs	r3, #0
 8008554:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800855a:	2b84      	cmp	r3, #132	; 0x84
 800855c:	d005      	beq.n	800856a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800855e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	4413      	add	r3, r2
 8008566:	3303      	adds	r3, #3
 8008568:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800856a:	68fb      	ldr	r3, [r7, #12]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800857e:	f3ef 8305 	mrs	r3, IPSR
 8008582:	607b      	str	r3, [r7, #4]
  return(result);
 8008584:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008586:	2b00      	cmp	r3, #0
 8008588:	bf14      	ite	ne
 800858a:	2301      	movne	r3, #1
 800858c:	2300      	moveq	r3, #0
 800858e:	b2db      	uxtb	r3, r3
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80085a0:	f001 fc3e 	bl	8009e20 <vTaskStartScheduler>
  
  return osOK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	bd80      	pop	{r7, pc}

080085aa <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80085ae:	f7ff ffe3 	bl	8008578 <inHandlerMode>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d003      	beq.n	80085c0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80085b8:	f001 fd56 	bl	800a068 <xTaskGetTickCountFromISR>
 80085bc:	4603      	mov	r3, r0
 80085be:	e002      	b.n	80085c6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80085c0:	f001 fd42 	bl	800a048 <xTaskGetTickCount>
 80085c4:	4603      	mov	r3, r0
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	bd80      	pop	{r7, pc}

080085ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80085ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085cc:	b089      	sub	sp, #36	; 0x24
 80085ce:	af04      	add	r7, sp, #16
 80085d0:	6078      	str	r0, [r7, #4]
 80085d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d020      	beq.n	800861e <osThreadCreate+0x54>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d01c      	beq.n	800861e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685c      	ldr	r4, [r3, #4]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681d      	ldr	r5, [r3, #0]
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691e      	ldr	r6, [r3, #16]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7ff ffa6 	bl	8008548 <makeFreeRtosPriority>
 80085fc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008606:	9202      	str	r2, [sp, #8]
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	9100      	str	r1, [sp, #0]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	4632      	mov	r2, r6
 8008610:	4629      	mov	r1, r5
 8008612:	4620      	mov	r0, r4
 8008614:	f001 fa26 	bl	8009a64 <xTaskCreateStatic>
 8008618:	4603      	mov	r3, r0
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	e01c      	b.n	8008658 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685c      	ldr	r4, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800862a:	b29e      	uxth	r6, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008632:	4618      	mov	r0, r3
 8008634:	f7ff ff88 	bl	8008548 <makeFreeRtosPriority>
 8008638:	4602      	mov	r2, r0
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	9301      	str	r3, [sp, #4]
 8008640:	9200      	str	r2, [sp, #0]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	4632      	mov	r2, r6
 8008646:	4629      	mov	r1, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f001 fa68 	bl	8009b1e <xTaskCreate>
 800864e:	4603      	mov	r3, r0
 8008650:	2b01      	cmp	r3, #1
 8008652:	d001      	beq.n	8008658 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008654:	2300      	movs	r3, #0
 8008656:	e000      	b.n	800865a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008658:	68fb      	ldr	r3, [r7, #12]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008662 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <osDelay+0x16>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	e000      	b.n	800867a <osDelay+0x18>
 8008678:	2301      	movs	r3, #1
 800867a:	4618      	mov	r0, r3
 800867c:	f001 fb9c 	bl	8009db8 <vTaskDelay>
  
  return osOK;
 8008680:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008682:	4618      	mov	r0, r3
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d007      	beq.n	80086aa <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	4619      	mov	r1, r3
 80086a0:	2001      	movs	r0, #1
 80086a2:	f000 fc0a 	bl	8008eba <xQueueCreateMutexStatic>
 80086a6:	4603      	mov	r3, r0
 80086a8:	e003      	b.n	80086b2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80086aa:	2001      	movs	r0, #1
 80086ac:	f000 fbed 	bl	8008e8a <xQueueCreateMutex>
 80086b0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3708      	adds	r7, #8
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
	...

080086bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80086c6:	2300      	movs	r3, #0
 80086c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <osMutexWait+0x18>
    return osErrorParameter;
 80086d0:	2380      	movs	r3, #128	; 0x80
 80086d2:	e03a      	b.n	800874a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80086d4:	2300      	movs	r3, #0
 80086d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086de:	d103      	bne.n	80086e8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80086e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80086e4:	60fb      	str	r3, [r7, #12]
 80086e6:	e009      	b.n	80086fc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d006      	beq.n	80086fc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <osMutexWait+0x40>
      ticks = 1;
 80086f8:	2301      	movs	r3, #1
 80086fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80086fc:	f7ff ff3c 	bl	8008578 <inHandlerMode>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	d017      	beq.n	8008736 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008706:	f107 0308 	add.w	r3, r7, #8
 800870a:	461a      	mov	r2, r3
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f001 f800 	bl	8009714 <xQueueReceiveFromISR>
 8008714:	4603      	mov	r3, r0
 8008716:	2b01      	cmp	r3, #1
 8008718:	d001      	beq.n	800871e <osMutexWait+0x62>
      return osErrorOS;
 800871a:	23ff      	movs	r3, #255	; 0xff
 800871c:	e015      	b.n	800874a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d011      	beq.n	8008748 <osMutexWait+0x8c>
 8008724:	4b0b      	ldr	r3, [pc, #44]	; (8008754 <osMutexWait+0x98>)
 8008726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872a:	601a      	str	r2, [r3, #0]
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	e008      	b.n	8008748 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008736:	68f9      	ldr	r1, [r7, #12]
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fedf 	bl	80094fc <xQueueSemaphoreTake>
 800873e:	4603      	mov	r3, r0
 8008740:	2b01      	cmp	r3, #1
 8008742:	d001      	beq.n	8008748 <osMutexWait+0x8c>
    return osErrorOS;
 8008744:	23ff      	movs	r3, #255	; 0xff
 8008746:	e000      	b.n	800874a <osMutexWait+0x8e>
  }
  
  return osOK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008760:	2300      	movs	r3, #0
 8008762:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008764:	2300      	movs	r3, #0
 8008766:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008768:	f7ff ff06 	bl	8008578 <inHandlerMode>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d016      	beq.n	80087a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008772:	f107 0308 	add.w	r3, r7, #8
 8008776:	4619      	mov	r1, r3
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 fd52 	bl	8009222 <xQueueGiveFromISR>
 800877e:	4603      	mov	r3, r0
 8008780:	2b01      	cmp	r3, #1
 8008782:	d001      	beq.n	8008788 <osMutexRelease+0x30>
      return osErrorOS;
 8008784:	23ff      	movs	r3, #255	; 0xff
 8008786:	e017      	b.n	80087b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d013      	beq.n	80087b6 <osMutexRelease+0x5e>
 800878e:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <osMutexRelease+0x68>)
 8008790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008794:	601a      	str	r2, [r3, #0]
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	e00a      	b.n	80087b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80087a0:	2300      	movs	r3, #0
 80087a2:	2200      	movs	r2, #0
 80087a4:	2100      	movs	r1, #0
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fba2 	bl	8008ef0 <xQueueGenericSend>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d001      	beq.n	80087b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80087b2:	23ff      	movs	r3, #255	; 0xff
 80087b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80087b6:	68fb      	ldr	r3, [r7, #12]
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	e000ed04 	.word	0xe000ed04

080087c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00f      	beq.n	80087f6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d10a      	bne.n	80087f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2203      	movs	r2, #3
 80087e2:	9200      	str	r2, [sp, #0]
 80087e4:	2200      	movs	r2, #0
 80087e6:	2100      	movs	r1, #0
 80087e8:	2001      	movs	r0, #1
 80087ea:	f000 fa63 	bl	8008cb4 <xQueueGenericCreateStatic>
 80087ee:	4603      	mov	r3, r0
 80087f0:	e016      	b.n	8008820 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	e014      	b.n	8008820 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d110      	bne.n	800881e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80087fc:	2203      	movs	r2, #3
 80087fe:	2100      	movs	r1, #0
 8008800:	2001      	movs	r0, #1
 8008802:	f000 facf 	bl	8008da4 <xQueueGenericCreate>
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <osSemaphoreCreate+0x56>
 800880e:	2300      	movs	r3, #0
 8008810:	2200      	movs	r2, #0
 8008812:	2100      	movs	r1, #0
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 fb6b 	bl	8008ef0 <xQueueGenericSend>
      return sema;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	e000      	b.n	8008820 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800881e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008820:	4618      	mov	r0, r3
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008832:	2300      	movs	r3, #0
 8008834:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800883c:	2380      	movs	r3, #128	; 0x80
 800883e:	e03a      	b.n	80088b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008840:	2300      	movs	r3, #0
 8008842:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800884a:	d103      	bne.n	8008854 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800884c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008850:	60fb      	str	r3, [r7, #12]
 8008852:	e009      	b.n	8008868 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <osSemaphoreWait+0x40>
      ticks = 1;
 8008864:	2301      	movs	r3, #1
 8008866:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008868:	f7ff fe86 	bl	8008578 <inHandlerMode>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d017      	beq.n	80088a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	461a      	mov	r2, r3
 8008878:	2100      	movs	r1, #0
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 ff4a 	bl	8009714 <xQueueReceiveFromISR>
 8008880:	4603      	mov	r3, r0
 8008882:	2b01      	cmp	r3, #1
 8008884:	d001      	beq.n	800888a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008886:	23ff      	movs	r3, #255	; 0xff
 8008888:	e015      	b.n	80088b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d011      	beq.n	80088b4 <osSemaphoreWait+0x8c>
 8008890:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <osSemaphoreWait+0x98>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
 80088a0:	e008      	b.n	80088b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80088a2:	68f9      	ldr	r1, [r7, #12]
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fe29 	bl	80094fc <xQueueSemaphoreTake>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d001      	beq.n	80088b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80088b0:	23ff      	movs	r3, #255	; 0xff
 80088b2:	e000      	b.n	80088b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3710      	adds	r7, #16
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	e000ed04 	.word	0xe000ed04

080088c4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af02      	add	r7, sp, #8
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d011      	beq.n	80088fa <osMessageCreate+0x36>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6818      	ldr	r0, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6859      	ldr	r1, [r3, #4]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689a      	ldr	r2, [r3, #8]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	2400      	movs	r4, #0
 80088f0:	9400      	str	r4, [sp, #0]
 80088f2:	f000 f9df 	bl	8008cb4 <xQueueGenericCreateStatic>
 80088f6:	4603      	mov	r3, r0
 80088f8:	e008      	b.n	800890c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6818      	ldr	r0, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	4619      	mov	r1, r3
 8008906:	f000 fa4d 	bl	8008da4 <xQueueGenericCreate>
 800890a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	bd90      	pop	{r4, r7, pc}

08008914 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <osMessagePut+0x1e>
    ticks = 1;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008932:	f7ff fe21 	bl	8008578 <inHandlerMode>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d018      	beq.n	800896e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800893c:	f107 0210 	add.w	r2, r7, #16
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	2300      	movs	r3, #0
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f000 fbd0 	bl	80090ec <xQueueGenericSendFromISR>
 800894c:	4603      	mov	r3, r0
 800894e:	2b01      	cmp	r3, #1
 8008950:	d001      	beq.n	8008956 <osMessagePut+0x42>
      return osErrorOS;
 8008952:	23ff      	movs	r3, #255	; 0xff
 8008954:	e018      	b.n	8008988 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d014      	beq.n	8008986 <osMessagePut+0x72>
 800895c:	4b0c      	ldr	r3, [pc, #48]	; (8008990 <osMessagePut+0x7c>)
 800895e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	e00b      	b.n	8008986 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800896e:	f107 0108 	add.w	r1, r7, #8
 8008972:	2300      	movs	r3, #0
 8008974:	697a      	ldr	r2, [r7, #20]
 8008976:	68f8      	ldr	r0, [r7, #12]
 8008978:	f000 faba 	bl	8008ef0 <xQueueGenericSend>
 800897c:	4603      	mov	r3, r0
 800897e:	2b01      	cmp	r3, #1
 8008980:	d001      	beq.n	8008986 <osMessagePut+0x72>
      return osErrorOS;
 8008982:	23ff      	movs	r3, #255	; 0xff
 8008984:	e000      	b.n	8008988 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3718      	adds	r7, #24
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	e000ed04 	.word	0xe000ed04

08008994 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b08b      	sub	sp, #44	; 0x2c
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d10a      	bne.n	80089c4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80089ae:	2380      	movs	r3, #128	; 0x80
 80089b0:	617b      	str	r3, [r7, #20]
    return event;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	461c      	mov	r4, r3
 80089b6:	f107 0314 	add.w	r3, r7, #20
 80089ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80089c2:	e054      	b.n	8008a6e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80089c8:	2300      	movs	r3, #0
 80089ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089d2:	d103      	bne.n	80089dc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
 80089da:	e009      	b.n	80089f0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d006      	beq.n	80089f0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80089e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d101      	bne.n	80089f0 <osMessageGet+0x5c>
      ticks = 1;
 80089ec:	2301      	movs	r3, #1
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80089f0:	f7ff fdc2 	bl	8008578 <inHandlerMode>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d01c      	beq.n	8008a34 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80089fa:	f107 0220 	add.w	r2, r7, #32
 80089fe:	f107 0314 	add.w	r3, r7, #20
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	68b8      	ldr	r0, [r7, #8]
 8008a08:	f000 fe84 	bl	8009714 <xQueueReceiveFromISR>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d102      	bne.n	8008a18 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008a12:	2310      	movs	r3, #16
 8008a14:	617b      	str	r3, [r7, #20]
 8008a16:	e001      	b.n	8008a1c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a1c:	6a3b      	ldr	r3, [r7, #32]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d01d      	beq.n	8008a5e <osMessageGet+0xca>
 8008a22:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <osMessageGet+0xe4>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	e014      	b.n	8008a5e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008a34:	f107 0314 	add.w	r3, r7, #20
 8008a38:	3304      	adds	r3, #4
 8008a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	68b8      	ldr	r0, [r7, #8]
 8008a40:	f000 fc7c 	bl	800933c <xQueueReceive>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d102      	bne.n	8008a50 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	617b      	str	r3, [r7, #20]
 8008a4e:	e006      	b.n	8008a5e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <osMessageGet+0xc6>
 8008a56:	2300      	movs	r3, #0
 8008a58:	e000      	b.n	8008a5c <osMessageGet+0xc8>
 8008a5a:	2340      	movs	r3, #64	; 0x40
 8008a5c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	461c      	mov	r4, r3
 8008a62:	f107 0314 	add.w	r3, r7, #20
 8008a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008a6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	372c      	adds	r7, #44	; 0x2c
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}
 8008a76:	bf00      	nop
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f103 0208 	add.w	r2, r3, #8
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f103 0208 	add.w	r2, r3, #8
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f103 0208 	add.w	r2, r3, #8
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr

08008abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	683a      	ldr	r2, [r7, #0]
 8008afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	1c5a      	adds	r2, r3, #1
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	601a      	str	r2, [r3, #0]
}
 8008b12:	bf00      	nop
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
 8008b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b34:	d103      	bne.n	8008b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	e00c      	b.n	8008b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3308      	adds	r3, #8
 8008b42:	60fb      	str	r3, [r7, #12]
 8008b44:	e002      	b.n	8008b4c <vListInsert+0x2e>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	60fb      	str	r3, [r7, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d2f6      	bcs.n	8008b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	601a      	str	r2, [r3, #0]
}
 8008b84:	bf00      	nop
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6892      	ldr	r2, [r2, #8]
 8008ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6852      	ldr	r2, [r2, #4]
 8008bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d103      	bne.n	8008bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	1e5a      	subs	r2, r3, #1
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfc:	f383 8811 	msr	BASEPRI, r3
 8008c00:	f3bf 8f6f 	isb	sy
 8008c04:	f3bf 8f4f 	dsb	sy
 8008c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008c0a:	bf00      	nop
 8008c0c:	e7fe      	b.n	8008c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008c0e:	f002 f889 	bl	800ad24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c1e:	fb01 f303 	mul.w	r3, r1, r3
 8008c22:	441a      	add	r2, r3
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	68f9      	ldr	r1, [r7, #12]
 8008c42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c44:	fb01 f303 	mul.w	r3, r1, r3
 8008c48:	441a      	add	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	22ff      	movs	r2, #255	; 0xff
 8008c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	22ff      	movs	r2, #255	; 0xff
 8008c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d114      	bne.n	8008c8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d01a      	beq.n	8008ca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	3310      	adds	r3, #16
 8008c70:	4618      	mov	r0, r3
 8008c72:	f001 fb49 	bl	800a308 <xTaskRemoveFromEventList>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d012      	beq.n	8008ca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <xQueueGenericReset+0xcc>)
 8008c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	f3bf 8f4f 	dsb	sy
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	e009      	b.n	8008ca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3310      	adds	r3, #16
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff fef2 	bl	8008a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	3324      	adds	r3, #36	; 0x24
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff feed 	bl	8008a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008ca2:	f002 f86f 	bl	800ad84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008ca6:	2301      	movs	r3, #1
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3710      	adds	r7, #16
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	e000ed04 	.word	0xe000ed04

08008cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08e      	sub	sp, #56	; 0x38
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	60f8      	str	r0, [r7, #12]
 8008cbc:	60b9      	str	r1, [r7, #8]
 8008cbe:	607a      	str	r2, [r7, #4]
 8008cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d10a      	bne.n	8008cde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ccc:	f383 8811 	msr	BASEPRI, r3
 8008cd0:	f3bf 8f6f 	isb	sy
 8008cd4:	f3bf 8f4f 	dsb	sy
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cda:	bf00      	nop
 8008cdc:	e7fe      	b.n	8008cdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d002      	beq.n	8008d06 <xQueueGenericCreateStatic+0x52>
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <xQueueGenericCreateStatic+0x56>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <xQueueGenericCreateStatic+0x58>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	623b      	str	r3, [r7, #32]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <xQueueGenericCreateStatic+0x7e>
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <xQueueGenericCreateStatic+0x82>
 8008d32:	2301      	movs	r3, #1
 8008d34:	e000      	b.n	8008d38 <xQueueGenericCreateStatic+0x84>
 8008d36:	2300      	movs	r3, #0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d40:	f383 8811 	msr	BASEPRI, r3
 8008d44:	f3bf 8f6f 	isb	sy
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	61fb      	str	r3, [r7, #28]
}
 8008d4e:	bf00      	nop
 8008d50:	e7fe      	b.n	8008d50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d52:	2348      	movs	r3, #72	; 0x48
 8008d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b48      	cmp	r3, #72	; 0x48
 8008d5a:	d00a      	beq.n	8008d72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	61bb      	str	r3, [r7, #24]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00d      	beq.n	8008d9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	2201      	movs	r2, #1
 8008d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	9300      	str	r3, [sp, #0]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	68f8      	ldr	r0, [r7, #12]
 8008d96:	f000 f83f 	bl	8008e18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3730      	adds	r7, #48	; 0x30
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b08a      	sub	sp, #40	; 0x28
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	4613      	mov	r3, r2
 8008db0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <xQueueGenericCreate+0x2a>
	__asm volatile
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
}
 8008dca:	bf00      	nop
 8008dcc:	e7fe      	b.n	8008dcc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	fb02 f303 	mul.w	r3, r2, r3
 8008dd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	3348      	adds	r3, #72	; 0x48
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f002 f8c3 	bl	800af68 <pvPortMalloc>
 8008de2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d011      	beq.n	8008e0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	3348      	adds	r3, #72	; 0x48
 8008df2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008df4:	69bb      	ldr	r3, [r7, #24]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008dfc:	79fa      	ldrb	r2, [r7, #7]
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	9300      	str	r3, [sp, #0]
 8008e02:	4613      	mov	r3, r2
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	68b9      	ldr	r1, [r7, #8]
 8008e08:	68f8      	ldr	r0, [r7, #12]
 8008e0a:	f000 f805 	bl	8008e18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3720      	adds	r7, #32
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	69ba      	ldr	r2, [r7, #24]
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	e002      	b.n	8008e3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e40:	69bb      	ldr	r3, [r7, #24]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e46:	2101      	movs	r1, #1
 8008e48:	69b8      	ldr	r0, [r7, #24]
 8008e4a:	f7ff fecb 	bl	8008be4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e4e:	bf00      	nop
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00e      	beq.n	8008e82 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008e76:	2300      	movs	r3, #0
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f837 	bl	8008ef0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b086      	sub	sp, #24
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	4603      	mov	r3, r0
 8008e92:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008e94:	2301      	movs	r3, #1
 8008e96:	617b      	str	r3, [r7, #20]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008e9c:	79fb      	ldrb	r3, [r7, #7]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6939      	ldr	r1, [r7, #16]
 8008ea2:	6978      	ldr	r0, [r7, #20]
 8008ea4:	f7ff ff7e 	bl	8008da4 <xQueueGenericCreate>
 8008ea8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008eaa:	68f8      	ldr	r0, [r7, #12]
 8008eac:	f7ff ffd3 	bl	8008e56 <prvInitialiseMutex>

		return xNewQueue;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
	}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b088      	sub	sp, #32
 8008ebe:	af02      	add	r7, sp, #8
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	6039      	str	r1, [r7, #0]
 8008ec4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	6939      	ldr	r1, [r7, #16]
 8008ed8:	6978      	ldr	r0, [r7, #20]
 8008eda:	f7ff feeb 	bl	8008cb4 <xQueueGenericCreateStatic>
 8008ede:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f7ff ffb8 	bl	8008e56 <prvInitialiseMutex>

		return xNewQueue;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08e      	sub	sp, #56	; 0x38
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
 8008efc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008efe:	2300      	movs	r3, #0
 8008f00:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10a      	bne.n	8008f22 <xQueueGenericSend+0x32>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d103      	bne.n	8008f30 <xQueueGenericSend+0x40>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <xQueueGenericSend+0x44>
 8008f30:	2301      	movs	r3, #1
 8008f32:	e000      	b.n	8008f36 <xQueueGenericSend+0x46>
 8008f34:	2300      	movs	r3, #0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10a      	bne.n	8008f50 <xQueueGenericSend+0x60>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d103      	bne.n	8008f5e <xQueueGenericSend+0x6e>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d101      	bne.n	8008f62 <xQueueGenericSend+0x72>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <xQueueGenericSend+0x74>
 8008f62:	2300      	movs	r3, #0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6c:	f383 8811 	msr	BASEPRI, r3
 8008f70:	f3bf 8f6f 	isb	sy
 8008f74:	f3bf 8f4f 	dsb	sy
 8008f78:	623b      	str	r3, [r7, #32]
}
 8008f7a:	bf00      	nop
 8008f7c:	e7fe      	b.n	8008f7c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f7e:	f001 fb83 	bl	800a688 <xTaskGetSchedulerState>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d102      	bne.n	8008f8e <xQueueGenericSend+0x9e>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <xQueueGenericSend+0xa2>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <xQueueGenericSend+0xa4>
 8008f92:	2300      	movs	r3, #0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <xQueueGenericSend+0xbe>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	61fb      	str	r3, [r7, #28]
}
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fae:	f001 feb9 	bl	800ad24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d302      	bcc.n	8008fc4 <xQueueGenericSend+0xd4>
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	2b02      	cmp	r3, #2
 8008fc2:	d129      	bne.n	8009018 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	68b9      	ldr	r1, [r7, #8]
 8008fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fca:	f000 fc3b 	bl	8009844 <prvCopyDataToQueue>
 8008fce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d010      	beq.n	8008ffa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	3324      	adds	r3, #36	; 0x24
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f001 f993 	bl	800a308 <xTaskRemoveFromEventList>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d013      	beq.n	8009010 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008fe8:	4b3f      	ldr	r3, [pc, #252]	; (80090e8 <xQueueGenericSend+0x1f8>)
 8008fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	e00a      	b.n	8009010 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009000:	4b39      	ldr	r3, [pc, #228]	; (80090e8 <xQueueGenericSend+0x1f8>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009010:	f001 feb8 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 8009014:	2301      	movs	r3, #1
 8009016:	e063      	b.n	80090e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d103      	bne.n	8009026 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800901e:	f001 feb1 	bl	800ad84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009022:	2300      	movs	r3, #0
 8009024:	e05c      	b.n	80090e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009028:	2b00      	cmp	r3, #0
 800902a:	d106      	bne.n	800903a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800902c:	f107 0314 	add.w	r3, r7, #20
 8009030:	4618      	mov	r0, r3
 8009032:	f001 f9cb 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009036:	2301      	movs	r3, #1
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800903a:	f001 fea3 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800903e:	f000 ff59 	bl	8009ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009042:	f001 fe6f 	bl	800ad24 <vPortEnterCritical>
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800904c:	b25b      	sxtb	r3, r3
 800904e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009052:	d103      	bne.n	800905c <xQueueGenericSend+0x16c>
 8009054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009062:	b25b      	sxtb	r3, r3
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009068:	d103      	bne.n	8009072 <xQueueGenericSend+0x182>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009072:	f001 fe87 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009076:	1d3a      	adds	r2, r7, #4
 8009078:	f107 0314 	add.w	r3, r7, #20
 800907c:	4611      	mov	r1, r2
 800907e:	4618      	mov	r0, r3
 8009080:	f001 f9ba 	bl	800a3f8 <xTaskCheckForTimeOut>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d124      	bne.n	80090d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800908a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800908c:	f000 fcd2 	bl	8009a34 <prvIsQueueFull>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d018      	beq.n	80090c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	3310      	adds	r3, #16
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 f90e 	bl	800a2c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090a6:	f000 fc5d 	bl	8009964 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090aa:	f000 ff31 	bl	8009f10 <xTaskResumeAll>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f47f af7c 	bne.w	8008fae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090b6:	4b0c      	ldr	r3, [pc, #48]	; (80090e8 <xQueueGenericSend+0x1f8>)
 80090b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090bc:	601a      	str	r2, [r3, #0]
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	e772      	b.n	8008fae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ca:	f000 fc4b 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ce:	f000 ff1f 	bl	8009f10 <xTaskResumeAll>
 80090d2:	e76c      	b.n	8008fae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090d6:	f000 fc45 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090da:	f000 ff19 	bl	8009f10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3738      	adds	r7, #56	; 0x38
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b090      	sub	sp, #64	; 0x40
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	607a      	str	r2, [r7, #4]
 80090f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	2b00      	cmp	r3, #0
 8009102:	d10a      	bne.n	800911a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d103      	bne.n	8009128 <xQueueGenericSendFromISR+0x3c>
 8009120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <xQueueGenericSendFromISR+0x40>
 8009128:	2301      	movs	r3, #1
 800912a:	e000      	b.n	800912e <xQueueGenericSendFromISR+0x42>
 800912c:	2300      	movs	r3, #0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2b02      	cmp	r3, #2
 800914c:	d103      	bne.n	8009156 <xQueueGenericSendFromISR+0x6a>
 800914e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <xQueueGenericSendFromISR+0x6e>
 8009156:	2301      	movs	r3, #1
 8009158:	e000      	b.n	800915c <xQueueGenericSendFromISR+0x70>
 800915a:	2300      	movs	r3, #0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10a      	bne.n	8009176 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009164:	f383 8811 	msr	BASEPRI, r3
 8009168:	f3bf 8f6f 	isb	sy
 800916c:	f3bf 8f4f 	dsb	sy
 8009170:	623b      	str	r3, [r7, #32]
}
 8009172:	bf00      	nop
 8009174:	e7fe      	b.n	8009174 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009176:	f001 feb7 	bl	800aee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800917a:	f3ef 8211 	mrs	r2, BASEPRI
 800917e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009182:	f383 8811 	msr	BASEPRI, r3
 8009186:	f3bf 8f6f 	isb	sy
 800918a:	f3bf 8f4f 	dsb	sy
 800918e:	61fa      	str	r2, [r7, #28]
 8009190:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009192:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009194:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919e:	429a      	cmp	r2, r3
 80091a0:	d302      	bcc.n	80091a8 <xQueueGenericSendFromISR+0xbc>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b02      	cmp	r3, #2
 80091a6:	d12f      	bne.n	8009208 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091be:	f000 fb41 	bl	8009844 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091ca:	d112      	bne.n	80091f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d016      	beq.n	8009202 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d6:	3324      	adds	r3, #36	; 0x24
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 f895 	bl	800a308 <xTaskRemoveFromEventList>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00e      	beq.n	8009202 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d00b      	beq.n	8009202 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e007      	b.n	8009202 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091f6:	3301      	adds	r3, #1
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	b25a      	sxtb	r2, r3
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009202:	2301      	movs	r3, #1
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009206:	e001      	b.n	800920c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009208:	2300      	movs	r3, #0
 800920a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800920c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009216:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800921a:	4618      	mov	r0, r3
 800921c:	3740      	adds	r7, #64	; 0x40
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b08e      	sub	sp, #56	; 0x38
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009232:	2b00      	cmp	r3, #0
 8009234:	d10a      	bne.n	800924c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800923a:	f383 8811 	msr	BASEPRI, r3
 800923e:	f3bf 8f6f 	isb	sy
 8009242:	f3bf 8f4f 	dsb	sy
 8009246:	623b      	str	r3, [r7, #32]
}
 8009248:	bf00      	nop
 800924a:	e7fe      	b.n	800924a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00a      	beq.n	800926a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	61fb      	str	r3, [r7, #28]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d103      	bne.n	800927a <xQueueGiveFromISR+0x58>
 8009272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <xQueueGiveFromISR+0x5c>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <xQueueGiveFromISR+0x5e>
 800927e:	2300      	movs	r3, #0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	61bb      	str	r3, [r7, #24]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800929a:	f001 fe25 	bl	800aee8 <vPortValidateInterruptPriority>
	__asm volatile
 800929e:	f3ef 8211 	mrs	r2, BASEPRI
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	617a      	str	r2, [r7, #20]
 80092b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d22b      	bcs.n	8009322 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	1c5a      	adds	r2, r3, #1
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80092e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092e4:	d112      	bne.n	800930c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d016      	beq.n	800931c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	3324      	adds	r3, #36	; 0x24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f808 	bl	800a308 <xTaskRemoveFromEventList>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00e      	beq.n	800931c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00b      	beq.n	800931c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2201      	movs	r2, #1
 8009308:	601a      	str	r2, [r3, #0]
 800930a:	e007      	b.n	800931c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800930c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009310:	3301      	adds	r3, #1
 8009312:	b2db      	uxtb	r3, r3
 8009314:	b25a      	sxtb	r2, r3
 8009316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800931c:	2301      	movs	r3, #1
 800931e:	637b      	str	r3, [r7, #52]	; 0x34
 8009320:	e001      	b.n	8009326 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009322:	2300      	movs	r3, #0
 8009324:	637b      	str	r3, [r7, #52]	; 0x34
 8009326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009328:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f383 8811 	msr	BASEPRI, r3
}
 8009330:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009334:	4618      	mov	r0, r3
 8009336:	3738      	adds	r7, #56	; 0x38
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08c      	sub	sp, #48	; 0x30
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009348:	2300      	movs	r3, #0
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <xQueueReceive+0x30>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	623b      	str	r3, [r7, #32]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <xQueueReceive+0x3e>
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009376:	2b00      	cmp	r3, #0
 8009378:	d101      	bne.n	800937e <xQueueReceive+0x42>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <xQueueReceive+0x44>
 800937e:	2300      	movs	r3, #0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10a      	bne.n	800939a <xQueueReceive+0x5e>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	61fb      	str	r3, [r7, #28]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800939a:	f001 f975 	bl	800a688 <xTaskGetSchedulerState>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d102      	bne.n	80093aa <xQueueReceive+0x6e>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d101      	bne.n	80093ae <xQueueReceive+0x72>
 80093aa:	2301      	movs	r3, #1
 80093ac:	e000      	b.n	80093b0 <xQueueReceive+0x74>
 80093ae:	2300      	movs	r3, #0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <xQueueReceive+0x8e>
	__asm volatile
 80093b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b8:	f383 8811 	msr	BASEPRI, r3
 80093bc:	f3bf 8f6f 	isb	sy
 80093c0:	f3bf 8f4f 	dsb	sy
 80093c4:	61bb      	str	r3, [r7, #24]
}
 80093c6:	bf00      	nop
 80093c8:	e7fe      	b.n	80093c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80093ca:	f001 fcab 	bl	800ad24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d01f      	beq.n	800941a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093da:	68b9      	ldr	r1, [r7, #8]
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f000 fa9b 	bl	8009918 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	1e5a      	subs	r2, r3, #1
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	3310      	adds	r3, #16
 80093f6:	4618      	mov	r0, r3
 80093f8:	f000 ff86 	bl	800a308 <xTaskRemoveFromEventList>
 80093fc:	4603      	mov	r3, r0
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009402:	4b3d      	ldr	r3, [pc, #244]	; (80094f8 <xQueueReceive+0x1bc>)
 8009404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009412:	f001 fcb7 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 8009416:	2301      	movs	r3, #1
 8009418:	e069      	b.n	80094ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d103      	bne.n	8009428 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009420:	f001 fcb0 	bl	800ad84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009424:	2300      	movs	r3, #0
 8009426:	e062      	b.n	80094ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d106      	bne.n	800943c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800942e:	f107 0310 	add.w	r3, r7, #16
 8009432:	4618      	mov	r0, r3
 8009434:	f000 ffca 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800943c:	f001 fca2 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009440:	f000 fd58 	bl	8009ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009444:	f001 fc6e 	bl	800ad24 <vPortEnterCritical>
 8009448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800944a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800944e:	b25b      	sxtb	r3, r3
 8009450:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009454:	d103      	bne.n	800945e <xQueueReceive+0x122>
 8009456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009458:	2200      	movs	r2, #0
 800945a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009464:	b25b      	sxtb	r3, r3
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800946a:	d103      	bne.n	8009474 <xQueueReceive+0x138>
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009474:	f001 fc86 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009478:	1d3a      	adds	r2, r7, #4
 800947a:	f107 0310 	add.w	r3, r7, #16
 800947e:	4611      	mov	r1, r2
 8009480:	4618      	mov	r0, r3
 8009482:	f000 ffb9 	bl	800a3f8 <xTaskCheckForTimeOut>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d123      	bne.n	80094d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800948c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800948e:	f000 fabb 	bl	8009a08 <prvIsQueueEmpty>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d017      	beq.n	80094c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	3324      	adds	r3, #36	; 0x24
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	4611      	mov	r1, r2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 ff0d 	bl	800a2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80094a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094a8:	f000 fa5c 	bl	8009964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80094ac:	f000 fd30 	bl	8009f10 <xTaskResumeAll>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d189      	bne.n	80093ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <xQueueReceive+0x1bc>)
 80094b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	e780      	b.n	80093ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80094c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094ca:	f000 fa4b 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094ce:	f000 fd1f 	bl	8009f10 <xTaskResumeAll>
 80094d2:	e77a      	b.n	80093ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094d6:	f000 fa45 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094da:	f000 fd19 	bl	8009f10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094e0:	f000 fa92 	bl	8009a08 <prvIsQueueEmpty>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f43f af6f 	beq.w	80093ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3730      	adds	r7, #48	; 0x30
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08e      	sub	sp, #56	; 0x38
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009506:	2300      	movs	r3, #0
 8009508:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800950e:	2300      	movs	r3, #0
 8009510:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	623b      	str	r3, [r7, #32]
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00a      	beq.n	800954c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	61fb      	str	r3, [r7, #28]
}
 8009548:	bf00      	nop
 800954a:	e7fe      	b.n	800954a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800954c:	f001 f89c 	bl	800a688 <xTaskGetSchedulerState>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d102      	bne.n	800955c <xQueueSemaphoreTake+0x60>
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d101      	bne.n	8009560 <xQueueSemaphoreTake+0x64>
 800955c:	2301      	movs	r3, #1
 800955e:	e000      	b.n	8009562 <xQueueSemaphoreTake+0x66>
 8009560:	2300      	movs	r3, #0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d10a      	bne.n	800957c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	61bb      	str	r3, [r7, #24]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800957c:	f001 fbd2 	bl	800ad24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009584:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009588:	2b00      	cmp	r3, #0
 800958a:	d024      	beq.n	80095d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800958c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958e:	1e5a      	subs	r2, r3, #1
 8009590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009592:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d104      	bne.n	80095a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800959c:	f001 fa1c 	bl	800a9d8 <pvTaskIncrementMutexHeldCount>
 80095a0:	4602      	mov	r2, r0
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00f      	beq.n	80095ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b0:	3310      	adds	r3, #16
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fea8 	bl	800a308 <xTaskRemoveFromEventList>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d007      	beq.n	80095ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095be:	4b54      	ldr	r3, [pc, #336]	; (8009710 <xQueueSemaphoreTake+0x214>)
 80095c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095ce:	f001 fbd9 	bl	800ad84 <vPortExitCritical>
				return pdPASS;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e097      	b.n	8009706 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d111      	bne.n	8009600 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80095dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80095e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e6:	f383 8811 	msr	BASEPRI, r3
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	617b      	str	r3, [r7, #20]
}
 80095f4:	bf00      	nop
 80095f6:	e7fe      	b.n	80095f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80095f8:	f001 fbc4 	bl	800ad84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80095fc:	2300      	movs	r3, #0
 80095fe:	e082      	b.n	8009706 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009602:	2b00      	cmp	r3, #0
 8009604:	d106      	bne.n	8009614 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009606:	f107 030c 	add.w	r3, r7, #12
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fede 	bl	800a3cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009610:	2301      	movs	r3, #1
 8009612:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009614:	f001 fbb6 	bl	800ad84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009618:	f000 fc6c 	bl	8009ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800961c:	f001 fb82 	bl	800ad24 <vPortEnterCritical>
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009622:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009626:	b25b      	sxtb	r3, r3
 8009628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800962c:	d103      	bne.n	8009636 <xQueueSemaphoreTake+0x13a>
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	2200      	movs	r2, #0
 8009632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800963c:	b25b      	sxtb	r3, r3
 800963e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009642:	d103      	bne.n	800964c <xQueueSemaphoreTake+0x150>
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800964c:	f001 fb9a 	bl	800ad84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009650:	463a      	mov	r2, r7
 8009652:	f107 030c 	add.w	r3, r7, #12
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fecd 	bl	800a3f8 <xTaskCheckForTimeOut>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d132      	bne.n	80096ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009666:	f000 f9cf 	bl	8009a08 <prvIsQueueEmpty>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d026      	beq.n	80096be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d109      	bne.n	800968c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009678:	f001 fb54 	bl	800ad24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800967c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	4618      	mov	r0, r3
 8009682:	f001 f81f 	bl	800a6c4 <xTaskPriorityInherit>
 8009686:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009688:	f001 fb7c 	bl	800ad84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	3324      	adds	r3, #36	; 0x24
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	4611      	mov	r1, r2
 8009694:	4618      	mov	r0, r3
 8009696:	f000 fe13 	bl	800a2c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800969a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800969c:	f000 f962 	bl	8009964 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80096a0:	f000 fc36 	bl	8009f10 <xTaskResumeAll>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f47f af68 	bne.w	800957c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80096ac:	4b18      	ldr	r3, [pc, #96]	; (8009710 <xQueueSemaphoreTake+0x214>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	e75e      	b.n	800957c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80096be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c0:	f000 f950 	bl	8009964 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096c4:	f000 fc24 	bl	8009f10 <xTaskResumeAll>
 80096c8:	e758      	b.n	800957c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80096ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096cc:	f000 f94a 	bl	8009964 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096d0:	f000 fc1e 	bl	8009f10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d6:	f000 f997 	bl	8009a08 <prvIsQueueEmpty>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f43f af4d 	beq.w	800957c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00d      	beq.n	8009704 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80096e8:	f001 fb1c 	bl	800ad24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80096ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096ee:	f000 f891 	bl	8009814 <prvGetDisinheritPriorityAfterTimeout>
 80096f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80096fa:	4618      	mov	r0, r3
 80096fc:	f001 f8de 	bl	800a8bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009700:	f001 fb40 	bl	800ad84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009706:	4618      	mov	r0, r3
 8009708:	3738      	adds	r7, #56	; 0x38
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	e000ed04 	.word	0xe000ed04

08009714 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08e      	sub	sp, #56	; 0x38
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2b00      	cmp	r3, #0
 8009728:	d10a      	bne.n	8009740 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800972a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800972e:	f383 8811 	msr	BASEPRI, r3
 8009732:	f3bf 8f6f 	isb	sy
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	623b      	str	r3, [r7, #32]
}
 800973c:	bf00      	nop
 800973e:	e7fe      	b.n	800973e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d103      	bne.n	800974e <xQueueReceiveFromISR+0x3a>
 8009746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <xQueueReceiveFromISR+0x3e>
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <xQueueReceiveFromISR+0x40>
 8009752:	2300      	movs	r3, #0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	f383 8811 	msr	BASEPRI, r3
 8009760:	f3bf 8f6f 	isb	sy
 8009764:	f3bf 8f4f 	dsb	sy
 8009768:	61fb      	str	r3, [r7, #28]
}
 800976a:	bf00      	nop
 800976c:	e7fe      	b.n	800976c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800976e:	f001 fbbb 	bl	800aee8 <vPortValidateInterruptPriority>
	__asm volatile
 8009772:	f3ef 8211 	mrs	r2, BASEPRI
 8009776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	61ba      	str	r2, [r7, #24]
 8009788:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800978a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800978c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	2b00      	cmp	r3, #0
 8009798:	d02f      	beq.n	80097fa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800979a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097a4:	68b9      	ldr	r1, [r7, #8]
 80097a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a8:	f000 f8b6 	bl	8009918 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	1e5a      	subs	r2, r3, #1
 80097b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80097b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097bc:	d112      	bne.n	80097e4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d016      	beq.n	80097f4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c8:	3310      	adds	r3, #16
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fd9c 	bl	800a308 <xTaskRemoveFromEventList>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00e      	beq.n	80097f4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e007      	b.n	80097f4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80097e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097e8:	3301      	adds	r3, #1
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	b25a      	sxtb	r2, r3
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80097f4:	2301      	movs	r3, #1
 80097f6:	637b      	str	r3, [r7, #52]	; 0x34
 80097f8:	e001      	b.n	80097fe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
 80097fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009800:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	f383 8811 	msr	BASEPRI, r3
}
 8009808:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800980a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800980c:	4618      	mov	r0, r3
 800980e:	3738      	adds	r7, #56	; 0x38
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d006      	beq.n	8009832 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f1c3 0307 	rsb	r3, r3, #7
 800982e:	60fb      	str	r3, [r7, #12]
 8009830:	e001      	b.n	8009836 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009832:	2300      	movs	r3, #0
 8009834:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009836:	68fb      	ldr	r3, [r7, #12]
	}
 8009838:	4618      	mov	r0, r3
 800983a:	3714      	adds	r7, #20
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009858:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10d      	bne.n	800987e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d14d      	bne.n	8009906 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	4618      	mov	r0, r3
 8009870:	f000 ff9e 	bl	800a7b0 <xTaskPriorityDisinherit>
 8009874:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	609a      	str	r2, [r3, #8]
 800987c:	e043      	b.n	8009906 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d119      	bne.n	80098b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6858      	ldr	r0, [r3, #4]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988c:	461a      	mov	r2, r3
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	f00e f9c1 	bl	8017c16 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	441a      	add	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d32b      	bcc.n	8009906 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	605a      	str	r2, [r3, #4]
 80098b6:	e026      	b.n	8009906 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68d8      	ldr	r0, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	461a      	mov	r2, r3
 80098c2:	68b9      	ldr	r1, [r7, #8]
 80098c4:	f00e f9a7 	bl	8017c16 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	68da      	ldr	r2, [r3, #12]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d0:	425b      	negs	r3, r3
 80098d2:	441a      	add	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d207      	bcs.n	80098f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	425b      	negs	r3, r3
 80098ee:	441a      	add	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b02      	cmp	r3, #2
 80098f8:	d105      	bne.n	8009906 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d002      	beq.n	8009906 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3b01      	subs	r3, #1
 8009904:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800990e:	697b      	ldr	r3, [r7, #20]
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	2b00      	cmp	r3, #0
 8009928:	d018      	beq.n	800995c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	441a      	add	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68da      	ldr	r2, [r3, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	429a      	cmp	r2, r3
 8009942:	d303      	bcc.n	800994c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	68d9      	ldr	r1, [r3, #12]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	461a      	mov	r2, r3
 8009956:	6838      	ldr	r0, [r7, #0]
 8009958:	f00e f95d 	bl	8017c16 <memcpy>
	}
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800996c:	f001 f9da 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009976:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009978:	e011      	b.n	800999e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997e:	2b00      	cmp	r3, #0
 8009980:	d012      	beq.n	80099a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3324      	adds	r3, #36	; 0x24
 8009986:	4618      	mov	r0, r3
 8009988:	f000 fcbe 	bl	800a308 <xTaskRemoveFromEventList>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009992:	f000 fd93 	bl	800a4bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	3b01      	subs	r3, #1
 800999a:	b2db      	uxtb	r3, r3
 800999c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800999e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dce9      	bgt.n	800997a <prvUnlockQueue+0x16>
 80099a6:	e000      	b.n	80099aa <prvUnlockQueue+0x46>
					break;
 80099a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	22ff      	movs	r2, #255	; 0xff
 80099ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80099b2:	f001 f9e7 	bl	800ad84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099b6:	f001 f9b5 	bl	800ad24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099c2:	e011      	b.n	80099e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d012      	beq.n	80099f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	3310      	adds	r3, #16
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 fc99 	bl	800a308 <xTaskRemoveFromEventList>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80099dc:	f000 fd6e 	bl	800a4bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80099e0:	7bbb      	ldrb	r3, [r7, #14]
 80099e2:	3b01      	subs	r3, #1
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80099e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	dce9      	bgt.n	80099c4 <prvUnlockQueue+0x60>
 80099f0:	e000      	b.n	80099f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80099f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	22ff      	movs	r2, #255	; 0xff
 80099f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80099fc:	f001 f9c2 	bl	800ad84 <vPortExitCritical>
}
 8009a00:	bf00      	nop
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a10:	f001 f988 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e001      	b.n	8009a26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a26:	f001 f9ad 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a3c:	f001 f972 	bl	800ad24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d102      	bne.n	8009a52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
 8009a50:	e001      	b.n	8009a56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a52:	2300      	movs	r3, #0
 8009a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a56:	f001 f995 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	; 0x38
 8009a68:	af04      	add	r7, sp, #16
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	623b      	str	r3, [r7, #32]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d10a      	bne.n	8009aaa <xTaskCreateStatic+0x46>
	__asm volatile
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	61fb      	str	r3, [r7, #28]
}
 8009aa6:	bf00      	nop
 8009aa8:	e7fe      	b.n	8009aa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009aaa:	23b4      	movs	r3, #180	; 0xb4
 8009aac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	2bb4      	cmp	r3, #180	; 0xb4
 8009ab2:	d00a      	beq.n	8009aca <xTaskCreateStatic+0x66>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	61bb      	str	r3, [r7, #24]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01e      	beq.n	8009b10 <xTaskCreateStatic+0xac>
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d01b      	beq.n	8009b10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009aea:	2300      	movs	r3, #0
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	f107 0314 	add.w	r3, r7, #20
 8009af6:	9301      	str	r3, [sp, #4]
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	68b9      	ldr	r1, [r7, #8]
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f000 f850 	bl	8009ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b0a:	f000 f8eb 	bl	8009ce4 <prvAddNewTaskToReadyList>
 8009b0e:	e001      	b.n	8009b14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009b14:	697b      	ldr	r3, [r7, #20]
	}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3728      	adds	r7, #40	; 0x28
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b08c      	sub	sp, #48	; 0x30
 8009b22:	af04      	add	r7, sp, #16
 8009b24:	60f8      	str	r0, [r7, #12]
 8009b26:	60b9      	str	r1, [r7, #8]
 8009b28:	603b      	str	r3, [r7, #0]
 8009b2a:	4613      	mov	r3, r2
 8009b2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b2e:	88fb      	ldrh	r3, [r7, #6]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4618      	mov	r0, r3
 8009b34:	f001 fa18 	bl	800af68 <pvPortMalloc>
 8009b38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d00e      	beq.n	8009b5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b40:	20b4      	movs	r0, #180	; 0xb4
 8009b42:	f001 fa11 	bl	800af68 <pvPortMalloc>
 8009b46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	631a      	str	r2, [r3, #48]	; 0x30
 8009b54:	e005      	b.n	8009b62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b56:	6978      	ldr	r0, [r7, #20]
 8009b58:	f001 fad2 	bl	800b100 <vPortFree>
 8009b5c:	e001      	b.n	8009b62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d017      	beq.n	8009b98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b70:	88fa      	ldrh	r2, [r7, #6]
 8009b72:	2300      	movs	r3, #0
 8009b74:	9303      	str	r3, [sp, #12]
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	9302      	str	r3, [sp, #8]
 8009b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7c:	9301      	str	r3, [sp, #4]
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b80:	9300      	str	r3, [sp, #0]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	68b9      	ldr	r1, [r7, #8]
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 f80e 	bl	8009ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b8c:	69f8      	ldr	r0, [r7, #28]
 8009b8e:	f000 f8a9 	bl	8009ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b92:	2301      	movs	r3, #1
 8009b94:	61bb      	str	r3, [r7, #24]
 8009b96:	e002      	b.n	8009b9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b088      	sub	sp, #32
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bba:	6879      	ldr	r1, [r7, #4]
 8009bbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009bc0:	440b      	add	r3, r1
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	f023 0307 	bic.w	r3, r3, #7
 8009bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	617b      	str	r3, [r7, #20]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d01f      	beq.n	8009c36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	e012      	b.n	8009c22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	4413      	add	r3, r2
 8009c02:	7819      	ldrb	r1, [r3, #0]
 8009c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	4413      	add	r3, r2
 8009c0a:	3334      	adds	r3, #52	; 0x34
 8009c0c:	460a      	mov	r2, r1
 8009c0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	69fb      	ldr	r3, [r7, #28]
 8009c14:	4413      	add	r3, r2
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	61fb      	str	r3, [r7, #28]
 8009c22:	69fb      	ldr	r3, [r7, #28]
 8009c24:	2b0f      	cmp	r3, #15
 8009c26:	d9e9      	bls.n	8009bfc <prvInitialiseNewTask+0x54>
 8009c28:	e000      	b.n	8009c2c <prvInitialiseNewTask+0x84>
			{
				break;
 8009c2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c34:	e003      	b.n	8009c3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c40:	2b06      	cmp	r3, #6
 8009c42:	d901      	bls.n	8009c48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c44:	2306      	movs	r3, #6
 8009c46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c56:	2200      	movs	r2, #0
 8009c58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f7fe ff2c 	bl	8008abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	3318      	adds	r3, #24
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f7fe ff27 	bl	8008abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c76:	f1c3 0207 	rsb	r2, r3, #7
 8009c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c96:	334c      	adds	r3, #76	; 0x4c
 8009c98:	2260      	movs	r2, #96	; 0x60
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f00d ffc8 	bl	8017c32 <memset>
 8009ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca4:	4a0c      	ldr	r2, [pc, #48]	; (8009cd8 <prvInitialiseNewTask+0x130>)
 8009ca6:	651a      	str	r2, [r3, #80]	; 0x50
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <prvInitialiseNewTask+0x134>)
 8009cac:	655a      	str	r2, [r3, #84]	; 0x54
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	; (8009ce0 <prvInitialiseNewTask+0x138>)
 8009cb2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	68f9      	ldr	r1, [r7, #12]
 8009cb8:	69b8      	ldr	r0, [r7, #24]
 8009cba:	f000 ff07 	bl	800aacc <pxPortInitialiseStack>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cd0:	bf00      	nop
 8009cd2:	3720      	adds	r7, #32
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	0801bc0c 	.word	0x0801bc0c
 8009cdc:	0801bc2c 	.word	0x0801bc2c
 8009ce0:	0801bbec 	.word	0x0801bbec

08009ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b082      	sub	sp, #8
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cec:	f001 f81a 	bl	800ad24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009cf0:	4b2a      	ldr	r3, [pc, #168]	; (8009d9c <prvAddNewTaskToReadyList+0xb8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	4a29      	ldr	r2, [pc, #164]	; (8009d9c <prvAddNewTaskToReadyList+0xb8>)
 8009cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009cfa:	4b29      	ldr	r3, [pc, #164]	; (8009da0 <prvAddNewTaskToReadyList+0xbc>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d109      	bne.n	8009d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009d02:	4a27      	ldr	r2, [pc, #156]	; (8009da0 <prvAddNewTaskToReadyList+0xbc>)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009d08:	4b24      	ldr	r3, [pc, #144]	; (8009d9c <prvAddNewTaskToReadyList+0xb8>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d110      	bne.n	8009d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009d10:	f000 fbf8 	bl	800a504 <prvInitialiseTaskLists>
 8009d14:	e00d      	b.n	8009d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009d16:	4b23      	ldr	r3, [pc, #140]	; (8009da4 <prvAddNewTaskToReadyList+0xc0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d1e:	4b20      	ldr	r3, [pc, #128]	; (8009da0 <prvAddNewTaskToReadyList+0xbc>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d802      	bhi.n	8009d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d2c:	4a1c      	ldr	r2, [pc, #112]	; (8009da0 <prvAddNewTaskToReadyList+0xbc>)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d32:	4b1d      	ldr	r3, [pc, #116]	; (8009da8 <prvAddNewTaskToReadyList+0xc4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	3301      	adds	r3, #1
 8009d38:	4a1b      	ldr	r2, [pc, #108]	; (8009da8 <prvAddNewTaskToReadyList+0xc4>)
 8009d3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d40:	2201      	movs	r2, #1
 8009d42:	409a      	lsls	r2, r3
 8009d44:	4b19      	ldr	r3, [pc, #100]	; (8009dac <prvAddNewTaskToReadyList+0xc8>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	4a18      	ldr	r2, [pc, #96]	; (8009dac <prvAddNewTaskToReadyList+0xc8>)
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d52:	4613      	mov	r3, r2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4a15      	ldr	r2, [pc, #84]	; (8009db0 <prvAddNewTaskToReadyList+0xcc>)
 8009d5c:	441a      	add	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3304      	adds	r3, #4
 8009d62:	4619      	mov	r1, r3
 8009d64:	4610      	mov	r0, r2
 8009d66:	f7fe feb6 	bl	8008ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d6a:	f001 f80b 	bl	800ad84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d6e:	4b0d      	ldr	r3, [pc, #52]	; (8009da4 <prvAddNewTaskToReadyList+0xc0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d00e      	beq.n	8009d94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d76:	4b0a      	ldr	r3, [pc, #40]	; (8009da0 <prvAddNewTaskToReadyList+0xbc>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d207      	bcs.n	8009d94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d84:	4b0b      	ldr	r3, [pc, #44]	; (8009db4 <prvAddNewTaskToReadyList+0xd0>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	24001d08 	.word	0x24001d08
 8009da0:	24001c08 	.word	0x24001c08
 8009da4:	24001d14 	.word	0x24001d14
 8009da8:	24001d24 	.word	0x24001d24
 8009dac:	24001d10 	.word	0x24001d10
 8009db0:	24001c0c 	.word	0x24001c0c
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d017      	beq.n	8009dfa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dca:	4b13      	ldr	r3, [pc, #76]	; (8009e18 <vTaskDelay+0x60>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d00a      	beq.n	8009de8 <vTaskDelay+0x30>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	60bb      	str	r3, [r7, #8]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009de8:	f000 f884 	bl	8009ef4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009dec:	2100      	movs	r1, #0
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fe06 	bl	800aa00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009df4:	f000 f88c 	bl	8009f10 <xTaskResumeAll>
 8009df8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d107      	bne.n	8009e10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <vTaskDelay+0x64>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e10:	bf00      	nop
 8009e12:	3710      	adds	r7, #16
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	24001d30 	.word	0x24001d30
 8009e1c:	e000ed04 	.word	0xe000ed04

08009e20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b08a      	sub	sp, #40	; 0x28
 8009e24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009e2e:	463a      	mov	r2, r7
 8009e30:	1d39      	adds	r1, r7, #4
 8009e32:	f107 0308 	add.w	r3, r7, #8
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f6 fc1e 	bl	8000678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009e3c:	6839      	ldr	r1, [r7, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	9202      	str	r2, [sp, #8]
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	2300      	movs	r3, #0
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	460a      	mov	r2, r1
 8009e4e:	4921      	ldr	r1, [pc, #132]	; (8009ed4 <vTaskStartScheduler+0xb4>)
 8009e50:	4821      	ldr	r0, [pc, #132]	; (8009ed8 <vTaskStartScheduler+0xb8>)
 8009e52:	f7ff fe07 	bl	8009a64 <xTaskCreateStatic>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4a20      	ldr	r2, [pc, #128]	; (8009edc <vTaskStartScheduler+0xbc>)
 8009e5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009e5c:	4b1f      	ldr	r3, [pc, #124]	; (8009edc <vTaskStartScheduler+0xbc>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009e64:	2301      	movs	r3, #1
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	e001      	b.n	8009e6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d11b      	bne.n	8009eac <vTaskStartScheduler+0x8c>
	__asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	613b      	str	r3, [r7, #16]
}
 8009e86:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009e88:	4b15      	ldr	r3, [pc, #84]	; (8009ee0 <vTaskStartScheduler+0xc0>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	334c      	adds	r3, #76	; 0x4c
 8009e8e:	4a15      	ldr	r2, [pc, #84]	; (8009ee4 <vTaskStartScheduler+0xc4>)
 8009e90:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <vTaskStartScheduler+0xc8>)
 8009e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e98:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009e9a:	4b14      	ldr	r3, [pc, #80]	; (8009eec <vTaskStartScheduler+0xcc>)
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009ea0:	4b13      	ldr	r3, [pc, #76]	; (8009ef0 <vTaskStartScheduler+0xd0>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009ea6:	f000 fe9b 	bl	800abe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009eaa:	e00e      	b.n	8009eca <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eb2:	d10a      	bne.n	8009eca <vTaskStartScheduler+0xaa>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	60fb      	str	r3, [r7, #12]
}
 8009ec6:	bf00      	nop
 8009ec8:	e7fe      	b.n	8009ec8 <vTaskStartScheduler+0xa8>
}
 8009eca:	bf00      	nop
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	08018c38 	.word	0x08018c38
 8009ed8:	0800a4d5 	.word	0x0800a4d5
 8009edc:	24001d2c 	.word	0x24001d2c
 8009ee0:	24001c08 	.word	0x24001c08
 8009ee4:	24000038 	.word	0x24000038
 8009ee8:	24001d28 	.word	0x24001d28
 8009eec:	24001d14 	.word	0x24001d14
 8009ef0:	24001d0c 	.word	0x24001d0c

08009ef4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <vTaskSuspendAll+0x18>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3301      	adds	r3, #1
 8009efe:	4a03      	ldr	r2, [pc, #12]	; (8009f0c <vTaskSuspendAll+0x18>)
 8009f00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009f02:	bf00      	nop
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	24001d30 	.word	0x24001d30

08009f10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009f1e:	4b41      	ldr	r3, [pc, #260]	; (800a024 <xTaskResumeAll+0x114>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10a      	bne.n	8009f3c <xTaskResumeAll+0x2c>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	f383 8811 	msr	BASEPRI, r3
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	f3bf 8f4f 	dsb	sy
 8009f36:	603b      	str	r3, [r7, #0]
}
 8009f38:	bf00      	nop
 8009f3a:	e7fe      	b.n	8009f3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009f3c:	f000 fef2 	bl	800ad24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009f40:	4b38      	ldr	r3, [pc, #224]	; (800a024 <xTaskResumeAll+0x114>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3b01      	subs	r3, #1
 8009f46:	4a37      	ldr	r2, [pc, #220]	; (800a024 <xTaskResumeAll+0x114>)
 8009f48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f4a:	4b36      	ldr	r3, [pc, #216]	; (800a024 <xTaskResumeAll+0x114>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d161      	bne.n	800a016 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009f52:	4b35      	ldr	r3, [pc, #212]	; (800a028 <xTaskResumeAll+0x118>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d05d      	beq.n	800a016 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009f5a:	e02e      	b.n	8009fba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f5c:	4b33      	ldr	r3, [pc, #204]	; (800a02c <xTaskResumeAll+0x11c>)
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3318      	adds	r3, #24
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fe fe11 	bl	8008b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3304      	adds	r3, #4
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fe0c 	bl	8008b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	409a      	lsls	r2, r3
 8009f80:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <xTaskResumeAll+0x120>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4313      	orrs	r3, r2
 8009f86:	4a2a      	ldr	r2, [pc, #168]	; (800a030 <xTaskResumeAll+0x120>)
 8009f88:	6013      	str	r3, [r2, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4a27      	ldr	r2, [pc, #156]	; (800a034 <xTaskResumeAll+0x124>)
 8009f98:	441a      	add	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	f7fe fd98 	bl	8008ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009faa:	4b23      	ldr	r3, [pc, #140]	; (800a038 <xTaskResumeAll+0x128>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d302      	bcc.n	8009fba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009fb4:	4b21      	ldr	r3, [pc, #132]	; (800a03c <xTaskResumeAll+0x12c>)
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009fba:	4b1c      	ldr	r3, [pc, #112]	; (800a02c <xTaskResumeAll+0x11c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1cc      	bne.n	8009f5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d001      	beq.n	8009fcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009fc8:	f000 fb3e 	bl	800a648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009fcc:	4b1c      	ldr	r3, [pc, #112]	; (800a040 <xTaskResumeAll+0x130>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d010      	beq.n	8009ffa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009fd8:	f000 f858 	bl	800a08c <xTaskIncrementTick>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009fe2:	4b16      	ldr	r3, [pc, #88]	; (800a03c <xTaskResumeAll+0x12c>)
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	3b01      	subs	r3, #1
 8009fec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d1f1      	bne.n	8009fd8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8009ff4:	4b12      	ldr	r3, [pc, #72]	; (800a040 <xTaskResumeAll+0x130>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ffa:	4b10      	ldr	r3, [pc, #64]	; (800a03c <xTaskResumeAll+0x12c>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d009      	beq.n	800a016 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a002:	2301      	movs	r3, #1
 800a004:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a006:	4b0f      	ldr	r3, [pc, #60]	; (800a044 <xTaskResumeAll+0x134>)
 800a008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a016:	f000 feb5 	bl	800ad84 <vPortExitCritical>

	return xAlreadyYielded;
 800a01a:	68bb      	ldr	r3, [r7, #8]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	24001d30 	.word	0x24001d30
 800a028:	24001d08 	.word	0x24001d08
 800a02c:	24001cc8 	.word	0x24001cc8
 800a030:	24001d10 	.word	0x24001d10
 800a034:	24001c0c 	.word	0x24001c0c
 800a038:	24001c08 	.word	0x24001c08
 800a03c:	24001d1c 	.word	0x24001d1c
 800a040:	24001d18 	.word	0x24001d18
 800a044:	e000ed04 	.word	0xe000ed04

0800a048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a048:	b480      	push	{r7}
 800a04a:	b083      	sub	sp, #12
 800a04c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a04e:	4b05      	ldr	r3, [pc, #20]	; (800a064 <xTaskGetTickCount+0x1c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a054:	687b      	ldr	r3, [r7, #4]
}
 800a056:	4618      	mov	r0, r3
 800a058:	370c      	adds	r7, #12
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	24001d0c 	.word	0x24001d0c

0800a068 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a06e:	f000 ff3b 	bl	800aee8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a072:	2300      	movs	r3, #0
 800a074:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a076:	4b04      	ldr	r3, [pc, #16]	; (800a088 <xTaskGetTickCountFromISR+0x20>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a07c:	683b      	ldr	r3, [r7, #0]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3708      	adds	r7, #8
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	24001d0c 	.word	0x24001d0c

0800a08c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a092:	2300      	movs	r3, #0
 800a094:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a096:	4b4e      	ldr	r3, [pc, #312]	; (800a1d0 <xTaskIncrementTick+0x144>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f040 808e 	bne.w	800a1bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a0a0:	4b4c      	ldr	r3, [pc, #304]	; (800a1d4 <xTaskIncrementTick+0x148>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a0a8:	4a4a      	ldr	r2, [pc, #296]	; (800a1d4 <xTaskIncrementTick+0x148>)
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d120      	bne.n	800a0f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a0b4:	4b48      	ldr	r3, [pc, #288]	; (800a1d8 <xTaskIncrementTick+0x14c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00a      	beq.n	800a0d4 <xTaskIncrementTick+0x48>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	603b      	str	r3, [r7, #0]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <xTaskIncrementTick+0x46>
 800a0d4:	4b40      	ldr	r3, [pc, #256]	; (800a1d8 <xTaskIncrementTick+0x14c>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	4b40      	ldr	r3, [pc, #256]	; (800a1dc <xTaskIncrementTick+0x150>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a3e      	ldr	r2, [pc, #248]	; (800a1d8 <xTaskIncrementTick+0x14c>)
 800a0e0:	6013      	str	r3, [r2, #0]
 800a0e2:	4a3e      	ldr	r2, [pc, #248]	; (800a1dc <xTaskIncrementTick+0x150>)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	4b3d      	ldr	r3, [pc, #244]	; (800a1e0 <xTaskIncrementTick+0x154>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	4a3c      	ldr	r2, [pc, #240]	; (800a1e0 <xTaskIncrementTick+0x154>)
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	f000 faa9 	bl	800a648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a0f6:	4b3b      	ldr	r3, [pc, #236]	; (800a1e4 <xTaskIncrementTick+0x158>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	693a      	ldr	r2, [r7, #16]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d348      	bcc.n	800a192 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a100:	4b35      	ldr	r3, [pc, #212]	; (800a1d8 <xTaskIncrementTick+0x14c>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d104      	bne.n	800a114 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10a:	4b36      	ldr	r3, [pc, #216]	; (800a1e4 <xTaskIncrementTick+0x158>)
 800a10c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a110:	601a      	str	r2, [r3, #0]
					break;
 800a112:	e03e      	b.n	800a192 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a114:	4b30      	ldr	r3, [pc, #192]	; (800a1d8 <xTaskIncrementTick+0x14c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d203      	bcs.n	800a134 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a12c:	4a2d      	ldr	r2, [pc, #180]	; (800a1e4 <xTaskIncrementTick+0x158>)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a132:	e02e      	b.n	800a192 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	3304      	adds	r3, #4
 800a138:	4618      	mov	r0, r3
 800a13a:	f7fe fd29 	bl	8008b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a142:	2b00      	cmp	r3, #0
 800a144:	d004      	beq.n	800a150 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	3318      	adds	r3, #24
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7fe fd20 	bl	8008b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	2201      	movs	r2, #1
 800a156:	409a      	lsls	r2, r3
 800a158:	4b23      	ldr	r3, [pc, #140]	; (800a1e8 <xTaskIncrementTick+0x15c>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	4a22      	ldr	r2, [pc, #136]	; (800a1e8 <xTaskIncrementTick+0x15c>)
 800a160:	6013      	str	r3, [r2, #0]
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a166:	4613      	mov	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4a1f      	ldr	r2, [pc, #124]	; (800a1ec <xTaskIncrementTick+0x160>)
 800a170:	441a      	add	r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	3304      	adds	r3, #4
 800a176:	4619      	mov	r1, r3
 800a178:	4610      	mov	r0, r2
 800a17a:	f7fe fcac 	bl	8008ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a182:	4b1b      	ldr	r3, [pc, #108]	; (800a1f0 <xTaskIncrementTick+0x164>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a188:	429a      	cmp	r2, r3
 800a18a:	d3b9      	bcc.n	800a100 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a18c:	2301      	movs	r3, #1
 800a18e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a190:	e7b6      	b.n	800a100 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a192:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <xTaskIncrementTick+0x164>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a198:	4914      	ldr	r1, [pc, #80]	; (800a1ec <xTaskIncrementTick+0x160>)
 800a19a:	4613      	mov	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	4413      	add	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d901      	bls.n	800a1ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a1ae:	4b11      	ldr	r3, [pc, #68]	; (800a1f4 <xTaskIncrementTick+0x168>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d007      	beq.n	800a1c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	617b      	str	r3, [r7, #20]
 800a1ba:	e004      	b.n	800a1c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a1bc:	4b0e      	ldr	r3, [pc, #56]	; (800a1f8 <xTaskIncrementTick+0x16c>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3301      	adds	r3, #1
 800a1c2:	4a0d      	ldr	r2, [pc, #52]	; (800a1f8 <xTaskIncrementTick+0x16c>)
 800a1c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a1c6:	697b      	ldr	r3, [r7, #20]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3718      	adds	r7, #24
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	24001d30 	.word	0x24001d30
 800a1d4:	24001d0c 	.word	0x24001d0c
 800a1d8:	24001cc0 	.word	0x24001cc0
 800a1dc:	24001cc4 	.word	0x24001cc4
 800a1e0:	24001d20 	.word	0x24001d20
 800a1e4:	24001d28 	.word	0x24001d28
 800a1e8:	24001d10 	.word	0x24001d10
 800a1ec:	24001c0c 	.word	0x24001c0c
 800a1f0:	24001c08 	.word	0x24001c08
 800a1f4:	24001d1c 	.word	0x24001d1c
 800a1f8:	24001d18 	.word	0x24001d18

0800a1fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a202:	4b29      	ldr	r3, [pc, #164]	; (800a2a8 <vTaskSwitchContext+0xac>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a20a:	4b28      	ldr	r3, [pc, #160]	; (800a2ac <vTaskSwitchContext+0xb0>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a210:	e044      	b.n	800a29c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a212:	4b26      	ldr	r3, [pc, #152]	; (800a2ac <vTaskSwitchContext+0xb0>)
 800a214:	2200      	movs	r2, #0
 800a216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a218:	4b25      	ldr	r3, [pc, #148]	; (800a2b0 <vTaskSwitchContext+0xb4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	fab3 f383 	clz	r3, r3
 800a224:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a226:	7afb      	ldrb	r3, [r7, #11]
 800a228:	f1c3 031f 	rsb	r3, r3, #31
 800a22c:	617b      	str	r3, [r7, #20]
 800a22e:	4921      	ldr	r1, [pc, #132]	; (800a2b4 <vTaskSwitchContext+0xb8>)
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	4613      	mov	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4413      	add	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	440b      	add	r3, r1
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10a      	bne.n	800a258 <vTaskSwitchContext+0x5c>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	607b      	str	r3, [r7, #4]
}
 800a254:	bf00      	nop
 800a256:	e7fe      	b.n	800a256 <vTaskSwitchContext+0x5a>
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	4613      	mov	r3, r2
 800a25c:	009b      	lsls	r3, r3, #2
 800a25e:	4413      	add	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4a14      	ldr	r2, [pc, #80]	; (800a2b4 <vTaskSwitchContext+0xb8>)
 800a264:	4413      	add	r3, r2
 800a266:	613b      	str	r3, [r7, #16]
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	605a      	str	r2, [r3, #4]
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	3308      	adds	r3, #8
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d104      	bne.n	800a288 <vTaskSwitchContext+0x8c>
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	605a      	str	r2, [r3, #4]
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	4a0a      	ldr	r2, [pc, #40]	; (800a2b8 <vTaskSwitchContext+0xbc>)
 800a290:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a292:	4b09      	ldr	r3, [pc, #36]	; (800a2b8 <vTaskSwitchContext+0xbc>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	334c      	adds	r3, #76	; 0x4c
 800a298:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <vTaskSwitchContext+0xc0>)
 800a29a:	6013      	str	r3, [r2, #0]
}
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr
 800a2a8:	24001d30 	.word	0x24001d30
 800a2ac:	24001d1c 	.word	0x24001d1c
 800a2b0:	24001d10 	.word	0x24001d10
 800a2b4:	24001c0c 	.word	0x24001c0c
 800a2b8:	24001c08 	.word	0x24001c08
 800a2bc:	24000038 	.word	0x24000038

0800a2c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10a      	bne.n	800a2e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d4:	f383 8811 	msr	BASEPRI, r3
 800a2d8:	f3bf 8f6f 	isb	sy
 800a2dc:	f3bf 8f4f 	dsb	sy
 800a2e0:	60fb      	str	r3, [r7, #12]
}
 800a2e2:	bf00      	nop
 800a2e4:	e7fe      	b.n	800a2e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a2e6:	4b07      	ldr	r3, [pc, #28]	; (800a304 <vTaskPlaceOnEventList+0x44>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	3318      	adds	r3, #24
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fe fc15 	bl	8008b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	6838      	ldr	r0, [r7, #0]
 800a2f8:	f000 fb82 	bl	800aa00 <prvAddCurrentTaskToDelayedList>
}
 800a2fc:	bf00      	nop
 800a2fe:	3710      	adds	r7, #16
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}
 800a304:	24001c08 	.word	0x24001c08

0800a308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10a      	bne.n	800a334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	60fb      	str	r3, [r7, #12]
}
 800a330:	bf00      	nop
 800a332:	e7fe      	b.n	800a332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	3318      	adds	r3, #24
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fe fc29 	bl	8008b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a33e:	4b1d      	ldr	r3, [pc, #116]	; (800a3b4 <xTaskRemoveFromEventList+0xac>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d11c      	bne.n	800a380 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	3304      	adds	r3, #4
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fe fc20 	bl	8008b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a354:	2201      	movs	r2, #1
 800a356:	409a      	lsls	r2, r3
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <xTaskRemoveFromEventList+0xb0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4313      	orrs	r3, r2
 800a35e:	4a16      	ldr	r2, [pc, #88]	; (800a3b8 <xTaskRemoveFromEventList+0xb0>)
 800a360:	6013      	str	r3, [r2, #0]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a366:	4613      	mov	r3, r2
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4a13      	ldr	r2, [pc, #76]	; (800a3bc <xTaskRemoveFromEventList+0xb4>)
 800a370:	441a      	add	r2, r3
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	3304      	adds	r3, #4
 800a376:	4619      	mov	r1, r3
 800a378:	4610      	mov	r0, r2
 800a37a:	f7fe fbac 	bl	8008ad6 <vListInsertEnd>
 800a37e:	e005      	b.n	800a38c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	3318      	adds	r3, #24
 800a384:	4619      	mov	r1, r3
 800a386:	480e      	ldr	r0, [pc, #56]	; (800a3c0 <xTaskRemoveFromEventList+0xb8>)
 800a388:	f7fe fba5 	bl	8008ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a390:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <xTaskRemoveFromEventList+0xbc>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a396:	429a      	cmp	r2, r3
 800a398:	d905      	bls.n	800a3a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a39a:	2301      	movs	r3, #1
 800a39c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a39e:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <xTaskRemoveFromEventList+0xc0>)
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	e001      	b.n	800a3aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a3aa:	697b      	ldr	r3, [r7, #20]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3718      	adds	r7, #24
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	24001d30 	.word	0x24001d30
 800a3b8:	24001d10 	.word	0x24001d10
 800a3bc:	24001c0c 	.word	0x24001c0c
 800a3c0:	24001cc8 	.word	0x24001cc8
 800a3c4:	24001c08 	.word	0x24001c08
 800a3c8:	24001d1c 	.word	0x24001d1c

0800a3cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a3d4:	4b06      	ldr	r3, [pc, #24]	; (800a3f0 <vTaskInternalSetTimeOutState+0x24>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a3dc:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <vTaskInternalSetTimeOutState+0x28>)
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	605a      	str	r2, [r3, #4]
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	24001d20 	.word	0x24001d20
 800a3f4:	24001d0c 	.word	0x24001d0c

0800a3f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b088      	sub	sp, #32
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d10a      	bne.n	800a41e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	613b      	str	r3, [r7, #16]
}
 800a41a:	bf00      	nop
 800a41c:	e7fe      	b.n	800a41c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d10a      	bne.n	800a43a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	60fb      	str	r3, [r7, #12]
}
 800a436:	bf00      	nop
 800a438:	e7fe      	b.n	800a438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a43a:	f000 fc73 	bl	800ad24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a43e:	4b1d      	ldr	r3, [pc, #116]	; (800a4b4 <xTaskCheckForTimeOut+0xbc>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a456:	d102      	bne.n	800a45e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	e023      	b.n	800a4a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	4b15      	ldr	r3, [pc, #84]	; (800a4b8 <xTaskCheckForTimeOut+0xc0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	429a      	cmp	r2, r3
 800a468:	d007      	beq.n	800a47a <xTaskCheckForTimeOut+0x82>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	69ba      	ldr	r2, [r7, #24]
 800a470:	429a      	cmp	r2, r3
 800a472:	d302      	bcc.n	800a47a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a474:	2301      	movs	r3, #1
 800a476:	61fb      	str	r3, [r7, #28]
 800a478:	e015      	b.n	800a4a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	429a      	cmp	r2, r3
 800a482:	d20b      	bcs.n	800a49c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	1ad2      	subs	r2, r2, r3
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f7ff ff9b 	bl	800a3cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	e004      	b.n	800a4a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a4a6:	f000 fc6d 	bl	800ad84 <vPortExitCritical>

	return xReturn;
 800a4aa:	69fb      	ldr	r3, [r7, #28]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3720      	adds	r7, #32
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	24001d0c 	.word	0x24001d0c
 800a4b8:	24001d20 	.word	0x24001d20

0800a4bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a4bc:	b480      	push	{r7}
 800a4be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a4c0:	4b03      	ldr	r3, [pc, #12]	; (800a4d0 <vTaskMissedYield+0x14>)
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	601a      	str	r2, [r3, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	24001d1c 	.word	0x24001d1c

0800a4d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a4dc:	f000 f852 	bl	800a584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a4e0:	4b06      	ldr	r3, [pc, #24]	; (800a4fc <prvIdleTask+0x28>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d9f9      	bls.n	800a4dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800a4e8:	4b05      	ldr	r3, [pc, #20]	; (800a500 <prvIdleTask+0x2c>)
 800a4ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ee:	601a      	str	r2, [r3, #0]
 800a4f0:	f3bf 8f4f 	dsb	sy
 800a4f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4f8:	e7f0      	b.n	800a4dc <prvIdleTask+0x8>
 800a4fa:	bf00      	nop
 800a4fc:	24001c0c 	.word	0x24001c0c
 800a500:	e000ed04 	.word	0xe000ed04

0800a504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a50a:	2300      	movs	r3, #0
 800a50c:	607b      	str	r3, [r7, #4]
 800a50e:	e00c      	b.n	800a52a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	4613      	mov	r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4a12      	ldr	r2, [pc, #72]	; (800a564 <prvInitialiseTaskLists+0x60>)
 800a51c:	4413      	add	r3, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe faac 	bl	8008a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3301      	adds	r3, #1
 800a528:	607b      	str	r3, [r7, #4]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2b06      	cmp	r3, #6
 800a52e:	d9ef      	bls.n	800a510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a530:	480d      	ldr	r0, [pc, #52]	; (800a568 <prvInitialiseTaskLists+0x64>)
 800a532:	f7fe faa3 	bl	8008a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a536:	480d      	ldr	r0, [pc, #52]	; (800a56c <prvInitialiseTaskLists+0x68>)
 800a538:	f7fe faa0 	bl	8008a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a53c:	480c      	ldr	r0, [pc, #48]	; (800a570 <prvInitialiseTaskLists+0x6c>)
 800a53e:	f7fe fa9d 	bl	8008a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a542:	480c      	ldr	r0, [pc, #48]	; (800a574 <prvInitialiseTaskLists+0x70>)
 800a544:	f7fe fa9a 	bl	8008a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a548:	480b      	ldr	r0, [pc, #44]	; (800a578 <prvInitialiseTaskLists+0x74>)
 800a54a:	f7fe fa97 	bl	8008a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a54e:	4b0b      	ldr	r3, [pc, #44]	; (800a57c <prvInitialiseTaskLists+0x78>)
 800a550:	4a05      	ldr	r2, [pc, #20]	; (800a568 <prvInitialiseTaskLists+0x64>)
 800a552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a554:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <prvInitialiseTaskLists+0x7c>)
 800a556:	4a05      	ldr	r2, [pc, #20]	; (800a56c <prvInitialiseTaskLists+0x68>)
 800a558:	601a      	str	r2, [r3, #0]
}
 800a55a:	bf00      	nop
 800a55c:	3708      	adds	r7, #8
 800a55e:	46bd      	mov	sp, r7
 800a560:	bd80      	pop	{r7, pc}
 800a562:	bf00      	nop
 800a564:	24001c0c 	.word	0x24001c0c
 800a568:	24001c98 	.word	0x24001c98
 800a56c:	24001cac 	.word	0x24001cac
 800a570:	24001cc8 	.word	0x24001cc8
 800a574:	24001cdc 	.word	0x24001cdc
 800a578:	24001cf4 	.word	0x24001cf4
 800a57c:	24001cc0 	.word	0x24001cc0
 800a580:	24001cc4 	.word	0x24001cc4

0800a584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a58a:	e019      	b.n	800a5c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a58c:	f000 fbca 	bl	800ad24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a590:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <prvCheckTasksWaitingTermination+0x50>)
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	68db      	ldr	r3, [r3, #12]
 800a596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe faf7 	bl	8008b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a5a2:	4b0d      	ldr	r3, [pc, #52]	; (800a5d8 <prvCheckTasksWaitingTermination+0x54>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	4a0b      	ldr	r2, [pc, #44]	; (800a5d8 <prvCheckTasksWaitingTermination+0x54>)
 800a5aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a5ac:	4b0b      	ldr	r3, [pc, #44]	; (800a5dc <prvCheckTasksWaitingTermination+0x58>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	4a0a      	ldr	r2, [pc, #40]	; (800a5dc <prvCheckTasksWaitingTermination+0x58>)
 800a5b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a5b6:	f000 fbe5 	bl	800ad84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f810 	bl	800a5e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <prvCheckTasksWaitingTermination+0x58>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e1      	bne.n	800a58c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a5c8:	bf00      	nop
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	24001cdc 	.word	0x24001cdc
 800a5d8:	24001d08 	.word	0x24001d08
 800a5dc:	24001cf0 	.word	0x24001cf0

0800a5e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	334c      	adds	r3, #76	; 0x4c
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f00d fbe9 	bl	8017dc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d108      	bne.n	800a60e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a600:	4618      	mov	r0, r3
 800a602:	f000 fd7d 	bl	800b100 <vPortFree>
				vPortFree( pxTCB );
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fd7a 	bl	800b100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a60c:	e018      	b.n	800a640 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a614:	2b01      	cmp	r3, #1
 800a616:	d103      	bne.n	800a620 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f000 fd71 	bl	800b100 <vPortFree>
	}
 800a61e:	e00f      	b.n	800a640 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a626:	2b02      	cmp	r3, #2
 800a628:	d00a      	beq.n	800a640 <prvDeleteTCB+0x60>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	60fb      	str	r3, [r7, #12]
}
 800a63c:	bf00      	nop
 800a63e:	e7fe      	b.n	800a63e <prvDeleteTCB+0x5e>
	}
 800a640:	bf00      	nop
 800a642:	3710      	adds	r7, #16
 800a644:	46bd      	mov	sp, r7
 800a646:	bd80      	pop	{r7, pc}

0800a648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a64e:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <prvResetNextTaskUnblockTime+0x38>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d104      	bne.n	800a662 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a658:	4b0a      	ldr	r3, [pc, #40]	; (800a684 <prvResetNextTaskUnblockTime+0x3c>)
 800a65a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a65e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a660:	e008      	b.n	800a674 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a662:	4b07      	ldr	r3, [pc, #28]	; (800a680 <prvResetNextTaskUnblockTime+0x38>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	4a04      	ldr	r2, [pc, #16]	; (800a684 <prvResetNextTaskUnblockTime+0x3c>)
 800a672:	6013      	str	r3, [r2, #0]
}
 800a674:	bf00      	nop
 800a676:	370c      	adds	r7, #12
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	24001cc0 	.word	0x24001cc0
 800a684:	24001d28 	.word	0x24001d28

0800a688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a68e:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <xTaskGetSchedulerState+0x34>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d102      	bne.n	800a69c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a696:	2301      	movs	r3, #1
 800a698:	607b      	str	r3, [r7, #4]
 800a69a:	e008      	b.n	800a6ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a69c:	4b08      	ldr	r3, [pc, #32]	; (800a6c0 <xTaskGetSchedulerState+0x38>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	607b      	str	r3, [r7, #4]
 800a6a8:	e001      	b.n	800a6ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a6ae:	687b      	ldr	r3, [r7, #4]
	}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	24001d14 	.word	0x24001d14
 800a6c0:	24001d30 	.word	0x24001d30

0800a6c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d05e      	beq.n	800a798 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6de:	4b31      	ldr	r3, [pc, #196]	; (800a7a4 <xTaskPriorityInherit+0xe0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d24e      	bcs.n	800a786 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	db06      	blt.n	800a6fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6f0:	4b2c      	ldr	r3, [pc, #176]	; (800a7a4 <xTaskPriorityInherit+0xe0>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f6:	f1c3 0207 	rsb	r2, r3, #7
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	6959      	ldr	r1, [r3, #20]
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4a26      	ldr	r2, [pc, #152]	; (800a7a8 <xTaskPriorityInherit+0xe4>)
 800a710:	4413      	add	r3, r2
 800a712:	4299      	cmp	r1, r3
 800a714:	d12f      	bne.n	800a776 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	3304      	adds	r3, #4
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7fe fa38 	bl	8008b90 <uxListRemove>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10a      	bne.n	800a73c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	2201      	movs	r2, #1
 800a72c:	fa02 f303 	lsl.w	r3, r2, r3
 800a730:	43da      	mvns	r2, r3
 800a732:	4b1e      	ldr	r3, [pc, #120]	; (800a7ac <xTaskPriorityInherit+0xe8>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4013      	ands	r3, r2
 800a738:	4a1c      	ldr	r2, [pc, #112]	; (800a7ac <xTaskPriorityInherit+0xe8>)
 800a73a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a73c:	4b19      	ldr	r3, [pc, #100]	; (800a7a4 <xTaskPriorityInherit+0xe0>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a74a:	2201      	movs	r2, #1
 800a74c:	409a      	lsls	r2, r3
 800a74e:	4b17      	ldr	r3, [pc, #92]	; (800a7ac <xTaskPriorityInherit+0xe8>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4313      	orrs	r3, r2
 800a754:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <xTaskPriorityInherit+0xe8>)
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4a10      	ldr	r2, [pc, #64]	; (800a7a8 <xTaskPriorityInherit+0xe4>)
 800a766:	441a      	add	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7fe f9b1 	bl	8008ad6 <vListInsertEnd>
 800a774:	e004      	b.n	800a780 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a776:	4b0b      	ldr	r3, [pc, #44]	; (800a7a4 <xTaskPriorityInherit+0xe0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a780:	2301      	movs	r3, #1
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e008      	b.n	800a798 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a78a:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <xTaskPriorityInherit+0xe0>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	429a      	cmp	r2, r3
 800a792:	d201      	bcs.n	800a798 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a794:	2301      	movs	r3, #1
 800a796:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a798:	68fb      	ldr	r3, [r7, #12]
	}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	24001c08 	.word	0x24001c08
 800a7a8:	24001c0c 	.word	0x24001c0c
 800a7ac:	24001d10 	.word	0x24001d10

0800a7b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d06e      	beq.n	800a8a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a7c6:	4b3a      	ldr	r3, [pc, #232]	; (800a8b0 <xTaskPriorityDisinherit+0x100>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d00a      	beq.n	800a7e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60fb      	str	r3, [r7, #12]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f2:	f383 8811 	msr	BASEPRI, r3
 800a7f6:	f3bf 8f6f 	isb	sy
 800a7fa:	f3bf 8f4f 	dsb	sy
 800a7fe:	60bb      	str	r3, [r7, #8]
}
 800a800:	bf00      	nop
 800a802:	e7fe      	b.n	800a802 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a808:	1e5a      	subs	r2, r3, #1
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a816:	429a      	cmp	r2, r3
 800a818:	d044      	beq.n	800a8a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d140      	bne.n	800a8a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	3304      	adds	r3, #4
 800a826:	4618      	mov	r0, r3
 800a828:	f7fe f9b2 	bl	8008b90 <uxListRemove>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d115      	bne.n	800a85e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a836:	491f      	ldr	r1, [pc, #124]	; (800a8b4 <xTaskPriorityDisinherit+0x104>)
 800a838:	4613      	mov	r3, r2
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	4413      	add	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10a      	bne.n	800a85e <xTaskPriorityDisinherit+0xae>
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a84c:	2201      	movs	r2, #1
 800a84e:	fa02 f303 	lsl.w	r3, r2, r3
 800a852:	43da      	mvns	r2, r3
 800a854:	4b18      	ldr	r3, [pc, #96]	; (800a8b8 <xTaskPriorityDisinherit+0x108>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4013      	ands	r3, r2
 800a85a:	4a17      	ldr	r2, [pc, #92]	; (800a8b8 <xTaskPriorityDisinherit+0x108>)
 800a85c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a86a:	f1c3 0207 	rsb	r2, r3, #7
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	2201      	movs	r2, #1
 800a878:	409a      	lsls	r2, r3
 800a87a:	4b0f      	ldr	r3, [pc, #60]	; (800a8b8 <xTaskPriorityDisinherit+0x108>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4313      	orrs	r3, r2
 800a880:	4a0d      	ldr	r2, [pc, #52]	; (800a8b8 <xTaskPriorityDisinherit+0x108>)
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4a08      	ldr	r2, [pc, #32]	; (800a8b4 <xTaskPriorityDisinherit+0x104>)
 800a892:	441a      	add	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fe f91b 	bl	8008ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a8a4:	697b      	ldr	r3, [r7, #20]
	}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	24001c08 	.word	0x24001c08
 800a8b4:	24001c0c 	.word	0x24001c0c
 800a8b8:	24001d10 	.word	0x24001d10

0800a8bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b088      	sub	sp, #32
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d077      	beq.n	800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10a      	bne.n	800a8f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	60fb      	str	r3, [r7, #12]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d902      	bls.n	800a902 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	61fb      	str	r3, [r7, #28]
 800a900:	e002      	b.n	800a908 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a906:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	69fa      	ldr	r2, [r7, #28]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d058      	beq.n	800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d153      	bne.n	800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a91c:	4b2b      	ldr	r3, [pc, #172]	; (800a9cc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	429a      	cmp	r2, r3
 800a924:	d10a      	bne.n	800a93c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60bb      	str	r3, [r7, #8]
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a940:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	69fa      	ldr	r2, [r7, #28]
 800a946:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	db04      	blt.n	800a95a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	f1c3 0207 	rsb	r2, r3, #7
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	6959      	ldr	r1, [r3, #20]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4613      	mov	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	4413      	add	r3, r2
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4a19      	ldr	r2, [pc, #100]	; (800a9d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a96a:	4413      	add	r3, r2
 800a96c:	4299      	cmp	r1, r3
 800a96e:	d129      	bne.n	800a9c4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	3304      	adds	r3, #4
 800a974:	4618      	mov	r0, r3
 800a976:	f7fe f90b 	bl	8008b90 <uxListRemove>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10a      	bne.n	800a996 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a984:	2201      	movs	r2, #1
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	43da      	mvns	r2, r3
 800a98c:	4b11      	ldr	r3, [pc, #68]	; (800a9d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4013      	ands	r3, r2
 800a992:	4a10      	ldr	r2, [pc, #64]	; (800a9d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a994:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99a:	2201      	movs	r2, #1
 800a99c:	409a      	lsls	r2, r3
 800a99e:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4313      	orrs	r3, r2
 800a9a4:	4a0b      	ldr	r2, [pc, #44]	; (800a9d4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ac:	4613      	mov	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4413      	add	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4a06      	ldr	r2, [pc, #24]	; (800a9d0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a9b6:	441a      	add	r2, r3
 800a9b8:	69bb      	ldr	r3, [r7, #24]
 800a9ba:	3304      	adds	r3, #4
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4610      	mov	r0, r2
 800a9c0:	f7fe f889 	bl	8008ad6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9c4:	bf00      	nop
 800a9c6:	3720      	adds	r7, #32
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	24001c08 	.word	0x24001c08
 800a9d0:	24001c0c 	.word	0x24001c0c
 800a9d4:	24001d10 	.word	0x24001d10

0800a9d8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a9dc:	4b07      	ldr	r3, [pc, #28]	; (800a9fc <pvTaskIncrementMutexHeldCount+0x24>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d004      	beq.n	800a9ee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <pvTaskIncrementMutexHeldCount+0x24>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9ea:	3201      	adds	r2, #1
 800a9ec:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a9ee:	4b03      	ldr	r3, [pc, #12]	; (800a9fc <pvTaskIncrementMutexHeldCount+0x24>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
	}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	24001c08 	.word	0x24001c08

0800aa00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa0a:	4b29      	ldr	r3, [pc, #164]	; (800aab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa10:	4b28      	ldr	r3, [pc, #160]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	3304      	adds	r3, #4
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fe f8ba 	bl	8008b90 <uxListRemove>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10b      	bne.n	800aa3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	2201      	movs	r2, #1
 800aa2a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2e:	43da      	mvns	r2, r3
 800aa30:	4b21      	ldr	r3, [pc, #132]	; (800aab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4013      	ands	r3, r2
 800aa36:	4a20      	ldr	r2, [pc, #128]	; (800aab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa40:	d10a      	bne.n	800aa58 <prvAddCurrentTaskToDelayedList+0x58>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa48:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	4619      	mov	r1, r3
 800aa50:	481a      	ldr	r0, [pc, #104]	; (800aabc <prvAddCurrentTaskToDelayedList+0xbc>)
 800aa52:	f7fe f840 	bl	8008ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa56:	e026      	b.n	800aaa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa60:	4b14      	ldr	r3, [pc, #80]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa68:	68ba      	ldr	r2, [r7, #8]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d209      	bcs.n	800aa84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa70:	4b13      	ldr	r3, [pc, #76]	; (800aac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3304      	adds	r3, #4
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	f7fe f84e 	bl	8008b1e <vListInsert>
}
 800aa82:	e010      	b.n	800aaa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa84:	4b0f      	ldr	r3, [pc, #60]	; (800aac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	4b0a      	ldr	r3, [pc, #40]	; (800aab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4610      	mov	r0, r2
 800aa92:	f7fe f844 	bl	8008b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68ba      	ldr	r2, [r7, #8]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d202      	bcs.n	800aaa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aaa0:	4a09      	ldr	r2, [pc, #36]	; (800aac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	6013      	str	r3, [r2, #0]
}
 800aaa6:	bf00      	nop
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	24001d0c 	.word	0x24001d0c
 800aab4:	24001c08 	.word	0x24001c08
 800aab8:	24001d10 	.word	0x24001d10
 800aabc:	24001cf4 	.word	0x24001cf4
 800aac0:	24001cc4 	.word	0x24001cc4
 800aac4:	24001cc0 	.word	0x24001cc0
 800aac8:	24001d28 	.word	0x24001d28

0800aacc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3b04      	subs	r3, #4
 800aadc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800aae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	3b04      	subs	r3, #4
 800aaea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f023 0201 	bic.w	r2, r3, #1
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3b04      	subs	r3, #4
 800aafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800aafc:	4a0c      	ldr	r2, [pc, #48]	; (800ab30 <pxPortInitialiseStack+0x64>)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	3b14      	subs	r3, #20
 800ab06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3b04      	subs	r3, #4
 800ab12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f06f 0202 	mvn.w	r2, #2
 800ab1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	3b20      	subs	r3, #32
 800ab20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab22:	68fb      	ldr	r3, [r7, #12]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3714      	adds	r7, #20
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	0800ab35 	.word	0x0800ab35

0800ab34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab34:	b480      	push	{r7}
 800ab36:	b085      	sub	sp, #20
 800ab38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab3e:	4b12      	ldr	r3, [pc, #72]	; (800ab88 <prvTaskExitError+0x54>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab46:	d00a      	beq.n	800ab5e <prvTaskExitError+0x2a>
	__asm volatile
 800ab48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4c:	f383 8811 	msr	BASEPRI, r3
 800ab50:	f3bf 8f6f 	isb	sy
 800ab54:	f3bf 8f4f 	dsb	sy
 800ab58:	60fb      	str	r3, [r7, #12]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <prvTaskExitError+0x28>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	60bb      	str	r3, [r7, #8]
}
 800ab70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ab72:	bf00      	nop
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0fc      	beq.n	800ab74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ab7a:	bf00      	nop
 800ab7c:	bf00      	nop
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	24000024 	.word	0x24000024
 800ab8c:	00000000 	.word	0x00000000

0800ab90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ab90:	4b07      	ldr	r3, [pc, #28]	; (800abb0 <pxCurrentTCBConst2>)
 800ab92:	6819      	ldr	r1, [r3, #0]
 800ab94:	6808      	ldr	r0, [r1, #0]
 800ab96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab9a:	f380 8809 	msr	PSP, r0
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f04f 0000 	mov.w	r0, #0
 800aba6:	f380 8811 	msr	BASEPRI, r0
 800abaa:	4770      	bx	lr
 800abac:	f3af 8000 	nop.w

0800abb0 <pxCurrentTCBConst2>:
 800abb0:	24001c08 	.word	0x24001c08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop

0800abb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800abb8:	4808      	ldr	r0, [pc, #32]	; (800abdc <prvPortStartFirstTask+0x24>)
 800abba:	6800      	ldr	r0, [r0, #0]
 800abbc:	6800      	ldr	r0, [r0, #0]
 800abbe:	f380 8808 	msr	MSP, r0
 800abc2:	f04f 0000 	mov.w	r0, #0
 800abc6:	f380 8814 	msr	CONTROL, r0
 800abca:	b662      	cpsie	i
 800abcc:	b661      	cpsie	f
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	df00      	svc	0
 800abd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800abda:	bf00      	nop
 800abdc:	e000ed08 	.word	0xe000ed08

0800abe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800abe6:	4b46      	ldr	r3, [pc, #280]	; (800ad00 <xPortStartScheduler+0x120>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	4a46      	ldr	r2, [pc, #280]	; (800ad04 <xPortStartScheduler+0x124>)
 800abec:	4293      	cmp	r3, r2
 800abee:	d10a      	bne.n	800ac06 <xPortStartScheduler+0x26>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	613b      	str	r3, [r7, #16]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac06:	4b3e      	ldr	r3, [pc, #248]	; (800ad00 <xPortStartScheduler+0x120>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a3f      	ldr	r2, [pc, #252]	; (800ad08 <xPortStartScheduler+0x128>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d10a      	bne.n	800ac26 <xPortStartScheduler+0x46>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	f383 8811 	msr	BASEPRI, r3
 800ac18:	f3bf 8f6f 	isb	sy
 800ac1c:	f3bf 8f4f 	dsb	sy
 800ac20:	60fb      	str	r3, [r7, #12]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac26:	4b39      	ldr	r3, [pc, #228]	; (800ad0c <xPortStartScheduler+0x12c>)
 800ac28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	22ff      	movs	r2, #255	; 0xff
 800ac36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	4b31      	ldr	r3, [pc, #196]	; (800ad10 <xPortStartScheduler+0x130>)
 800ac4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ac4e:	4b31      	ldr	r3, [pc, #196]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac50:	2207      	movs	r2, #7
 800ac52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac54:	e009      	b.n	800ac6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	4a2d      	ldr	r2, [pc, #180]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ac60:	78fb      	ldrb	r3, [r7, #3]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac72:	2b80      	cmp	r3, #128	; 0x80
 800ac74:	d0ef      	beq.n	800ac56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ac76:	4b27      	ldr	r3, [pc, #156]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f1c3 0307 	rsb	r3, r3, #7
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d00a      	beq.n	800ac98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ac82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac86:	f383 8811 	msr	BASEPRI, r3
 800ac8a:	f3bf 8f6f 	isb	sy
 800ac8e:	f3bf 8f4f 	dsb	sy
 800ac92:	60bb      	str	r3, [r7, #8]
}
 800ac94:	bf00      	nop
 800ac96:	e7fe      	b.n	800ac96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ac98:	4b1e      	ldr	r3, [pc, #120]	; (800ad14 <xPortStartScheduler+0x134>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	021b      	lsls	r3, r3, #8
 800ac9e:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <xPortStartScheduler+0x134>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800acaa:	4a1a      	ldr	r2, [pc, #104]	; (800ad14 <xPortStartScheduler+0x134>)
 800acac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	b2da      	uxtb	r2, r3
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800acb6:	4b18      	ldr	r3, [pc, #96]	; (800ad18 <xPortStartScheduler+0x138>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <xPortStartScheduler+0x138>)
 800acbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800acc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800acc2:	4b15      	ldr	r3, [pc, #84]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a14      	ldr	r2, [pc, #80]	; (800ad18 <xPortStartScheduler+0x138>)
 800acc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800accc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800acce:	f000 f8dd 	bl	800ae8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800acd2:	4b12      	ldr	r3, [pc, #72]	; (800ad1c <xPortStartScheduler+0x13c>)
 800acd4:	2200      	movs	r2, #0
 800acd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800acd8:	f000 f8fc 	bl	800aed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <xPortStartScheduler+0x140>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <xPortStartScheduler+0x140>)
 800ace2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ace6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ace8:	f7ff ff66 	bl	800abb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800acec:	f7ff fa86 	bl	800a1fc <vTaskSwitchContext>
	prvTaskExitError();
 800acf0:	f7ff ff20 	bl	800ab34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	e000ed00 	.word	0xe000ed00
 800ad04:	410fc271 	.word	0x410fc271
 800ad08:	410fc270 	.word	0x410fc270
 800ad0c:	e000e400 	.word	0xe000e400
 800ad10:	24001d34 	.word	0x24001d34
 800ad14:	24001d38 	.word	0x24001d38
 800ad18:	e000ed20 	.word	0xe000ed20
 800ad1c:	24000024 	.word	0x24000024
 800ad20:	e000ef34 	.word	0xe000ef34

0800ad24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	607b      	str	r3, [r7, #4]
}
 800ad3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ad3e:	4b0f      	ldr	r3, [pc, #60]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	3301      	adds	r3, #1
 800ad44:	4a0d      	ldr	r2, [pc, #52]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <vPortEnterCritical+0x58>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d10f      	bne.n	800ad70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <vPortEnterCritical+0x5c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	603b      	str	r3, [r7, #0]
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <vPortEnterCritical+0x4a>
	}
}
 800ad70:	bf00      	nop
 800ad72:	370c      	adds	r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7a:	4770      	bx	lr
 800ad7c:	24000024 	.word	0x24000024
 800ad80:	e000ed04 	.word	0xe000ed04

0800ad84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ad8a:	4b12      	ldr	r3, [pc, #72]	; (800add4 <vPortExitCritical+0x50>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <vPortExitCritical+0x24>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	607b      	str	r3, [r7, #4]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ada8:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <vPortExitCritical+0x50>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	3b01      	subs	r3, #1
 800adae:	4a09      	ldr	r2, [pc, #36]	; (800add4 <vPortExitCritical+0x50>)
 800adb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800adb2:	4b08      	ldr	r3, [pc, #32]	; (800add4 <vPortExitCritical+0x50>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d105      	bne.n	800adc6 <vPortExitCritical+0x42>
 800adba:	2300      	movs	r3, #0
 800adbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	f383 8811 	msr	BASEPRI, r3
}
 800adc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800adc6:	bf00      	nop
 800adc8:	370c      	adds	r7, #12
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	24000024 	.word	0x24000024
	...

0800ade0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ade0:	f3ef 8009 	mrs	r0, PSP
 800ade4:	f3bf 8f6f 	isb	sy
 800ade8:	4b15      	ldr	r3, [pc, #84]	; (800ae40 <pxCurrentTCBConst>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	f01e 0f10 	tst.w	lr, #16
 800adf0:	bf08      	it	eq
 800adf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800adf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfa:	6010      	str	r0, [r2, #0]
 800adfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ae04:	f380 8811 	msr	BASEPRI, r0
 800ae08:	f3bf 8f4f 	dsb	sy
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f7ff f9f4 	bl	800a1fc <vTaskSwitchContext>
 800ae14:	f04f 0000 	mov.w	r0, #0
 800ae18:	f380 8811 	msr	BASEPRI, r0
 800ae1c:	bc09      	pop	{r0, r3}
 800ae1e:	6819      	ldr	r1, [r3, #0]
 800ae20:	6808      	ldr	r0, [r1, #0]
 800ae22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae26:	f01e 0f10 	tst.w	lr, #16
 800ae2a:	bf08      	it	eq
 800ae2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae30:	f380 8809 	msr	PSP, r0
 800ae34:	f3bf 8f6f 	isb	sy
 800ae38:	4770      	bx	lr
 800ae3a:	bf00      	nop
 800ae3c:	f3af 8000 	nop.w

0800ae40 <pxCurrentTCBConst>:
 800ae40:	24001c08 	.word	0x24001c08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ae44:	bf00      	nop
 800ae46:	bf00      	nop

0800ae48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	607b      	str	r3, [r7, #4]
}
 800ae60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ae62:	f7ff f913 	bl	800a08c <xTaskIncrementTick>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d003      	beq.n	800ae74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ae6c:	4b06      	ldr	r3, [pc, #24]	; (800ae88 <SysTick_Handler+0x40>)
 800ae6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	2300      	movs	r3, #0
 800ae76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	f383 8811 	msr	BASEPRI, r3
}
 800ae7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	e000ed04 	.word	0xe000ed04

0800ae8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ae90:	4b0b      	ldr	r3, [pc, #44]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ae96:	4b0b      	ldr	r3, [pc, #44]	; (800aec4 <vPortSetupTimerInterrupt+0x38>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ae9c:	4b0a      	ldr	r3, [pc, #40]	; (800aec8 <vPortSetupTimerInterrupt+0x3c>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0a      	ldr	r2, [pc, #40]	; (800aecc <vPortSetupTimerInterrupt+0x40>)
 800aea2:	fba2 2303 	umull	r2, r3, r2, r3
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <vPortSetupTimerInterrupt+0x44>)
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aeae:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <vPortSetupTimerInterrupt+0x34>)
 800aeb0:	2207      	movs	r2, #7
 800aeb2:	601a      	str	r2, [r3, #0]
}
 800aeb4:	bf00      	nop
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	e000e010 	.word	0xe000e010
 800aec4:	e000e018 	.word	0xe000e018
 800aec8:	24000000 	.word	0x24000000
 800aecc:	10624dd3 	.word	0x10624dd3
 800aed0:	e000e014 	.word	0xe000e014

0800aed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aee4 <vPortEnableVFP+0x10>
 800aed8:	6801      	ldr	r1, [r0, #0]
 800aeda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aede:	6001      	str	r1, [r0, #0]
 800aee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aee2:	bf00      	nop
 800aee4:	e000ed88 	.word	0xe000ed88

0800aee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aee8:	b480      	push	{r7}
 800aeea:	b085      	sub	sp, #20
 800aeec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aeee:	f3ef 8305 	mrs	r3, IPSR
 800aef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b0f      	cmp	r3, #15
 800aef8:	d914      	bls.n	800af24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aefa:	4a17      	ldr	r2, [pc, #92]	; (800af58 <vPortValidateInterruptPriority+0x70>)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af04:	4b15      	ldr	r3, [pc, #84]	; (800af5c <vPortValidateInterruptPriority+0x74>)
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	7afa      	ldrb	r2, [r7, #11]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d20a      	bcs.n	800af24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800af0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af12:	f383 8811 	msr	BASEPRI, r3
 800af16:	f3bf 8f6f 	isb	sy
 800af1a:	f3bf 8f4f 	dsb	sy
 800af1e:	607b      	str	r3, [r7, #4]
}
 800af20:	bf00      	nop
 800af22:	e7fe      	b.n	800af22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af24:	4b0e      	ldr	r3, [pc, #56]	; (800af60 <vPortValidateInterruptPriority+0x78>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800af2c:	4b0d      	ldr	r3, [pc, #52]	; (800af64 <vPortValidateInterruptPriority+0x7c>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	429a      	cmp	r2, r3
 800af32:	d90a      	bls.n	800af4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	603b      	str	r3, [r7, #0]
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <vPortValidateInterruptPriority+0x60>
	}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	e000e3f0 	.word	0xe000e3f0
 800af5c:	24001d34 	.word	0x24001d34
 800af60:	e000ed0c 	.word	0xe000ed0c
 800af64:	24001d38 	.word	0x24001d38

0800af68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b08a      	sub	sp, #40	; 0x28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800af70:	2300      	movs	r3, #0
 800af72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800af74:	f7fe ffbe 	bl	8009ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800af78:	4b5b      	ldr	r3, [pc, #364]	; (800b0e8 <pvPortMalloc+0x180>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d101      	bne.n	800af84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800af80:	f000 f920 	bl	800b1c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800af84:	4b59      	ldr	r3, [pc, #356]	; (800b0ec <pvPortMalloc+0x184>)
 800af86:	681a      	ldr	r2, [r3, #0]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	4013      	ands	r3, r2
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f040 8093 	bne.w	800b0b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d01d      	beq.n	800afd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800af98:	2208      	movs	r2, #8
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	4413      	add	r3, r2
 800af9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f003 0307 	and.w	r3, r3, #7
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d014      	beq.n	800afd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f023 0307 	bic.w	r3, r3, #7
 800afb0:	3308      	adds	r3, #8
 800afb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f003 0307 	and.w	r3, r3, #7
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00a      	beq.n	800afd4 <pvPortMalloc+0x6c>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	617b      	str	r3, [r7, #20]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d06e      	beq.n	800b0b8 <pvPortMalloc+0x150>
 800afda:	4b45      	ldr	r3, [pc, #276]	; (800b0f0 <pvPortMalloc+0x188>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d869      	bhi.n	800b0b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800afe4:	4b43      	ldr	r3, [pc, #268]	; (800b0f4 <pvPortMalloc+0x18c>)
 800afe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800afe8:	4b42      	ldr	r3, [pc, #264]	; (800b0f4 <pvPortMalloc+0x18c>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800afee:	e004      	b.n	800affa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800affa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	687a      	ldr	r2, [r7, #4]
 800b000:	429a      	cmp	r2, r3
 800b002:	d903      	bls.n	800b00c <pvPortMalloc+0xa4>
 800b004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d1f1      	bne.n	800aff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b00c:	4b36      	ldr	r3, [pc, #216]	; (800b0e8 <pvPortMalloc+0x180>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b012:	429a      	cmp	r2, r3
 800b014:	d050      	beq.n	800b0b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b016:	6a3b      	ldr	r3, [r7, #32]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2208      	movs	r2, #8
 800b01c:	4413      	add	r3, r2
 800b01e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	681a      	ldr	r2, [r3, #0]
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	685a      	ldr	r2, [r3, #4]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	1ad2      	subs	r2, r2, r3
 800b030:	2308      	movs	r3, #8
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	429a      	cmp	r2, r3
 800b036:	d91f      	bls.n	800b078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4413      	add	r3, r2
 800b03e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00a      	beq.n	800b060 <pvPortMalloc+0xf8>
	__asm volatile
 800b04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04e:	f383 8811 	msr	BASEPRI, r3
 800b052:	f3bf 8f6f 	isb	sy
 800b056:	f3bf 8f4f 	dsb	sy
 800b05a:	613b      	str	r3, [r7, #16]
}
 800b05c:	bf00      	nop
 800b05e:	e7fe      	b.n	800b05e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	685a      	ldr	r2, [r3, #4]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b072:	69b8      	ldr	r0, [r7, #24]
 800b074:	f000 f908 	bl	800b288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b078:	4b1d      	ldr	r3, [pc, #116]	; (800b0f0 <pvPortMalloc+0x188>)
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	4a1b      	ldr	r2, [pc, #108]	; (800b0f0 <pvPortMalloc+0x188>)
 800b084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b086:	4b1a      	ldr	r3, [pc, #104]	; (800b0f0 <pvPortMalloc+0x188>)
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	4b1b      	ldr	r3, [pc, #108]	; (800b0f8 <pvPortMalloc+0x190>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d203      	bcs.n	800b09a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b092:	4b17      	ldr	r3, [pc, #92]	; (800b0f0 <pvPortMalloc+0x188>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a18      	ldr	r2, [pc, #96]	; (800b0f8 <pvPortMalloc+0x190>)
 800b098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <pvPortMalloc+0x184>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	431a      	orrs	r2, r3
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	; (800b0fc <pvPortMalloc+0x194>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	4a11      	ldr	r2, [pc, #68]	; (800b0fc <pvPortMalloc+0x194>)
 800b0b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b0b8:	f7fe ff2a 	bl	8009f10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0bc:	69fb      	ldr	r3, [r7, #28]
 800b0be:	f003 0307 	and.w	r3, r3, #7
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d00a      	beq.n	800b0dc <pvPortMalloc+0x174>
	__asm volatile
 800b0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ca:	f383 8811 	msr	BASEPRI, r3
 800b0ce:	f3bf 8f6f 	isb	sy
 800b0d2:	f3bf 8f4f 	dsb	sy
 800b0d6:	60fb      	str	r3, [r7, #12]
}
 800b0d8:	bf00      	nop
 800b0da:	e7fe      	b.n	800b0da <pvPortMalloc+0x172>
	return pvReturn;
 800b0dc:	69fb      	ldr	r3, [r7, #28]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3728      	adds	r7, #40	; 0x28
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	24009d44 	.word	0x24009d44
 800b0ec:	24009d58 	.word	0x24009d58
 800b0f0:	24009d48 	.word	0x24009d48
 800b0f4:	24009d3c 	.word	0x24009d3c
 800b0f8:	24009d4c 	.word	0x24009d4c
 800b0fc:	24009d50 	.word	0x24009d50

0800b100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b086      	sub	sp, #24
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d04d      	beq.n	800b1ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b112:	2308      	movs	r3, #8
 800b114:	425b      	negs	r3, r3
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	4413      	add	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	4b24      	ldr	r3, [pc, #144]	; (800b1b8 <vPortFree+0xb8>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4013      	ands	r3, r2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <vPortFree+0x44>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60fb      	str	r3, [r7, #12]
}
 800b140:	bf00      	nop
 800b142:	e7fe      	b.n	800b142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00a      	beq.n	800b162 <vPortFree+0x62>
	__asm volatile
 800b14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b150:	f383 8811 	msr	BASEPRI, r3
 800b154:	f3bf 8f6f 	isb	sy
 800b158:	f3bf 8f4f 	dsb	sy
 800b15c:	60bb      	str	r3, [r7, #8]
}
 800b15e:	bf00      	nop
 800b160:	e7fe      	b.n	800b160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	685a      	ldr	r2, [r3, #4]
 800b166:	4b14      	ldr	r3, [pc, #80]	; (800b1b8 <vPortFree+0xb8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4013      	ands	r3, r2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d01e      	beq.n	800b1ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d11a      	bne.n	800b1ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	4b0e      	ldr	r3, [pc, #56]	; (800b1b8 <vPortFree+0xb8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	43db      	mvns	r3, r3
 800b182:	401a      	ands	r2, r3
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b188:	f7fe feb4 	bl	8009ef4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <vPortFree+0xbc>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4413      	add	r3, r2
 800b196:	4a09      	ldr	r2, [pc, #36]	; (800b1bc <vPortFree+0xbc>)
 800b198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b19a:	6938      	ldr	r0, [r7, #16]
 800b19c:	f000 f874 	bl	800b288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b1a0:	4b07      	ldr	r3, [pc, #28]	; (800b1c0 <vPortFree+0xc0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	4a06      	ldr	r2, [pc, #24]	; (800b1c0 <vPortFree+0xc0>)
 800b1a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b1aa:	f7fe feb1 	bl	8009f10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b1ae:	bf00      	nop
 800b1b0:	3718      	adds	r7, #24
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	24009d58 	.word	0x24009d58
 800b1bc:	24009d48 	.word	0x24009d48
 800b1c0:	24009d54 	.word	0x24009d54

0800b1c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b085      	sub	sp, #20
 800b1c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b1ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b1d0:	4b27      	ldr	r3, [pc, #156]	; (800b270 <prvHeapInit+0xac>)
 800b1d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f003 0307 	and.w	r3, r3, #7
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00c      	beq.n	800b1f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3307      	adds	r3, #7
 800b1e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f023 0307 	bic.w	r3, r3, #7
 800b1ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	4a1f      	ldr	r2, [pc, #124]	; (800b270 <prvHeapInit+0xac>)
 800b1f4:	4413      	add	r3, r2
 800b1f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b1fc:	4a1d      	ldr	r2, [pc, #116]	; (800b274 <prvHeapInit+0xb0>)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b202:	4b1c      	ldr	r3, [pc, #112]	; (800b274 <prvHeapInit+0xb0>)
 800b204:	2200      	movs	r2, #0
 800b206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	4413      	add	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b210:	2208      	movs	r2, #8
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f023 0307 	bic.w	r3, r3, #7
 800b21e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a15      	ldr	r2, [pc, #84]	; (800b278 <prvHeapInit+0xb4>)
 800b224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b226:	4b14      	ldr	r3, [pc, #80]	; (800b278 <prvHeapInit+0xb4>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2200      	movs	r2, #0
 800b22c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b22e:	4b12      	ldr	r3, [pc, #72]	; (800b278 <prvHeapInit+0xb4>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	1ad2      	subs	r2, r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b244:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <prvHeapInit+0xb4>)
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	4a0a      	ldr	r2, [pc, #40]	; (800b27c <prvHeapInit+0xb8>)
 800b252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	4a09      	ldr	r2, [pc, #36]	; (800b280 <prvHeapInit+0xbc>)
 800b25a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b25c:	4b09      	ldr	r3, [pc, #36]	; (800b284 <prvHeapInit+0xc0>)
 800b25e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b262:	601a      	str	r2, [r3, #0]
}
 800b264:	bf00      	nop
 800b266:	3714      	adds	r7, #20
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	24001d3c 	.word	0x24001d3c
 800b274:	24009d3c 	.word	0x24009d3c
 800b278:	24009d44 	.word	0x24009d44
 800b27c:	24009d4c 	.word	0x24009d4c
 800b280:	24009d48 	.word	0x24009d48
 800b284:	24009d58 	.word	0x24009d58

0800b288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b288:	b480      	push	{r7}
 800b28a:	b085      	sub	sp, #20
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b290:	4b28      	ldr	r3, [pc, #160]	; (800b334 <prvInsertBlockIntoFreeList+0xac>)
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e002      	b.n	800b29c <prvInsertBlockIntoFreeList+0x14>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	60fb      	str	r3, [r7, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d8f7      	bhi.n	800b296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d108      	bne.n	800b2ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	441a      	add	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d118      	bne.n	800b310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <prvInsertBlockIntoFreeList+0xb0>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d00d      	beq.n	800b306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685a      	ldr	r2, [r3, #4]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	441a      	add	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	681a      	ldr	r2, [r3, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	601a      	str	r2, [r3, #0]
 800b304:	e008      	b.n	800b318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b306:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <prvInsertBlockIntoFreeList+0xb0>)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e003      	b.n	800b318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d002      	beq.n	800b326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b326:	bf00      	nop
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	24009d3c 	.word	0x24009d3c
 800b338:	24009d44 	.word	0x24009d44

0800b33c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b346:	f007 fb95 	bl	8012a74 <sys_timeouts_sleeptime>
 800b34a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b352:	d10b      	bne.n	800b36c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b354:	4813      	ldr	r0, [pc, #76]	; (800b3a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b356:	f00c fae2 	bl	801791e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b35a:	2200      	movs	r2, #0
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f00c fa54 	bl	801780c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b364:	480f      	ldr	r0, [pc, #60]	; (800b3a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b366:	f00c facb 	bl	8017900 <sys_mutex_lock>
    return;
 800b36a:	e018      	b.n	800b39e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d102      	bne.n	800b378 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b372:	f007 fb45 	bl	8012a00 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b376:	e7e6      	b.n	800b346 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b378:	480a      	ldr	r0, [pc, #40]	; (800b3a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b37a:	f00c fad0 	bl	801791e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f00c fa42 	bl	801780c <sys_arch_mbox_fetch>
 800b388:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b38a:	4806      	ldr	r0, [pc, #24]	; (800b3a4 <tcpip_timeouts_mbox_fetch+0x68>)
 800b38c:	f00c fab8 	bl	8017900 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b396:	d102      	bne.n	800b39e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b398:	f007 fb32 	bl	8012a00 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b39c:	e7d3      	b.n	800b346 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b39e:	3710      	adds	r7, #16
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}
 800b3a4:	2400a5d8 	.word	0x2400a5d8

0800b3a8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b3b0:	4810      	ldr	r0, [pc, #64]	; (800b3f4 <tcpip_thread+0x4c>)
 800b3b2:	f00c faa5 	bl	8017900 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b3b6:	4b10      	ldr	r3, [pc, #64]	; (800b3f8 <tcpip_thread+0x50>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d005      	beq.n	800b3ca <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b3be:	4b0e      	ldr	r3, [pc, #56]	; (800b3f8 <tcpip_thread+0x50>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a0e      	ldr	r2, [pc, #56]	; (800b3fc <tcpip_thread+0x54>)
 800b3c4:	6812      	ldr	r2, [r2, #0]
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b3ca:	f107 030c 	add.w	r3, r7, #12
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	480b      	ldr	r0, [pc, #44]	; (800b400 <tcpip_thread+0x58>)
 800b3d2:	f7ff ffb3 	bl	800b33c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d106      	bne.n	800b3ea <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b3dc:	4b09      	ldr	r3, [pc, #36]	; (800b404 <tcpip_thread+0x5c>)
 800b3de:	2291      	movs	r2, #145	; 0x91
 800b3e0:	4909      	ldr	r1, [pc, #36]	; (800b408 <tcpip_thread+0x60>)
 800b3e2:	480a      	ldr	r0, [pc, #40]	; (800b40c <tcpip_thread+0x64>)
 800b3e4:	f00c fc88 	bl	8017cf8 <iprintf>
      continue;
 800b3e8:	e003      	b.n	800b3f2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f000 f80f 	bl	800b410 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b3f2:	e7ea      	b.n	800b3ca <tcpip_thread+0x22>
 800b3f4:	2400a5d8 	.word	0x2400a5d8
 800b3f8:	24009d5c 	.word	0x24009d5c
 800b3fc:	24009d60 	.word	0x24009d60
 800b400:	24009d64 	.word	0x24009d64
 800b404:	08018c40 	.word	0x08018c40
 800b408:	08018c70 	.word	0x08018c70
 800b40c:	08018c90 	.word	0x08018c90

0800b410 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d026      	beq.n	800b46e <tcpip_thread_handle_msg+0x5e>
 800b420:	2b02      	cmp	r3, #2
 800b422:	dc2b      	bgt.n	800b47c <tcpip_thread_handle_msg+0x6c>
 800b424:	2b00      	cmp	r3, #0
 800b426:	d002      	beq.n	800b42e <tcpip_thread_handle_msg+0x1e>
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d015      	beq.n	800b458 <tcpip_thread_handle_msg+0x48>
 800b42c:	e026      	b.n	800b47c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6850      	ldr	r0, [r2, #4]
 800b436:	687a      	ldr	r2, [r7, #4]
 800b438:	6892      	ldr	r2, [r2, #8]
 800b43a:	4611      	mov	r1, r2
 800b43c:	4798      	blx	r3
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d004      	beq.n	800b44e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	4618      	mov	r0, r3
 800b44a:	f001 fdcf 	bl	800cfec <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	2009      	movs	r0, #9
 800b452:	f000 ff1b 	bl	800c28c <memp_free>
      break;
 800b456:	e018      	b.n	800b48a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	6892      	ldr	r2, [r2, #8]
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b464:	6879      	ldr	r1, [r7, #4]
 800b466:	2008      	movs	r0, #8
 800b468:	f000 ff10 	bl	800c28c <memp_free>
      break;
 800b46c:	e00d      	b.n	800b48a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	6892      	ldr	r2, [r2, #8]
 800b476:	4610      	mov	r0, r2
 800b478:	4798      	blx	r3
      break;
 800b47a:	e006      	b.n	800b48a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b47c:	4b05      	ldr	r3, [pc, #20]	; (800b494 <tcpip_thread_handle_msg+0x84>)
 800b47e:	22cf      	movs	r2, #207	; 0xcf
 800b480:	4905      	ldr	r1, [pc, #20]	; (800b498 <tcpip_thread_handle_msg+0x88>)
 800b482:	4806      	ldr	r0, [pc, #24]	; (800b49c <tcpip_thread_handle_msg+0x8c>)
 800b484:	f00c fc38 	bl	8017cf8 <iprintf>
      break;
 800b488:	bf00      	nop
  }
}
 800b48a:	bf00      	nop
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	08018c40 	.word	0x08018c40
 800b498:	08018c70 	.word	0x08018c70
 800b49c:	08018c90 	.word	0x08018c90

0800b4a0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b086      	sub	sp, #24
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b4ac:	481a      	ldr	r0, [pc, #104]	; (800b518 <tcpip_inpkt+0x78>)
 800b4ae:	f00c f9ec 	bl	801788a <sys_mbox_valid>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d105      	bne.n	800b4c4 <tcpip_inpkt+0x24>
 800b4b8:	4b18      	ldr	r3, [pc, #96]	; (800b51c <tcpip_inpkt+0x7c>)
 800b4ba:	22fc      	movs	r2, #252	; 0xfc
 800b4bc:	4918      	ldr	r1, [pc, #96]	; (800b520 <tcpip_inpkt+0x80>)
 800b4be:	4819      	ldr	r0, [pc, #100]	; (800b524 <tcpip_inpkt+0x84>)
 800b4c0:	f00c fc1a 	bl	8017cf8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b4c4:	2009      	movs	r0, #9
 800b4c6:	f000 fe6b 	bl	800c1a0 <memp_malloc>
 800b4ca:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b4d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4d6:	e01a      	b.n	800b50e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	68ba      	ldr	r2, [r7, #8]
 800b4e8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b4f0:	6979      	ldr	r1, [r7, #20]
 800b4f2:	4809      	ldr	r0, [pc, #36]	; (800b518 <tcpip_inpkt+0x78>)
 800b4f4:	f00c f970 	bl	80177d8 <sys_mbox_trypost>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d006      	beq.n	800b50c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b4fe:	6979      	ldr	r1, [r7, #20]
 800b500:	2009      	movs	r0, #9
 800b502:	f000 fec3 	bl	800c28c <memp_free>
    return ERR_MEM;
 800b506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b50a:	e000      	b.n	800b50e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b50c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	24009d64 	.word	0x24009d64
 800b51c:	08018c40 	.word	0x08018c40
 800b520:	08018cb8 	.word	0x08018cb8
 800b524:	08018c90 	.word	0x08018c90

0800b528 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b538:	f003 0318 	and.w	r3, r3, #24
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d006      	beq.n	800b54e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b540:	4a08      	ldr	r2, [pc, #32]	; (800b564 <tcpip_input+0x3c>)
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ffab 	bl	800b4a0 <tcpip_inpkt>
 800b54a:	4603      	mov	r3, r0
 800b54c:	e005      	b.n	800b55a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b54e:	4a06      	ldr	r2, [pc, #24]	; (800b568 <tcpip_input+0x40>)
 800b550:	6839      	ldr	r1, [r7, #0]
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f7ff ffa4 	bl	800b4a0 <tcpip_inpkt>
 800b558:	4603      	mov	r3, r0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	080175e9 	.word	0x080175e9
 800b568:	080164c1 	.word	0x080164c1

0800b56c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b576:	4819      	ldr	r0, [pc, #100]	; (800b5dc <tcpip_try_callback+0x70>)
 800b578:	f00c f987 	bl	801788a <sys_mbox_valid>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d106      	bne.n	800b590 <tcpip_try_callback+0x24>
 800b582:	4b17      	ldr	r3, [pc, #92]	; (800b5e0 <tcpip_try_callback+0x74>)
 800b584:	f240 125d 	movw	r2, #349	; 0x15d
 800b588:	4916      	ldr	r1, [pc, #88]	; (800b5e4 <tcpip_try_callback+0x78>)
 800b58a:	4817      	ldr	r0, [pc, #92]	; (800b5e8 <tcpip_try_callback+0x7c>)
 800b58c:	f00c fbb4 	bl	8017cf8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b590:	2008      	movs	r0, #8
 800b592:	f000 fe05 	bl	800c1a0 <memp_malloc>
 800b596:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d102      	bne.n	800b5a4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5a2:	e017      	b.n	800b5d4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b5b6:	68f9      	ldr	r1, [r7, #12]
 800b5b8:	4808      	ldr	r0, [pc, #32]	; (800b5dc <tcpip_try_callback+0x70>)
 800b5ba:	f00c f90d 	bl	80177d8 <sys_mbox_trypost>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d006      	beq.n	800b5d2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b5c4:	68f9      	ldr	r1, [r7, #12]
 800b5c6:	2008      	movs	r0, #8
 800b5c8:	f000 fe60 	bl	800c28c <memp_free>
    return ERR_MEM;
 800b5cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5d0:	e000      	b.n	800b5d4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	24009d64 	.word	0x24009d64
 800b5e0:	08018c40 	.word	0x08018c40
 800b5e4:	08018cb8 	.word	0x08018cb8
 800b5e8:	08018c90 	.word	0x08018c90

0800b5ec <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af02      	add	r7, sp, #8
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b5f6:	f000 f92d 	bl	800b854 <lwip_init>

  tcpip_init_done = initfunc;
 800b5fa:	4a17      	ldr	r2, [pc, #92]	; (800b658 <tcpip_init+0x6c>)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b600:	4a16      	ldr	r2, [pc, #88]	; (800b65c <tcpip_init+0x70>)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b606:	2106      	movs	r1, #6
 800b608:	4815      	ldr	r0, [pc, #84]	; (800b660 <tcpip_init+0x74>)
 800b60a:	f00c f8c3 	bl	8017794 <sys_mbox_new>
 800b60e:	4603      	mov	r3, r0
 800b610:	2b00      	cmp	r3, #0
 800b612:	d006      	beq.n	800b622 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b614:	4b13      	ldr	r3, [pc, #76]	; (800b664 <tcpip_init+0x78>)
 800b616:	f240 2261 	movw	r2, #609	; 0x261
 800b61a:	4913      	ldr	r1, [pc, #76]	; (800b668 <tcpip_init+0x7c>)
 800b61c:	4813      	ldr	r0, [pc, #76]	; (800b66c <tcpip_init+0x80>)
 800b61e:	f00c fb6b 	bl	8017cf8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b622:	4813      	ldr	r0, [pc, #76]	; (800b670 <tcpip_init+0x84>)
 800b624:	f00c f950 	bl	80178c8 <sys_mutex_new>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d006      	beq.n	800b63c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b62e:	4b0d      	ldr	r3, [pc, #52]	; (800b664 <tcpip_init+0x78>)
 800b630:	f240 2265 	movw	r2, #613	; 0x265
 800b634:	490f      	ldr	r1, [pc, #60]	; (800b674 <tcpip_init+0x88>)
 800b636:	480d      	ldr	r0, [pc, #52]	; (800b66c <tcpip_init+0x80>)
 800b638:	f00c fb5e 	bl	8017cf8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b63c:	2300      	movs	r3, #0
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b644:	2200      	movs	r2, #0
 800b646:	490c      	ldr	r1, [pc, #48]	; (800b678 <tcpip_init+0x8c>)
 800b648:	480c      	ldr	r0, [pc, #48]	; (800b67c <tcpip_init+0x90>)
 800b64a:	f00c f975 	bl	8017938 <sys_thread_new>
}
 800b64e:	bf00      	nop
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	24009d5c 	.word	0x24009d5c
 800b65c:	24009d60 	.word	0x24009d60
 800b660:	24009d64 	.word	0x24009d64
 800b664:	08018c40 	.word	0x08018c40
 800b668:	08018cc8 	.word	0x08018cc8
 800b66c:	08018c90 	.word	0x08018c90
 800b670:	2400a5d8 	.word	0x2400a5d8
 800b674:	08018cec 	.word	0x08018cec
 800b678:	0800b3a9 	.word	0x0800b3a9
 800b67c:	08018d10 	.word	0x08018d10

0800b680 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	4603      	mov	r3, r0
 800b688:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b68a:	88fb      	ldrh	r3, [r7, #6]
 800b68c:	021b      	lsls	r3, r3, #8
 800b68e:	b21a      	sxth	r2, r3
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	0a1b      	lsrs	r3, r3, #8
 800b694:	b29b      	uxth	r3, r3
 800b696:	b21b      	sxth	r3, r3
 800b698:	4313      	orrs	r3, r2
 800b69a:	b21b      	sxth	r3, r3
 800b69c:	b29b      	uxth	r3, r3
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	370c      	adds	r7, #12
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a8:	4770      	bx	lr

0800b6aa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b6aa:	b480      	push	{r7}
 800b6ac:	b083      	sub	sp, #12
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	061a      	lsls	r2, r3, #24
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b6c8:	431a      	orrs	r2, r3
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	0e1b      	lsrs	r3, r3, #24
 800b6ce:	4313      	orrs	r3, r2
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b089      	sub	sp, #36	; 0x24
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	f003 0301 	and.w	r3, r3, #1
 800b6f8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d00d      	beq.n	800b71c <lwip_standard_chksum+0x40>
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	dd0a      	ble.n	800b71c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b706:	69fa      	ldr	r2, [r7, #28]
 800b708:	1c53      	adds	r3, r2, #1
 800b70a:	61fb      	str	r3, [r7, #28]
 800b70c:	f107 030e 	add.w	r3, r7, #14
 800b710:	3301      	adds	r3, #1
 800b712:	7812      	ldrb	r2, [r2, #0]
 800b714:	701a      	strb	r2, [r3, #0]
    len--;
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	3b01      	subs	r3, #1
 800b71a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b720:	e00a      	b.n	800b738 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	1c9a      	adds	r2, r3, #2
 800b726:	61ba      	str	r2, [r7, #24]
 800b728:	881b      	ldrh	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	4413      	add	r3, r2
 800b730:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	3b02      	subs	r3, #2
 800b736:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	dcf1      	bgt.n	800b722 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	dd04      	ble.n	800b74e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b744:	f107 030e 	add.w	r3, r7, #14
 800b748:	69ba      	ldr	r2, [r7, #24]
 800b74a:	7812      	ldrb	r2, [r2, #0]
 800b74c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b74e:	89fb      	ldrh	r3, [r7, #14]
 800b750:	461a      	mov	r2, r3
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	4413      	add	r3, r2
 800b756:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b758:	697b      	ldr	r3, [r7, #20]
 800b75a:	0c1a      	lsrs	r2, r3, #16
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	4413      	add	r3, r2
 800b762:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	0c1a      	lsrs	r2, r3, #16
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	4413      	add	r3, r2
 800b76e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d007      	beq.n	800b786 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	021b      	lsls	r3, r3, #8
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	0a1b      	lsrs	r3, r3, #8
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4313      	orrs	r3, r2
 800b784:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	b29b      	uxth	r3, r3
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3724      	adds	r7, #36	; 0x24
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b796:	b580      	push	{r7, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
 800b79e:	460b      	mov	r3, r1
 800b7a0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b7a2:	887b      	ldrh	r3, [r7, #2]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f7ff ff98 	bl	800b6dc <lwip_standard_chksum>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	43db      	mvns	r3, r3
 800b7b0:	b29b      	uxth	r3, r3
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3708      	adds	r7, #8
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}

0800b7ba <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b086      	sub	sp, #24
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	613b      	str	r3, [r7, #16]
 800b7ce:	e02b      	b.n	800b828 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	895b      	ldrh	r3, [r3, #10]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	4610      	mov	r0, r2
 800b7dc:	f7ff ff7e 	bl	800b6dc <lwip_standard_chksum>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	0c1a      	lsrs	r2, r3, #16
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	4413      	add	r3, r2
 800b7f4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	895b      	ldrh	r3, [r3, #10]
 800b7fa:	f003 0301 	and.w	r3, r3, #1
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00e      	beq.n	800b822 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b00      	cmp	r3, #0
 800b808:	bf0c      	ite	eq
 800b80a:	2301      	moveq	r3, #1
 800b80c:	2300      	movne	r3, #0
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	021b      	lsls	r3, r3, #8
 800b816:	b29a      	uxth	r2, r3
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	0a1b      	lsrs	r3, r3, #8
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	4313      	orrs	r3, r2
 800b820:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b822:	693b      	ldr	r3, [r7, #16]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	613b      	str	r3, [r7, #16]
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1d0      	bne.n	800b7d0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d007      	beq.n	800b844 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	021b      	lsls	r3, r3, #8
 800b838:	b29a      	uxth	r2, r3
 800b83a:	697b      	ldr	r3, [r7, #20]
 800b83c:	0a1b      	lsrs	r3, r3, #8
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	4313      	orrs	r3, r2
 800b842:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	b29b      	uxth	r3, r3
 800b848:	43db      	mvns	r3, r3
 800b84a:	b29b      	uxth	r3, r3
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b85a:	2300      	movs	r3, #0
 800b85c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b85e:	f00c f825 	bl	80178ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b862:	f000 f8d5 	bl	800ba10 <mem_init>
  memp_init();
 800b866:	f000 fc2d 	bl	800c0c4 <memp_init>
  pbuf_init();
  netif_init();
 800b86a:	f000 fd39 	bl	800c2e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b86e:	f007 f939 	bl	8012ae4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b872:	f001 fe65 	bl	800d540 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b876:	f007 f87b 	bl	8012970 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
	...

0800b884 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	4603      	mov	r3, r0
 800b88c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b88e:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <ptr_to_mem+0x20>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	88fb      	ldrh	r3, [r7, #6]
 800b894:	4413      	add	r3, r2
}
 800b896:	4618      	mov	r0, r3
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	24009d68 	.word	0x24009d68

0800b8a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <mem_to_ptr+0x20>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	1ad3      	subs	r3, r2, r3
 800b8b8:	b29b      	uxth	r3, r3
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	24009d68 	.word	0x24009d68

0800b8cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b8d4:	4b45      	ldr	r3, [pc, #276]	; (800b9ec <plug_holes+0x120>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d206      	bcs.n	800b8ec <plug_holes+0x20>
 800b8de:	4b44      	ldr	r3, [pc, #272]	; (800b9f0 <plug_holes+0x124>)
 800b8e0:	f240 12df 	movw	r2, #479	; 0x1df
 800b8e4:	4943      	ldr	r1, [pc, #268]	; (800b9f4 <plug_holes+0x128>)
 800b8e6:	4844      	ldr	r0, [pc, #272]	; (800b9f8 <plug_holes+0x12c>)
 800b8e8:	f00c fa06 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b8ec:	4b43      	ldr	r3, [pc, #268]	; (800b9fc <plug_holes+0x130>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d306      	bcc.n	800b904 <plug_holes+0x38>
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	; (800b9f0 <plug_holes+0x124>)
 800b8f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b8fc:	4940      	ldr	r1, [pc, #256]	; (800ba00 <plug_holes+0x134>)
 800b8fe:	483e      	ldr	r0, [pc, #248]	; (800b9f8 <plug_holes+0x12c>)
 800b900:	f00c f9fa 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	791b      	ldrb	r3, [r3, #4]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d006      	beq.n	800b91a <plug_holes+0x4e>
 800b90c:	4b38      	ldr	r3, [pc, #224]	; (800b9f0 <plug_holes+0x124>)
 800b90e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b912:	493c      	ldr	r1, [pc, #240]	; (800ba04 <plug_holes+0x138>)
 800b914:	4838      	ldr	r0, [pc, #224]	; (800b9f8 <plug_holes+0x12c>)
 800b916:	f00c f9ef 	bl	8017cf8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	881b      	ldrh	r3, [r3, #0]
 800b91e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b922:	d906      	bls.n	800b932 <plug_holes+0x66>
 800b924:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <plug_holes+0x124>)
 800b926:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b92a:	4937      	ldr	r1, [pc, #220]	; (800ba08 <plug_holes+0x13c>)
 800b92c:	4832      	ldr	r0, [pc, #200]	; (800b9f8 <plug_holes+0x12c>)
 800b92e:	f00c f9e3 	bl	8017cf8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff ffa4 	bl	800b884 <ptr_to_mem>
 800b93c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	429a      	cmp	r2, r3
 800b944:	d024      	beq.n	800b990 <plug_holes+0xc4>
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	791b      	ldrb	r3, [r3, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d120      	bne.n	800b990 <plug_holes+0xc4>
 800b94e:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <plug_holes+0x130>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	429a      	cmp	r2, r3
 800b956:	d01b      	beq.n	800b990 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b958:	4b2c      	ldr	r3, [pc, #176]	; (800ba0c <plug_holes+0x140>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d102      	bne.n	800b968 <plug_holes+0x9c>
      lfree = mem;
 800b962:	4a2a      	ldr	r2, [pc, #168]	; (800ba0c <plug_holes+0x140>)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	881a      	ldrh	r2, [r3, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b978:	d00a      	beq.n	800b990 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	4618      	mov	r0, r3
 800b980:	f7ff ff80 	bl	800b884 <ptr_to_mem>
 800b984:	4604      	mov	r4, r0
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff ff8e 	bl	800b8a8 <mem_to_ptr>
 800b98c:	4603      	mov	r3, r0
 800b98e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	885b      	ldrh	r3, [r3, #2]
 800b994:	4618      	mov	r0, r3
 800b996:	f7ff ff75 	bl	800b884 <ptr_to_mem>
 800b99a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b99c:	68ba      	ldr	r2, [r7, #8]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d01f      	beq.n	800b9e4 <plug_holes+0x118>
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	791b      	ldrb	r3, [r3, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d11b      	bne.n	800b9e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b9ac:	4b17      	ldr	r3, [pc, #92]	; (800ba0c <plug_holes+0x140>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d102      	bne.n	800b9bc <plug_holes+0xf0>
      lfree = pmem;
 800b9b6:	4a15      	ldr	r2, [pc, #84]	; (800ba0c <plug_holes+0x140>)
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	881a      	ldrh	r2, [r3, #0]
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	881b      	ldrh	r3, [r3, #0]
 800b9c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b9cc:	d00a      	beq.n	800b9e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	881b      	ldrh	r3, [r3, #0]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff ff56 	bl	800b884 <ptr_to_mem>
 800b9d8:	4604      	mov	r4, r0
 800b9da:	68b8      	ldr	r0, [r7, #8]
 800b9dc:	f7ff ff64 	bl	800b8a8 <mem_to_ptr>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b9e4:	bf00      	nop
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd90      	pop	{r4, r7, pc}
 800b9ec:	24009d68 	.word	0x24009d68
 800b9f0:	08018d20 	.word	0x08018d20
 800b9f4:	08018d50 	.word	0x08018d50
 800b9f8:	08018d68 	.word	0x08018d68
 800b9fc:	24009d6c 	.word	0x24009d6c
 800ba00:	08018d90 	.word	0x08018d90
 800ba04:	08018dac 	.word	0x08018dac
 800ba08:	08018dc8 	.word	0x08018dc8
 800ba0c:	24009d74 	.word	0x24009d74

0800ba10 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ba16:	4b1d      	ldr	r3, [pc, #116]	; (800ba8c <mem_init+0x7c>)
 800ba18:	4a1d      	ldr	r2, [pc, #116]	; (800ba90 <mem_init+0x80>)
 800ba1a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ba1c:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <mem_init+0x7c>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba28:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ba36:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ba3a:	f7ff ff23 	bl	800b884 <ptr_to_mem>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	4a14      	ldr	r2, [pc, #80]	; (800ba94 <mem_init+0x84>)
 800ba42:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ba44:	4b13      	ldr	r3, [pc, #76]	; (800ba94 <mem_init+0x84>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ba4c:	4b11      	ldr	r3, [pc, #68]	; (800ba94 <mem_init+0x84>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba54:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ba56:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <mem_init+0x84>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba5e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba60:	4b0a      	ldr	r3, [pc, #40]	; (800ba8c <mem_init+0x7c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a0c      	ldr	r2, [pc, #48]	; (800ba98 <mem_init+0x88>)
 800ba66:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ba68:	480c      	ldr	r0, [pc, #48]	; (800ba9c <mem_init+0x8c>)
 800ba6a:	f00b ff2d 	bl	80178c8 <sys_mutex_new>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d006      	beq.n	800ba82 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ba74:	4b0a      	ldr	r3, [pc, #40]	; (800baa0 <mem_init+0x90>)
 800ba76:	f240 221f 	movw	r2, #543	; 0x21f
 800ba7a:	490a      	ldr	r1, [pc, #40]	; (800baa4 <mem_init+0x94>)
 800ba7c:	480a      	ldr	r0, [pc, #40]	; (800baa8 <mem_init+0x98>)
 800ba7e:	f00c f93b 	bl	8017cf8 <iprintf>
  }
}
 800ba82:	bf00      	nop
 800ba84:	3708      	adds	r7, #8
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	24009d68 	.word	0x24009d68
 800ba90:	30044000 	.word	0x30044000
 800ba94:	24009d6c 	.word	0x24009d6c
 800ba98:	24009d74 	.word	0x24009d74
 800ba9c:	24009d70 	.word	0x24009d70
 800baa0:	08018d20 	.word	0x08018d20
 800baa4:	08018df4 	.word	0x08018df4
 800baa8:	08018d68 	.word	0x08018d68

0800baac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff fef7 	bl	800b8a8 <mem_to_ptr>
 800baba:	4603      	mov	r3, r0
 800babc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7ff fede 	bl	800b884 <ptr_to_mem>
 800bac8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	885b      	ldrh	r3, [r3, #2]
 800bace:	4618      	mov	r0, r3
 800bad0:	f7ff fed8 	bl	800b884 <ptr_to_mem>
 800bad4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bade:	d818      	bhi.n	800bb12 <mem_link_valid+0x66>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	885b      	ldrh	r3, [r3, #2]
 800bae4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bae8:	d813      	bhi.n	800bb12 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800baee:	8afa      	ldrh	r2, [r7, #22]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d004      	beq.n	800bafe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	8afa      	ldrh	r2, [r7, #22]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d109      	bne.n	800bb12 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bafe:	4b08      	ldr	r3, [pc, #32]	; (800bb20 <mem_link_valid+0x74>)
 800bb00:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d006      	beq.n	800bb16 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	885b      	ldrh	r3, [r3, #2]
 800bb0c:	8afa      	ldrh	r2, [r7, #22]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d001      	beq.n	800bb16 <mem_link_valid+0x6a>
    return 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	e000      	b.n	800bb18 <mem_link_valid+0x6c>
  }
  return 1;
 800bb16:	2301      	movs	r3, #1
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	24009d6c 	.word	0x24009d6c

0800bb24 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b088      	sub	sp, #32
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d070      	beq.n	800bc14 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f003 0303 	and.w	r3, r3, #3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00d      	beq.n	800bb58 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bb3c:	4b37      	ldr	r3, [pc, #220]	; (800bc1c <mem_free+0xf8>)
 800bb3e:	f240 2273 	movw	r2, #627	; 0x273
 800bb42:	4937      	ldr	r1, [pc, #220]	; (800bc20 <mem_free+0xfc>)
 800bb44:	4837      	ldr	r0, [pc, #220]	; (800bc24 <mem_free+0x100>)
 800bb46:	f00c f8d7 	bl	8017cf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb4a:	f00b ff1b 	bl	8017984 <sys_arch_protect>
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f00b ff25 	bl	80179a0 <sys_arch_unprotect>
    return;
 800bb56:	e05e      	b.n	800bc16 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3b08      	subs	r3, #8
 800bb5c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bb5e:	4b32      	ldr	r3, [pc, #200]	; (800bc28 <mem_free+0x104>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69fa      	ldr	r2, [r7, #28]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d306      	bcc.n	800bb76 <mem_free+0x52>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f103 020c 	add.w	r2, r3, #12
 800bb6e:	4b2f      	ldr	r3, [pc, #188]	; (800bc2c <mem_free+0x108>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d90d      	bls.n	800bb92 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bb76:	4b29      	ldr	r3, [pc, #164]	; (800bc1c <mem_free+0xf8>)
 800bb78:	f240 227f 	movw	r2, #639	; 0x27f
 800bb7c:	492c      	ldr	r1, [pc, #176]	; (800bc30 <mem_free+0x10c>)
 800bb7e:	4829      	ldr	r0, [pc, #164]	; (800bc24 <mem_free+0x100>)
 800bb80:	f00c f8ba 	bl	8017cf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb84:	f00b fefe 	bl	8017984 <sys_arch_protect>
 800bb88:	6138      	str	r0, [r7, #16]
 800bb8a:	6938      	ldr	r0, [r7, #16]
 800bb8c:	f00b ff08 	bl	80179a0 <sys_arch_unprotect>
    return;
 800bb90:	e041      	b.n	800bc16 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bb92:	4828      	ldr	r0, [pc, #160]	; (800bc34 <mem_free+0x110>)
 800bb94:	f00b feb4 	bl	8017900 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	791b      	ldrb	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d110      	bne.n	800bbc2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bba0:	4b1e      	ldr	r3, [pc, #120]	; (800bc1c <mem_free+0xf8>)
 800bba2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bba6:	4924      	ldr	r1, [pc, #144]	; (800bc38 <mem_free+0x114>)
 800bba8:	481e      	ldr	r0, [pc, #120]	; (800bc24 <mem_free+0x100>)
 800bbaa:	f00c f8a5 	bl	8017cf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bbae:	4821      	ldr	r0, [pc, #132]	; (800bc34 <mem_free+0x110>)
 800bbb0:	f00b feb5 	bl	801791e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbb4:	f00b fee6 	bl	8017984 <sys_arch_protect>
 800bbb8:	6178      	str	r0, [r7, #20]
 800bbba:	6978      	ldr	r0, [r7, #20]
 800bbbc:	f00b fef0 	bl	80179a0 <sys_arch_unprotect>
    return;
 800bbc0:	e029      	b.n	800bc16 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bbc2:	69f8      	ldr	r0, [r7, #28]
 800bbc4:	f7ff ff72 	bl	800baac <mem_link_valid>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d110      	bne.n	800bbf0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bbce:	4b13      	ldr	r3, [pc, #76]	; (800bc1c <mem_free+0xf8>)
 800bbd0:	f240 2295 	movw	r2, #661	; 0x295
 800bbd4:	4919      	ldr	r1, [pc, #100]	; (800bc3c <mem_free+0x118>)
 800bbd6:	4813      	ldr	r0, [pc, #76]	; (800bc24 <mem_free+0x100>)
 800bbd8:	f00c f88e 	bl	8017cf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bbdc:	4815      	ldr	r0, [pc, #84]	; (800bc34 <mem_free+0x110>)
 800bbde:	f00b fe9e 	bl	801791e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bbe2:	f00b fecf 	bl	8017984 <sys_arch_protect>
 800bbe6:	61b8      	str	r0, [r7, #24]
 800bbe8:	69b8      	ldr	r0, [r7, #24]
 800bbea:	f00b fed9 	bl	80179a0 <sys_arch_unprotect>
    return;
 800bbee:	e012      	b.n	800bc16 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bbf6:	4b12      	ldr	r3, [pc, #72]	; (800bc40 <mem_free+0x11c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	69fa      	ldr	r2, [r7, #28]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d202      	bcs.n	800bc06 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bc00:	4a0f      	ldr	r2, [pc, #60]	; (800bc40 <mem_free+0x11c>)
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bc06:	69f8      	ldr	r0, [r7, #28]
 800bc08:	f7ff fe60 	bl	800b8cc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bc0c:	4809      	ldr	r0, [pc, #36]	; (800bc34 <mem_free+0x110>)
 800bc0e:	f00b fe86 	bl	801791e <sys_mutex_unlock>
 800bc12:	e000      	b.n	800bc16 <mem_free+0xf2>
    return;
 800bc14:	bf00      	nop
}
 800bc16:	3720      	adds	r7, #32
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	08018d20 	.word	0x08018d20
 800bc20:	08018e10 	.word	0x08018e10
 800bc24:	08018d68 	.word	0x08018d68
 800bc28:	24009d68 	.word	0x24009d68
 800bc2c:	24009d6c 	.word	0x24009d6c
 800bc30:	08018e34 	.word	0x08018e34
 800bc34:	24009d70 	.word	0x24009d70
 800bc38:	08018e50 	.word	0x08018e50
 800bc3c:	08018e78 	.word	0x08018e78
 800bc40:	24009d74 	.word	0x24009d74

0800bc44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b088      	sub	sp, #32
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bc50:	887b      	ldrh	r3, [r7, #2]
 800bc52:	3303      	adds	r3, #3
 800bc54:	b29b      	uxth	r3, r3
 800bc56:	f023 0303 	bic.w	r3, r3, #3
 800bc5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bc5c:	8bfb      	ldrh	r3, [r7, #30]
 800bc5e:	2b0b      	cmp	r3, #11
 800bc60:	d801      	bhi.n	800bc66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bc62:	230c      	movs	r3, #12
 800bc64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bc66:	8bfb      	ldrh	r3, [r7, #30]
 800bc68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc6c:	d803      	bhi.n	800bc76 <mem_trim+0x32>
 800bc6e:	8bfa      	ldrh	r2, [r7, #30]
 800bc70:	887b      	ldrh	r3, [r7, #2]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d201      	bcs.n	800bc7a <mem_trim+0x36>
    return NULL;
 800bc76:	2300      	movs	r3, #0
 800bc78:	e0d8      	b.n	800be2c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bc7a:	4b6e      	ldr	r3, [pc, #440]	; (800be34 <mem_trim+0x1f0>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d304      	bcc.n	800bc8e <mem_trim+0x4a>
 800bc84:	4b6c      	ldr	r3, [pc, #432]	; (800be38 <mem_trim+0x1f4>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d306      	bcc.n	800bc9c <mem_trim+0x58>
 800bc8e:	4b6b      	ldr	r3, [pc, #428]	; (800be3c <mem_trim+0x1f8>)
 800bc90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bc94:	496a      	ldr	r1, [pc, #424]	; (800be40 <mem_trim+0x1fc>)
 800bc96:	486b      	ldr	r0, [pc, #428]	; (800be44 <mem_trim+0x200>)
 800bc98:	f00c f82e 	bl	8017cf8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bc9c:	4b65      	ldr	r3, [pc, #404]	; (800be34 <mem_trim+0x1f0>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d304      	bcc.n	800bcb0 <mem_trim+0x6c>
 800bca6:	4b64      	ldr	r3, [pc, #400]	; (800be38 <mem_trim+0x1f4>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d307      	bcc.n	800bcc0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bcb0:	f00b fe68 	bl	8017984 <sys_arch_protect>
 800bcb4:	60b8      	str	r0, [r7, #8]
 800bcb6:	68b8      	ldr	r0, [r7, #8]
 800bcb8:	f00b fe72 	bl	80179a0 <sys_arch_unprotect>
    return rmem;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	e0b5      	b.n	800be2c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	3b08      	subs	r3, #8
 800bcc4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bcc6:	69b8      	ldr	r0, [r7, #24]
 800bcc8:	f7ff fdee 	bl	800b8a8 <mem_to_ptr>
 800bccc:	4603      	mov	r3, r0
 800bcce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	881a      	ldrh	r2, [r3, #0]
 800bcd4:	8afb      	ldrh	r3, [r7, #22]
 800bcd6:	1ad3      	subs	r3, r2, r3
 800bcd8:	b29b      	uxth	r3, r3
 800bcda:	3b08      	subs	r3, #8
 800bcdc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bcde:	8bfa      	ldrh	r2, [r7, #30]
 800bce0:	8abb      	ldrh	r3, [r7, #20]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d906      	bls.n	800bcf4 <mem_trim+0xb0>
 800bce6:	4b55      	ldr	r3, [pc, #340]	; (800be3c <mem_trim+0x1f8>)
 800bce8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bcec:	4956      	ldr	r1, [pc, #344]	; (800be48 <mem_trim+0x204>)
 800bcee:	4855      	ldr	r0, [pc, #340]	; (800be44 <mem_trim+0x200>)
 800bcf0:	f00c f802 	bl	8017cf8 <iprintf>
  if (newsize > size) {
 800bcf4:	8bfa      	ldrh	r2, [r7, #30]
 800bcf6:	8abb      	ldrh	r3, [r7, #20]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	d901      	bls.n	800bd00 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e095      	b.n	800be2c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bd00:	8bfa      	ldrh	r2, [r7, #30]
 800bd02:	8abb      	ldrh	r3, [r7, #20]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d101      	bne.n	800bd0c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	e08f      	b.n	800be2c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bd0c:	484f      	ldr	r0, [pc, #316]	; (800be4c <mem_trim+0x208>)
 800bd0e:	f00b fdf7 	bl	8017900 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	881b      	ldrh	r3, [r3, #0]
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7ff fdb4 	bl	800b884 <ptr_to_mem>
 800bd1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	791b      	ldrb	r3, [r3, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d13f      	bne.n	800bda6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd2e:	d106      	bne.n	800bd3e <mem_trim+0xfa>
 800bd30:	4b42      	ldr	r3, [pc, #264]	; (800be3c <mem_trim+0x1f8>)
 800bd32:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bd36:	4946      	ldr	r1, [pc, #280]	; (800be50 <mem_trim+0x20c>)
 800bd38:	4842      	ldr	r0, [pc, #264]	; (800be44 <mem_trim+0x200>)
 800bd3a:	f00b ffdd 	bl	8017cf8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd44:	8afa      	ldrh	r2, [r7, #22]
 800bd46:	8bfb      	ldrh	r3, [r7, #30]
 800bd48:	4413      	add	r3, r2
 800bd4a:	b29b      	uxth	r3, r3
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bd50:	4b40      	ldr	r3, [pc, #256]	; (800be54 <mem_trim+0x210>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d106      	bne.n	800bd68 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bd5a:	89fb      	ldrh	r3, [r7, #14]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f7ff fd91 	bl	800b884 <ptr_to_mem>
 800bd62:	4603      	mov	r3, r0
 800bd64:	4a3b      	ldr	r2, [pc, #236]	; (800be54 <mem_trim+0x210>)
 800bd66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bd68:	89fb      	ldrh	r3, [r7, #14]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fd8a 	bl	800b884 <ptr_to_mem>
 800bd70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	2200      	movs	r2, #0
 800bd76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	89ba      	ldrh	r2, [r7, #12]
 800bd7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	8afa      	ldrh	r2, [r7, #22]
 800bd82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	89fa      	ldrh	r2, [r7, #14]
 800bd88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd92:	d047      	beq.n	800be24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7ff fd73 	bl	800b884 <ptr_to_mem>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	89fb      	ldrh	r3, [r7, #14]
 800bda2:	8053      	strh	r3, [r2, #2]
 800bda4:	e03e      	b.n	800be24 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bda6:	8bfb      	ldrh	r3, [r7, #30]
 800bda8:	f103 0214 	add.w	r2, r3, #20
 800bdac:	8abb      	ldrh	r3, [r7, #20]
 800bdae:	429a      	cmp	r2, r3
 800bdb0:	d838      	bhi.n	800be24 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bdb2:	8afa      	ldrh	r2, [r7, #22]
 800bdb4:	8bfb      	ldrh	r3, [r7, #30]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	3308      	adds	r3, #8
 800bdbc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bdc6:	d106      	bne.n	800bdd6 <mem_trim+0x192>
 800bdc8:	4b1c      	ldr	r3, [pc, #112]	; (800be3c <mem_trim+0x1f8>)
 800bdca:	f240 3216 	movw	r2, #790	; 0x316
 800bdce:	4920      	ldr	r1, [pc, #128]	; (800be50 <mem_trim+0x20c>)
 800bdd0:	481c      	ldr	r0, [pc, #112]	; (800be44 <mem_trim+0x200>)
 800bdd2:	f00b ff91 	bl	8017cf8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bdd6:	89fb      	ldrh	r3, [r7, #14]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7ff fd53 	bl	800b884 <ptr_to_mem>
 800bdde:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bde0:	4b1c      	ldr	r3, [pc, #112]	; (800be54 <mem_trim+0x210>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d202      	bcs.n	800bdf0 <mem_trim+0x1ac>
      lfree = mem2;
 800bdea:	4a1a      	ldr	r2, [pc, #104]	; (800be54 <mem_trim+0x210>)
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	881a      	ldrh	r2, [r3, #0]
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	8afa      	ldrh	r2, [r7, #22]
 800be02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	89fa      	ldrh	r2, [r7, #14]
 800be08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	881b      	ldrh	r3, [r3, #0]
 800be0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be12:	d007      	beq.n	800be24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fd33 	bl	800b884 <ptr_to_mem>
 800be1e:	4602      	mov	r2, r0
 800be20:	89fb      	ldrh	r3, [r7, #14]
 800be22:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800be24:	4809      	ldr	r0, [pc, #36]	; (800be4c <mem_trim+0x208>)
 800be26:	f00b fd7a 	bl	801791e <sys_mutex_unlock>
  return rmem;
 800be2a:	687b      	ldr	r3, [r7, #4]
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3720      	adds	r7, #32
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	24009d68 	.word	0x24009d68
 800be38:	24009d6c 	.word	0x24009d6c
 800be3c:	08018d20 	.word	0x08018d20
 800be40:	08018eac 	.word	0x08018eac
 800be44:	08018d68 	.word	0x08018d68
 800be48:	08018ec4 	.word	0x08018ec4
 800be4c:	24009d70 	.word	0x24009d70
 800be50:	08018ee4 	.word	0x08018ee4
 800be54:	24009d74 	.word	0x24009d74

0800be58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b088      	sub	sp, #32
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800be62:	88fb      	ldrh	r3, [r7, #6]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <mem_malloc+0x14>
    return NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	e0e2      	b.n	800c032 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800be6c:	88fb      	ldrh	r3, [r7, #6]
 800be6e:	3303      	adds	r3, #3
 800be70:	b29b      	uxth	r3, r3
 800be72:	f023 0303 	bic.w	r3, r3, #3
 800be76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800be78:	8bbb      	ldrh	r3, [r7, #28]
 800be7a:	2b0b      	cmp	r3, #11
 800be7c:	d801      	bhi.n	800be82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800be7e:	230c      	movs	r3, #12
 800be80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800be82:	8bbb      	ldrh	r3, [r7, #28]
 800be84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be88:	d803      	bhi.n	800be92 <mem_malloc+0x3a>
 800be8a:	8bba      	ldrh	r2, [r7, #28]
 800be8c:	88fb      	ldrh	r3, [r7, #6]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d201      	bcs.n	800be96 <mem_malloc+0x3e>
    return NULL;
 800be92:	2300      	movs	r3, #0
 800be94:	e0cd      	b.n	800c032 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800be96:	4869      	ldr	r0, [pc, #420]	; (800c03c <mem_malloc+0x1e4>)
 800be98:	f00b fd32 	bl	8017900 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be9c:	4b68      	ldr	r3, [pc, #416]	; (800c040 <mem_malloc+0x1e8>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f7ff fd01 	bl	800b8a8 <mem_to_ptr>
 800bea6:	4603      	mov	r3, r0
 800bea8:	83fb      	strh	r3, [r7, #30]
 800beaa:	e0b7      	b.n	800c01c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800beac:	8bfb      	ldrh	r3, [r7, #30]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7ff fce8 	bl	800b884 <ptr_to_mem>
 800beb4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	791b      	ldrb	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	f040 80a7 	bne.w	800c00e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	461a      	mov	r2, r3
 800bec6:	8bfb      	ldrh	r3, [r7, #30]
 800bec8:	1ad3      	subs	r3, r2, r3
 800beca:	f1a3 0208 	sub.w	r2, r3, #8
 800bece:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bed0:	429a      	cmp	r2, r3
 800bed2:	f0c0 809c 	bcc.w	800c00e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	461a      	mov	r2, r3
 800bedc:	8bfb      	ldrh	r3, [r7, #30]
 800bede:	1ad3      	subs	r3, r2, r3
 800bee0:	f1a3 0208 	sub.w	r2, r3, #8
 800bee4:	8bbb      	ldrh	r3, [r7, #28]
 800bee6:	3314      	adds	r3, #20
 800bee8:	429a      	cmp	r2, r3
 800beea:	d333      	bcc.n	800bf54 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800beec:	8bfa      	ldrh	r2, [r7, #30]
 800beee:	8bbb      	ldrh	r3, [r7, #28]
 800bef0:	4413      	add	r3, r2
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	3308      	adds	r3, #8
 800bef6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bef8:	8a7b      	ldrh	r3, [r7, #18]
 800befa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800befe:	d106      	bne.n	800bf0e <mem_malloc+0xb6>
 800bf00:	4b50      	ldr	r3, [pc, #320]	; (800c044 <mem_malloc+0x1ec>)
 800bf02:	f240 3287 	movw	r2, #903	; 0x387
 800bf06:	4950      	ldr	r1, [pc, #320]	; (800c048 <mem_malloc+0x1f0>)
 800bf08:	4850      	ldr	r0, [pc, #320]	; (800c04c <mem_malloc+0x1f4>)
 800bf0a:	f00b fef5 	bl	8017cf8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bf0e:	8a7b      	ldrh	r3, [r7, #18]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fcb7 	bl	800b884 <ptr_to_mem>
 800bf16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	881a      	ldrh	r2, [r3, #0]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	8bfa      	ldrh	r2, [r7, #30]
 800bf2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	8a7a      	ldrh	r2, [r7, #18]
 800bf30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2201      	movs	r2, #1
 800bf36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf40:	d00b      	beq.n	800bf5a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	881b      	ldrh	r3, [r3, #0]
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7ff fc9c 	bl	800b884 <ptr_to_mem>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	8a7b      	ldrh	r3, [r7, #18]
 800bf50:	8053      	strh	r3, [r2, #2]
 800bf52:	e002      	b.n	800bf5a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2201      	movs	r2, #1
 800bf58:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bf5a:	4b39      	ldr	r3, [pc, #228]	; (800c040 <mem_malloc+0x1e8>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d127      	bne.n	800bfb4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bf64:	4b36      	ldr	r3, [pc, #216]	; (800c040 <mem_malloc+0x1e8>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bf6a:	e005      	b.n	800bf78 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7ff fc87 	bl	800b884 <ptr_to_mem>
 800bf76:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bf78:	69bb      	ldr	r3, [r7, #24]
 800bf7a:	791b      	ldrb	r3, [r3, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d004      	beq.n	800bf8a <mem_malloc+0x132>
 800bf80:	4b33      	ldr	r3, [pc, #204]	; (800c050 <mem_malloc+0x1f8>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	69ba      	ldr	r2, [r7, #24]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d1f0      	bne.n	800bf6c <mem_malloc+0x114>
          }
          lfree = cur;
 800bf8a:	4a2d      	ldr	r2, [pc, #180]	; (800c040 <mem_malloc+0x1e8>)
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bf90:	4b2b      	ldr	r3, [pc, #172]	; (800c040 <mem_malloc+0x1e8>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	4b2e      	ldr	r3, [pc, #184]	; (800c050 <mem_malloc+0x1f8>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d00b      	beq.n	800bfb4 <mem_malloc+0x15c>
 800bf9c:	4b28      	ldr	r3, [pc, #160]	; (800c040 <mem_malloc+0x1e8>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <mem_malloc+0x15c>
 800bfa6:	4b27      	ldr	r3, [pc, #156]	; (800c044 <mem_malloc+0x1ec>)
 800bfa8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800bfac:	4929      	ldr	r1, [pc, #164]	; (800c054 <mem_malloc+0x1fc>)
 800bfae:	4827      	ldr	r0, [pc, #156]	; (800c04c <mem_malloc+0x1f4>)
 800bfb0:	f00b fea2 	bl	8017cf8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bfb4:	4821      	ldr	r0, [pc, #132]	; (800c03c <mem_malloc+0x1e4>)
 800bfb6:	f00b fcb2 	bl	801791e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bfba:	8bba      	ldrh	r2, [r7, #28]
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	4413      	add	r3, r2
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	4a23      	ldr	r2, [pc, #140]	; (800c050 <mem_malloc+0x1f8>)
 800bfc4:	6812      	ldr	r2, [r2, #0]
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d906      	bls.n	800bfd8 <mem_malloc+0x180>
 800bfca:	4b1e      	ldr	r3, [pc, #120]	; (800c044 <mem_malloc+0x1ec>)
 800bfcc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bfd0:	4921      	ldr	r1, [pc, #132]	; (800c058 <mem_malloc+0x200>)
 800bfd2:	481e      	ldr	r0, [pc, #120]	; (800c04c <mem_malloc+0x1f4>)
 800bfd4:	f00b fe90 	bl	8017cf8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f003 0303 	and.w	r3, r3, #3
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d006      	beq.n	800bff0 <mem_malloc+0x198>
 800bfe2:	4b18      	ldr	r3, [pc, #96]	; (800c044 <mem_malloc+0x1ec>)
 800bfe4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bfe8:	491c      	ldr	r1, [pc, #112]	; (800c05c <mem_malloc+0x204>)
 800bfea:	4818      	ldr	r0, [pc, #96]	; (800c04c <mem_malloc+0x1f4>)
 800bfec:	f00b fe84 	bl	8017cf8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	f003 0303 	and.w	r3, r3, #3
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d006      	beq.n	800c008 <mem_malloc+0x1b0>
 800bffa:	4b12      	ldr	r3, [pc, #72]	; (800c044 <mem_malloc+0x1ec>)
 800bffc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c000:	4917      	ldr	r1, [pc, #92]	; (800c060 <mem_malloc+0x208>)
 800c002:	4812      	ldr	r0, [pc, #72]	; (800c04c <mem_malloc+0x1f4>)
 800c004:	f00b fe78 	bl	8017cf8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3308      	adds	r3, #8
 800c00c:	e011      	b.n	800c032 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c00e:	8bfb      	ldrh	r3, [r7, #30]
 800c010:	4618      	mov	r0, r3
 800c012:	f7ff fc37 	bl	800b884 <ptr_to_mem>
 800c016:	4603      	mov	r3, r0
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c01c:	8bfa      	ldrh	r2, [r7, #30]
 800c01e:	8bbb      	ldrh	r3, [r7, #28]
 800c020:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c024:	429a      	cmp	r2, r3
 800c026:	f4ff af41 	bcc.w	800beac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c02a:	4804      	ldr	r0, [pc, #16]	; (800c03c <mem_malloc+0x1e4>)
 800c02c:	f00b fc77 	bl	801791e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3720      	adds	r7, #32
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	24009d70 	.word	0x24009d70
 800c040:	24009d74 	.word	0x24009d74
 800c044:	08018d20 	.word	0x08018d20
 800c048:	08018ee4 	.word	0x08018ee4
 800c04c:	08018d68 	.word	0x08018d68
 800c050:	24009d6c 	.word	0x24009d6c
 800c054:	08018ef8 	.word	0x08018ef8
 800c058:	08018f14 	.word	0x08018f14
 800c05c:	08018f44 	.word	0x08018f44
 800c060:	08018f74 	.word	0x08018f74

0800c064 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	2200      	movs	r2, #0
 800c072:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	685b      	ldr	r3, [r3, #4]
 800c078:	3303      	adds	r3, #3
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c080:	2300      	movs	r3, #0
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	e011      	b.n	800c0aa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	689b      	ldr	r3, [r3, #8]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	68ba      	ldr	r2, [r7, #8]
 800c096:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	881b      	ldrh	r3, [r3, #0]
 800c09c:	461a      	mov	r2, r3
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	60fb      	str	r3, [r7, #12]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	dbe7      	blt.n	800c086 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c0b6:	bf00      	nop
 800c0b8:	bf00      	nop
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	80fb      	strh	r3, [r7, #6]
 800c0ce:	e009      	b.n	800c0e4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c0d0:	88fb      	ldrh	r3, [r7, #6]
 800c0d2:	4a08      	ldr	r2, [pc, #32]	; (800c0f4 <memp_init+0x30>)
 800c0d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff ffc3 	bl	800c064 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c0de:	88fb      	ldrh	r3, [r7, #6]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	80fb      	strh	r3, [r7, #6]
 800c0e4:	88fb      	ldrh	r3, [r7, #6]
 800c0e6:	2b0c      	cmp	r3, #12
 800c0e8:	d9f2      	bls.n	800c0d0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	0801bb48 	.word	0x0801bb48

0800c0f8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c100:	f00b fc40 	bl	8017984 <sys_arch_protect>
 800c104:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d015      	beq.n	800c140 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	689b      	ldr	r3, [r3, #8]
 800c118:	68ba      	ldr	r2, [r7, #8]
 800c11a:	6812      	ldr	r2, [r2, #0]
 800c11c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	f003 0303 	and.w	r3, r3, #3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d006      	beq.n	800c136 <do_memp_malloc_pool+0x3e>
 800c128:	4b09      	ldr	r3, [pc, #36]	; (800c150 <do_memp_malloc_pool+0x58>)
 800c12a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c12e:	4909      	ldr	r1, [pc, #36]	; (800c154 <do_memp_malloc_pool+0x5c>)
 800c130:	4809      	ldr	r0, [pc, #36]	; (800c158 <do_memp_malloc_pool+0x60>)
 800c132:	f00b fde1 	bl	8017cf8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c136:	68f8      	ldr	r0, [r7, #12]
 800c138:	f00b fc32 	bl	80179a0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	e003      	b.n	800c148 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c140:	68f8      	ldr	r0, [r7, #12]
 800c142:	f00b fc2d 	bl	80179a0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	08018f98 	.word	0x08018f98
 800c154:	08018fc8 	.word	0x08018fc8
 800c158:	08018fec 	.word	0x08018fec

0800c15c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c15c:	b580      	push	{r7, lr}
 800c15e:	b082      	sub	sp, #8
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d106      	bne.n	800c178 <memp_malloc_pool+0x1c>
 800c16a:	4b0a      	ldr	r3, [pc, #40]	; (800c194 <memp_malloc_pool+0x38>)
 800c16c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c170:	4909      	ldr	r1, [pc, #36]	; (800c198 <memp_malloc_pool+0x3c>)
 800c172:	480a      	ldr	r0, [pc, #40]	; (800c19c <memp_malloc_pool+0x40>)
 800c174:	f00b fdc0 	bl	8017cf8 <iprintf>
  if (desc == NULL) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <memp_malloc_pool+0x26>
    return NULL;
 800c17e:	2300      	movs	r3, #0
 800c180:	e003      	b.n	800c18a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff ffb8 	bl	800c0f8 <do_memp_malloc_pool>
 800c188:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	08018f98 	.word	0x08018f98
 800c198:	08019014 	.word	0x08019014
 800c19c:	08018fec 	.word	0x08018fec

0800c1a0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c1aa:	79fb      	ldrb	r3, [r7, #7]
 800c1ac:	2b0c      	cmp	r3, #12
 800c1ae:	d908      	bls.n	800c1c2 <memp_malloc+0x22>
 800c1b0:	4b0a      	ldr	r3, [pc, #40]	; (800c1dc <memp_malloc+0x3c>)
 800c1b2:	f240 1257 	movw	r2, #343	; 0x157
 800c1b6:	490a      	ldr	r1, [pc, #40]	; (800c1e0 <memp_malloc+0x40>)
 800c1b8:	480a      	ldr	r0, [pc, #40]	; (800c1e4 <memp_malloc+0x44>)
 800c1ba:	f00b fd9d 	bl	8017cf8 <iprintf>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	e008      	b.n	800c1d4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	4a08      	ldr	r2, [pc, #32]	; (800c1e8 <memp_malloc+0x48>)
 800c1c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7ff ff94 	bl	800c0f8 <do_memp_malloc_pool>
 800c1d0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	08018f98 	.word	0x08018f98
 800c1e0:	08019028 	.word	0x08019028
 800c1e4:	08018fec 	.word	0x08018fec
 800c1e8:	0801bb48 	.word	0x0801bb48

0800c1ec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b084      	sub	sp, #16
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d006      	beq.n	800c20e <do_memp_free_pool+0x22>
 800c200:	4b0d      	ldr	r3, [pc, #52]	; (800c238 <do_memp_free_pool+0x4c>)
 800c202:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c206:	490d      	ldr	r1, [pc, #52]	; (800c23c <do_memp_free_pool+0x50>)
 800c208:	480d      	ldr	r0, [pc, #52]	; (800c240 <do_memp_free_pool+0x54>)
 800c20a:	f00b fd75 	bl	8017cf8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c212:	f00b fbb7 	bl	8017984 <sys_arch_protect>
 800c216:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c22a:	68b8      	ldr	r0, [r7, #8]
 800c22c:	f00b fbb8 	bl	80179a0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c230:	bf00      	nop
 800c232:	3710      	adds	r7, #16
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	08018f98 	.word	0x08018f98
 800c23c:	08019048 	.word	0x08019048
 800c240:	08018fec 	.word	0x08018fec

0800c244 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d106      	bne.n	800c262 <memp_free_pool+0x1e>
 800c254:	4b0a      	ldr	r3, [pc, #40]	; (800c280 <memp_free_pool+0x3c>)
 800c256:	f240 1295 	movw	r2, #405	; 0x195
 800c25a:	490a      	ldr	r1, [pc, #40]	; (800c284 <memp_free_pool+0x40>)
 800c25c:	480a      	ldr	r0, [pc, #40]	; (800c288 <memp_free_pool+0x44>)
 800c25e:	f00b fd4b 	bl	8017cf8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d007      	beq.n	800c278 <memp_free_pool+0x34>
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d004      	beq.n	800c278 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7ff ffbb 	bl	800c1ec <do_memp_free_pool>
 800c276:	e000      	b.n	800c27a <memp_free_pool+0x36>
    return;
 800c278:	bf00      	nop
}
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	08018f98 	.word	0x08018f98
 800c284:	08019014 	.word	0x08019014
 800c288:	08018fec 	.word	0x08018fec

0800c28c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
 800c292:	4603      	mov	r3, r0
 800c294:	6039      	str	r1, [r7, #0]
 800c296:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c298:	79fb      	ldrb	r3, [r7, #7]
 800c29a:	2b0c      	cmp	r3, #12
 800c29c:	d907      	bls.n	800c2ae <memp_free+0x22>
 800c29e:	4b0c      	ldr	r3, [pc, #48]	; (800c2d0 <memp_free+0x44>)
 800c2a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c2a4:	490b      	ldr	r1, [pc, #44]	; (800c2d4 <memp_free+0x48>)
 800c2a6:	480c      	ldr	r0, [pc, #48]	; (800c2d8 <memp_free+0x4c>)
 800c2a8:	f00b fd26 	bl	8017cf8 <iprintf>
 800c2ac:	e00c      	b.n	800c2c8 <memp_free+0x3c>

  if (mem == NULL) {
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d008      	beq.n	800c2c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <memp_free+0x50>)
 800c2b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7ff ff94 	bl	800c1ec <do_memp_free_pool>
 800c2c4:	e000      	b.n	800c2c8 <memp_free+0x3c>
    return;
 800c2c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	08018f98 	.word	0x08018f98
 800c2d4:	08019068 	.word	0x08019068
 800c2d8:	08018fec 	.word	0x08018fec
 800c2dc:	0801bb48 	.word	0x0801bb48

0800c2e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c2e4:	bf00      	nop
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
	...

0800c2f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b086      	sub	sp, #24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	60f8      	str	r0, [r7, #12]
 800c2f8:	60b9      	str	r1, [r7, #8]
 800c2fa:	607a      	str	r2, [r7, #4]
 800c2fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d108      	bne.n	800c316 <netif_add+0x26>
 800c304:	4b5b      	ldr	r3, [pc, #364]	; (800c474 <netif_add+0x184>)
 800c306:	f240 1227 	movw	r2, #295	; 0x127
 800c30a:	495b      	ldr	r1, [pc, #364]	; (800c478 <netif_add+0x188>)
 800c30c:	485b      	ldr	r0, [pc, #364]	; (800c47c <netif_add+0x18c>)
 800c30e:	f00b fcf3 	bl	8017cf8 <iprintf>
 800c312:	2300      	movs	r3, #0
 800c314:	e0a9      	b.n	800c46a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d108      	bne.n	800c32e <netif_add+0x3e>
 800c31c:	4b55      	ldr	r3, [pc, #340]	; (800c474 <netif_add+0x184>)
 800c31e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c322:	4957      	ldr	r1, [pc, #348]	; (800c480 <netif_add+0x190>)
 800c324:	4855      	ldr	r0, [pc, #340]	; (800c47c <netif_add+0x18c>)
 800c326:	f00b fce7 	bl	8017cf8 <iprintf>
 800c32a:	2300      	movs	r3, #0
 800c32c:	e09d      	b.n	800c46a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c334:	4b53      	ldr	r3, [pc, #332]	; (800c484 <netif_add+0x194>)
 800c336:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d101      	bne.n	800c342 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c33e:	4b51      	ldr	r3, [pc, #324]	; (800c484 <netif_add+0x194>)
 800c340:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d101      	bne.n	800c34c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c348:	4b4e      	ldr	r3, [pc, #312]	; (800c484 <netif_add+0x194>)
 800c34a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	4a49      	ldr	r2, [pc, #292]	; (800c488 <netif_add+0x198>)
 800c362:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2200      	movs	r2, #0
 800c36e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3324      	adds	r3, #36	; 0x24
 800c376:	2204      	movs	r2, #4
 800c378:	2100      	movs	r1, #0
 800c37a:	4618      	mov	r0, r3
 800c37c:	f00b fc59 	bl	8017c32 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2200      	movs	r2, #0
 800c384:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6a3a      	ldr	r2, [r7, #32]
 800c38a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c38c:	4b3f      	ldr	r3, [pc, #252]	; (800c48c <netif_add+0x19c>)
 800c38e:	781a      	ldrb	r2, [r3, #0]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c39a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	68b9      	ldr	r1, [r7, #8]
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f000 f914 	bl	800c5d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	4798      	blx	r3
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d001      	beq.n	800c3b8 <netif_add+0xc8>
    return NULL;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	e058      	b.n	800c46a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c3be:	2bff      	cmp	r3, #255	; 0xff
 800c3c0:	d103      	bne.n	800c3ca <netif_add+0xda>
        netif->num = 0;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3ce:	4b30      	ldr	r3, [pc, #192]	; (800c490 <netif_add+0x1a0>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	617b      	str	r3, [r7, #20]
 800c3d4:	e02b      	b.n	800c42e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d106      	bne.n	800c3ec <netif_add+0xfc>
 800c3de:	4b25      	ldr	r3, [pc, #148]	; (800c474 <netif_add+0x184>)
 800c3e0:	f240 128b 	movw	r2, #395	; 0x18b
 800c3e4:	492b      	ldr	r1, [pc, #172]	; (800c494 <netif_add+0x1a4>)
 800c3e6:	4825      	ldr	r0, [pc, #148]	; (800c47c <netif_add+0x18c>)
 800c3e8:	f00b fc86 	bl	8017cf8 <iprintf>
        num_netifs++;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2bff      	cmp	r3, #255	; 0xff
 800c3f6:	dd06      	ble.n	800c406 <netif_add+0x116>
 800c3f8:	4b1e      	ldr	r3, [pc, #120]	; (800c474 <netif_add+0x184>)
 800c3fa:	f240 128d 	movw	r2, #397	; 0x18d
 800c3fe:	4926      	ldr	r1, [pc, #152]	; (800c498 <netif_add+0x1a8>)
 800c400:	481e      	ldr	r0, [pc, #120]	; (800c47c <netif_add+0x18c>)
 800c402:	f00b fc79 	bl	8017cf8 <iprintf>
        if (netif2->num == netif->num) {
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c412:	429a      	cmp	r2, r3
 800c414:	d108      	bne.n	800c428 <netif_add+0x138>
          netif->num++;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c41c:	3301      	adds	r3, #1
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c426:	e005      	b.n	800c434 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1d0      	bne.n	800c3d6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1be      	bne.n	800c3b8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c440:	2bfe      	cmp	r3, #254	; 0xfe
 800c442:	d103      	bne.n	800c44c <netif_add+0x15c>
    netif_num = 0;
 800c444:	4b11      	ldr	r3, [pc, #68]	; (800c48c <netif_add+0x19c>)
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
 800c44a:	e006      	b.n	800c45a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c452:	3301      	adds	r3, #1
 800c454:	b2da      	uxtb	r2, r3
 800c456:	4b0d      	ldr	r3, [pc, #52]	; (800c48c <netif_add+0x19c>)
 800c458:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c45a:	4b0d      	ldr	r3, [pc, #52]	; (800c490 <netif_add+0x1a0>)
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c462:	4a0b      	ldr	r2, [pc, #44]	; (800c490 <netif_add+0x1a0>)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c468:	68fb      	ldr	r3, [r7, #12]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	08019084 	.word	0x08019084
 800c478:	08019118 	.word	0x08019118
 800c47c:	080190d4 	.word	0x080190d4
 800c480:	08019134 	.word	0x08019134
 800c484:	0801bbcc 	.word	0x0801bbcc
 800c488:	0800c8b3 	.word	0x0800c8b3
 800c48c:	24009dac 	.word	0x24009dac
 800c490:	2400d6ac 	.word	0x2400d6ac
 800c494:	08019158 	.word	0x08019158
 800c498:	0801916c 	.word	0x0801916c

0800c49c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c4a6:	6839      	ldr	r1, [r7, #0]
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f002 fb91 	bl	800ebd0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c4ae:	6839      	ldr	r1, [r7, #0]
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f006 ffa3 	bl	80133fc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c4b6:	bf00      	nop
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}
	...

0800c4c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d106      	bne.n	800c4e0 <netif_do_set_ipaddr+0x20>
 800c4d2:	4b1d      	ldr	r3, [pc, #116]	; (800c548 <netif_do_set_ipaddr+0x88>)
 800c4d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c4d8:	491c      	ldr	r1, [pc, #112]	; (800c54c <netif_do_set_ipaddr+0x8c>)
 800c4da:	481d      	ldr	r0, [pc, #116]	; (800c550 <netif_do_set_ipaddr+0x90>)
 800c4dc:	f00b fc0c 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <netif_do_set_ipaddr+0x34>
 800c4e6:	4b18      	ldr	r3, [pc, #96]	; (800c548 <netif_do_set_ipaddr+0x88>)
 800c4e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c4ec:	4917      	ldr	r1, [pc, #92]	; (800c54c <netif_do_set_ipaddr+0x8c>)
 800c4ee:	4818      	ldr	r0, [pc, #96]	; (800c550 <netif_do_set_ipaddr+0x90>)
 800c4f0:	f00b fc02 	bl	8017cf8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3304      	adds	r3, #4
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d01c      	beq.n	800c53c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	3304      	adds	r3, #4
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c512:	f107 0314 	add.w	r3, r7, #20
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff ffbf 	bl	800c49c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <netif_do_set_ipaddr+0x6a>
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	e000      	b.n	800c52c <netif_do_set_ipaddr+0x6c>
 800c52a:	2300      	movs	r3, #0
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c530:	2101      	movs	r1, #1
 800c532:	68f8      	ldr	r0, [r7, #12]
 800c534:	f000 f8d2 	bl	800c6dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3718      	adds	r7, #24
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	08019084 	.word	0x08019084
 800c54c:	0801919c 	.word	0x0801919c
 800c550:	080190d4 	.word	0x080190d4

0800c554 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	681a      	ldr	r2, [r3, #0]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3308      	adds	r3, #8
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d00a      	beq.n	800c584 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d002      	beq.n	800c57a <netif_do_set_netmask+0x26>
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	e000      	b.n	800c57c <netif_do_set_netmask+0x28>
 800c57a:	2300      	movs	r3, #0
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c592:	b480      	push	{r7}
 800c594:	b085      	sub	sp, #20
 800c596:	af00      	add	r7, sp, #0
 800c598:	60f8      	str	r0, [r7, #12]
 800c59a:	60b9      	str	r1, [r7, #8]
 800c59c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	330c      	adds	r3, #12
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d00a      	beq.n	800c5c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d002      	beq.n	800c5b8 <netif_do_set_gw+0x26>
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	e000      	b.n	800c5ba <netif_do_set_gw+0x28>
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c5be:	2301      	movs	r3, #1
 800c5c0:	e000      	b.n	800c5c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3714      	adds	r7, #20
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60f8      	str	r0, [r7, #12]
 800c5d8:	60b9      	str	r1, [r7, #8]
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d101      	bne.n	800c5f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c5ec:	4b1c      	ldr	r3, [pc, #112]	; (800c660 <netif_set_addr+0x90>)
 800c5ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c5f6:	4b1a      	ldr	r3, [pc, #104]	; (800c660 <netif_set_addr+0x90>)
 800c5f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c600:	4b17      	ldr	r3, [pc, #92]	; (800c660 <netif_set_addr+0x90>)
 800c602:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d003      	beq.n	800c612 <netif_set_addr+0x42>
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d101      	bne.n	800c616 <netif_set_addr+0x46>
 800c612:	2301      	movs	r3, #1
 800c614:	e000      	b.n	800c618 <netif_set_addr+0x48>
 800c616:	2300      	movs	r3, #0
 800c618:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c620:	f107 0310 	add.w	r3, r7, #16
 800c624:	461a      	mov	r2, r3
 800c626:	68b9      	ldr	r1, [r7, #8]
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f7ff ff49 	bl	800c4c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	6879      	ldr	r1, [r7, #4]
 800c632:	68f8      	ldr	r0, [r7, #12]
 800c634:	f7ff ff8e 	bl	800c554 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c638:	69ba      	ldr	r2, [r7, #24]
 800c63a:	6839      	ldr	r1, [r7, #0]
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff ffa8 	bl	800c592 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d106      	bne.n	800c656 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c648:	f107 0310 	add.w	r3, r7, #16
 800c64c:	461a      	mov	r2, r3
 800c64e:	68b9      	ldr	r1, [r7, #8]
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff ff35 	bl	800c4c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c656:	bf00      	nop
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	0801bbcc 	.word	0x0801bbcc

0800c664 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c66c:	4a04      	ldr	r2, [pc, #16]	; (800c680 <netif_set_default+0x1c>)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c672:	bf00      	nop
 800c674:	370c      	adds	r7, #12
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	2400d6b0 	.word	0x2400d6b0

0800c684 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d107      	bne.n	800c6a2 <netif_set_up+0x1e>
 800c692:	4b0f      	ldr	r3, [pc, #60]	; (800c6d0 <netif_set_up+0x4c>)
 800c694:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c698:	490e      	ldr	r1, [pc, #56]	; (800c6d4 <netif_set_up+0x50>)
 800c69a:	480f      	ldr	r0, [pc, #60]	; (800c6d8 <netif_set_up+0x54>)
 800c69c:	f00b fb2c 	bl	8017cf8 <iprintf>
 800c6a0:	e013      	b.n	800c6ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10c      	bne.n	800c6ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c6b6:	f043 0301 	orr.w	r3, r3, #1
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6c2:	2103      	movs	r1, #3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f809 	bl	800c6dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	08019084 	.word	0x08019084
 800c6d4:	0801920c 	.word	0x0801920c
 800c6d8:	080190d4 	.word	0x080190d4

0800c6dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d106      	bne.n	800c6fc <netif_issue_reports+0x20>
 800c6ee:	4b18      	ldr	r3, [pc, #96]	; (800c750 <netif_issue_reports+0x74>)
 800c6f0:	f240 326d 	movw	r2, #877	; 0x36d
 800c6f4:	4917      	ldr	r1, [pc, #92]	; (800c754 <netif_issue_reports+0x78>)
 800c6f6:	4818      	ldr	r0, [pc, #96]	; (800c758 <netif_issue_reports+0x7c>)
 800c6f8:	f00b fafe 	bl	8017cf8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c702:	f003 0304 	and.w	r3, r3, #4
 800c706:	2b00      	cmp	r3, #0
 800c708:	d01e      	beq.n	800c748 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c710:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c714:	2b00      	cmp	r3, #0
 800c716:	d017      	beq.n	800c748 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c718:	78fb      	ldrb	r3, [r7, #3]
 800c71a:	f003 0301 	and.w	r3, r3, #1
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d013      	beq.n	800c74a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	3304      	adds	r3, #4
 800c726:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00e      	beq.n	800c74a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c732:	f003 0308 	and.w	r3, r3, #8
 800c736:	2b00      	cmp	r3, #0
 800c738:	d007      	beq.n	800c74a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3304      	adds	r3, #4
 800c73e:	4619      	mov	r1, r3
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f009 fc5d 	bl	8016000 <etharp_request>
 800c746:	e000      	b.n	800c74a <netif_issue_reports+0x6e>
    return;
 800c748:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	08019084 	.word	0x08019084
 800c754:	08019228 	.word	0x08019228
 800c758:	080190d4 	.word	0x080190d4

0800c75c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d107      	bne.n	800c77a <netif_set_down+0x1e>
 800c76a:	4b12      	ldr	r3, [pc, #72]	; (800c7b4 <netif_set_down+0x58>)
 800c76c:	f240 329b 	movw	r2, #923	; 0x39b
 800c770:	4911      	ldr	r1, [pc, #68]	; (800c7b8 <netif_set_down+0x5c>)
 800c772:	4812      	ldr	r0, [pc, #72]	; (800c7bc <netif_set_down+0x60>)
 800c774:	f00b fac0 	bl	8017cf8 <iprintf>
 800c778:	e019      	b.n	800c7ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c780:	f003 0301 	and.w	r3, r3, #1
 800c784:	2b00      	cmp	r3, #0
 800c786:	d012      	beq.n	800c7ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c78e:	f023 0301 	bic.w	r3, r3, #1
 800c792:	b2da      	uxtb	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7a0:	f003 0308 	and.w	r3, r3, #8
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f008 ffe3 	bl	8015774 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	08019084 	.word	0x08019084
 800c7b8:	0801924c 	.word	0x0801924c
 800c7bc:	080190d4 	.word	0x080190d4

0800c7c0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d107      	bne.n	800c7de <netif_set_link_up+0x1e>
 800c7ce:	4b15      	ldr	r3, [pc, #84]	; (800c824 <netif_set_link_up+0x64>)
 800c7d0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c7d4:	4914      	ldr	r1, [pc, #80]	; (800c828 <netif_set_link_up+0x68>)
 800c7d6:	4815      	ldr	r0, [pc, #84]	; (800c82c <netif_set_link_up+0x6c>)
 800c7d8:	f00b fa8e 	bl	8017cf8 <iprintf>
 800c7dc:	e01e      	b.n	800c81c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d117      	bne.n	800c81c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c7f2:	f043 0304 	orr.w	r3, r3, #4
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f007 fa28 	bl	8013c54 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c804:	2103      	movs	r1, #3
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f7ff ff68 	bl	800c6dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d003      	beq.n	800c81c <netif_set_link_up+0x5c>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	69db      	ldr	r3, [r3, #28]
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	08019084 	.word	0x08019084
 800c828:	0801926c 	.word	0x0801926c
 800c82c:	080190d4 	.word	0x080190d4

0800c830 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b082      	sub	sp, #8
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d107      	bne.n	800c84e <netif_set_link_down+0x1e>
 800c83e:	4b11      	ldr	r3, [pc, #68]	; (800c884 <netif_set_link_down+0x54>)
 800c840:	f240 4206 	movw	r2, #1030	; 0x406
 800c844:	4910      	ldr	r1, [pc, #64]	; (800c888 <netif_set_link_down+0x58>)
 800c846:	4811      	ldr	r0, [pc, #68]	; (800c88c <netif_set_link_down+0x5c>)
 800c848:	f00b fa56 	bl	8017cf8 <iprintf>
 800c84c:	e017      	b.n	800c87e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d010      	beq.n	800c87e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800c862:	f023 0304 	bic.w	r3, r3, #4
 800c866:	b2da      	uxtb	r2, r3
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d003      	beq.n	800c87e <netif_set_link_down+0x4e>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c87e:	3708      	adds	r7, #8
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	08019084 	.word	0x08019084
 800c888:	08019290 	.word	0x08019290
 800c88c:	080190d4 	.word	0x080190d4

0800c890 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c890:	b480      	push	{r7}
 800c892:	b083      	sub	sp, #12
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	61da      	str	r2, [r3, #28]
  }
}
 800c8a6:	bf00      	nop
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b085      	sub	sp, #20
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	60f8      	str	r0, [r7, #12]
 800c8ba:	60b9      	str	r1, [r7, #8]
 800c8bc:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c8be:	f06f 030b 	mvn.w	r3, #11
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	3714      	adds	r7, #20
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c8da:	79fb      	ldrb	r3, [r7, #7]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d013      	beq.n	800c908 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c8e0:	4b0d      	ldr	r3, [pc, #52]	; (800c918 <netif_get_by_index+0x48>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	60fb      	str	r3, [r7, #12]
 800c8e6:	e00c      	b.n	800c902 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	79fa      	ldrb	r2, [r7, #7]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d101      	bne.n	800c8fc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	e006      	b.n	800c90a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	60fb      	str	r3, [r7, #12]
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1ef      	bne.n	800c8e8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c908:	2300      	movs	r3, #0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
 800c916:	bf00      	nop
 800c918:	2400d6ac 	.word	0x2400d6ac

0800c91c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b082      	sub	sp, #8
 800c920:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c922:	f00b f82f 	bl	8017984 <sys_arch_protect>
 800c926:	6038      	str	r0, [r7, #0]
 800c928:	4b0d      	ldr	r3, [pc, #52]	; (800c960 <pbuf_free_ooseq+0x44>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
 800c92e:	6838      	ldr	r0, [r7, #0]
 800c930:	f00b f836 	bl	80179a0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c934:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <pbuf_free_ooseq+0x48>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	607b      	str	r3, [r7, #4]
 800c93a:	e00a      	b.n	800c952 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f002 f981 	bl	800ec4c <tcp_free_ooseq>
      return;
 800c94a:	e005      	b.n	800c958 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	68db      	ldr	r3, [r3, #12]
 800c950:	607b      	str	r3, [r7, #4]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d1f1      	bne.n	800c93c <pbuf_free_ooseq+0x20>
    }
  }
}
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	2400d6b4 	.word	0x2400d6b4
 800c964:	2400d6bc 	.word	0x2400d6bc

0800c968 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c970:	f7ff ffd4 	bl	800c91c <pbuf_free_ooseq>
}
 800c974:	bf00      	nop
 800c976:	3708      	adds	r7, #8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c982:	f00a ffff 	bl	8017984 <sys_arch_protect>
 800c986:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c988:	4b0f      	ldr	r3, [pc, #60]	; (800c9c8 <pbuf_pool_is_empty+0x4c>)
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c98e:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <pbuf_pool_is_empty+0x4c>)
 800c990:	2201      	movs	r2, #1
 800c992:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f00b f803 	bl	80179a0 <sys_arch_unprotect>

  if (!queued) {
 800c99a:	78fb      	ldrb	r3, [r7, #3]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10f      	bne.n	800c9c0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c9a0:	2100      	movs	r1, #0
 800c9a2:	480a      	ldr	r0, [pc, #40]	; (800c9cc <pbuf_pool_is_empty+0x50>)
 800c9a4:	f7fe fde2 	bl	800b56c <tcpip_try_callback>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d008      	beq.n	800c9c0 <pbuf_pool_is_empty+0x44>
 800c9ae:	f00a ffe9 	bl	8017984 <sys_arch_protect>
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	4b04      	ldr	r3, [pc, #16]	; (800c9c8 <pbuf_pool_is_empty+0x4c>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	701a      	strb	r2, [r3, #0]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f00a fff0 	bl	80179a0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c9c0:	bf00      	nop
 800c9c2:	3708      	adds	r7, #8
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}
 800c9c8:	2400d6b4 	.word	0x2400d6b4
 800c9cc:	0800c969 	.word	0x0800c969

0800c9d0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b085      	sub	sp, #20
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	60f8      	str	r0, [r7, #12]
 800c9d8:	60b9      	str	r1, [r7, #8]
 800c9da:	4611      	mov	r1, r2
 800c9dc:	461a      	mov	r2, r3
 800c9de:	460b      	mov	r3, r1
 800c9e0:	80fb      	strh	r3, [r7, #6]
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	68ba      	ldr	r2, [r7, #8]
 800c9f0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	88fa      	ldrh	r2, [r7, #6]
 800c9f6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	88ba      	ldrh	r2, [r7, #4]
 800c9fc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c9fe:	8b3b      	ldrh	r3, [r7, #24]
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	7f3a      	ldrb	r2, [r7, #28]
 800ca0a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	73da      	strb	r2, [r3, #15]
}
 800ca18:	bf00      	nop
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08c      	sub	sp, #48	; 0x30
 800ca28:	af02      	add	r7, sp, #8
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	71fb      	strb	r3, [r7, #7]
 800ca2e:	460b      	mov	r3, r1
 800ca30:	80bb      	strh	r3, [r7, #4]
 800ca32:	4613      	mov	r3, r2
 800ca34:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ca36:	79fb      	ldrb	r3, [r7, #7]
 800ca38:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ca3a:	887b      	ldrh	r3, [r7, #2]
 800ca3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca40:	d07f      	beq.n	800cb42 <pbuf_alloc+0x11e>
 800ca42:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ca46:	f300 80c8 	bgt.w	800cbda <pbuf_alloc+0x1b6>
 800ca4a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca4e:	d010      	beq.n	800ca72 <pbuf_alloc+0x4e>
 800ca50:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ca54:	f300 80c1 	bgt.w	800cbda <pbuf_alloc+0x1b6>
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d002      	beq.n	800ca62 <pbuf_alloc+0x3e>
 800ca5c:	2b41      	cmp	r3, #65	; 0x41
 800ca5e:	f040 80bc 	bne.w	800cbda <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ca62:	887a      	ldrh	r2, [r7, #2]
 800ca64:	88bb      	ldrh	r3, [r7, #4]
 800ca66:	4619      	mov	r1, r3
 800ca68:	2000      	movs	r0, #0
 800ca6a:	f000 f8d1 	bl	800cc10 <pbuf_alloc_reference>
 800ca6e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ca70:	e0bd      	b.n	800cbee <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ca72:	2300      	movs	r3, #0
 800ca74:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ca76:	2300      	movs	r3, #0
 800ca78:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ca7a:	88bb      	ldrh	r3, [r7, #4]
 800ca7c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ca7e:	200c      	movs	r0, #12
 800ca80:	f7ff fb8e 	bl	800c1a0 <memp_malloc>
 800ca84:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d109      	bne.n	800caa0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ca8c:	f7ff ff76 	bl	800c97c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d002      	beq.n	800ca9c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ca96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca98:	f000 faa8 	bl	800cfec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	e0a7      	b.n	800cbf0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800caa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caa2:	3303      	adds	r3, #3
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	f023 0303 	bic.w	r3, r3, #3
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cab0:	b29b      	uxth	r3, r3
 800cab2:	8b7a      	ldrh	r2, [r7, #26]
 800cab4:	4293      	cmp	r3, r2
 800cab6:	bf28      	it	cs
 800cab8:	4613      	movcs	r3, r2
 800caba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cabc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cabe:	3310      	adds	r3, #16
 800cac0:	693a      	ldr	r2, [r7, #16]
 800cac2:	4413      	add	r3, r2
 800cac4:	3303      	adds	r3, #3
 800cac6:	f023 0303 	bic.w	r3, r3, #3
 800caca:	4618      	mov	r0, r3
 800cacc:	89f9      	ldrh	r1, [r7, #14]
 800cace:	8b7a      	ldrh	r2, [r7, #26]
 800cad0:	2300      	movs	r3, #0
 800cad2:	9301      	str	r3, [sp, #4]
 800cad4:	887b      	ldrh	r3, [r7, #2]
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	460b      	mov	r3, r1
 800cada:	4601      	mov	r1, r0
 800cadc:	6938      	ldr	r0, [r7, #16]
 800cade:	f7ff ff77 	bl	800c9d0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	f003 0303 	and.w	r3, r3, #3
 800caea:	2b00      	cmp	r3, #0
 800caec:	d006      	beq.n	800cafc <pbuf_alloc+0xd8>
 800caee:	4b42      	ldr	r3, [pc, #264]	; (800cbf8 <pbuf_alloc+0x1d4>)
 800caf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800caf4:	4941      	ldr	r1, [pc, #260]	; (800cbfc <pbuf_alloc+0x1d8>)
 800caf6:	4842      	ldr	r0, [pc, #264]	; (800cc00 <pbuf_alloc+0x1dc>)
 800caf8:	f00b f8fe 	bl	8017cf8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cafc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cafe:	3303      	adds	r3, #3
 800cb00:	f023 0303 	bic.w	r3, r3, #3
 800cb04:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cb08:	d106      	bne.n	800cb18 <pbuf_alloc+0xf4>
 800cb0a:	4b3b      	ldr	r3, [pc, #236]	; (800cbf8 <pbuf_alloc+0x1d4>)
 800cb0c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cb10:	493c      	ldr	r1, [pc, #240]	; (800cc04 <pbuf_alloc+0x1e0>)
 800cb12:	483b      	ldr	r0, [pc, #236]	; (800cc00 <pbuf_alloc+0x1dc>)
 800cb14:	f00b f8f0 	bl	8017cf8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d102      	bne.n	800cb24 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24
 800cb22:	e002      	b.n	800cb2a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cb2a:	693b      	ldr	r3, [r7, #16]
 800cb2c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cb2e:	8b7a      	ldrh	r2, [r7, #26]
 800cb30:	89fb      	ldrh	r3, [r7, #14]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cb36:	2300      	movs	r3, #0
 800cb38:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cb3a:	8b7b      	ldrh	r3, [r7, #26]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d19e      	bne.n	800ca7e <pbuf_alloc+0x5a>
      break;
 800cb40:	e055      	b.n	800cbee <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cb42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb44:	3303      	adds	r3, #3
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f023 0303 	bic.w	r3, r3, #3
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	88bb      	ldrh	r3, [r7, #4]
 800cb50:	3303      	adds	r3, #3
 800cb52:	b29b      	uxth	r3, r3
 800cb54:	f023 0303 	bic.w	r3, r3, #3
 800cb58:	b29b      	uxth	r3, r3
 800cb5a:	4413      	add	r3, r2
 800cb5c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cb5e:	8b3b      	ldrh	r3, [r7, #24]
 800cb60:	3310      	adds	r3, #16
 800cb62:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb64:	8b3a      	ldrh	r2, [r7, #24]
 800cb66:	88bb      	ldrh	r3, [r7, #4]
 800cb68:	3303      	adds	r3, #3
 800cb6a:	f023 0303 	bic.w	r3, r3, #3
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d306      	bcc.n	800cb80 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cb72:	8afa      	ldrh	r2, [r7, #22]
 800cb74:	88bb      	ldrh	r3, [r7, #4]
 800cb76:	3303      	adds	r3, #3
 800cb78:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d201      	bcs.n	800cb84 <pbuf_alloc+0x160>
        return NULL;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e035      	b.n	800cbf0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cb84:	8afb      	ldrh	r3, [r7, #22]
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7ff f966 	bl	800be58 <mem_malloc>
 800cb8c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800cb8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <pbuf_alloc+0x174>
        return NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	e02b      	b.n	800cbf0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cb98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cb9a:	3310      	adds	r3, #16
 800cb9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb9e:	4413      	add	r3, r2
 800cba0:	3303      	adds	r3, #3
 800cba2:	f023 0303 	bic.w	r3, r3, #3
 800cba6:	4618      	mov	r0, r3
 800cba8:	88b9      	ldrh	r1, [r7, #4]
 800cbaa:	88ba      	ldrh	r2, [r7, #4]
 800cbac:	2300      	movs	r3, #0
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	887b      	ldrh	r3, [r7, #2]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbba:	f7ff ff09 	bl	800c9d0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	f003 0303 	and.w	r3, r3, #3
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d010      	beq.n	800cbec <pbuf_alloc+0x1c8>
 800cbca:	4b0b      	ldr	r3, [pc, #44]	; (800cbf8 <pbuf_alloc+0x1d4>)
 800cbcc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800cbd0:	490d      	ldr	r1, [pc, #52]	; (800cc08 <pbuf_alloc+0x1e4>)
 800cbd2:	480b      	ldr	r0, [pc, #44]	; (800cc00 <pbuf_alloc+0x1dc>)
 800cbd4:	f00b f890 	bl	8017cf8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cbd8:	e008      	b.n	800cbec <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cbda:	4b07      	ldr	r3, [pc, #28]	; (800cbf8 <pbuf_alloc+0x1d4>)
 800cbdc:	f240 1227 	movw	r2, #295	; 0x127
 800cbe0:	490a      	ldr	r1, [pc, #40]	; (800cc0c <pbuf_alloc+0x1e8>)
 800cbe2:	4807      	ldr	r0, [pc, #28]	; (800cc00 <pbuf_alloc+0x1dc>)
 800cbe4:	f00b f888 	bl	8017cf8 <iprintf>
      return NULL;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	e001      	b.n	800cbf0 <pbuf_alloc+0x1cc>
      break;
 800cbec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3728      	adds	r7, #40	; 0x28
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	080192b4 	.word	0x080192b4
 800cbfc:	080192e4 	.word	0x080192e4
 800cc00:	08019314 	.word	0x08019314
 800cc04:	0801933c 	.word	0x0801933c
 800cc08:	08019370 	.word	0x08019370
 800cc0c:	0801939c 	.word	0x0801939c

0800cc10 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af02      	add	r7, sp, #8
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	807b      	strh	r3, [r7, #2]
 800cc1c:	4613      	mov	r3, r2
 800cc1e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cc20:	883b      	ldrh	r3, [r7, #0]
 800cc22:	2b41      	cmp	r3, #65	; 0x41
 800cc24:	d009      	beq.n	800cc3a <pbuf_alloc_reference+0x2a>
 800cc26:	883b      	ldrh	r3, [r7, #0]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d006      	beq.n	800cc3a <pbuf_alloc_reference+0x2a>
 800cc2c:	4b0f      	ldr	r3, [pc, #60]	; (800cc6c <pbuf_alloc_reference+0x5c>)
 800cc2e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800cc32:	490f      	ldr	r1, [pc, #60]	; (800cc70 <pbuf_alloc_reference+0x60>)
 800cc34:	480f      	ldr	r0, [pc, #60]	; (800cc74 <pbuf_alloc_reference+0x64>)
 800cc36:	f00b f85f 	bl	8017cf8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cc3a:	200b      	movs	r0, #11
 800cc3c:	f7ff fab0 	bl	800c1a0 <memp_malloc>
 800cc40:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d101      	bne.n	800cc4c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	e00b      	b.n	800cc64 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cc4c:	8879      	ldrh	r1, [r7, #2]
 800cc4e:	887a      	ldrh	r2, [r7, #2]
 800cc50:	2300      	movs	r3, #0
 800cc52:	9301      	str	r3, [sp, #4]
 800cc54:	883b      	ldrh	r3, [r7, #0]
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	460b      	mov	r3, r1
 800cc5a:	6879      	ldr	r1, [r7, #4]
 800cc5c:	68f8      	ldr	r0, [r7, #12]
 800cc5e:	f7ff feb7 	bl	800c9d0 <pbuf_init_alloced_pbuf>
  return p;
 800cc62:	68fb      	ldr	r3, [r7, #12]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3710      	adds	r7, #16
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	080192b4 	.word	0x080192b4
 800cc70:	080193b8 	.word	0x080193b8
 800cc74:	08019314 	.word	0x08019314

0800cc78 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b088      	sub	sp, #32
 800cc7c:	af02      	add	r7, sp, #8
 800cc7e:	607b      	str	r3, [r7, #4]
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
 800cc84:	460b      	mov	r3, r1
 800cc86:	81bb      	strh	r3, [r7, #12]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cc8c:	7bfb      	ldrb	r3, [r7, #15]
 800cc8e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cc90:	8a7b      	ldrh	r3, [r7, #18]
 800cc92:	3303      	adds	r3, #3
 800cc94:	f023 0203 	bic.w	r2, r3, #3
 800cc98:	89bb      	ldrh	r3, [r7, #12]
 800cc9a:	441a      	add	r2, r3
 800cc9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d901      	bls.n	800cca6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cca2:	2300      	movs	r3, #0
 800cca4:	e018      	b.n	800ccd8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d007      	beq.n	800ccbc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ccac:	8a7b      	ldrh	r3, [r7, #18]
 800ccae:	3303      	adds	r3, #3
 800ccb0:	f023 0303 	bic.w	r3, r3, #3
 800ccb4:	6a3a      	ldr	r2, [r7, #32]
 800ccb6:	4413      	add	r3, r2
 800ccb8:	617b      	str	r3, [r7, #20]
 800ccba:	e001      	b.n	800ccc0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	89b9      	ldrh	r1, [r7, #12]
 800ccc4:	89ba      	ldrh	r2, [r7, #12]
 800ccc6:	2302      	movs	r3, #2
 800ccc8:	9301      	str	r3, [sp, #4]
 800ccca:	897b      	ldrh	r3, [r7, #10]
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	6979      	ldr	r1, [r7, #20]
 800ccd2:	f7ff fe7d 	bl	800c9d0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ccd6:	687b      	ldr	r3, [r7, #4]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3718      	adds	r7, #24
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	460b      	mov	r3, r1
 800ccea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d106      	bne.n	800cd00 <pbuf_realloc+0x20>
 800ccf2:	4b3a      	ldr	r3, [pc, #232]	; (800cddc <pbuf_realloc+0xfc>)
 800ccf4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ccf8:	4939      	ldr	r1, [pc, #228]	; (800cde0 <pbuf_realloc+0x100>)
 800ccfa:	483a      	ldr	r0, [pc, #232]	; (800cde4 <pbuf_realloc+0x104>)
 800ccfc:	f00a fffc 	bl	8017cf8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	891b      	ldrh	r3, [r3, #8]
 800cd04:	887a      	ldrh	r2, [r7, #2]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d263      	bcs.n	800cdd2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	891a      	ldrh	r2, [r3, #8]
 800cd0e:	887b      	ldrh	r3, [r7, #2]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cd14:	887b      	ldrh	r3, [r7, #2]
 800cd16:	817b      	strh	r3, [r7, #10]
  q = p;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cd1c:	e018      	b.n	800cd50 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	895b      	ldrh	r3, [r3, #10]
 800cd22:	897a      	ldrh	r2, [r7, #10]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	891a      	ldrh	r2, [r3, #8]
 800cd2c:	893b      	ldrh	r3, [r7, #8]
 800cd2e:	1ad3      	subs	r3, r2, r3
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d106      	bne.n	800cd50 <pbuf_realloc+0x70>
 800cd42:	4b26      	ldr	r3, [pc, #152]	; (800cddc <pbuf_realloc+0xfc>)
 800cd44:	f240 12af 	movw	r2, #431	; 0x1af
 800cd48:	4927      	ldr	r1, [pc, #156]	; (800cde8 <pbuf_realloc+0x108>)
 800cd4a:	4826      	ldr	r0, [pc, #152]	; (800cde4 <pbuf_realloc+0x104>)
 800cd4c:	f00a ffd4 	bl	8017cf8 <iprintf>
  while (rem_len > q->len) {
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	895b      	ldrh	r3, [r3, #10]
 800cd54:	897a      	ldrh	r2, [r7, #10]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d8e1      	bhi.n	800cd1e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	7b1b      	ldrb	r3, [r3, #12]
 800cd5e:	f003 030f 	and.w	r3, r3, #15
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d121      	bne.n	800cdaa <pbuf_realloc+0xca>
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	895b      	ldrh	r3, [r3, #10]
 800cd6a:	897a      	ldrh	r2, [r7, #10]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d01c      	beq.n	800cdaa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	7b5b      	ldrb	r3, [r3, #13]
 800cd74:	f003 0302 	and.w	r3, r3, #2
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d116      	bne.n	800cdaa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	685a      	ldr	r2, [r3, #4]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	897b      	ldrh	r3, [r7, #10]
 800cd88:	4413      	add	r3, r2
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	68f8      	ldr	r0, [r7, #12]
 800cd90:	f7fe ff58 	bl	800bc44 <mem_trim>
 800cd94:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d106      	bne.n	800cdaa <pbuf_realloc+0xca>
 800cd9c:	4b0f      	ldr	r3, [pc, #60]	; (800cddc <pbuf_realloc+0xfc>)
 800cd9e:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cda2:	4912      	ldr	r1, [pc, #72]	; (800cdec <pbuf_realloc+0x10c>)
 800cda4:	480f      	ldr	r0, [pc, #60]	; (800cde4 <pbuf_realloc+0x104>)
 800cda6:	f00a ffa7 	bl	8017cf8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	897a      	ldrh	r2, [r7, #10]
 800cdae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	895a      	ldrh	r2, [r3, #10]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d004      	beq.n	800cdca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 f911 	bl	800cfec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	e000      	b.n	800cdd4 <pbuf_realloc+0xf4>
    return;
 800cdd2:	bf00      	nop

}
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	080192b4 	.word	0x080192b4
 800cde0:	080193cc 	.word	0x080193cc
 800cde4:	08019314 	.word	0x08019314
 800cde8:	080193e4 	.word	0x080193e4
 800cdec:	080193fc 	.word	0x080193fc

0800cdf0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d106      	bne.n	800ce12 <pbuf_add_header_impl+0x22>
 800ce04:	4b2b      	ldr	r3, [pc, #172]	; (800ceb4 <pbuf_add_header_impl+0xc4>)
 800ce06:	f240 12df 	movw	r2, #479	; 0x1df
 800ce0a:	492b      	ldr	r1, [pc, #172]	; (800ceb8 <pbuf_add_header_impl+0xc8>)
 800ce0c:	482b      	ldr	r0, [pc, #172]	; (800cebc <pbuf_add_header_impl+0xcc>)
 800ce0e:	f00a ff73 	bl	8017cf8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <pbuf_add_header_impl+0x30>
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce1e:	d301      	bcc.n	800ce24 <pbuf_add_header_impl+0x34>
    return 1;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e043      	b.n	800ceac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <pbuf_add_header_impl+0x3e>
    return 0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	e03e      	b.n	800ceac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	891a      	ldrh	r2, [r3, #8]
 800ce36:	8a7b      	ldrh	r3, [r7, #18]
 800ce38:	4413      	add	r3, r2
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	8a7a      	ldrh	r2, [r7, #18]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d901      	bls.n	800ce46 <pbuf_add_header_impl+0x56>
    return 1;
 800ce42:	2301      	movs	r3, #1
 800ce44:	e032      	b.n	800ceac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	7b1b      	ldrb	r3, [r3, #12]
 800ce4a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ce4c:	8a3b      	ldrh	r3, [r7, #16]
 800ce4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00c      	beq.n	800ce70 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	685a      	ldr	r2, [r3, #4]
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	425b      	negs	r3, r3
 800ce5e:	4413      	add	r3, r2
 800ce60:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3310      	adds	r3, #16
 800ce66:	697a      	ldr	r2, [r7, #20]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d20d      	bcs.n	800ce88 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e01d      	b.n	800ceac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ce70:	79fb      	ldrb	r3, [r7, #7]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d006      	beq.n	800ce84 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	685a      	ldr	r2, [r3, #4]
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	425b      	negs	r3, r3
 800ce7e:	4413      	add	r3, r2
 800ce80:	617b      	str	r3, [r7, #20]
 800ce82:	e001      	b.n	800ce88 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ce84:	2301      	movs	r3, #1
 800ce86:	e011      	b.n	800ceac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	697a      	ldr	r2, [r7, #20]
 800ce8c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	895a      	ldrh	r2, [r3, #10]
 800ce92:	8a7b      	ldrh	r3, [r7, #18]
 800ce94:	4413      	add	r3, r2
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	891a      	ldrh	r2, [r3, #8]
 800cea0:	8a7b      	ldrh	r3, [r7, #18]
 800cea2:	4413      	add	r3, r2
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	811a      	strh	r2, [r3, #8]


  return 0;
 800ceaa:	2300      	movs	r3, #0
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3718      	adds	r7, #24
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	080192b4 	.word	0x080192b4
 800ceb8:	08019418 	.word	0x08019418
 800cebc:	08019314 	.word	0x08019314

0800cec0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ceca:	2200      	movs	r2, #0
 800cecc:	6839      	ldr	r1, [r7, #0]
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7ff ff8e 	bl	800cdf0 <pbuf_add_header_impl>
 800ced4:	4603      	mov	r3, r0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3708      	adds	r7, #8
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
	...

0800cee0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d106      	bne.n	800cefe <pbuf_remove_header+0x1e>
 800cef0:	4b20      	ldr	r3, [pc, #128]	; (800cf74 <pbuf_remove_header+0x94>)
 800cef2:	f240 224b 	movw	r2, #587	; 0x24b
 800cef6:	4920      	ldr	r1, [pc, #128]	; (800cf78 <pbuf_remove_header+0x98>)
 800cef8:	4820      	ldr	r0, [pc, #128]	; (800cf7c <pbuf_remove_header+0x9c>)
 800cefa:	f00a fefd 	bl	8017cf8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d003      	beq.n	800cf0c <pbuf_remove_header+0x2c>
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf0a:	d301      	bcc.n	800cf10 <pbuf_remove_header+0x30>
    return 1;
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	e02c      	b.n	800cf6a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <pbuf_remove_header+0x3a>
    return 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	e027      	b.n	800cf6a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	895b      	ldrh	r3, [r3, #10]
 800cf22:	89fa      	ldrh	r2, [r7, #14]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d908      	bls.n	800cf3a <pbuf_remove_header+0x5a>
 800cf28:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <pbuf_remove_header+0x94>)
 800cf2a:	f240 2255 	movw	r2, #597	; 0x255
 800cf2e:	4914      	ldr	r1, [pc, #80]	; (800cf80 <pbuf_remove_header+0xa0>)
 800cf30:	4812      	ldr	r0, [pc, #72]	; (800cf7c <pbuf_remove_header+0x9c>)
 800cf32:	f00a fee1 	bl	8017cf8 <iprintf>
 800cf36:	2301      	movs	r3, #1
 800cf38:	e017      	b.n	800cf6a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	685a      	ldr	r2, [r3, #4]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	441a      	add	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	895a      	ldrh	r2, [r3, #10]
 800cf50:	89fb      	ldrh	r3, [r7, #14]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	b29a      	uxth	r2, r3
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	891a      	ldrh	r2, [r3, #8]
 800cf5e:	89fb      	ldrh	r3, [r7, #14]
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cf68:	2300      	movs	r3, #0
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	080192b4 	.word	0x080192b4
 800cf78:	08019418 	.word	0x08019418
 800cf7c:	08019314 	.word	0x08019314
 800cf80:	08019424 	.word	0x08019424

0800cf84 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	807b      	strh	r3, [r7, #2]
 800cf90:	4613      	mov	r3, r2
 800cf92:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cf94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	da08      	bge.n	800cfae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cf9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfa0:	425b      	negs	r3, r3
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f7ff ff9b 	bl	800cee0 <pbuf_remove_header>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	e007      	b.n	800cfbe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cfae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfb2:	787a      	ldrb	r2, [r7, #1]
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	6878      	ldr	r0, [r7, #4]
 800cfb8:	f7ff ff1a 	bl	800cdf0 <pbuf_add_header_impl>
 800cfbc:	4603      	mov	r3, r0
  }
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b082      	sub	sp, #8
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	460b      	mov	r3, r1
 800cfd0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cfd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7ff ffd2 	bl	800cf84 <pbuf_header_impl>
 800cfe0:	4603      	mov	r3, r0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10b      	bne.n	800d012 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d106      	bne.n	800d00e <pbuf_free+0x22>
 800d000:	4b3b      	ldr	r3, [pc, #236]	; (800d0f0 <pbuf_free+0x104>)
 800d002:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d006:	493b      	ldr	r1, [pc, #236]	; (800d0f4 <pbuf_free+0x108>)
 800d008:	483b      	ldr	r0, [pc, #236]	; (800d0f8 <pbuf_free+0x10c>)
 800d00a:	f00a fe75 	bl	8017cf8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d00e:	2300      	movs	r3, #0
 800d010:	e069      	b.n	800d0e6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d016:	e062      	b.n	800d0de <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d018:	f00a fcb4 	bl	8017984 <sys_arch_protect>
 800d01c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	7b9b      	ldrb	r3, [r3, #14]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d106      	bne.n	800d034 <pbuf_free+0x48>
 800d026:	4b32      	ldr	r3, [pc, #200]	; (800d0f0 <pbuf_free+0x104>)
 800d028:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d02c:	4933      	ldr	r1, [pc, #204]	; (800d0fc <pbuf_free+0x110>)
 800d02e:	4832      	ldr	r0, [pc, #200]	; (800d0f8 <pbuf_free+0x10c>)
 800d030:	f00a fe62 	bl	8017cf8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	7b9b      	ldrb	r3, [r3, #14]
 800d038:	3b01      	subs	r3, #1
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	739a      	strb	r2, [r3, #14]
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	7b9b      	ldrb	r3, [r3, #14]
 800d044:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d046:	69b8      	ldr	r0, [r7, #24]
 800d048:	f00a fcaa 	bl	80179a0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d143      	bne.n	800d0da <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7b1b      	ldrb	r3, [r3, #12]
 800d05c:	f003 030f 	and.w	r3, r3, #15
 800d060:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	7b5b      	ldrb	r3, [r3, #13]
 800d066:	f003 0302 	and.w	r3, r3, #2
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d011      	beq.n	800d092 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <pbuf_free+0x9c>
 800d07a:	4b1d      	ldr	r3, [pc, #116]	; (800d0f0 <pbuf_free+0x104>)
 800d07c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d080:	491f      	ldr	r1, [pc, #124]	; (800d100 <pbuf_free+0x114>)
 800d082:	481d      	ldr	r0, [pc, #116]	; (800d0f8 <pbuf_free+0x10c>)
 800d084:	f00a fe38 	bl	8017cf8 <iprintf>
        pc->custom_free_function(p);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	691b      	ldr	r3, [r3, #16]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	4798      	blx	r3
 800d090:	e01d      	b.n	800d0ce <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d092:	7bfb      	ldrb	r3, [r7, #15]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d104      	bne.n	800d0a2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d098:	6879      	ldr	r1, [r7, #4]
 800d09a:	200c      	movs	r0, #12
 800d09c:	f7ff f8f6 	bl	800c28c <memp_free>
 800d0a0:	e015      	b.n	800d0ce <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d0a2:	7bfb      	ldrb	r3, [r7, #15]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d104      	bne.n	800d0b2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	200b      	movs	r0, #11
 800d0ac:	f7ff f8ee 	bl	800c28c <memp_free>
 800d0b0:	e00d      	b.n	800d0ce <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d0b2:	7bfb      	ldrb	r3, [r7, #15]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d103      	bne.n	800d0c0 <pbuf_free+0xd4>
          mem_free(p);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f7fe fd33 	bl	800bb24 <mem_free>
 800d0be:	e006      	b.n	800d0ce <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <pbuf_free+0x104>)
 800d0c2:	f240 320f 	movw	r2, #783	; 0x30f
 800d0c6:	490f      	ldr	r1, [pc, #60]	; (800d104 <pbuf_free+0x118>)
 800d0c8:	480b      	ldr	r0, [pc, #44]	; (800d0f8 <pbuf_free+0x10c>)
 800d0ca:	f00a fe15 	bl	8017cf8 <iprintf>
        }
      }
      count++;
 800d0ce:	7ffb      	ldrb	r3, [r7, #31]
 800d0d0:	3301      	adds	r3, #1
 800d0d2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	607b      	str	r3, [r7, #4]
 800d0d8:	e001      	b.n	800d0de <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d199      	bne.n	800d018 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d0e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3720      	adds	r7, #32
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	080192b4 	.word	0x080192b4
 800d0f4:	08019418 	.word	0x08019418
 800d0f8:	08019314 	.word	0x08019314
 800d0fc:	08019444 	.word	0x08019444
 800d100:	0801945c 	.word	0x0801945c
 800d104:	08019480 	.word	0x08019480

0800d108 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d110:	2300      	movs	r3, #0
 800d112:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d114:	e005      	b.n	800d122 <pbuf_clen+0x1a>
    ++len;
 800d116:	89fb      	ldrh	r3, [r7, #14]
 800d118:	3301      	adds	r3, #1
 800d11a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1f6      	bne.n	800d116 <pbuf_clen+0xe>
  }
  return len;
 800d128:	89fb      	ldrh	r3, [r7, #14]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr
	...

0800d138 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d016      	beq.n	800d174 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d146:	f00a fc1d 	bl	8017984 <sys_arch_protect>
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7b9b      	ldrb	r3, [r3, #14]
 800d150:	3301      	adds	r3, #1
 800d152:	b2da      	uxtb	r2, r3
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	739a      	strb	r2, [r3, #14]
 800d158:	68f8      	ldr	r0, [r7, #12]
 800d15a:	f00a fc21 	bl	80179a0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	7b9b      	ldrb	r3, [r3, #14]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <pbuf_ref+0x3c>
 800d166:	4b05      	ldr	r3, [pc, #20]	; (800d17c <pbuf_ref+0x44>)
 800d168:	f240 3242 	movw	r2, #834	; 0x342
 800d16c:	4904      	ldr	r1, [pc, #16]	; (800d180 <pbuf_ref+0x48>)
 800d16e:	4805      	ldr	r0, [pc, #20]	; (800d184 <pbuf_ref+0x4c>)
 800d170:	f00a fdc2 	bl	8017cf8 <iprintf>
  }
}
 800d174:	bf00      	nop
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	080192b4 	.word	0x080192b4
 800d180:	08019494 	.word	0x08019494
 800d184:	08019314 	.word	0x08019314

0800d188 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <pbuf_cat+0x16>
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d107      	bne.n	800d1ae <pbuf_cat+0x26>
 800d19e:	4b20      	ldr	r3, [pc, #128]	; (800d220 <pbuf_cat+0x98>)
 800d1a0:	f240 3259 	movw	r2, #857	; 0x359
 800d1a4:	491f      	ldr	r1, [pc, #124]	; (800d224 <pbuf_cat+0x9c>)
 800d1a6:	4820      	ldr	r0, [pc, #128]	; (800d228 <pbuf_cat+0xa0>)
 800d1a8:	f00a fda6 	bl	8017cf8 <iprintf>
 800d1ac:	e034      	b.n	800d218 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	60fb      	str	r3, [r7, #12]
 800d1b2:	e00a      	b.n	800d1ca <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	891a      	ldrh	r2, [r3, #8]
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	891b      	ldrh	r3, [r3, #8]
 800d1bc:	4413      	add	r3, r2
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	60fb      	str	r3, [r7, #12]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1f0      	bne.n	800d1b4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	891a      	ldrh	r2, [r3, #8]
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	895b      	ldrh	r3, [r3, #10]
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d006      	beq.n	800d1ec <pbuf_cat+0x64>
 800d1de:	4b10      	ldr	r3, [pc, #64]	; (800d220 <pbuf_cat+0x98>)
 800d1e0:	f240 3262 	movw	r2, #866	; 0x362
 800d1e4:	4911      	ldr	r1, [pc, #68]	; (800d22c <pbuf_cat+0xa4>)
 800d1e6:	4810      	ldr	r0, [pc, #64]	; (800d228 <pbuf_cat+0xa0>)
 800d1e8:	f00a fd86 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d006      	beq.n	800d202 <pbuf_cat+0x7a>
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <pbuf_cat+0x98>)
 800d1f6:	f240 3263 	movw	r2, #867	; 0x363
 800d1fa:	490d      	ldr	r1, [pc, #52]	; (800d230 <pbuf_cat+0xa8>)
 800d1fc:	480a      	ldr	r0, [pc, #40]	; (800d228 <pbuf_cat+0xa0>)
 800d1fe:	f00a fd7b 	bl	8017cf8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	891a      	ldrh	r2, [r3, #8]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	891b      	ldrh	r3, [r3, #8]
 800d20a:	4413      	add	r3, r2
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	080192b4 	.word	0x080192b4
 800d224:	080194a8 	.word	0x080194a8
 800d228:	08019314 	.word	0x08019314
 800d22c:	080194e0 	.word	0x080194e0
 800d230:	08019510 	.word	0x08019510

0800d234 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff ffa1 	bl	800d188 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d246:	6838      	ldr	r0, [r7, #0]
 800d248:	f7ff ff76 	bl	800d138 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d24c:	bf00      	nop
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b086      	sub	sp, #24
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d25e:	2300      	movs	r3, #0
 800d260:	617b      	str	r3, [r7, #20]
 800d262:	2300      	movs	r3, #0
 800d264:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d008      	beq.n	800d27e <pbuf_copy+0x2a>
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d005      	beq.n	800d27e <pbuf_copy+0x2a>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	891a      	ldrh	r2, [r3, #8]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	891b      	ldrh	r3, [r3, #8]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d209      	bcs.n	800d292 <pbuf_copy+0x3e>
 800d27e:	4b57      	ldr	r3, [pc, #348]	; (800d3dc <pbuf_copy+0x188>)
 800d280:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d284:	4956      	ldr	r1, [pc, #344]	; (800d3e0 <pbuf_copy+0x18c>)
 800d286:	4857      	ldr	r0, [pc, #348]	; (800d3e4 <pbuf_copy+0x190>)
 800d288:	f00a fd36 	bl	8017cf8 <iprintf>
 800d28c:	f06f 030f 	mvn.w	r3, #15
 800d290:	e09f      	b.n	800d3d2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	895b      	ldrh	r3, [r3, #10]
 800d296:	461a      	mov	r2, r3
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	1ad2      	subs	r2, r2, r3
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	895b      	ldrh	r3, [r3, #10]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	1acb      	subs	r3, r1, r3
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d306      	bcc.n	800d2b8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	895b      	ldrh	r3, [r3, #10]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	693b      	ldr	r3, [r7, #16]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	60fb      	str	r3, [r7, #12]
 800d2b6:	e005      	b.n	800d2c4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	895b      	ldrh	r3, [r3, #10]
 800d2bc:	461a      	mov	r2, r3
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	685a      	ldr	r2, [r3, #4]
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	18d0      	adds	r0, r2, r3
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	685a      	ldr	r2, [r3, #4]
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f00a fc9d 	bl	8017c16 <memcpy>
    offset_to += len;
 800d2dc:	697a      	ldr	r2, [r7, #20]
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	895b      	ldrh	r3, [r3, #10]
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	4293      	cmp	r3, r2
 800d2f6:	d906      	bls.n	800d306 <pbuf_copy+0xb2>
 800d2f8:	4b38      	ldr	r3, [pc, #224]	; (800d3dc <pbuf_copy+0x188>)
 800d2fa:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d2fe:	493a      	ldr	r1, [pc, #232]	; (800d3e8 <pbuf_copy+0x194>)
 800d300:	4838      	ldr	r0, [pc, #224]	; (800d3e4 <pbuf_copy+0x190>)
 800d302:	f00a fcf9 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	895b      	ldrh	r3, [r3, #10]
 800d30a:	461a      	mov	r2, r3
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	4293      	cmp	r3, r2
 800d310:	d906      	bls.n	800d320 <pbuf_copy+0xcc>
 800d312:	4b32      	ldr	r3, [pc, #200]	; (800d3dc <pbuf_copy+0x188>)
 800d314:	f240 32da 	movw	r2, #986	; 0x3da
 800d318:	4934      	ldr	r1, [pc, #208]	; (800d3ec <pbuf_copy+0x198>)
 800d31a:	4832      	ldr	r0, [pc, #200]	; (800d3e4 <pbuf_copy+0x190>)
 800d31c:	f00a fcec 	bl	8017cf8 <iprintf>
    if (offset_from >= p_from->len) {
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	895b      	ldrh	r3, [r3, #10]
 800d324:	461a      	mov	r2, r3
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	4293      	cmp	r3, r2
 800d32a:	d304      	bcc.n	800d336 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d32c:	2300      	movs	r3, #0
 800d32e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	895b      	ldrh	r3, [r3, #10]
 800d33a:	461a      	mov	r2, r3
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	4293      	cmp	r3, r2
 800d340:	d114      	bne.n	800d36c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10c      	bne.n	800d36c <pbuf_copy+0x118>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d009      	beq.n	800d36c <pbuf_copy+0x118>
 800d358:	4b20      	ldr	r3, [pc, #128]	; (800d3dc <pbuf_copy+0x188>)
 800d35a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d35e:	4924      	ldr	r1, [pc, #144]	; (800d3f0 <pbuf_copy+0x19c>)
 800d360:	4820      	ldr	r0, [pc, #128]	; (800d3e4 <pbuf_copy+0x190>)
 800d362:	f00a fcc9 	bl	8017cf8 <iprintf>
 800d366:	f06f 030f 	mvn.w	r3, #15
 800d36a:	e032      	b.n	800d3d2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d013      	beq.n	800d39a <pbuf_copy+0x146>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	895a      	ldrh	r2, [r3, #10]
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	891b      	ldrh	r3, [r3, #8]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d10d      	bne.n	800d39a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d009      	beq.n	800d39a <pbuf_copy+0x146>
 800d386:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <pbuf_copy+0x188>)
 800d388:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d38c:	4919      	ldr	r1, [pc, #100]	; (800d3f4 <pbuf_copy+0x1a0>)
 800d38e:	4815      	ldr	r0, [pc, #84]	; (800d3e4 <pbuf_copy+0x190>)
 800d390:	f00a fcb2 	bl	8017cf8 <iprintf>
 800d394:	f06f 0305 	mvn.w	r3, #5
 800d398:	e01b      	b.n	800d3d2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d013      	beq.n	800d3c8 <pbuf_copy+0x174>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	895a      	ldrh	r2, [r3, #10]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	891b      	ldrh	r3, [r3, #8]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d10d      	bne.n	800d3c8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d009      	beq.n	800d3c8 <pbuf_copy+0x174>
 800d3b4:	4b09      	ldr	r3, [pc, #36]	; (800d3dc <pbuf_copy+0x188>)
 800d3b6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d3ba:	490e      	ldr	r1, [pc, #56]	; (800d3f4 <pbuf_copy+0x1a0>)
 800d3bc:	4809      	ldr	r0, [pc, #36]	; (800d3e4 <pbuf_copy+0x190>)
 800d3be:	f00a fc9b 	bl	8017cf8 <iprintf>
 800d3c2:	f06f 0305 	mvn.w	r3, #5
 800d3c6:	e004      	b.n	800d3d2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f47f af61 	bne.w	800d292 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	080192b4 	.word	0x080192b4
 800d3e0:	0801955c 	.word	0x0801955c
 800d3e4:	08019314 	.word	0x08019314
 800d3e8:	0801958c 	.word	0x0801958c
 800d3ec:	080195a4 	.word	0x080195a4
 800d3f0:	080195c0 	.word	0x080195c0
 800d3f4:	080195d0 	.word	0x080195d0

0800d3f8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	4611      	mov	r1, r2
 800d404:	461a      	mov	r2, r3
 800d406:	460b      	mov	r3, r1
 800d408:	80fb      	strh	r3, [r7, #6]
 800d40a:	4613      	mov	r3, r2
 800d40c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d108      	bne.n	800d42e <pbuf_copy_partial+0x36>
 800d41c:	4b2b      	ldr	r3, [pc, #172]	; (800d4cc <pbuf_copy_partial+0xd4>)
 800d41e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d422:	492b      	ldr	r1, [pc, #172]	; (800d4d0 <pbuf_copy_partial+0xd8>)
 800d424:	482b      	ldr	r0, [pc, #172]	; (800d4d4 <pbuf_copy_partial+0xdc>)
 800d426:	f00a fc67 	bl	8017cf8 <iprintf>
 800d42a:	2300      	movs	r3, #0
 800d42c:	e04a      	b.n	800d4c4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d108      	bne.n	800d446 <pbuf_copy_partial+0x4e>
 800d434:	4b25      	ldr	r3, [pc, #148]	; (800d4cc <pbuf_copy_partial+0xd4>)
 800d436:	f240 420b 	movw	r2, #1035	; 0x40b
 800d43a:	4927      	ldr	r1, [pc, #156]	; (800d4d8 <pbuf_copy_partial+0xe0>)
 800d43c:	4825      	ldr	r0, [pc, #148]	; (800d4d4 <pbuf_copy_partial+0xdc>)
 800d43e:	f00a fc5b 	bl	8017cf8 <iprintf>
 800d442:	2300      	movs	r3, #0
 800d444:	e03e      	b.n	800d4c4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	61fb      	str	r3, [r7, #28]
 800d44a:	e034      	b.n	800d4b6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d44c:	88bb      	ldrh	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00a      	beq.n	800d468 <pbuf_copy_partial+0x70>
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	895b      	ldrh	r3, [r3, #10]
 800d456:	88ba      	ldrh	r2, [r7, #4]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d305      	bcc.n	800d468 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	895b      	ldrh	r3, [r3, #10]
 800d460:	88ba      	ldrh	r2, [r7, #4]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	80bb      	strh	r3, [r7, #4]
 800d466:	e023      	b.n	800d4b0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d468:	69fb      	ldr	r3, [r7, #28]
 800d46a:	895a      	ldrh	r2, [r3, #10]
 800d46c:	88bb      	ldrh	r3, [r7, #4]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d472:	8b3a      	ldrh	r2, [r7, #24]
 800d474:	88fb      	ldrh	r3, [r7, #6]
 800d476:	429a      	cmp	r2, r3
 800d478:	d901      	bls.n	800d47e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d47a:	88fb      	ldrh	r3, [r7, #6]
 800d47c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d47e:	8b7b      	ldrh	r3, [r7, #26]
 800d480:	68ba      	ldr	r2, [r7, #8]
 800d482:	18d0      	adds	r0, r2, r3
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	685a      	ldr	r2, [r3, #4]
 800d488:	88bb      	ldrh	r3, [r7, #4]
 800d48a:	4413      	add	r3, r2
 800d48c:	8b3a      	ldrh	r2, [r7, #24]
 800d48e:	4619      	mov	r1, r3
 800d490:	f00a fbc1 	bl	8017c16 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d494:	8afa      	ldrh	r2, [r7, #22]
 800d496:	8b3b      	ldrh	r3, [r7, #24]
 800d498:	4413      	add	r3, r2
 800d49a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d49c:	8b7a      	ldrh	r2, [r7, #26]
 800d49e:	8b3b      	ldrh	r3, [r7, #24]
 800d4a0:	4413      	add	r3, r2
 800d4a2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d4a4:	88fa      	ldrh	r2, [r7, #6]
 800d4a6:	8b3b      	ldrh	r3, [r7, #24]
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	61fb      	str	r3, [r7, #28]
 800d4b6:	88fb      	ldrh	r3, [r7, #6]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d002      	beq.n	800d4c2 <pbuf_copy_partial+0xca>
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1c4      	bne.n	800d44c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d4c2:	8afb      	ldrh	r3, [r7, #22]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3720      	adds	r7, #32
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	080192b4 	.word	0x080192b4
 800d4d0:	080195fc 	.word	0x080195fc
 800d4d4:	08019314 	.word	0x08019314
 800d4d8:	0801961c 	.word	0x0801961c

0800d4dc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b084      	sub	sp, #16
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	603a      	str	r2, [r7, #0]
 800d4e6:	71fb      	strb	r3, [r7, #7]
 800d4e8:	460b      	mov	r3, r1
 800d4ea:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	8919      	ldrh	r1, [r3, #8]
 800d4f0:	88ba      	ldrh	r2, [r7, #4]
 800d4f2:	79fb      	ldrb	r3, [r7, #7]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fa95 	bl	800ca24 <pbuf_alloc>
 800d4fa:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d101      	bne.n	800d506 <pbuf_clone+0x2a>
    return NULL;
 800d502:	2300      	movs	r3, #0
 800d504:	e011      	b.n	800d52a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d506:	6839      	ldr	r1, [r7, #0]
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f7ff fea3 	bl	800d254 <pbuf_copy>
 800d50e:	4603      	mov	r3, r0
 800d510:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d512:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d006      	beq.n	800d528 <pbuf_clone+0x4c>
 800d51a:	4b06      	ldr	r3, [pc, #24]	; (800d534 <pbuf_clone+0x58>)
 800d51c:	f240 5224 	movw	r2, #1316	; 0x524
 800d520:	4905      	ldr	r1, [pc, #20]	; (800d538 <pbuf_clone+0x5c>)
 800d522:	4806      	ldr	r0, [pc, #24]	; (800d53c <pbuf_clone+0x60>)
 800d524:	f00a fbe8 	bl	8017cf8 <iprintf>
  return q;
 800d528:	68fb      	ldr	r3, [r7, #12]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	080192b4 	.word	0x080192b4
 800d538:	08019728 	.word	0x08019728
 800d53c:	08019314 	.word	0x08019314

0800d540 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d544:	f00a fbf0 	bl	8017d28 <rand>
 800d548:	4603      	mov	r3, r0
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d550:	b29b      	uxth	r3, r3
 800d552:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d556:	b29a      	uxth	r2, r3
 800d558:	4b01      	ldr	r3, [pc, #4]	; (800d560 <tcp_init+0x20>)
 800d55a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d55c:	bf00      	nop
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	24000028 	.word	0x24000028

0800d564 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b082      	sub	sp, #8
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	7d1b      	ldrb	r3, [r3, #20]
 800d570:	2b01      	cmp	r3, #1
 800d572:	d105      	bne.n	800d580 <tcp_free+0x1c>
 800d574:	4b06      	ldr	r3, [pc, #24]	; (800d590 <tcp_free+0x2c>)
 800d576:	22d4      	movs	r2, #212	; 0xd4
 800d578:	4906      	ldr	r1, [pc, #24]	; (800d594 <tcp_free+0x30>)
 800d57a:	4807      	ldr	r0, [pc, #28]	; (800d598 <tcp_free+0x34>)
 800d57c:	f00a fbbc 	bl	8017cf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	2001      	movs	r0, #1
 800d584:	f7fe fe82 	bl	800c28c <memp_free>
}
 800d588:	bf00      	nop
 800d58a:	3708      	adds	r7, #8
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	080197b4 	.word	0x080197b4
 800d594:	080197e4 	.word	0x080197e4
 800d598:	080197f8 	.word	0x080197f8

0800d59c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	7d1b      	ldrb	r3, [r3, #20]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d105      	bne.n	800d5b8 <tcp_free_listen+0x1c>
 800d5ac:	4b06      	ldr	r3, [pc, #24]	; (800d5c8 <tcp_free_listen+0x2c>)
 800d5ae:	22df      	movs	r2, #223	; 0xdf
 800d5b0:	4906      	ldr	r1, [pc, #24]	; (800d5cc <tcp_free_listen+0x30>)
 800d5b2:	4807      	ldr	r0, [pc, #28]	; (800d5d0 <tcp_free_listen+0x34>)
 800d5b4:	f00a fba0 	bl	8017cf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	2002      	movs	r0, #2
 800d5bc:	f7fe fe66 	bl	800c28c <memp_free>
}
 800d5c0:	bf00      	nop
 800d5c2:	3708      	adds	r7, #8
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	080197b4 	.word	0x080197b4
 800d5cc:	08019820 	.word	0x08019820
 800d5d0:	080197f8 	.word	0x080197f8

0800d5d4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d5d8:	f000 fea2 	bl	800e320 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d5dc:	4b07      	ldr	r3, [pc, #28]	; (800d5fc <tcp_tmr+0x28>)
 800d5de:	781b      	ldrb	r3, [r3, #0]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	4b05      	ldr	r3, [pc, #20]	; (800d5fc <tcp_tmr+0x28>)
 800d5e6:	701a      	strb	r2, [r3, #0]
 800d5e8:	4b04      	ldr	r3, [pc, #16]	; (800d5fc <tcp_tmr+0x28>)
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	f003 0301 	and.w	r3, r3, #1
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d5f4:	f000 fb54 	bl	800dca0 <tcp_slowtmr>
  }
}
 800d5f8:	bf00      	nop
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	24009dad 	.word	0x24009dad

0800d600 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d105      	bne.n	800d61c <tcp_remove_listener+0x1c>
 800d610:	4b0d      	ldr	r3, [pc, #52]	; (800d648 <tcp_remove_listener+0x48>)
 800d612:	22ff      	movs	r2, #255	; 0xff
 800d614:	490d      	ldr	r1, [pc, #52]	; (800d64c <tcp_remove_listener+0x4c>)
 800d616:	480e      	ldr	r0, [pc, #56]	; (800d650 <tcp_remove_listener+0x50>)
 800d618:	f00a fb6e 	bl	8017cf8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	60fb      	str	r3, [r7, #12]
 800d620:	e00a      	b.n	800d638 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d626:	683a      	ldr	r2, [r7, #0]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d102      	bne.n	800d632 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	60fb      	str	r3, [r7, #12]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f1      	bne.n	800d622 <tcp_remove_listener+0x22>
    }
  }
}
 800d63e:	bf00      	nop
 800d640:	bf00      	nop
 800d642:	3710      	adds	r7, #16
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	080197b4 	.word	0x080197b4
 800d64c:	0801983c 	.word	0x0801983c
 800d650:	080197f8 	.word	0x080197f8

0800d654 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <tcp_listen_closed+0x1c>
 800d662:	4b14      	ldr	r3, [pc, #80]	; (800d6b4 <tcp_listen_closed+0x60>)
 800d664:	f240 1211 	movw	r2, #273	; 0x111
 800d668:	4913      	ldr	r1, [pc, #76]	; (800d6b8 <tcp_listen_closed+0x64>)
 800d66a:	4814      	ldr	r0, [pc, #80]	; (800d6bc <tcp_listen_closed+0x68>)
 800d66c:	f00a fb44 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	7d1b      	ldrb	r3, [r3, #20]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d006      	beq.n	800d686 <tcp_listen_closed+0x32>
 800d678:	4b0e      	ldr	r3, [pc, #56]	; (800d6b4 <tcp_listen_closed+0x60>)
 800d67a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d67e:	4910      	ldr	r1, [pc, #64]	; (800d6c0 <tcp_listen_closed+0x6c>)
 800d680:	480e      	ldr	r0, [pc, #56]	; (800d6bc <tcp_listen_closed+0x68>)
 800d682:	f00a fb39 	bl	8017cf8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d686:	2301      	movs	r3, #1
 800d688:	60fb      	str	r3, [r7, #12]
 800d68a:	e00b      	b.n	800d6a4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d68c:	4a0d      	ldr	r2, [pc, #52]	; (800d6c4 <tcp_listen_closed+0x70>)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	4618      	mov	r0, r3
 800d69a:	f7ff ffb1 	bl	800d600 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b03      	cmp	r3, #3
 800d6a8:	d9f0      	bls.n	800d68c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d6aa:	bf00      	nop
 800d6ac:	bf00      	nop
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	080197b4 	.word	0x080197b4
 800d6b8:	08019864 	.word	0x08019864
 800d6bc:	080197f8 	.word	0x080197f8
 800d6c0:	08019870 	.word	0x08019870
 800d6c4:	0801bb94 	.word	0x0801bb94

0800d6c8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d6c8:	b5b0      	push	{r4, r5, r7, lr}
 800d6ca:	b088      	sub	sp, #32
 800d6cc:	af04      	add	r7, sp, #16
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	460b      	mov	r3, r1
 800d6d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <tcp_close_shutdown+0x20>
 800d6da:	4b63      	ldr	r3, [pc, #396]	; (800d868 <tcp_close_shutdown+0x1a0>)
 800d6dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d6e0:	4962      	ldr	r1, [pc, #392]	; (800d86c <tcp_close_shutdown+0x1a4>)
 800d6e2:	4863      	ldr	r0, [pc, #396]	; (800d870 <tcp_close_shutdown+0x1a8>)
 800d6e4:	f00a fb08 	bl	8017cf8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d6e8:	78fb      	ldrb	r3, [r7, #3]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d066      	beq.n	800d7bc <tcp_close_shutdown+0xf4>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7d1b      	ldrb	r3, [r3, #20]
 800d6f2:	2b04      	cmp	r3, #4
 800d6f4:	d003      	beq.n	800d6fe <tcp_close_shutdown+0x36>
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
 800d6fa:	2b07      	cmp	r3, #7
 800d6fc:	d15e      	bne.n	800d7bc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d702:	2b00      	cmp	r3, #0
 800d704:	d104      	bne.n	800d710 <tcp_close_shutdown+0x48>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d70a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d70e:	d055      	beq.n	800d7bc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	8b5b      	ldrh	r3, [r3, #26]
 800d714:	f003 0310 	and.w	r3, r3, #16
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <tcp_close_shutdown+0x62>
 800d71c:	4b52      	ldr	r3, [pc, #328]	; (800d868 <tcp_close_shutdown+0x1a0>)
 800d71e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d722:	4954      	ldr	r1, [pc, #336]	; (800d874 <tcp_close_shutdown+0x1ac>)
 800d724:	4852      	ldr	r0, [pc, #328]	; (800d870 <tcp_close_shutdown+0x1a8>)
 800d726:	f00a fae7 	bl	8017cf8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d732:	687d      	ldr	r5, [r7, #4]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	3304      	adds	r3, #4
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	8ad2      	ldrh	r2, [r2, #22]
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	8b09      	ldrh	r1, [r1, #24]
 800d740:	9102      	str	r1, [sp, #8]
 800d742:	9201      	str	r2, [sp, #4]
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	462b      	mov	r3, r5
 800d748:	4622      	mov	r2, r4
 800d74a:	4601      	mov	r1, r0
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f004 fe8d 	bl	801246c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f001 f8c6 	bl	800e8e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d758:	4b47      	ldr	r3, [pc, #284]	; (800d878 <tcp_close_shutdown+0x1b0>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d105      	bne.n	800d76e <tcp_close_shutdown+0xa6>
 800d762:	4b45      	ldr	r3, [pc, #276]	; (800d878 <tcp_close_shutdown+0x1b0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	4a43      	ldr	r2, [pc, #268]	; (800d878 <tcp_close_shutdown+0x1b0>)
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	e013      	b.n	800d796 <tcp_close_shutdown+0xce>
 800d76e:	4b42      	ldr	r3, [pc, #264]	; (800d878 <tcp_close_shutdown+0x1b0>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	e00c      	b.n	800d790 <tcp_close_shutdown+0xc8>
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d104      	bne.n	800d78a <tcp_close_shutdown+0xc2>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	68da      	ldr	r2, [r3, #12]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	60da      	str	r2, [r3, #12]
 800d788:	e005      	b.n	800d796 <tcp_close_shutdown+0xce>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	68db      	ldr	r3, [r3, #12]
 800d78e:	60fb      	str	r3, [r7, #12]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d1ef      	bne.n	800d776 <tcp_close_shutdown+0xae>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	60da      	str	r2, [r3, #12]
 800d79c:	4b37      	ldr	r3, [pc, #220]	; (800d87c <tcp_close_shutdown+0x1b4>)
 800d79e:	2201      	movs	r2, #1
 800d7a0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d7a2:	4b37      	ldr	r3, [pc, #220]	; (800d880 <tcp_close_shutdown+0x1b8>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	429a      	cmp	r2, r3
 800d7aa:	d102      	bne.n	800d7b2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d7ac:	f003 fd5a 	bl	8011264 <tcp_trigger_input_pcb_close>
 800d7b0:	e002      	b.n	800d7b8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff fed6 	bl	800d564 <tcp_free>
      }
      return ERR_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	e050      	b.n	800d85e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	7d1b      	ldrb	r3, [r3, #20]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d03b      	beq.n	800d83c <tcp_close_shutdown+0x174>
 800d7c4:	2b02      	cmp	r3, #2
 800d7c6:	dc44      	bgt.n	800d852 <tcp_close_shutdown+0x18a>
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d002      	beq.n	800d7d2 <tcp_close_shutdown+0x10a>
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d02a      	beq.n	800d826 <tcp_close_shutdown+0x15e>
 800d7d0:	e03f      	b.n	800d852 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	8adb      	ldrh	r3, [r3, #22]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d021      	beq.n	800d81e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d7da:	4b2a      	ldr	r3, [pc, #168]	; (800d884 <tcp_close_shutdown+0x1bc>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	d105      	bne.n	800d7f0 <tcp_close_shutdown+0x128>
 800d7e4:	4b27      	ldr	r3, [pc, #156]	; (800d884 <tcp_close_shutdown+0x1bc>)
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	4a26      	ldr	r2, [pc, #152]	; (800d884 <tcp_close_shutdown+0x1bc>)
 800d7ec:	6013      	str	r3, [r2, #0]
 800d7ee:	e013      	b.n	800d818 <tcp_close_shutdown+0x150>
 800d7f0:	4b24      	ldr	r3, [pc, #144]	; (800d884 <tcp_close_shutdown+0x1bc>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	60bb      	str	r3, [r7, #8]
 800d7f6:	e00c      	b.n	800d812 <tcp_close_shutdown+0x14a>
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d104      	bne.n	800d80c <tcp_close_shutdown+0x144>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	68da      	ldr	r2, [r3, #12]
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	60da      	str	r2, [r3, #12]
 800d80a:	e005      	b.n	800d818 <tcp_close_shutdown+0x150>
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	60bb      	str	r3, [r7, #8]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1ef      	bne.n	800d7f8 <tcp_close_shutdown+0x130>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7ff fea0 	bl	800d564 <tcp_free>
      break;
 800d824:	e01a      	b.n	800d85c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f7ff ff14 	bl	800d654 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d82c:	6879      	ldr	r1, [r7, #4]
 800d82e:	4816      	ldr	r0, [pc, #88]	; (800d888 <tcp_close_shutdown+0x1c0>)
 800d830:	f001 f8a8 	bl	800e984 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7ff feb1 	bl	800d59c <tcp_free_listen>
      break;
 800d83a:	e00f      	b.n	800d85c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d83c:	6879      	ldr	r1, [r7, #4]
 800d83e:	480e      	ldr	r0, [pc, #56]	; (800d878 <tcp_close_shutdown+0x1b0>)
 800d840:	f001 f8a0 	bl	800e984 <tcp_pcb_remove>
 800d844:	4b0d      	ldr	r3, [pc, #52]	; (800d87c <tcp_close_shutdown+0x1b4>)
 800d846:	2201      	movs	r2, #1
 800d848:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fe8a 	bl	800d564 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d850:	e004      	b.n	800d85c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f81a 	bl	800d88c <tcp_close_shutdown_fin>
 800d858:	4603      	mov	r3, r0
 800d85a:	e000      	b.n	800d85e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bdb0      	pop	{r4, r5, r7, pc}
 800d866:	bf00      	nop
 800d868:	080197b4 	.word	0x080197b4
 800d86c:	08019888 	.word	0x08019888
 800d870:	080197f8 	.word	0x080197f8
 800d874:	080198a8 	.word	0x080198a8
 800d878:	2400d6bc 	.word	0x2400d6bc
 800d87c:	2400d6b8 	.word	0x2400d6b8
 800d880:	2400d6d0 	.word	0x2400d6d0
 800d884:	2400d6c8 	.word	0x2400d6c8
 800d888:	2400d6c4 	.word	0x2400d6c4

0800d88c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d106      	bne.n	800d8a8 <tcp_close_shutdown_fin+0x1c>
 800d89a:	4b2e      	ldr	r3, [pc, #184]	; (800d954 <tcp_close_shutdown_fin+0xc8>)
 800d89c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d8a0:	492d      	ldr	r1, [pc, #180]	; (800d958 <tcp_close_shutdown_fin+0xcc>)
 800d8a2:	482e      	ldr	r0, [pc, #184]	; (800d95c <tcp_close_shutdown_fin+0xd0>)
 800d8a4:	f00a fa28 	bl	8017cf8 <iprintf>

  switch (pcb->state) {
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7d1b      	ldrb	r3, [r3, #20]
 800d8ac:	2b07      	cmp	r3, #7
 800d8ae:	d020      	beq.n	800d8f2 <tcp_close_shutdown_fin+0x66>
 800d8b0:	2b07      	cmp	r3, #7
 800d8b2:	dc2b      	bgt.n	800d90c <tcp_close_shutdown_fin+0x80>
 800d8b4:	2b03      	cmp	r3, #3
 800d8b6:	d002      	beq.n	800d8be <tcp_close_shutdown_fin+0x32>
 800d8b8:	2b04      	cmp	r3, #4
 800d8ba:	d00d      	beq.n	800d8d8 <tcp_close_shutdown_fin+0x4c>
 800d8bc:	e026      	b.n	800d90c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f003 fee2 	bl	8011688 <tcp_send_fin>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d11f      	bne.n	800d910 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2205      	movs	r2, #5
 800d8d4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8d6:	e01b      	b.n	800d910 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f003 fed5 	bl	8011688 <tcp_send_fin>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d114      	bne.n	800d914 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2205      	movs	r2, #5
 800d8ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d8f0:	e010      	b.n	800d914 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f003 fec8 	bl	8011688 <tcp_send_fin>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d109      	bne.n	800d918 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2209      	movs	r2, #9
 800d908:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d90a:	e005      	b.n	800d918 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e01c      	b.n	800d94a <tcp_close_shutdown_fin+0xbe>
      break;
 800d910:	bf00      	nop
 800d912:	e002      	b.n	800d91a <tcp_close_shutdown_fin+0x8e>
      break;
 800d914:	bf00      	nop
 800d916:	e000      	b.n	800d91a <tcp_close_shutdown_fin+0x8e>
      break;
 800d918:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d103      	bne.n	800d92a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f003 ffee 	bl	8011904 <tcp_output>
 800d928:	e00d      	b.n	800d946 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d92a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d92e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d932:	d108      	bne.n	800d946 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	8b5b      	ldrh	r3, [r3, #26]
 800d938:	f043 0308 	orr.w	r3, r3, #8
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d942:	2300      	movs	r3, #0
 800d944:	e001      	b.n	800d94a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d946:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3710      	adds	r7, #16
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	080197b4 	.word	0x080197b4
 800d958:	08019864 	.word	0x08019864
 800d95c:	080197f8 	.word	0x080197f8

0800d960 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d109      	bne.n	800d982 <tcp_close+0x22>
 800d96e:	4b0f      	ldr	r3, [pc, #60]	; (800d9ac <tcp_close+0x4c>)
 800d970:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d974:	490e      	ldr	r1, [pc, #56]	; (800d9b0 <tcp_close+0x50>)
 800d976:	480f      	ldr	r0, [pc, #60]	; (800d9b4 <tcp_close+0x54>)
 800d978:	f00a f9be 	bl	8017cf8 <iprintf>
 800d97c:	f06f 030f 	mvn.w	r3, #15
 800d980:	e00f      	b.n	800d9a2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7d1b      	ldrb	r3, [r3, #20]
 800d986:	2b01      	cmp	r3, #1
 800d988:	d006      	beq.n	800d998 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	8b5b      	ldrh	r3, [r3, #26]
 800d98e:	f043 0310 	orr.w	r3, r3, #16
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d998:	2101      	movs	r1, #1
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f7ff fe94 	bl	800d6c8 <tcp_close_shutdown>
 800d9a0:	4603      	mov	r3, r0
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	080197b4 	.word	0x080197b4
 800d9b0:	080198c4 	.word	0x080198c4
 800d9b4:	080197f8 	.word	0x080197f8

0800d9b8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08e      	sub	sp, #56	; 0x38
 800d9bc:	af04      	add	r7, sp, #16
 800d9be:	6078      	str	r0, [r7, #4]
 800d9c0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d107      	bne.n	800d9d8 <tcp_abandon+0x20>
 800d9c8:	4b52      	ldr	r3, [pc, #328]	; (800db14 <tcp_abandon+0x15c>)
 800d9ca:	f240 223d 	movw	r2, #573	; 0x23d
 800d9ce:	4952      	ldr	r1, [pc, #328]	; (800db18 <tcp_abandon+0x160>)
 800d9d0:	4852      	ldr	r0, [pc, #328]	; (800db1c <tcp_abandon+0x164>)
 800d9d2:	f00a f991 	bl	8017cf8 <iprintf>
 800d9d6:	e099      	b.n	800db0c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	7d1b      	ldrb	r3, [r3, #20]
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d106      	bne.n	800d9ee <tcp_abandon+0x36>
 800d9e0:	4b4c      	ldr	r3, [pc, #304]	; (800db14 <tcp_abandon+0x15c>)
 800d9e2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d9e6:	494e      	ldr	r1, [pc, #312]	; (800db20 <tcp_abandon+0x168>)
 800d9e8:	484c      	ldr	r0, [pc, #304]	; (800db1c <tcp_abandon+0x164>)
 800d9ea:	f00a f985 	bl	8017cf8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	7d1b      	ldrb	r3, [r3, #20]
 800d9f2:	2b0a      	cmp	r3, #10
 800d9f4:	d107      	bne.n	800da06 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d9f6:	6879      	ldr	r1, [r7, #4]
 800d9f8:	484a      	ldr	r0, [pc, #296]	; (800db24 <tcp_abandon+0x16c>)
 800d9fa:	f000 ffc3 	bl	800e984 <tcp_pcb_remove>
    tcp_free(pcb);
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff fdb0 	bl	800d564 <tcp_free>
 800da04:	e082      	b.n	800db0c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800da06:	2300      	movs	r3, #0
 800da08:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800da0a:	2300      	movs	r3, #0
 800da0c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da12:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da18:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da20:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	7d1b      	ldrb	r3, [r3, #20]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d126      	bne.n	800da7e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	8adb      	ldrh	r3, [r3, #22]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d02e      	beq.n	800da96 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da38:	4b3b      	ldr	r3, [pc, #236]	; (800db28 <tcp_abandon+0x170>)
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	687a      	ldr	r2, [r7, #4]
 800da3e:	429a      	cmp	r2, r3
 800da40:	d105      	bne.n	800da4e <tcp_abandon+0x96>
 800da42:	4b39      	ldr	r3, [pc, #228]	; (800db28 <tcp_abandon+0x170>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	4a37      	ldr	r2, [pc, #220]	; (800db28 <tcp_abandon+0x170>)
 800da4a:	6013      	str	r3, [r2, #0]
 800da4c:	e013      	b.n	800da76 <tcp_abandon+0xbe>
 800da4e:	4b36      	ldr	r3, [pc, #216]	; (800db28 <tcp_abandon+0x170>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	61fb      	str	r3, [r7, #28]
 800da54:	e00c      	b.n	800da70 <tcp_abandon+0xb8>
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d104      	bne.n	800da6a <tcp_abandon+0xb2>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	68da      	ldr	r2, [r3, #12]
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	60da      	str	r2, [r3, #12]
 800da68:	e005      	b.n	800da76 <tcp_abandon+0xbe>
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	61fb      	str	r3, [r7, #28]
 800da70:	69fb      	ldr	r3, [r7, #28]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d1ef      	bne.n	800da56 <tcp_abandon+0x9e>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	60da      	str	r2, [r3, #12]
 800da7c:	e00b      	b.n	800da96 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	8adb      	ldrh	r3, [r3, #22]
 800da86:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800da88:	6879      	ldr	r1, [r7, #4]
 800da8a:	4828      	ldr	r0, [pc, #160]	; (800db2c <tcp_abandon+0x174>)
 800da8c:	f000 ff7a 	bl	800e984 <tcp_pcb_remove>
 800da90:	4b27      	ldr	r3, [pc, #156]	; (800db30 <tcp_abandon+0x178>)
 800da92:	2201      	movs	r2, #1
 800da94:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d004      	beq.n	800daa8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daa2:	4618      	mov	r0, r3
 800daa4:	f000 fd1c 	bl	800e4e0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daac:	2b00      	cmp	r3, #0
 800daae:	d004      	beq.n	800daba <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 fd13 	bl	800e4e0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d004      	beq.n	800dacc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dac6:	4618      	mov	r0, r3
 800dac8:	f000 fd0a 	bl	800e4e0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00e      	beq.n	800daf0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dad2:	6879      	ldr	r1, [r7, #4]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	3304      	adds	r3, #4
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	8b12      	ldrh	r2, [r2, #24]
 800dadc:	9202      	str	r2, [sp, #8]
 800dade:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dae0:	9201      	str	r2, [sp, #4]
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	460b      	mov	r3, r1
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	69b9      	ldr	r1, [r7, #24]
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f004 fcbe 	bl	801246c <tcp_rst>
    }
    last_state = pcb->state;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
 800daf4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7ff fd34 	bl	800d564 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d004      	beq.n	800db0c <tcp_abandon+0x154>
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	f06f 010c 	mvn.w	r1, #12
 800db08:	68f8      	ldr	r0, [r7, #12]
 800db0a:	4798      	blx	r3
  }
}
 800db0c:	3728      	adds	r7, #40	; 0x28
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	080197b4 	.word	0x080197b4
 800db18:	080198f8 	.word	0x080198f8
 800db1c:	080197f8 	.word	0x080197f8
 800db20:	08019914 	.word	0x08019914
 800db24:	2400d6cc 	.word	0x2400d6cc
 800db28:	2400d6c8 	.word	0x2400d6c8
 800db2c:	2400d6bc 	.word	0x2400d6bc
 800db30:	2400d6b8 	.word	0x2400d6b8

0800db34 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800db3c:	2101      	movs	r1, #1
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f7ff ff3a 	bl	800d9b8 <tcp_abandon>
}
 800db44:	bf00      	nop
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d106      	bne.n	800db68 <tcp_update_rcv_ann_wnd+0x1c>
 800db5a:	4b25      	ldr	r3, [pc, #148]	; (800dbf0 <tcp_update_rcv_ann_wnd+0xa4>)
 800db5c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800db60:	4924      	ldr	r1, [pc, #144]	; (800dbf4 <tcp_update_rcv_ann_wnd+0xa8>)
 800db62:	4825      	ldr	r0, [pc, #148]	; (800dbf8 <tcp_update_rcv_ann_wnd+0xac>)
 800db64:	f00a f8c8 	bl	8017cf8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800db70:	4413      	add	r3, r2
 800db72:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	687a      	ldr	r2, [r7, #4]
 800db7a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800db7c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800db80:	bf28      	it	cs
 800db82:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800db86:	b292      	uxth	r2, r2
 800db88:	4413      	add	r3, r2
 800db8a:	68fa      	ldr	r2, [r7, #12]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	2b00      	cmp	r3, #0
 800db90:	db08      	blt.n	800dba4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	1ad3      	subs	r3, r2, r3
 800dba2:	e020      	b.n	800dbe6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbac:	1ad3      	subs	r3, r2, r3
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	dd03      	ble.n	800dbba <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dbb8:	e014      	b.n	800dbe4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dbc6:	68bb      	ldr	r3, [r7, #8]
 800dbc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbcc:	d306      	bcc.n	800dbdc <tcp_update_rcv_ann_wnd+0x90>
 800dbce:	4b08      	ldr	r3, [pc, #32]	; (800dbf0 <tcp_update_rcv_ann_wnd+0xa4>)
 800dbd0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dbd4:	4909      	ldr	r1, [pc, #36]	; (800dbfc <tcp_update_rcv_ann_wnd+0xb0>)
 800dbd6:	4808      	ldr	r0, [pc, #32]	; (800dbf8 <tcp_update_rcv_ann_wnd+0xac>)
 800dbd8:	f00a f88e 	bl	8017cf8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800dbe4:	2300      	movs	r3, #0
  }
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	080197b4 	.word	0x080197b4
 800dbf4:	08019a10 	.word	0x08019a10
 800dbf8:	080197f8 	.word	0x080197f8
 800dbfc:	08019a34 	.word	0x08019a34

0800dc00 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
 800dc08:	460b      	mov	r3, r1
 800dc0a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d107      	bne.n	800dc22 <tcp_recved+0x22>
 800dc12:	4b1f      	ldr	r3, [pc, #124]	; (800dc90 <tcp_recved+0x90>)
 800dc14:	f240 32cf 	movw	r2, #975	; 0x3cf
 800dc18:	491e      	ldr	r1, [pc, #120]	; (800dc94 <tcp_recved+0x94>)
 800dc1a:	481f      	ldr	r0, [pc, #124]	; (800dc98 <tcp_recved+0x98>)
 800dc1c:	f00a f86c 	bl	8017cf8 <iprintf>
 800dc20:	e032      	b.n	800dc88 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	7d1b      	ldrb	r3, [r3, #20]
 800dc26:	2b01      	cmp	r3, #1
 800dc28:	d106      	bne.n	800dc38 <tcp_recved+0x38>
 800dc2a:	4b19      	ldr	r3, [pc, #100]	; (800dc90 <tcp_recved+0x90>)
 800dc2c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dc30:	491a      	ldr	r1, [pc, #104]	; (800dc9c <tcp_recved+0x9c>)
 800dc32:	4819      	ldr	r0, [pc, #100]	; (800dc98 <tcp_recved+0x98>)
 800dc34:	f00a f860 	bl	8017cf8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc3c:	887b      	ldrh	r3, [r7, #2]
 800dc3e:	4413      	add	r3, r2
 800dc40:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dc42:	89fb      	ldrh	r3, [r7, #14]
 800dc44:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dc48:	d804      	bhi.n	800dc54 <tcp_recved+0x54>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc4e:	89fa      	ldrh	r2, [r7, #14]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d204      	bcs.n	800dc5e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dc5a:	851a      	strh	r2, [r3, #40]	; 0x28
 800dc5c:	e002      	b.n	800dc64 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	89fa      	ldrh	r2, [r7, #14]
 800dc62:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7ff ff71 	bl	800db4c <tcp_update_rcv_ann_wnd>
 800dc6a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dc72:	d309      	bcc.n	800dc88 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	8b5b      	ldrh	r3, [r3, #26]
 800dc78:	f043 0302 	orr.w	r3, r3, #2
 800dc7c:	b29a      	uxth	r2, r3
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f003 fe3e 	bl	8011904 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	080197b4 	.word	0x080197b4
 800dc94:	08019a50 	.word	0x08019a50
 800dc98:	080197f8 	.word	0x080197f8
 800dc9c:	08019a68 	.word	0x08019a68

0800dca0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dca0:	b5b0      	push	{r4, r5, r7, lr}
 800dca2:	b090      	sub	sp, #64	; 0x40
 800dca4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dca6:	2300      	movs	r3, #0
 800dca8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dcac:	4b94      	ldr	r3, [pc, #592]	; (800df00 <tcp_slowtmr+0x260>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	3301      	adds	r3, #1
 800dcb2:	4a93      	ldr	r2, [pc, #588]	; (800df00 <tcp_slowtmr+0x260>)
 800dcb4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dcb6:	4b93      	ldr	r3, [pc, #588]	; (800df04 <tcp_slowtmr+0x264>)
 800dcb8:	781b      	ldrb	r3, [r3, #0]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	4b91      	ldr	r3, [pc, #580]	; (800df04 <tcp_slowtmr+0x264>)
 800dcc0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dcc6:	4b90      	ldr	r3, [pc, #576]	; (800df08 <tcp_slowtmr+0x268>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dccc:	e29d      	b.n	800e20a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd0:	7d1b      	ldrb	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d106      	bne.n	800dce4 <tcp_slowtmr+0x44>
 800dcd6:	4b8d      	ldr	r3, [pc, #564]	; (800df0c <tcp_slowtmr+0x26c>)
 800dcd8:	f240 42be 	movw	r2, #1214	; 0x4be
 800dcdc:	498c      	ldr	r1, [pc, #560]	; (800df10 <tcp_slowtmr+0x270>)
 800dcde:	488d      	ldr	r0, [pc, #564]	; (800df14 <tcp_slowtmr+0x274>)
 800dce0:	f00a f80a 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d106      	bne.n	800dcfa <tcp_slowtmr+0x5a>
 800dcec:	4b87      	ldr	r3, [pc, #540]	; (800df0c <tcp_slowtmr+0x26c>)
 800dcee:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dcf2:	4989      	ldr	r1, [pc, #548]	; (800df18 <tcp_slowtmr+0x278>)
 800dcf4:	4887      	ldr	r0, [pc, #540]	; (800df14 <tcp_slowtmr+0x274>)
 800dcf6:	f009 ffff 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dcfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfc:	7d1b      	ldrb	r3, [r3, #20]
 800dcfe:	2b0a      	cmp	r3, #10
 800dd00:	d106      	bne.n	800dd10 <tcp_slowtmr+0x70>
 800dd02:	4b82      	ldr	r3, [pc, #520]	; (800df0c <tcp_slowtmr+0x26c>)
 800dd04:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dd08:	4984      	ldr	r1, [pc, #528]	; (800df1c <tcp_slowtmr+0x27c>)
 800dd0a:	4882      	ldr	r0, [pc, #520]	; (800df14 <tcp_slowtmr+0x274>)
 800dd0c:	f009 fff4 	bl	8017cf8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd12:	7f9a      	ldrb	r2, [r3, #30]
 800dd14:	4b7b      	ldr	r3, [pc, #492]	; (800df04 <tcp_slowtmr+0x264>)
 800dd16:	781b      	ldrb	r3, [r3, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d105      	bne.n	800dd28 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dd26:	e270      	b.n	800e20a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dd28:	4b76      	ldr	r3, [pc, #472]	; (800df04 <tcp_slowtmr+0x264>)
 800dd2a:	781a      	ldrb	r2, [r3, #0]
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dd30:	2300      	movs	r3, #0
 800dd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3e:	7d1b      	ldrb	r3, [r3, #20]
 800dd40:	2b02      	cmp	r3, #2
 800dd42:	d10a      	bne.n	800dd5a <tcp_slowtmr+0xba>
 800dd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd4a:	2b05      	cmp	r3, #5
 800dd4c:	d905      	bls.n	800dd5a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dd4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd52:	3301      	adds	r3, #1
 800dd54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd58:	e11e      	b.n	800df98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd60:	2b0b      	cmp	r3, #11
 800dd62:	d905      	bls.n	800dd70 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd68:	3301      	adds	r3, #1
 800dd6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd6e:	e113      	b.n	800df98 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d075      	beq.n	800de66 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d006      	beq.n	800dd90 <tcp_slowtmr+0xf0>
 800dd82:	4b62      	ldr	r3, [pc, #392]	; (800df0c <tcp_slowtmr+0x26c>)
 800dd84:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dd88:	4965      	ldr	r1, [pc, #404]	; (800df20 <tcp_slowtmr+0x280>)
 800dd8a:	4862      	ldr	r0, [pc, #392]	; (800df14 <tcp_slowtmr+0x274>)
 800dd8c:	f009 ffb4 	bl	8017cf8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d106      	bne.n	800dda6 <tcp_slowtmr+0x106>
 800dd98:	4b5c      	ldr	r3, [pc, #368]	; (800df0c <tcp_slowtmr+0x26c>)
 800dd9a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dd9e:	4961      	ldr	r1, [pc, #388]	; (800df24 <tcp_slowtmr+0x284>)
 800dda0:	485c      	ldr	r0, [pc, #368]	; (800df14 <tcp_slowtmr+0x274>)
 800dda2:	f009 ffa9 	bl	8017cf8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ddac:	2b0b      	cmp	r3, #11
 800ddae:	d905      	bls.n	800ddbc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ddb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddb4:	3301      	adds	r3, #1
 800ddb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ddba:	e0ed      	b.n	800df98 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddc2:	3b01      	subs	r3, #1
 800ddc4:	4a58      	ldr	r2, [pc, #352]	; (800df28 <tcp_slowtmr+0x288>)
 800ddc6:	5cd3      	ldrb	r3, [r2, r3]
 800ddc8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ddd0:	7c7a      	ldrb	r2, [r7, #17]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d907      	bls.n	800dde6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ddd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dddc:	3301      	adds	r3, #1
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ddec:	7c7a      	ldrb	r2, [r7, #17]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	f200 80d2 	bhi.w	800df98 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ddf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d108      	bne.n	800de14 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800de02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de04:	f004 fc26 	bl	8012654 <tcp_zero_window_probe>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d014      	beq.n	800de38 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800de0e:	2300      	movs	r3, #0
 800de10:	623b      	str	r3, [r7, #32]
 800de12:	e011      	b.n	800de38 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800de14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de1a:	4619      	mov	r1, r3
 800de1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de1e:	f003 faeb 	bl	80113f8 <tcp_split_unsent_seg>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d107      	bne.n	800de38 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800de28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de2a:	f003 fd6b 	bl	8011904 <tcp_output>
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d101      	bne.n	800de38 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800de34:	2300      	movs	r3, #0
 800de36:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800de38:	6a3b      	ldr	r3, [r7, #32]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 80ac 	beq.w	800df98 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800de40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de4e:	2b06      	cmp	r3, #6
 800de50:	f200 80a2 	bhi.w	800df98 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800de5a:	3301      	adds	r3, #1
 800de5c:	b2da      	uxtb	r2, r3
 800de5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800de64:	e098      	b.n	800df98 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800de66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de68:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	db0f      	blt.n	800de90 <tcp_slowtmr+0x1f0>
 800de70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de72:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de76:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d008      	beq.n	800de90 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800de7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800de84:	b29b      	uxth	r3, r3
 800de86:	3301      	adds	r3, #1
 800de88:	b29b      	uxth	r3, r3
 800de8a:	b21a      	sxth	r2, r3
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800de90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de92:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800de96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de98:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800de9c:	429a      	cmp	r2, r3
 800de9e:	db7b      	blt.n	800df98 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dea2:	f004 f821 	bl	8011ee8 <tcp_rexmit_rto_prepare>
 800dea6:	4603      	mov	r3, r0
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d007      	beq.n	800debc <tcp_slowtmr+0x21c>
 800deac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d171      	bne.n	800df98 <tcp_slowtmr+0x2f8>
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d06d      	beq.n	800df98 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debe:	7d1b      	ldrb	r3, [r3, #20]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d03a      	beq.n	800df3a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800deca:	2b0c      	cmp	r3, #12
 800decc:	bf28      	it	cs
 800dece:	230c      	movcs	r3, #12
 800ded0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ded2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ded8:	10db      	asrs	r3, r3, #3
 800deda:	b21b      	sxth	r3, r3
 800dedc:	461a      	mov	r2, r3
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800dee4:	4413      	add	r3, r2
 800dee6:	7efa      	ldrb	r2, [r7, #27]
 800dee8:	4910      	ldr	r1, [pc, #64]	; (800df2c <tcp_slowtmr+0x28c>)
 800deea:	5c8a      	ldrb	r2, [r1, r2]
 800deec:	4093      	lsls	r3, r2
 800deee:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800def6:	4293      	cmp	r3, r2
 800def8:	dc1a      	bgt.n	800df30 <tcp_slowtmr+0x290>
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	b21a      	sxth	r2, r3
 800defe:	e019      	b.n	800df34 <tcp_slowtmr+0x294>
 800df00:	2400d6c0 	.word	0x2400d6c0
 800df04:	24009dae 	.word	0x24009dae
 800df08:	2400d6bc 	.word	0x2400d6bc
 800df0c:	080197b4 	.word	0x080197b4
 800df10:	08019af8 	.word	0x08019af8
 800df14:	080197f8 	.word	0x080197f8
 800df18:	08019b24 	.word	0x08019b24
 800df1c:	08019b50 	.word	0x08019b50
 800df20:	08019b80 	.word	0x08019b80
 800df24:	08019bb4 	.word	0x08019bb4
 800df28:	0801bb8c 	.word	0x0801bb8c
 800df2c:	0801bb7c 	.word	0x0801bb7c
 800df30:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800df3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3c:	2200      	movs	r2, #0
 800df3e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800df46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800df4c:	4293      	cmp	r3, r2
 800df4e:	bf28      	it	cs
 800df50:	4613      	movcs	r3, r2
 800df52:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800df54:	8a7b      	ldrh	r3, [r7, #18]
 800df56:	085b      	lsrs	r3, r3, #1
 800df58:	b29a      	uxth	r2, r3
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df62:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800df66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	429a      	cmp	r2, r3
 800df70:	d206      	bcs.n	800df80 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	b29a      	uxth	r2, r3
 800df7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df7c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800df80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df82:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	2200      	movs	r2, #0
 800df8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800df92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df94:	f004 f818 	bl	8011fc8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800df98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9a:	7d1b      	ldrb	r3, [r3, #20]
 800df9c:	2b06      	cmp	r3, #6
 800df9e:	d111      	bne.n	800dfc4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa2:	8b5b      	ldrh	r3, [r3, #26]
 800dfa4:	f003 0310 	and.w	r3, r3, #16
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d00b      	beq.n	800dfc4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfac:	4b9c      	ldr	r3, [pc, #624]	; (800e220 <tcp_slowtmr+0x580>)
 800dfae:	681a      	ldr	r2, [r3, #0]
 800dfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfb2:	6a1b      	ldr	r3, [r3, #32]
 800dfb4:	1ad3      	subs	r3, r2, r3
 800dfb6:	2b28      	cmp	r3, #40	; 0x28
 800dfb8:	d904      	bls.n	800dfc4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800dfba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc6:	7a5b      	ldrb	r3, [r3, #9]
 800dfc8:	f003 0308 	and.w	r3, r3, #8
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d04a      	beq.n	800e066 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800dfd4:	2b04      	cmp	r3, #4
 800dfd6:	d003      	beq.n	800dfe0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800dfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfda:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800dfdc:	2b07      	cmp	r3, #7
 800dfde:	d142      	bne.n	800e066 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfe0:	4b8f      	ldr	r3, [pc, #572]	; (800e220 <tcp_slowtmr+0x580>)
 800dfe2:	681a      	ldr	r2, [r3, #0]
 800dfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe6:	6a1b      	ldr	r3, [r3, #32]
 800dfe8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfec:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800dff0:	4b8c      	ldr	r3, [pc, #560]	; (800e224 <tcp_slowtmr+0x584>)
 800dff2:	440b      	add	r3, r1
 800dff4:	498c      	ldr	r1, [pc, #560]	; (800e228 <tcp_slowtmr+0x588>)
 800dff6:	fba1 1303 	umull	r1, r3, r1, r3
 800dffa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d90a      	bls.n	800e016 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e004:	3301      	adds	r3, #1
 800e006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e00a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e00e:	3301      	adds	r3, #1
 800e010:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e014:	e027      	b.n	800e066 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e016:	4b82      	ldr	r3, [pc, #520]	; (800e220 <tcp_slowtmr+0x580>)
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e022:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e02c:	4618      	mov	r0, r3
 800e02e:	4b7f      	ldr	r3, [pc, #508]	; (800e22c <tcp_slowtmr+0x58c>)
 800e030:	fb03 f300 	mul.w	r3, r3, r0
 800e034:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e036:	497c      	ldr	r1, [pc, #496]	; (800e228 <tcp_slowtmr+0x588>)
 800e038:	fba1 1303 	umull	r1, r3, r1, r3
 800e03c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e03e:	429a      	cmp	r2, r3
 800e040:	d911      	bls.n	800e066 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e044:	f004 fac6 	bl	80125d4 <tcp_keepalive>
 800e048:	4603      	mov	r3, r0
 800e04a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e04e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e052:	2b00      	cmp	r3, #0
 800e054:	d107      	bne.n	800e066 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e05c:	3301      	adds	r3, #1
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e062:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d011      	beq.n	800e092 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e06e:	4b6c      	ldr	r3, [pc, #432]	; (800e220 <tcp_slowtmr+0x580>)
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e074:	6a1b      	ldr	r3, [r3, #32]
 800e076:	1ad2      	subs	r2, r2, r3
 800e078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e07e:	4619      	mov	r1, r3
 800e080:	460b      	mov	r3, r1
 800e082:	005b      	lsls	r3, r3, #1
 800e084:	440b      	add	r3, r1
 800e086:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e088:	429a      	cmp	r2, r3
 800e08a:	d302      	bcc.n	800e092 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e08c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e08e:	f000 fddd 	bl	800ec4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e094:	7d1b      	ldrb	r3, [r3, #20]
 800e096:	2b03      	cmp	r3, #3
 800e098:	d10b      	bne.n	800e0b2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e09a:	4b61      	ldr	r3, [pc, #388]	; (800e220 <tcp_slowtmr+0x580>)
 800e09c:	681a      	ldr	r2, [r3, #0]
 800e09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	1ad3      	subs	r3, r2, r3
 800e0a4:	2b28      	cmp	r3, #40	; 0x28
 800e0a6:	d904      	bls.n	800e0b2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e0a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	7d1b      	ldrb	r3, [r3, #20]
 800e0b6:	2b09      	cmp	r3, #9
 800e0b8:	d10b      	bne.n	800e0d2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e0ba:	4b59      	ldr	r3, [pc, #356]	; (800e220 <tcp_slowtmr+0x580>)
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0c0:	6a1b      	ldr	r3, [r3, #32]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	2bf0      	cmp	r3, #240	; 0xf0
 800e0c6:	d904      	bls.n	800e0d2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e0d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d060      	beq.n	800e19c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0e0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e0e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0e4:	f000 fbfe 	bl	800e8e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d010      	beq.n	800e110 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e0ee:	4b50      	ldr	r3, [pc, #320]	; (800e230 <tcp_slowtmr+0x590>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d106      	bne.n	800e106 <tcp_slowtmr+0x466>
 800e0f8:	4b4e      	ldr	r3, [pc, #312]	; (800e234 <tcp_slowtmr+0x594>)
 800e0fa:	f240 526d 	movw	r2, #1389	; 0x56d
 800e0fe:	494e      	ldr	r1, [pc, #312]	; (800e238 <tcp_slowtmr+0x598>)
 800e100:	484e      	ldr	r0, [pc, #312]	; (800e23c <tcp_slowtmr+0x59c>)
 800e102:	f009 fdf9 	bl	8017cf8 <iprintf>
        prev->next = pcb->next;
 800e106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e108:	68da      	ldr	r2, [r3, #12]
 800e10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e10c:	60da      	str	r2, [r3, #12]
 800e10e:	e00f      	b.n	800e130 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e110:	4b47      	ldr	r3, [pc, #284]	; (800e230 <tcp_slowtmr+0x590>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e116:	429a      	cmp	r2, r3
 800e118:	d006      	beq.n	800e128 <tcp_slowtmr+0x488>
 800e11a:	4b46      	ldr	r3, [pc, #280]	; (800e234 <tcp_slowtmr+0x594>)
 800e11c:	f240 5271 	movw	r2, #1393	; 0x571
 800e120:	4947      	ldr	r1, [pc, #284]	; (800e240 <tcp_slowtmr+0x5a0>)
 800e122:	4846      	ldr	r0, [pc, #280]	; (800e23c <tcp_slowtmr+0x59c>)
 800e124:	f009 fde8 	bl	8017cf8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	4a40      	ldr	r2, [pc, #256]	; (800e230 <tcp_slowtmr+0x590>)
 800e12e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e130:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e134:	2b00      	cmp	r3, #0
 800e136:	d013      	beq.n	800e160 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e140:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e144:	3304      	adds	r3, #4
 800e146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e148:	8ad2      	ldrh	r2, [r2, #22]
 800e14a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e14c:	8b09      	ldrh	r1, [r1, #24]
 800e14e:	9102      	str	r1, [sp, #8]
 800e150:	9201      	str	r2, [sp, #4]
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	462b      	mov	r3, r5
 800e156:	4622      	mov	r2, r4
 800e158:	4601      	mov	r1, r0
 800e15a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e15c:	f004 f986 	bl	801246c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	7d1b      	ldrb	r3, [r3, #20]
 800e16a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e16e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e172:	68db      	ldr	r3, [r3, #12]
 800e174:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e176:	6838      	ldr	r0, [r7, #0]
 800e178:	f7ff f9f4 	bl	800d564 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e17c:	4b31      	ldr	r3, [pc, #196]	; (800e244 <tcp_slowtmr+0x5a4>)
 800e17e:	2200      	movs	r2, #0
 800e180:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d004      	beq.n	800e192 <tcp_slowtmr+0x4f2>
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f06f 010c 	mvn.w	r1, #12
 800e18e:	68b8      	ldr	r0, [r7, #8]
 800e190:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e192:	4b2c      	ldr	r3, [pc, #176]	; (800e244 <tcp_slowtmr+0x5a4>)
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d037      	beq.n	800e20a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e19a:	e592      	b.n	800dcc2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	7f1b      	ldrb	r3, [r3, #28]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b4:	7f1a      	ldrb	r2, [r3, #28]
 800e1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b8:	7f5b      	ldrb	r3, [r3, #29]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d325      	bcc.n	800e20a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e1c4:	4b1f      	ldr	r3, [pc, #124]	; (800e244 <tcp_slowtmr+0x5a4>)
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d00b      	beq.n	800e1ec <tcp_slowtmr+0x54c>
 800e1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1dc:	6912      	ldr	r2, [r2, #16]
 800e1de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e1ea:	e002      	b.n	800e1f2 <tcp_slowtmr+0x552>
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e1f2:	4b14      	ldr	r3, [pc, #80]	; (800e244 <tcp_slowtmr+0x5a4>)
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d000      	beq.n	800e1fc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e1fa:	e562      	b.n	800dcc2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e1fc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e200:	2b00      	cmp	r3, #0
 800e202:	d102      	bne.n	800e20a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e206:	f003 fb7d 	bl	8011904 <tcp_output>
  while (pcb != NULL) {
 800e20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	f47f ad5e 	bne.w	800dcce <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e212:	2300      	movs	r3, #0
 800e214:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e216:	4b0c      	ldr	r3, [pc, #48]	; (800e248 <tcp_slowtmr+0x5a8>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e21c:	e069      	b.n	800e2f2 <tcp_slowtmr+0x652>
 800e21e:	bf00      	nop
 800e220:	2400d6c0 	.word	0x2400d6c0
 800e224:	000a4cb8 	.word	0x000a4cb8
 800e228:	10624dd3 	.word	0x10624dd3
 800e22c:	000124f8 	.word	0x000124f8
 800e230:	2400d6bc 	.word	0x2400d6bc
 800e234:	080197b4 	.word	0x080197b4
 800e238:	08019bec 	.word	0x08019bec
 800e23c:	080197f8 	.word	0x080197f8
 800e240:	08019c18 	.word	0x08019c18
 800e244:	2400d6b8 	.word	0x2400d6b8
 800e248:	2400d6cc 	.word	0x2400d6cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
 800e250:	2b0a      	cmp	r3, #10
 800e252:	d006      	beq.n	800e262 <tcp_slowtmr+0x5c2>
 800e254:	4b2b      	ldr	r3, [pc, #172]	; (800e304 <tcp_slowtmr+0x664>)
 800e256:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e25a:	492b      	ldr	r1, [pc, #172]	; (800e308 <tcp_slowtmr+0x668>)
 800e25c:	482b      	ldr	r0, [pc, #172]	; (800e30c <tcp_slowtmr+0x66c>)
 800e25e:	f009 fd4b 	bl	8017cf8 <iprintf>
    pcb_remove = 0;
 800e262:	2300      	movs	r3, #0
 800e264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e268:	4b29      	ldr	r3, [pc, #164]	; (800e310 <tcp_slowtmr+0x670>)
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26e:	6a1b      	ldr	r3, [r3, #32]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	2bf0      	cmp	r3, #240	; 0xf0
 800e274:	d904      	bls.n	800e280 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e27a:	3301      	adds	r3, #1
 800e27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	2b00      	cmp	r3, #0
 800e286:	d02f      	beq.n	800e2e8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e28a:	f000 fb2b 	bl	800e8e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e290:	2b00      	cmp	r3, #0
 800e292:	d010      	beq.n	800e2b6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e294:	4b1f      	ldr	r3, [pc, #124]	; (800e314 <tcp_slowtmr+0x674>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d106      	bne.n	800e2ac <tcp_slowtmr+0x60c>
 800e29e:	4b19      	ldr	r3, [pc, #100]	; (800e304 <tcp_slowtmr+0x664>)
 800e2a0:	f240 52af 	movw	r2, #1455	; 0x5af
 800e2a4:	491c      	ldr	r1, [pc, #112]	; (800e318 <tcp_slowtmr+0x678>)
 800e2a6:	4819      	ldr	r0, [pc, #100]	; (800e30c <tcp_slowtmr+0x66c>)
 800e2a8:	f009 fd26 	bl	8017cf8 <iprintf>
        prev->next = pcb->next;
 800e2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ae:	68da      	ldr	r2, [r3, #12]
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	60da      	str	r2, [r3, #12]
 800e2b4:	e00f      	b.n	800e2d6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e2b6:	4b17      	ldr	r3, [pc, #92]	; (800e314 <tcp_slowtmr+0x674>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d006      	beq.n	800e2ce <tcp_slowtmr+0x62e>
 800e2c0:	4b10      	ldr	r3, [pc, #64]	; (800e304 <tcp_slowtmr+0x664>)
 800e2c2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e2c6:	4915      	ldr	r1, [pc, #84]	; (800e31c <tcp_slowtmr+0x67c>)
 800e2c8:	4810      	ldr	r0, [pc, #64]	; (800e30c <tcp_slowtmr+0x66c>)
 800e2ca:	f009 fd15 	bl	8017cf8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	68db      	ldr	r3, [r3, #12]
 800e2d2:	4a10      	ldr	r2, [pc, #64]	; (800e314 <tcp_slowtmr+0x674>)
 800e2d4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e2da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e2e0:	69f8      	ldr	r0, [r7, #28]
 800e2e2:	f7ff f93f 	bl	800d564 <tcp_free>
 800e2e6:	e004      	b.n	800e2f2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ea:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1a9      	bne.n	800e24c <tcp_slowtmr+0x5ac>
    }
  }
}
 800e2f8:	bf00      	nop
 800e2fa:	bf00      	nop
 800e2fc:	3730      	adds	r7, #48	; 0x30
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bdb0      	pop	{r4, r5, r7, pc}
 800e302:	bf00      	nop
 800e304:	080197b4 	.word	0x080197b4
 800e308:	08019c44 	.word	0x08019c44
 800e30c:	080197f8 	.word	0x080197f8
 800e310:	2400d6c0 	.word	0x2400d6c0
 800e314:	2400d6cc 	.word	0x2400d6cc
 800e318:	08019c74 	.word	0x08019c74
 800e31c:	08019c9c 	.word	0x08019c9c

0800e320 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e326:	4b2d      	ldr	r3, [pc, #180]	; (800e3dc <tcp_fasttmr+0xbc>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	3301      	adds	r3, #1
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	4b2b      	ldr	r3, [pc, #172]	; (800e3dc <tcp_fasttmr+0xbc>)
 800e330:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e332:	4b2b      	ldr	r3, [pc, #172]	; (800e3e0 <tcp_fasttmr+0xc0>)
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e338:	e048      	b.n	800e3cc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	7f9a      	ldrb	r2, [r3, #30]
 800e33e:	4b27      	ldr	r3, [pc, #156]	; (800e3dc <tcp_fasttmr+0xbc>)
 800e340:	781b      	ldrb	r3, [r3, #0]
 800e342:	429a      	cmp	r2, r3
 800e344:	d03f      	beq.n	800e3c6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e346:	4b25      	ldr	r3, [pc, #148]	; (800e3dc <tcp_fasttmr+0xbc>)
 800e348:	781a      	ldrb	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8b5b      	ldrh	r3, [r3, #26]
 800e352:	f003 0301 	and.w	r3, r3, #1
 800e356:	2b00      	cmp	r3, #0
 800e358:	d010      	beq.n	800e37c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	8b5b      	ldrh	r3, [r3, #26]
 800e35e:	f043 0302 	orr.w	r3, r3, #2
 800e362:	b29a      	uxth	r2, r3
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f003 facb 	bl	8011904 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	8b5b      	ldrh	r3, [r3, #26]
 800e372:	f023 0303 	bic.w	r3, r3, #3
 800e376:	b29a      	uxth	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	8b5b      	ldrh	r3, [r3, #26]
 800e380:	f003 0308 	and.w	r3, r3, #8
 800e384:	2b00      	cmp	r3, #0
 800e386:	d009      	beq.n	800e39c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	8b5b      	ldrh	r3, [r3, #26]
 800e38c:	f023 0308 	bic.w	r3, r3, #8
 800e390:	b29a      	uxth	r2, r3
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff fa78 	bl	800d88c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e3aa:	4b0e      	ldr	r3, [pc, #56]	; (800e3e4 <tcp_fasttmr+0xc4>)
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f819 	bl	800e3e8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e3b6:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <tcp_fasttmr+0xc4>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d000      	beq.n	800e3c0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e3be:	e7b8      	b.n	800e332 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e3c0:	683b      	ldr	r3, [r7, #0]
 800e3c2:	607b      	str	r3, [r7, #4]
 800e3c4:	e002      	b.n	800e3cc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d1b3      	bne.n	800e33a <tcp_fasttmr+0x1a>
    }
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	bf00      	nop
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	24009dae 	.word	0x24009dae
 800e3e0:	2400d6bc 	.word	0x2400d6bc
 800e3e4:	2400d6b8 	.word	0x2400d6b8

0800e3e8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d109      	bne.n	800e40a <tcp_process_refused_data+0x22>
 800e3f6:	4b37      	ldr	r3, [pc, #220]	; (800e4d4 <tcp_process_refused_data+0xec>)
 800e3f8:	f240 6209 	movw	r2, #1545	; 0x609
 800e3fc:	4936      	ldr	r1, [pc, #216]	; (800e4d8 <tcp_process_refused_data+0xf0>)
 800e3fe:	4837      	ldr	r0, [pc, #220]	; (800e4dc <tcp_process_refused_data+0xf4>)
 800e400:	f009 fc7a 	bl	8017cf8 <iprintf>
 800e404:	f06f 030f 	mvn.w	r3, #15
 800e408:	e060      	b.n	800e4cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e40e:	7b5b      	ldrb	r3, [r3, #13]
 800e410:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e416:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2200      	movs	r2, #0
 800e41c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e424:	2b00      	cmp	r3, #0
 800e426:	d00b      	beq.n	800e440 <tcp_process_refused_data+0x58>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6918      	ldr	r0, [r3, #16]
 800e432:	2300      	movs	r3, #0
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	6879      	ldr	r1, [r7, #4]
 800e438:	47a0      	blx	r4
 800e43a:	4603      	mov	r3, r0
 800e43c:	73fb      	strb	r3, [r7, #15]
 800e43e:	e007      	b.n	800e450 <tcp_process_refused_data+0x68>
 800e440:	2300      	movs	r3, #0
 800e442:	68ba      	ldr	r2, [r7, #8]
 800e444:	6879      	ldr	r1, [r7, #4]
 800e446:	2000      	movs	r0, #0
 800e448:	f000 f8a4 	bl	800e594 <tcp_recv_null>
 800e44c:	4603      	mov	r3, r0
 800e44e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d12a      	bne.n	800e4ae <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e458:	7bbb      	ldrb	r3, [r7, #14]
 800e45a:	f003 0320 	and.w	r3, r3, #32
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d033      	beq.n	800e4ca <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e466:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e46a:	d005      	beq.n	800e478 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e470:	3301      	adds	r3, #1
 800e472:	b29a      	uxth	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00b      	beq.n	800e49a <tcp_process_refused_data+0xb2>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6918      	ldr	r0, [r3, #16]
 800e48c:	2300      	movs	r3, #0
 800e48e:	2200      	movs	r2, #0
 800e490:	6879      	ldr	r1, [r7, #4]
 800e492:	47a0      	blx	r4
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]
 800e498:	e001      	b.n	800e49e <tcp_process_refused_data+0xb6>
 800e49a:	2300      	movs	r3, #0
 800e49c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e49e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4a2:	f113 0f0d 	cmn.w	r3, #13
 800e4a6:	d110      	bne.n	800e4ca <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e4a8:	f06f 030c 	mvn.w	r3, #12
 800e4ac:	e00e      	b.n	800e4cc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e4ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e4b2:	f113 0f0d 	cmn.w	r3, #13
 800e4b6:	d102      	bne.n	800e4be <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e4b8:	f06f 030c 	mvn.w	r3, #12
 800e4bc:	e006      	b.n	800e4cc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e4c4:	f06f 0304 	mvn.w	r3, #4
 800e4c8:	e000      	b.n	800e4cc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e4ca:	2300      	movs	r3, #0
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3714      	adds	r7, #20
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd90      	pop	{r4, r7, pc}
 800e4d4:	080197b4 	.word	0x080197b4
 800e4d8:	08019cc4 	.word	0x08019cc4
 800e4dc:	080197f8 	.word	0x080197f8

0800e4e0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e4e8:	e007      	b.n	800e4fa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f80a 	bl	800e50a <tcp_seg_free>
    seg = next;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d1f4      	bne.n	800e4ea <tcp_segs_free+0xa>
  }
}
 800e500:	bf00      	nop
 800e502:	bf00      	nop
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00c      	beq.n	800e532 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe fd61 	bl	800cfec <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e52a:	6879      	ldr	r1, [r7, #4]
 800e52c:	2003      	movs	r0, #3
 800e52e:	f7fd fead 	bl	800c28c <memp_free>
  }
}
 800e532:	bf00      	nop
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}
	...

0800e53c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d106      	bne.n	800e558 <tcp_seg_copy+0x1c>
 800e54a:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <tcp_seg_copy+0x4c>)
 800e54c:	f240 6282 	movw	r2, #1666	; 0x682
 800e550:	490e      	ldr	r1, [pc, #56]	; (800e58c <tcp_seg_copy+0x50>)
 800e552:	480f      	ldr	r0, [pc, #60]	; (800e590 <tcp_seg_copy+0x54>)
 800e554:	f009 fbd0 	bl	8017cf8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e558:	2003      	movs	r0, #3
 800e55a:	f7fd fe21 	bl	800c1a0 <memp_malloc>
 800e55e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d101      	bne.n	800e56a <tcp_seg_copy+0x2e>
    return NULL;
 800e566:	2300      	movs	r3, #0
 800e568:	e00a      	b.n	800e580 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e56a:	2210      	movs	r2, #16
 800e56c:	6879      	ldr	r1, [r7, #4]
 800e56e:	68f8      	ldr	r0, [r7, #12]
 800e570:	f009 fb51 	bl	8017c16 <memcpy>
  pbuf_ref(cseg->p);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fe fddd 	bl	800d138 <pbuf_ref>
  return cseg;
 800e57e:	68fb      	ldr	r3, [r7, #12]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}
 800e588:	080197b4 	.word	0x080197b4
 800e58c:	08019d08 	.word	0x08019d08
 800e590:	080197f8 	.word	0x080197f8

0800e594 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	60f8      	str	r0, [r7, #12]
 800e59c:	60b9      	str	r1, [r7, #8]
 800e59e:	607a      	str	r2, [r7, #4]
 800e5a0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d109      	bne.n	800e5bc <tcp_recv_null+0x28>
 800e5a8:	4b12      	ldr	r3, [pc, #72]	; (800e5f4 <tcp_recv_null+0x60>)
 800e5aa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e5ae:	4912      	ldr	r1, [pc, #72]	; (800e5f8 <tcp_recv_null+0x64>)
 800e5b0:	4812      	ldr	r0, [pc, #72]	; (800e5fc <tcp_recv_null+0x68>)
 800e5b2:	f009 fba1 	bl	8017cf8 <iprintf>
 800e5b6:	f06f 030f 	mvn.w	r3, #15
 800e5ba:	e016      	b.n	800e5ea <tcp_recv_null+0x56>

  if (p != NULL) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d009      	beq.n	800e5d6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	891b      	ldrh	r3, [r3, #8]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	68b8      	ldr	r0, [r7, #8]
 800e5ca:	f7ff fb19 	bl	800dc00 <tcp_recved>
    pbuf_free(p);
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7fe fd0c 	bl	800cfec <pbuf_free>
 800e5d4:	e008      	b.n	800e5e8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e5d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d104      	bne.n	800e5e8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e5de:	68b8      	ldr	r0, [r7, #8]
 800e5e0:	f7ff f9be 	bl	800d960 <tcp_close>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	e000      	b.n	800e5ea <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e5e8:	2300      	movs	r3, #0
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3710      	adds	r7, #16
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}
 800e5f2:	bf00      	nop
 800e5f4:	080197b4 	.word	0x080197b4
 800e5f8:	08019d24 	.word	0x08019d24
 800e5fc:	080197f8 	.word	0x080197f8

0800e600 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	4603      	mov	r3, r0
 800e608:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e60a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	db01      	blt.n	800e616 <tcp_kill_prio+0x16>
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	e000      	b.n	800e618 <tcp_kill_prio+0x18>
 800e616:	237f      	movs	r3, #127	; 0x7f
 800e618:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e61a:	7afb      	ldrb	r3, [r7, #11]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d034      	beq.n	800e68a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e620:	7afb      	ldrb	r3, [r7, #11]
 800e622:	3b01      	subs	r3, #1
 800e624:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e626:	2300      	movs	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e62a:	2300      	movs	r3, #0
 800e62c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e62e:	4b19      	ldr	r3, [pc, #100]	; (800e694 <tcp_kill_prio+0x94>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	617b      	str	r3, [r7, #20]
 800e634:	e01f      	b.n	800e676 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	7d5b      	ldrb	r3, [r3, #21]
 800e63a:	7afa      	ldrb	r2, [r7, #11]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d80c      	bhi.n	800e65a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e644:	7afa      	ldrb	r2, [r7, #11]
 800e646:	429a      	cmp	r2, r3
 800e648:	d112      	bne.n	800e670 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e64a:	4b13      	ldr	r3, [pc, #76]	; (800e698 <tcp_kill_prio+0x98>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	429a      	cmp	r2, r3
 800e658:	d80a      	bhi.n	800e670 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e65a:	4b0f      	ldr	r3, [pc, #60]	; (800e698 <tcp_kill_prio+0x98>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	7d5b      	ldrb	r3, [r3, #21]
 800e66e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	68db      	ldr	r3, [r3, #12]
 800e674:	617b      	str	r3, [r7, #20]
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1dc      	bne.n	800e636 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d004      	beq.n	800e68c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e682:	6938      	ldr	r0, [r7, #16]
 800e684:	f7ff fa56 	bl	800db34 <tcp_abort>
 800e688:	e000      	b.n	800e68c <tcp_kill_prio+0x8c>
    return;
 800e68a:	bf00      	nop
  }
}
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	2400d6bc 	.word	0x2400d6bc
 800e698:	2400d6c0 	.word	0x2400d6c0

0800e69c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b086      	sub	sp, #24
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e6a6:	79fb      	ldrb	r3, [r7, #7]
 800e6a8:	2b08      	cmp	r3, #8
 800e6aa:	d009      	beq.n	800e6c0 <tcp_kill_state+0x24>
 800e6ac:	79fb      	ldrb	r3, [r7, #7]
 800e6ae:	2b09      	cmp	r3, #9
 800e6b0:	d006      	beq.n	800e6c0 <tcp_kill_state+0x24>
 800e6b2:	4b1a      	ldr	r3, [pc, #104]	; (800e71c <tcp_kill_state+0x80>)
 800e6b4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e6b8:	4919      	ldr	r1, [pc, #100]	; (800e720 <tcp_kill_state+0x84>)
 800e6ba:	481a      	ldr	r0, [pc, #104]	; (800e724 <tcp_kill_state+0x88>)
 800e6bc:	f009 fb1c 	bl	8017cf8 <iprintf>

  inactivity = 0;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6c8:	4b17      	ldr	r3, [pc, #92]	; (800e728 <tcp_kill_state+0x8c>)
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	617b      	str	r3, [r7, #20]
 800e6ce:	e017      	b.n	800e700 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	7d1b      	ldrb	r3, [r3, #20]
 800e6d4:	79fa      	ldrb	r2, [r7, #7]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d10f      	bne.n	800e6fa <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e6da:	4b14      	ldr	r3, [pc, #80]	; (800e72c <tcp_kill_state+0x90>)
 800e6dc:	681a      	ldr	r2, [r3, #0]
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	6a1b      	ldr	r3, [r3, #32]
 800e6e2:	1ad3      	subs	r3, r2, r3
 800e6e4:	68fa      	ldr	r2, [r7, #12]
 800e6e6:	429a      	cmp	r2, r3
 800e6e8:	d807      	bhi.n	800e6fa <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e6ea:	4b10      	ldr	r3, [pc, #64]	; (800e72c <tcp_kill_state+0x90>)
 800e6ec:	681a      	ldr	r2, [r3, #0]
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	6a1b      	ldr	r3, [r3, #32]
 800e6f2:	1ad3      	subs	r3, r2, r3
 800e6f4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d1e4      	bne.n	800e6d0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d003      	beq.n	800e714 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e70c:	2100      	movs	r1, #0
 800e70e:	6938      	ldr	r0, [r7, #16]
 800e710:	f7ff f952 	bl	800d9b8 <tcp_abandon>
  }
}
 800e714:	bf00      	nop
 800e716:	3718      	adds	r7, #24
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	080197b4 	.word	0x080197b4
 800e720:	08019d40 	.word	0x08019d40
 800e724:	080197f8 	.word	0x080197f8
 800e728:	2400d6bc 	.word	0x2400d6bc
 800e72c:	2400d6c0 	.word	0x2400d6c0

0800e730 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e736:	2300      	movs	r3, #0
 800e738:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e73a:	2300      	movs	r3, #0
 800e73c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e73e:	4b12      	ldr	r3, [pc, #72]	; (800e788 <tcp_kill_timewait+0x58>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	60fb      	str	r3, [r7, #12]
 800e744:	e012      	b.n	800e76c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e746:	4b11      	ldr	r3, [pc, #68]	; (800e78c <tcp_kill_timewait+0x5c>)
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	687a      	ldr	r2, [r7, #4]
 800e752:	429a      	cmp	r2, r3
 800e754:	d807      	bhi.n	800e766 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e756:	4b0d      	ldr	r3, [pc, #52]	; (800e78c <tcp_kill_timewait+0x5c>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	6a1b      	ldr	r3, [r3, #32]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	68db      	ldr	r3, [r3, #12]
 800e76a:	60fb      	str	r3, [r7, #12]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1e9      	bne.n	800e746 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d002      	beq.n	800e77e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e778:	68b8      	ldr	r0, [r7, #8]
 800e77a:	f7ff f9db 	bl	800db34 <tcp_abort>
  }
}
 800e77e:	bf00      	nop
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	bd80      	pop	{r7, pc}
 800e786:	bf00      	nop
 800e788:	2400d6cc 	.word	0x2400d6cc
 800e78c:	2400d6c0 	.word	0x2400d6c0

0800e790 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e796:	4b10      	ldr	r3, [pc, #64]	; (800e7d8 <tcp_handle_closepend+0x48>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e79c:	e014      	b.n	800e7c8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	68db      	ldr	r3, [r3, #12]
 800e7a2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8b5b      	ldrh	r3, [r3, #26]
 800e7a8:	f003 0308 	and.w	r3, r3, #8
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d009      	beq.n	800e7c4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	8b5b      	ldrh	r3, [r3, #26]
 800e7b4:	f023 0308 	bic.w	r3, r3, #8
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7ff f864 	bl	800d88c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d1e7      	bne.n	800e79e <tcp_handle_closepend+0xe>
  }
}
 800e7ce:	bf00      	nop
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	2400d6bc 	.word	0x2400d6bc

0800e7dc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7e6:	2001      	movs	r0, #1
 800e7e8:	f7fd fcda 	bl	800c1a0 <memp_malloc>
 800e7ec:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d126      	bne.n	800e842 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e7f4:	f7ff ffcc 	bl	800e790 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e7f8:	f7ff ff9a 	bl	800e730 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7fc:	2001      	movs	r0, #1
 800e7fe:	f7fd fccf 	bl	800c1a0 <memp_malloc>
 800e802:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d11b      	bne.n	800e842 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e80a:	2009      	movs	r0, #9
 800e80c:	f7ff ff46 	bl	800e69c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e810:	2001      	movs	r0, #1
 800e812:	f7fd fcc5 	bl	800c1a0 <memp_malloc>
 800e816:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d111      	bne.n	800e842 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e81e:	2008      	movs	r0, #8
 800e820:	f7ff ff3c 	bl	800e69c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e824:	2001      	movs	r0, #1
 800e826:	f7fd fcbb 	bl	800c1a0 <memp_malloc>
 800e82a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d107      	bne.n	800e842 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	4618      	mov	r0, r3
 800e836:	f7ff fee3 	bl	800e600 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e83a:	2001      	movs	r0, #1
 800e83c:	f7fd fcb0 	bl	800c1a0 <memp_malloc>
 800e840:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d03f      	beq.n	800e8c8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e848:	229c      	movs	r2, #156	; 0x9c
 800e84a:	2100      	movs	r1, #0
 800e84c:	68f8      	ldr	r0, [r7, #12]
 800e84e:	f009 f9f0 	bl	8017c32 <memset>
    pcb->prio = prio;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	79fa      	ldrb	r2, [r7, #7]
 800e856:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e85e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	22ff      	movs	r2, #255	; 0xff
 800e876:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e87e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2206      	movs	r2, #6
 800e884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2206      	movs	r2, #6
 800e88c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e894:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2201      	movs	r2, #1
 800e89a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e89e:	4b0d      	ldr	r3, [pc, #52]	; (800e8d4 <tcp_alloc+0xf8>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e8a6:	4b0c      	ldr	r3, [pc, #48]	; (800e8d8 <tcp_alloc+0xfc>)
 800e8a8:	781a      	ldrb	r2, [r3, #0]
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e8b4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4a08      	ldr	r2, [pc, #32]	; (800e8dc <tcp_alloc+0x100>)
 800e8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	4a07      	ldr	r2, [pc, #28]	; (800e8e0 <tcp_alloc+0x104>)
 800e8c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3710      	adds	r7, #16
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	2400d6c0 	.word	0x2400d6c0
 800e8d8:	24009dae 	.word	0x24009dae
 800e8dc:	0800e595 	.word	0x0800e595
 800e8e0:	006ddd00 	.word	0x006ddd00

0800e8e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d107      	bne.n	800e902 <tcp_pcb_purge+0x1e>
 800e8f2:	4b21      	ldr	r3, [pc, #132]	; (800e978 <tcp_pcb_purge+0x94>)
 800e8f4:	f640 0251 	movw	r2, #2129	; 0x851
 800e8f8:	4920      	ldr	r1, [pc, #128]	; (800e97c <tcp_pcb_purge+0x98>)
 800e8fa:	4821      	ldr	r0, [pc, #132]	; (800e980 <tcp_pcb_purge+0x9c>)
 800e8fc:	f009 f9fc 	bl	8017cf8 <iprintf>
 800e900:	e037      	b.n	800e972 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	7d1b      	ldrb	r3, [r3, #20]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d033      	beq.n	800e972 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e90e:	2b0a      	cmp	r3, #10
 800e910:	d02f      	beq.n	800e972 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e916:	2b01      	cmp	r3, #1
 800e918:	d02b      	beq.n	800e972 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d007      	beq.n	800e932 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e926:	4618      	mov	r0, r3
 800e928:	f7fe fb60 	bl	800cfec <pbuf_free>
      pcb->refused_data = NULL;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2200      	movs	r2, #0
 800e930:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e936:	2b00      	cmp	r3, #0
 800e938:	d002      	beq.n	800e940 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 f986 	bl	800ec4c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e946:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff fdc7 	bl	800e4e0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff fdc2 	bl	800e4e0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2200      	movs	r2, #0
 800e960:	66da      	str	r2, [r3, #108]	; 0x6c
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2200      	movs	r2, #0
 800e96e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e972:	3708      	adds	r7, #8
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}
 800e978:	080197b4 	.word	0x080197b4
 800e97c:	08019e00 	.word	0x08019e00
 800e980:	080197f8 	.word	0x080197f8

0800e984 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
 800e98c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d106      	bne.n	800e9a2 <tcp_pcb_remove+0x1e>
 800e994:	4b3e      	ldr	r3, [pc, #248]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800e996:	f640 0283 	movw	r2, #2179	; 0x883
 800e99a:	493e      	ldr	r1, [pc, #248]	; (800ea94 <tcp_pcb_remove+0x110>)
 800e99c:	483e      	ldr	r0, [pc, #248]	; (800ea98 <tcp_pcb_remove+0x114>)
 800e99e:	f009 f9ab 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d106      	bne.n	800e9b6 <tcp_pcb_remove+0x32>
 800e9a8:	4b39      	ldr	r3, [pc, #228]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800e9aa:	f640 0284 	movw	r2, #2180	; 0x884
 800e9ae:	493b      	ldr	r1, [pc, #236]	; (800ea9c <tcp_pcb_remove+0x118>)
 800e9b0:	4839      	ldr	r0, [pc, #228]	; (800ea98 <tcp_pcb_remove+0x114>)
 800e9b2:	f009 f9a1 	bl	8017cf8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d105      	bne.n	800e9cc <tcp_pcb_remove+0x48>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	68da      	ldr	r2, [r3, #12]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	601a      	str	r2, [r3, #0]
 800e9ca:	e013      	b.n	800e9f4 <tcp_pcb_remove+0x70>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	60fb      	str	r3, [r7, #12]
 800e9d2:	e00c      	b.n	800e9ee <tcp_pcb_remove+0x6a>
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	683a      	ldr	r2, [r7, #0]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d104      	bne.n	800e9e8 <tcp_pcb_remove+0x64>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	60da      	str	r2, [r3, #12]
 800e9e6:	e005      	b.n	800e9f4 <tcp_pcb_remove+0x70>
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68db      	ldr	r3, [r3, #12]
 800e9ec:	60fb      	str	r3, [r7, #12]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1ef      	bne.n	800e9d4 <tcp_pcb_remove+0x50>
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e9fa:	6838      	ldr	r0, [r7, #0]
 800e9fc:	f7ff ff72 	bl	800e8e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	7d1b      	ldrb	r3, [r3, #20]
 800ea04:	2b0a      	cmp	r3, #10
 800ea06:	d013      	beq.n	800ea30 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ea0c:	2b01      	cmp	r3, #1
 800ea0e:	d00f      	beq.n	800ea30 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	8b5b      	ldrh	r3, [r3, #26]
 800ea14:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d009      	beq.n	800ea30 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	8b5b      	ldrh	r3, [r3, #26]
 800ea20:	f043 0302 	orr.w	r3, r3, #2
 800ea24:	b29a      	uxth	r2, r3
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea2a:	6838      	ldr	r0, [r7, #0]
 800ea2c:	f002 ff6a 	bl	8011904 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d020      	beq.n	800ea7a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d006      	beq.n	800ea4e <tcp_pcb_remove+0xca>
 800ea40:	4b13      	ldr	r3, [pc, #76]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800ea42:	f640 0293 	movw	r2, #2195	; 0x893
 800ea46:	4916      	ldr	r1, [pc, #88]	; (800eaa0 <tcp_pcb_remove+0x11c>)
 800ea48:	4813      	ldr	r0, [pc, #76]	; (800ea98 <tcp_pcb_remove+0x114>)
 800ea4a:	f009 f955 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d006      	beq.n	800ea64 <tcp_pcb_remove+0xe0>
 800ea56:	4b0e      	ldr	r3, [pc, #56]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800ea58:	f640 0294 	movw	r2, #2196	; 0x894
 800ea5c:	4911      	ldr	r1, [pc, #68]	; (800eaa4 <tcp_pcb_remove+0x120>)
 800ea5e:	480e      	ldr	r0, [pc, #56]	; (800ea98 <tcp_pcb_remove+0x114>)
 800ea60:	f009 f94a 	bl	8017cf8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d006      	beq.n	800ea7a <tcp_pcb_remove+0xf6>
 800ea6c:	4b08      	ldr	r3, [pc, #32]	; (800ea90 <tcp_pcb_remove+0x10c>)
 800ea6e:	f640 0296 	movw	r2, #2198	; 0x896
 800ea72:	490d      	ldr	r1, [pc, #52]	; (800eaa8 <tcp_pcb_remove+0x124>)
 800ea74:	4808      	ldr	r0, [pc, #32]	; (800ea98 <tcp_pcb_remove+0x114>)
 800ea76:	f009 f93f 	bl	8017cf8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	2200      	movs	r2, #0
 800ea84:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ea86:	bf00      	nop
 800ea88:	3710      	adds	r7, #16
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	080197b4 	.word	0x080197b4
 800ea94:	08019e1c 	.word	0x08019e1c
 800ea98:	080197f8 	.word	0x080197f8
 800ea9c:	08019e38 	.word	0x08019e38
 800eaa0:	08019e58 	.word	0x08019e58
 800eaa4:	08019e70 	.word	0x08019e70
 800eaa8:	08019e8c 	.word	0x08019e8c

0800eaac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d106      	bne.n	800eac8 <tcp_next_iss+0x1c>
 800eaba:	4b0a      	ldr	r3, [pc, #40]	; (800eae4 <tcp_next_iss+0x38>)
 800eabc:	f640 02af 	movw	r2, #2223	; 0x8af
 800eac0:	4909      	ldr	r1, [pc, #36]	; (800eae8 <tcp_next_iss+0x3c>)
 800eac2:	480a      	ldr	r0, [pc, #40]	; (800eaec <tcp_next_iss+0x40>)
 800eac4:	f009 f918 	bl	8017cf8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eac8:	4b09      	ldr	r3, [pc, #36]	; (800eaf0 <tcp_next_iss+0x44>)
 800eaca:	681a      	ldr	r2, [r3, #0]
 800eacc:	4b09      	ldr	r3, [pc, #36]	; (800eaf4 <tcp_next_iss+0x48>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4413      	add	r3, r2
 800ead2:	4a07      	ldr	r2, [pc, #28]	; (800eaf0 <tcp_next_iss+0x44>)
 800ead4:	6013      	str	r3, [r2, #0]
  return iss;
 800ead6:	4b06      	ldr	r3, [pc, #24]	; (800eaf0 <tcp_next_iss+0x44>)
 800ead8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3708      	adds	r7, #8
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	080197b4 	.word	0x080197b4
 800eae8:	08019ea4 	.word	0x08019ea4
 800eaec:	080197f8 	.word	0x080197f8
 800eaf0:	2400002c 	.word	0x2400002c
 800eaf4:	2400d6c0 	.word	0x2400d6c0

0800eaf8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	4603      	mov	r3, r0
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
 800eb04:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <tcp_eff_send_mss_netif+0x22>
 800eb0c:	4b14      	ldr	r3, [pc, #80]	; (800eb60 <tcp_eff_send_mss_netif+0x68>)
 800eb0e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800eb12:	4914      	ldr	r1, [pc, #80]	; (800eb64 <tcp_eff_send_mss_netif+0x6c>)
 800eb14:	4814      	ldr	r0, [pc, #80]	; (800eb68 <tcp_eff_send_mss_netif+0x70>)
 800eb16:	f009 f8ef 	bl	8017cf8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800eb20:	89fb      	ldrh	r3, [r7, #14]
 800eb22:	e019      	b.n	800eb58 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800eb24:	68bb      	ldr	r3, [r7, #8]
 800eb26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb28:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800eb2a:	8afb      	ldrh	r3, [r7, #22]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d012      	beq.n	800eb56 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eb30:	2328      	movs	r3, #40	; 0x28
 800eb32:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eb34:	8afa      	ldrh	r2, [r7, #22]
 800eb36:	8abb      	ldrh	r3, [r7, #20]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d904      	bls.n	800eb46 <tcp_eff_send_mss_netif+0x4e>
 800eb3c:	8afa      	ldrh	r2, [r7, #22]
 800eb3e:	8abb      	ldrh	r3, [r7, #20]
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	e000      	b.n	800eb48 <tcp_eff_send_mss_netif+0x50>
 800eb46:	2300      	movs	r3, #0
 800eb48:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eb4a:	8a7a      	ldrh	r2, [r7, #18]
 800eb4c:	89fb      	ldrh	r3, [r7, #14]
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	bf28      	it	cs
 800eb52:	4613      	movcs	r3, r2
 800eb54:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eb56:	89fb      	ldrh	r3, [r7, #14]
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3718      	adds	r7, #24
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}
 800eb60:	080197b4 	.word	0x080197b4
 800eb64:	08019ec0 	.word	0x08019ec0
 800eb68:	080197f8 	.word	0x080197f8

0800eb6c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b084      	sub	sp, #16
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d119      	bne.n	800ebb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eb80:	4b10      	ldr	r3, [pc, #64]	; (800ebc4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eb82:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eb86:	4910      	ldr	r1, [pc, #64]	; (800ebc8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eb88:	4810      	ldr	r0, [pc, #64]	; (800ebcc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eb8a:	f009 f8b5 	bl	8017cf8 <iprintf>

  while (pcb != NULL) {
 800eb8e:	e011      	b.n	800ebb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d108      	bne.n	800ebae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f7fe ffc6 	bl	800db34 <tcp_abort>
      pcb = next;
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	60fb      	str	r3, [r7, #12]
 800ebac:	e002      	b.n	800ebb4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1ea      	bne.n	800eb90 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ebba:	bf00      	nop
 800ebbc:	bf00      	nop
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	080197b4 	.word	0x080197b4
 800ebc8:	08019ee8 	.word	0x08019ee8
 800ebcc:	080197f8 	.word	0x080197f8

0800ebd0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b084      	sub	sp, #16
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d02a      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d026      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ebe8:	4b15      	ldr	r3, [pc, #84]	; (800ec40 <tcp_netif_ip_addr_changed+0x70>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4619      	mov	r1, r3
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f7ff ffbc 	bl	800eb6c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ebf4:	4b13      	ldr	r3, [pc, #76]	; (800ec44 <tcp_netif_ip_addr_changed+0x74>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff ffb6 	bl	800eb6c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d017      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d013      	beq.n	800ec36 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec0e:	4b0e      	ldr	r3, [pc, #56]	; (800ec48 <tcp_netif_ip_addr_changed+0x78>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e00c      	b.n	800ec30 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	681a      	ldr	r2, [r3, #0]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d103      	bne.n	800ec2a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d1ef      	bne.n	800ec16 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ec36:	bf00      	nop
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	2400d6bc 	.word	0x2400d6bc
 800ec44:	2400d6c8 	.word	0x2400d6c8
 800ec48:	2400d6c4 	.word	0x2400d6c4

0800ec4c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d007      	beq.n	800ec6c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fc3d 	bl	800e4e0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2200      	movs	r2, #0
 800ec6a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ec6c:	bf00      	nop
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ec74:	b590      	push	{r4, r7, lr}
 800ec76:	b08d      	sub	sp, #52	; 0x34
 800ec78:	af04      	add	r7, sp, #16
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d105      	bne.n	800ec90 <tcp_input+0x1c>
 800ec84:	4b9b      	ldr	r3, [pc, #620]	; (800eef4 <tcp_input+0x280>)
 800ec86:	2283      	movs	r2, #131	; 0x83
 800ec88:	499b      	ldr	r1, [pc, #620]	; (800eef8 <tcp_input+0x284>)
 800ec8a:	489c      	ldr	r0, [pc, #624]	; (800eefc <tcp_input+0x288>)
 800ec8c:	f009 f834 	bl	8017cf8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4a9a      	ldr	r2, [pc, #616]	; (800ef00 <tcp_input+0x28c>)
 800ec96:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	895b      	ldrh	r3, [r3, #10]
 800ec9c:	2b13      	cmp	r3, #19
 800ec9e:	f240 83c4 	bls.w	800f42a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eca2:	4b98      	ldr	r3, [pc, #608]	; (800ef04 <tcp_input+0x290>)
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	4a97      	ldr	r2, [pc, #604]	; (800ef04 <tcp_input+0x290>)
 800eca8:	6812      	ldr	r2, [r2, #0]
 800ecaa:	4611      	mov	r1, r2
 800ecac:	4618      	mov	r0, r3
 800ecae:	f007 fe21 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	f040 83ba 	bne.w	800f42e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ecba:	4b92      	ldr	r3, [pc, #584]	; (800ef04 <tcp_input+0x290>)
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ecc2:	2be0      	cmp	r3, #224	; 0xe0
 800ecc4:	f000 83b3 	beq.w	800f42e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ecc8:	4b8d      	ldr	r3, [pc, #564]	; (800ef00 <tcp_input+0x28c>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	899b      	ldrh	r3, [r3, #12]
 800ecce:	b29b      	uxth	r3, r3
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7fc fcd5 	bl	800b680 <lwip_htons>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	0b1b      	lsrs	r3, r3, #12
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	b2db      	uxtb	r3, r3
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ece2:	7cbb      	ldrb	r3, [r7, #18]
 800ece4:	2b13      	cmp	r3, #19
 800ece6:	f240 83a4 	bls.w	800f432 <tcp_input+0x7be>
 800ecea:	7cbb      	ldrb	r3, [r7, #18]
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	891b      	ldrh	r3, [r3, #8]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	f200 839d 	bhi.w	800f432 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ecf8:	7cbb      	ldrb	r3, [r7, #18]
 800ecfa:	b29b      	uxth	r3, r3
 800ecfc:	3b14      	subs	r3, #20
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	4b81      	ldr	r3, [pc, #516]	; (800ef08 <tcp_input+0x294>)
 800ed02:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ed04:	4b81      	ldr	r3, [pc, #516]	; (800ef0c <tcp_input+0x298>)
 800ed06:	2200      	movs	r2, #0
 800ed08:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	895a      	ldrh	r2, [r3, #10]
 800ed0e:	7cbb      	ldrb	r3, [r7, #18]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d309      	bcc.n	800ed2a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ed16:	4b7c      	ldr	r3, [pc, #496]	; (800ef08 <tcp_input+0x294>)
 800ed18:	881a      	ldrh	r2, [r3, #0]
 800ed1a:	4b7d      	ldr	r3, [pc, #500]	; (800ef10 <tcp_input+0x29c>)
 800ed1c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ed1e:	7cbb      	ldrb	r3, [r7, #18]
 800ed20:	4619      	mov	r1, r3
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7fe f8dc 	bl	800cee0 <pbuf_remove_header>
 800ed28:	e04e      	b.n	800edc8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d105      	bne.n	800ed3e <tcp_input+0xca>
 800ed32:	4b70      	ldr	r3, [pc, #448]	; (800eef4 <tcp_input+0x280>)
 800ed34:	22c2      	movs	r2, #194	; 0xc2
 800ed36:	4977      	ldr	r1, [pc, #476]	; (800ef14 <tcp_input+0x2a0>)
 800ed38:	4870      	ldr	r0, [pc, #448]	; (800eefc <tcp_input+0x288>)
 800ed3a:	f008 ffdd 	bl	8017cf8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ed3e:	2114      	movs	r1, #20
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f7fe f8cd 	bl	800cee0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	895a      	ldrh	r2, [r3, #10]
 800ed4a:	4b71      	ldr	r3, [pc, #452]	; (800ef10 <tcp_input+0x29c>)
 800ed4c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ed4e:	4b6e      	ldr	r3, [pc, #440]	; (800ef08 <tcp_input+0x294>)
 800ed50:	881a      	ldrh	r2, [r3, #0]
 800ed52:	4b6f      	ldr	r3, [pc, #444]	; (800ef10 <tcp_input+0x29c>)
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	1ad3      	subs	r3, r2, r3
 800ed58:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ed5a:	4b6d      	ldr	r3, [pc, #436]	; (800ef10 <tcp_input+0x29c>)
 800ed5c:	881b      	ldrh	r3, [r3, #0]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7fe f8bd 	bl	800cee0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	895b      	ldrh	r3, [r3, #10]
 800ed6c:	8a3a      	ldrh	r2, [r7, #16]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	f200 8361 	bhi.w	800f436 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	4a64      	ldr	r2, [pc, #400]	; (800ef0c <tcp_input+0x298>)
 800ed7c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	8a3a      	ldrh	r2, [r7, #16]
 800ed84:	4611      	mov	r1, r2
 800ed86:	4618      	mov	r0, r3
 800ed88:	f7fe f8aa 	bl	800cee0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	891a      	ldrh	r2, [r3, #8]
 800ed90:	8a3b      	ldrh	r3, [r7, #16]
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	b29a      	uxth	r2, r3
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	895b      	ldrh	r3, [r3, #10]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d005      	beq.n	800edae <tcp_input+0x13a>
 800eda2:	4b54      	ldr	r3, [pc, #336]	; (800eef4 <tcp_input+0x280>)
 800eda4:	22df      	movs	r2, #223	; 0xdf
 800eda6:	495c      	ldr	r1, [pc, #368]	; (800ef18 <tcp_input+0x2a4>)
 800eda8:	4854      	ldr	r0, [pc, #336]	; (800eefc <tcp_input+0x288>)
 800edaa:	f008 ffa5 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	891a      	ldrh	r2, [r3, #8]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	891b      	ldrh	r3, [r3, #8]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d005      	beq.n	800edc8 <tcp_input+0x154>
 800edbc:	4b4d      	ldr	r3, [pc, #308]	; (800eef4 <tcp_input+0x280>)
 800edbe:	22e0      	movs	r2, #224	; 0xe0
 800edc0:	4956      	ldr	r1, [pc, #344]	; (800ef1c <tcp_input+0x2a8>)
 800edc2:	484e      	ldr	r0, [pc, #312]	; (800eefc <tcp_input+0x288>)
 800edc4:	f008 ff98 	bl	8017cf8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800edc8:	4b4d      	ldr	r3, [pc, #308]	; (800ef00 <tcp_input+0x28c>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	881b      	ldrh	r3, [r3, #0]
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4a4b      	ldr	r2, [pc, #300]	; (800ef00 <tcp_input+0x28c>)
 800edd2:	6814      	ldr	r4, [r2, #0]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fc fc53 	bl	800b680 <lwip_htons>
 800edda:	4603      	mov	r3, r0
 800eddc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800edde:	4b48      	ldr	r3, [pc, #288]	; (800ef00 <tcp_input+0x28c>)
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	885b      	ldrh	r3, [r3, #2]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	4a46      	ldr	r2, [pc, #280]	; (800ef00 <tcp_input+0x28c>)
 800ede8:	6814      	ldr	r4, [r2, #0]
 800edea:	4618      	mov	r0, r3
 800edec:	f7fc fc48 	bl	800b680 <lwip_htons>
 800edf0:	4603      	mov	r3, r0
 800edf2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800edf4:	4b42      	ldr	r3, [pc, #264]	; (800ef00 <tcp_input+0x28c>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	4a41      	ldr	r2, [pc, #260]	; (800ef00 <tcp_input+0x28c>)
 800edfc:	6814      	ldr	r4, [r2, #0]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fc fc53 	bl	800b6aa <lwip_htonl>
 800ee04:	4603      	mov	r3, r0
 800ee06:	6063      	str	r3, [r4, #4]
 800ee08:	6863      	ldr	r3, [r4, #4]
 800ee0a:	4a45      	ldr	r2, [pc, #276]	; (800ef20 <tcp_input+0x2ac>)
 800ee0c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ee0e:	4b3c      	ldr	r3, [pc, #240]	; (800ef00 <tcp_input+0x28c>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	689b      	ldr	r3, [r3, #8]
 800ee14:	4a3a      	ldr	r2, [pc, #232]	; (800ef00 <tcp_input+0x28c>)
 800ee16:	6814      	ldr	r4, [r2, #0]
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f7fc fc46 	bl	800b6aa <lwip_htonl>
 800ee1e:	4603      	mov	r3, r0
 800ee20:	60a3      	str	r3, [r4, #8]
 800ee22:	68a3      	ldr	r3, [r4, #8]
 800ee24:	4a3f      	ldr	r2, [pc, #252]	; (800ef24 <tcp_input+0x2b0>)
 800ee26:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ee28:	4b35      	ldr	r3, [pc, #212]	; (800ef00 <tcp_input+0x28c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	89db      	ldrh	r3, [r3, #14]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4a33      	ldr	r2, [pc, #204]	; (800ef00 <tcp_input+0x28c>)
 800ee32:	6814      	ldr	r4, [r2, #0]
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fc fc23 	bl	800b680 <lwip_htons>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ee3e:	4b30      	ldr	r3, [pc, #192]	; (800ef00 <tcp_input+0x28c>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	899b      	ldrh	r3, [r3, #12]
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fc fc1a 	bl	800b680 <lwip_htons>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	b2db      	uxtb	r3, r3
 800ee50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	4b34      	ldr	r3, [pc, #208]	; (800ef28 <tcp_input+0x2b4>)
 800ee58:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	891a      	ldrh	r2, [r3, #8]
 800ee5e:	4b33      	ldr	r3, [pc, #204]	; (800ef2c <tcp_input+0x2b8>)
 800ee60:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ee62:	4b31      	ldr	r3, [pc, #196]	; (800ef28 <tcp_input+0x2b4>)
 800ee64:	781b      	ldrb	r3, [r3, #0]
 800ee66:	f003 0303 	and.w	r3, r3, #3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d00c      	beq.n	800ee88 <tcp_input+0x214>
    tcplen++;
 800ee6e:	4b2f      	ldr	r3, [pc, #188]	; (800ef2c <tcp_input+0x2b8>)
 800ee70:	881b      	ldrh	r3, [r3, #0]
 800ee72:	3301      	adds	r3, #1
 800ee74:	b29a      	uxth	r2, r3
 800ee76:	4b2d      	ldr	r3, [pc, #180]	; (800ef2c <tcp_input+0x2b8>)
 800ee78:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	891a      	ldrh	r2, [r3, #8]
 800ee7e:	4b2b      	ldr	r3, [pc, #172]	; (800ef2c <tcp_input+0x2b8>)
 800ee80:	881b      	ldrh	r3, [r3, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	f200 82d9 	bhi.w	800f43a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ee88:	2300      	movs	r3, #0
 800ee8a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee8c:	4b28      	ldr	r3, [pc, #160]	; (800ef30 <tcp_input+0x2bc>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	61fb      	str	r3, [r7, #28]
 800ee92:	e09d      	b.n	800efd0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	7d1b      	ldrb	r3, [r3, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d105      	bne.n	800eea8 <tcp_input+0x234>
 800ee9c:	4b15      	ldr	r3, [pc, #84]	; (800eef4 <tcp_input+0x280>)
 800ee9e:	22fb      	movs	r2, #251	; 0xfb
 800eea0:	4924      	ldr	r1, [pc, #144]	; (800ef34 <tcp_input+0x2c0>)
 800eea2:	4816      	ldr	r0, [pc, #88]	; (800eefc <tcp_input+0x288>)
 800eea4:	f008 ff28 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800eea8:	69fb      	ldr	r3, [r7, #28]
 800eeaa:	7d1b      	ldrb	r3, [r3, #20]
 800eeac:	2b0a      	cmp	r3, #10
 800eeae:	d105      	bne.n	800eebc <tcp_input+0x248>
 800eeb0:	4b10      	ldr	r3, [pc, #64]	; (800eef4 <tcp_input+0x280>)
 800eeb2:	22fc      	movs	r2, #252	; 0xfc
 800eeb4:	4920      	ldr	r1, [pc, #128]	; (800ef38 <tcp_input+0x2c4>)
 800eeb6:	4811      	ldr	r0, [pc, #68]	; (800eefc <tcp_input+0x288>)
 800eeb8:	f008 ff1e 	bl	8017cf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800eebc:	69fb      	ldr	r3, [r7, #28]
 800eebe:	7d1b      	ldrb	r3, [r3, #20]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d105      	bne.n	800eed0 <tcp_input+0x25c>
 800eec4:	4b0b      	ldr	r3, [pc, #44]	; (800eef4 <tcp_input+0x280>)
 800eec6:	22fd      	movs	r2, #253	; 0xfd
 800eec8:	491c      	ldr	r1, [pc, #112]	; (800ef3c <tcp_input+0x2c8>)
 800eeca:	480c      	ldr	r0, [pc, #48]	; (800eefc <tcp_input+0x288>)
 800eecc:	f008 ff14 	bl	8017cf8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	7a1b      	ldrb	r3, [r3, #8]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d033      	beq.n	800ef40 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	7a1a      	ldrb	r2, [r3, #8]
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <tcp_input+0x290>)
 800eede:	685b      	ldr	r3, [r3, #4]
 800eee0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eee4:	3301      	adds	r3, #1
 800eee6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d029      	beq.n	800ef40 <tcp_input+0x2cc>
      prev = pcb;
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	61bb      	str	r3, [r7, #24]
      continue;
 800eef0:	e06b      	b.n	800efca <tcp_input+0x356>
 800eef2:	bf00      	nop
 800eef4:	08019f1c 	.word	0x08019f1c
 800eef8:	08019f50 	.word	0x08019f50
 800eefc:	08019f68 	.word	0x08019f68
 800ef00:	24009dc0 	.word	0x24009dc0
 800ef04:	2400a5dc 	.word	0x2400a5dc
 800ef08:	24009dc4 	.word	0x24009dc4
 800ef0c:	24009dc8 	.word	0x24009dc8
 800ef10:	24009dc6 	.word	0x24009dc6
 800ef14:	08019f90 	.word	0x08019f90
 800ef18:	08019fa0 	.word	0x08019fa0
 800ef1c:	08019fac 	.word	0x08019fac
 800ef20:	24009dd0 	.word	0x24009dd0
 800ef24:	24009dd4 	.word	0x24009dd4
 800ef28:	24009ddc 	.word	0x24009ddc
 800ef2c:	24009dda 	.word	0x24009dda
 800ef30:	2400d6bc 	.word	0x2400d6bc
 800ef34:	08019fcc 	.word	0x08019fcc
 800ef38:	08019ff4 	.word	0x08019ff4
 800ef3c:	0801a020 	.word	0x0801a020
    }

    if (pcb->remote_port == tcphdr->src &&
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	8b1a      	ldrh	r2, [r3, #24]
 800ef44:	4b94      	ldr	r3, [pc, #592]	; (800f198 <tcp_input+0x524>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d13a      	bne.n	800efc6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	8ada      	ldrh	r2, [r3, #22]
 800ef54:	4b90      	ldr	r3, [pc, #576]	; (800f198 <tcp_input+0x524>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	885b      	ldrh	r3, [r3, #2]
 800ef5a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d132      	bne.n	800efc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	4b8d      	ldr	r3, [pc, #564]	; (800f19c <tcp_input+0x528>)
 800ef66:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ef68:	429a      	cmp	r2, r3
 800ef6a:	d12c      	bne.n	800efc6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	681a      	ldr	r2, [r3, #0]
 800ef70:	4b8a      	ldr	r3, [pc, #552]	; (800f19c <tcp_input+0x528>)
 800ef72:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d126      	bne.n	800efc6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ef78:	69fb      	ldr	r3, [r7, #28]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	69fa      	ldr	r2, [r7, #28]
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d106      	bne.n	800ef90 <tcp_input+0x31c>
 800ef82:	4b87      	ldr	r3, [pc, #540]	; (800f1a0 <tcp_input+0x52c>)
 800ef84:	f240 120d 	movw	r2, #269	; 0x10d
 800ef88:	4986      	ldr	r1, [pc, #536]	; (800f1a4 <tcp_input+0x530>)
 800ef8a:	4887      	ldr	r0, [pc, #540]	; (800f1a8 <tcp_input+0x534>)
 800ef8c:	f008 feb4 	bl	8017cf8 <iprintf>
      if (prev != NULL) {
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00a      	beq.n	800efac <tcp_input+0x338>
        prev->next = pcb->next;
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	68da      	ldr	r2, [r3, #12]
 800ef9a:	69bb      	ldr	r3, [r7, #24]
 800ef9c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ef9e:	4b83      	ldr	r3, [pc, #524]	; (800f1ac <tcp_input+0x538>)
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800efa6:	4a81      	ldr	r2, [pc, #516]	; (800f1ac <tcp_input+0x538>)
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d111      	bne.n	800efda <tcp_input+0x366>
 800efb6:	4b7a      	ldr	r3, [pc, #488]	; (800f1a0 <tcp_input+0x52c>)
 800efb8:	f240 1215 	movw	r2, #277	; 0x115
 800efbc:	497c      	ldr	r1, [pc, #496]	; (800f1b0 <tcp_input+0x53c>)
 800efbe:	487a      	ldr	r0, [pc, #488]	; (800f1a8 <tcp_input+0x534>)
 800efc0:	f008 fe9a 	bl	8017cf8 <iprintf>
      break;
 800efc4:	e009      	b.n	800efda <tcp_input+0x366>
    }
    prev = pcb;
 800efc6:	69fb      	ldr	r3, [r7, #28]
 800efc8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	61fb      	str	r3, [r7, #28]
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	f47f af5e 	bne.w	800ee94 <tcp_input+0x220>
 800efd8:	e000      	b.n	800efdc <tcp_input+0x368>
      break;
 800efda:	bf00      	nop
  }

  if (pcb == NULL) {
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	f040 8095 	bne.w	800f10e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe4:	4b73      	ldr	r3, [pc, #460]	; (800f1b4 <tcp_input+0x540>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	61fb      	str	r3, [r7, #28]
 800efea:	e03f      	b.n	800f06c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b0a      	cmp	r3, #10
 800eff2:	d006      	beq.n	800f002 <tcp_input+0x38e>
 800eff4:	4b6a      	ldr	r3, [pc, #424]	; (800f1a0 <tcp_input+0x52c>)
 800eff6:	f240 121f 	movw	r2, #287	; 0x11f
 800effa:	496f      	ldr	r1, [pc, #444]	; (800f1b8 <tcp_input+0x544>)
 800effc:	486a      	ldr	r0, [pc, #424]	; (800f1a8 <tcp_input+0x534>)
 800effe:	f008 fe7b 	bl	8017cf8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f002:	69fb      	ldr	r3, [r7, #28]
 800f004:	7a1b      	ldrb	r3, [r3, #8]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d009      	beq.n	800f01e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f00a:	69fb      	ldr	r3, [r7, #28]
 800f00c:	7a1a      	ldrb	r2, [r3, #8]
 800f00e:	4b63      	ldr	r3, [pc, #396]	; (800f19c <tcp_input+0x528>)
 800f010:	685b      	ldr	r3, [r3, #4]
 800f012:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f016:	3301      	adds	r3, #1
 800f018:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d122      	bne.n	800f064 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	8b1a      	ldrh	r2, [r3, #24]
 800f022:	4b5d      	ldr	r3, [pc, #372]	; (800f198 <tcp_input+0x524>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	b29b      	uxth	r3, r3
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d11b      	bne.n	800f066 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f02e:	69fb      	ldr	r3, [r7, #28]
 800f030:	8ada      	ldrh	r2, [r3, #22]
 800f032:	4b59      	ldr	r3, [pc, #356]	; (800f198 <tcp_input+0x524>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	885b      	ldrh	r3, [r3, #2]
 800f038:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d113      	bne.n	800f066 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	685a      	ldr	r2, [r3, #4]
 800f042:	4b56      	ldr	r3, [pc, #344]	; (800f19c <tcp_input+0x528>)
 800f044:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f046:	429a      	cmp	r2, r3
 800f048:	d10d      	bne.n	800f066 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	681a      	ldr	r2, [r3, #0]
 800f04e:	4b53      	ldr	r3, [pc, #332]	; (800f19c <tcp_input+0x528>)
 800f050:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f052:	429a      	cmp	r2, r3
 800f054:	d107      	bne.n	800f066 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f056:	69f8      	ldr	r0, [r7, #28]
 800f058:	f000 fb54 	bl	800f704 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f7fd ffc5 	bl	800cfec <pbuf_free>
        return;
 800f062:	e1f0      	b.n	800f446 <tcp_input+0x7d2>
        continue;
 800f064:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	61fb      	str	r3, [r7, #28]
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d1bc      	bne.n	800efec <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f072:	2300      	movs	r3, #0
 800f074:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f076:	4b51      	ldr	r3, [pc, #324]	; (800f1bc <tcp_input+0x548>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	e02a      	b.n	800f0d4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	7a1b      	ldrb	r3, [r3, #8]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d00c      	beq.n	800f0a0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	7a1a      	ldrb	r2, [r3, #8]
 800f08a:	4b44      	ldr	r3, [pc, #272]	; (800f19c <tcp_input+0x528>)
 800f08c:	685b      	ldr	r3, [r3, #4]
 800f08e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f092:	3301      	adds	r3, #1
 800f094:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f096:	429a      	cmp	r2, r3
 800f098:	d002      	beq.n	800f0a0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	61bb      	str	r3, [r7, #24]
        continue;
 800f09e:	e016      	b.n	800f0ce <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	8ada      	ldrh	r2, [r3, #22]
 800f0a4:	4b3c      	ldr	r3, [pc, #240]	; (800f198 <tcp_input+0x524>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	885b      	ldrh	r3, [r3, #2]
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d10c      	bne.n	800f0ca <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	4b39      	ldr	r3, [pc, #228]	; (800f19c <tcp_input+0x528>)
 800f0b6:	695b      	ldr	r3, [r3, #20]
 800f0b8:	429a      	cmp	r2, r3
 800f0ba:	d00f      	beq.n	800f0dc <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d00d      	beq.n	800f0de <tcp_input+0x46a>
 800f0c2:	697b      	ldr	r3, [r7, #20]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d009      	beq.n	800f0de <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f0ce:	697b      	ldr	r3, [r7, #20]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	617b      	str	r3, [r7, #20]
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d1d1      	bne.n	800f07e <tcp_input+0x40a>
 800f0da:	e000      	b.n	800f0de <tcp_input+0x46a>
            break;
 800f0dc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d014      	beq.n	800f10e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d00a      	beq.n	800f100 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	68da      	ldr	r2, [r3, #12]
 800f0ee:	69bb      	ldr	r3, [r7, #24]
 800f0f0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f0f2:	4b32      	ldr	r3, [pc, #200]	; (800f1bc <tcp_input+0x548>)
 800f0f4:	681a      	ldr	r2, [r3, #0]
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f0fa:	4a30      	ldr	r2, [pc, #192]	; (800f1bc <tcp_input+0x548>)
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f100:	6978      	ldr	r0, [r7, #20]
 800f102:	f000 fa01 	bl	800f508 <tcp_listen_input>
      }
      pbuf_free(p);
 800f106:	6878      	ldr	r0, [r7, #4]
 800f108:	f7fd ff70 	bl	800cfec <pbuf_free>
      return;
 800f10c:	e19b      	b.n	800f446 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8160 	beq.w	800f3d6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f116:	4b2a      	ldr	r3, [pc, #168]	; (800f1c0 <tcp_input+0x54c>)
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	891a      	ldrh	r2, [r3, #8]
 800f120:	4b27      	ldr	r3, [pc, #156]	; (800f1c0 <tcp_input+0x54c>)
 800f122:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f124:	4a26      	ldr	r2, [pc, #152]	; (800f1c0 <tcp_input+0x54c>)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f12a:	4b1b      	ldr	r3, [pc, #108]	; (800f198 <tcp_input+0x524>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4a24      	ldr	r2, [pc, #144]	; (800f1c0 <tcp_input+0x54c>)
 800f130:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f132:	4b24      	ldr	r3, [pc, #144]	; (800f1c4 <tcp_input+0x550>)
 800f134:	2200      	movs	r2, #0
 800f136:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f138:	4b23      	ldr	r3, [pc, #140]	; (800f1c8 <tcp_input+0x554>)
 800f13a:	2200      	movs	r2, #0
 800f13c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f13e:	4b23      	ldr	r3, [pc, #140]	; (800f1cc <tcp_input+0x558>)
 800f140:	2200      	movs	r2, #0
 800f142:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f144:	4b22      	ldr	r3, [pc, #136]	; (800f1d0 <tcp_input+0x55c>)
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	f003 0308 	and.w	r3, r3, #8
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d006      	beq.n	800f15e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	7b5b      	ldrb	r3, [r3, #13]
 800f154:	f043 0301 	orr.w	r3, r3, #1
 800f158:	b2da      	uxtb	r2, r3
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f162:	2b00      	cmp	r3, #0
 800f164:	d038      	beq.n	800f1d8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f166:	69f8      	ldr	r0, [r7, #28]
 800f168:	f7ff f93e 	bl	800e3e8 <tcp_process_refused_data>
 800f16c:	4603      	mov	r3, r0
 800f16e:	f113 0f0d 	cmn.w	r3, #13
 800f172:	d007      	beq.n	800f184 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d02d      	beq.n	800f1d8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f17c:	4b15      	ldr	r3, [pc, #84]	; (800f1d4 <tcp_input+0x560>)
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d029      	beq.n	800f1d8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f188:	2b00      	cmp	r3, #0
 800f18a:	f040 8104 	bne.w	800f396 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f18e:	69f8      	ldr	r0, [r7, #28]
 800f190:	f003 f9be 	bl	8012510 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f194:	e0ff      	b.n	800f396 <tcp_input+0x722>
 800f196:	bf00      	nop
 800f198:	24009dc0 	.word	0x24009dc0
 800f19c:	2400a5dc 	.word	0x2400a5dc
 800f1a0:	08019f1c 	.word	0x08019f1c
 800f1a4:	0801a048 	.word	0x0801a048
 800f1a8:	08019f68 	.word	0x08019f68
 800f1ac:	2400d6bc 	.word	0x2400d6bc
 800f1b0:	0801a074 	.word	0x0801a074
 800f1b4:	2400d6cc 	.word	0x2400d6cc
 800f1b8:	0801a0a0 	.word	0x0801a0a0
 800f1bc:	2400d6c4 	.word	0x2400d6c4
 800f1c0:	24009db0 	.word	0x24009db0
 800f1c4:	24009de0 	.word	0x24009de0
 800f1c8:	24009ddd 	.word	0x24009ddd
 800f1cc:	24009dd8 	.word	0x24009dd8
 800f1d0:	24009ddc 	.word	0x24009ddc
 800f1d4:	24009dda 	.word	0x24009dda
      }
    }
    tcp_input_pcb = pcb;
 800f1d8:	4a9c      	ldr	r2, [pc, #624]	; (800f44c <tcp_input+0x7d8>)
 800f1da:	69fb      	ldr	r3, [r7, #28]
 800f1dc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f1de:	69f8      	ldr	r0, [r7, #28]
 800f1e0:	f000 fb0a 	bl	800f7f8 <tcp_process>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f1e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1ec:	f113 0f0d 	cmn.w	r3, #13
 800f1f0:	f000 80d3 	beq.w	800f39a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f1f4:	4b96      	ldr	r3, [pc, #600]	; (800f450 <tcp_input+0x7dc>)
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	f003 0308 	and.w	r3, r3, #8
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d015      	beq.n	800f22c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f206:	2b00      	cmp	r3, #0
 800f208:	d008      	beq.n	800f21c <tcp_input+0x5a8>
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f210:	69fa      	ldr	r2, [r7, #28]
 800f212:	6912      	ldr	r2, [r2, #16]
 800f214:	f06f 010d 	mvn.w	r1, #13
 800f218:	4610      	mov	r0, r2
 800f21a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f21c:	69f9      	ldr	r1, [r7, #28]
 800f21e:	488d      	ldr	r0, [pc, #564]	; (800f454 <tcp_input+0x7e0>)
 800f220:	f7ff fbb0 	bl	800e984 <tcp_pcb_remove>
        tcp_free(pcb);
 800f224:	69f8      	ldr	r0, [r7, #28]
 800f226:	f7fe f99d 	bl	800d564 <tcp_free>
 800f22a:	e0c1      	b.n	800f3b0 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f22c:	2300      	movs	r3, #0
 800f22e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f230:	4b89      	ldr	r3, [pc, #548]	; (800f458 <tcp_input+0x7e4>)
 800f232:	881b      	ldrh	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d01d      	beq.n	800f274 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f238:	4b87      	ldr	r3, [pc, #540]	; (800f458 <tcp_input+0x7e4>)
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f23e:	69fb      	ldr	r3, [r7, #28]
 800f240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f244:	2b00      	cmp	r3, #0
 800f246:	d00a      	beq.n	800f25e <tcp_input+0x5ea>
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f24e:	69fa      	ldr	r2, [r7, #28]
 800f250:	6910      	ldr	r0, [r2, #16]
 800f252:	89fa      	ldrh	r2, [r7, #14]
 800f254:	69f9      	ldr	r1, [r7, #28]
 800f256:	4798      	blx	r3
 800f258:	4603      	mov	r3, r0
 800f25a:	74fb      	strb	r3, [r7, #19]
 800f25c:	e001      	b.n	800f262 <tcp_input+0x5ee>
 800f25e:	2300      	movs	r3, #0
 800f260:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f262:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f266:	f113 0f0d 	cmn.w	r3, #13
 800f26a:	f000 8098 	beq.w	800f39e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f26e:	4b7a      	ldr	r3, [pc, #488]	; (800f458 <tcp_input+0x7e4>)
 800f270:	2200      	movs	r2, #0
 800f272:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f274:	69f8      	ldr	r0, [r7, #28]
 800f276:	f000 f907 	bl	800f488 <tcp_input_delayed_close>
 800f27a:	4603      	mov	r3, r0
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	f040 8090 	bne.w	800f3a2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f282:	4b76      	ldr	r3, [pc, #472]	; (800f45c <tcp_input+0x7e8>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d041      	beq.n	800f30e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d006      	beq.n	800f2a0 <tcp_input+0x62c>
 800f292:	4b73      	ldr	r3, [pc, #460]	; (800f460 <tcp_input+0x7ec>)
 800f294:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f298:	4972      	ldr	r1, [pc, #456]	; (800f464 <tcp_input+0x7f0>)
 800f29a:	4873      	ldr	r0, [pc, #460]	; (800f468 <tcp_input+0x7f4>)
 800f29c:	f008 fd2c 	bl	8017cf8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	8b5b      	ldrh	r3, [r3, #26]
 800f2a4:	f003 0310 	and.w	r3, r3, #16
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d008      	beq.n	800f2be <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f2ac:	4b6b      	ldr	r3, [pc, #428]	; (800f45c <tcp_input+0x7e8>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	f7fd fe9b 	bl	800cfec <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f2b6:	69f8      	ldr	r0, [r7, #28]
 800f2b8:	f7fe fc3c 	bl	800db34 <tcp_abort>
            goto aborted;
 800f2bc:	e078      	b.n	800f3b0 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00c      	beq.n	800f2e2 <tcp_input+0x66e>
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	6918      	ldr	r0, [r3, #16]
 800f2d2:	4b62      	ldr	r3, [pc, #392]	; (800f45c <tcp_input+0x7e8>)
 800f2d4:	681a      	ldr	r2, [r3, #0]
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	69f9      	ldr	r1, [r7, #28]
 800f2da:	47a0      	blx	r4
 800f2dc:	4603      	mov	r3, r0
 800f2de:	74fb      	strb	r3, [r7, #19]
 800f2e0:	e008      	b.n	800f2f4 <tcp_input+0x680>
 800f2e2:	4b5e      	ldr	r3, [pc, #376]	; (800f45c <tcp_input+0x7e8>)
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	69f9      	ldr	r1, [r7, #28]
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	f7ff f952 	bl	800e594 <tcp_recv_null>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f2f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2f8:	f113 0f0d 	cmn.w	r3, #13
 800f2fc:	d053      	beq.n	800f3a6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f2fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f306:	4b55      	ldr	r3, [pc, #340]	; (800f45c <tcp_input+0x7e8>)
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	69fb      	ldr	r3, [r7, #28]
 800f30c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f30e:	4b50      	ldr	r3, [pc, #320]	; (800f450 <tcp_input+0x7dc>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	f003 0320 	and.w	r3, r3, #32
 800f316:	2b00      	cmp	r3, #0
 800f318:	d030      	beq.n	800f37c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d009      	beq.n	800f336 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f326:	7b5a      	ldrb	r2, [r3, #13]
 800f328:	69fb      	ldr	r3, [r7, #28]
 800f32a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f32c:	f042 0220 	orr.w	r2, r2, #32
 800f330:	b2d2      	uxtb	r2, r2
 800f332:	735a      	strb	r2, [r3, #13]
 800f334:	e022      	b.n	800f37c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f336:	69fb      	ldr	r3, [r7, #28]
 800f338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f33a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f33e:	d005      	beq.n	800f34c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f344:	3301      	adds	r3, #1
 800f346:	b29a      	uxth	r2, r3
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00b      	beq.n	800f36e <tcp_input+0x6fa>
 800f356:	69fb      	ldr	r3, [r7, #28]
 800f358:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	6918      	ldr	r0, [r3, #16]
 800f360:	2300      	movs	r3, #0
 800f362:	2200      	movs	r2, #0
 800f364:	69f9      	ldr	r1, [r7, #28]
 800f366:	47a0      	blx	r4
 800f368:	4603      	mov	r3, r0
 800f36a:	74fb      	strb	r3, [r7, #19]
 800f36c:	e001      	b.n	800f372 <tcp_input+0x6fe>
 800f36e:	2300      	movs	r3, #0
 800f370:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f372:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f376:	f113 0f0d 	cmn.w	r3, #13
 800f37a:	d016      	beq.n	800f3aa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f37c:	4b33      	ldr	r3, [pc, #204]	; (800f44c <tcp_input+0x7d8>)
 800f37e:	2200      	movs	r2, #0
 800f380:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f382:	69f8      	ldr	r0, [r7, #28]
 800f384:	f000 f880 	bl	800f488 <tcp_input_delayed_close>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10f      	bne.n	800f3ae <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f38e:	69f8      	ldr	r0, [r7, #28]
 800f390:	f002 fab8 	bl	8011904 <tcp_output>
 800f394:	e00c      	b.n	800f3b0 <tcp_input+0x73c>
        goto aborted;
 800f396:	bf00      	nop
 800f398:	e00a      	b.n	800f3b0 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f39a:	bf00      	nop
 800f39c:	e008      	b.n	800f3b0 <tcp_input+0x73c>
              goto aborted;
 800f39e:	bf00      	nop
 800f3a0:	e006      	b.n	800f3b0 <tcp_input+0x73c>
          goto aborted;
 800f3a2:	bf00      	nop
 800f3a4:	e004      	b.n	800f3b0 <tcp_input+0x73c>
            goto aborted;
 800f3a6:	bf00      	nop
 800f3a8:	e002      	b.n	800f3b0 <tcp_input+0x73c>
              goto aborted;
 800f3aa:	bf00      	nop
 800f3ac:	e000      	b.n	800f3b0 <tcp_input+0x73c>
          goto aborted;
 800f3ae:	bf00      	nop
    tcp_input_pcb = NULL;
 800f3b0:	4b26      	ldr	r3, [pc, #152]	; (800f44c <tcp_input+0x7d8>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f3b6:	4b29      	ldr	r3, [pc, #164]	; (800f45c <tcp_input+0x7e8>)
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f3bc:	4b2b      	ldr	r3, [pc, #172]	; (800f46c <tcp_input+0x7f8>)
 800f3be:	685b      	ldr	r3, [r3, #4]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d03f      	beq.n	800f444 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800f3c4:	4b29      	ldr	r3, [pc, #164]	; (800f46c <tcp_input+0x7f8>)
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f7fd fe0f 	bl	800cfec <pbuf_free>
      inseg.p = NULL;
 800f3ce:	4b27      	ldr	r3, [pc, #156]	; (800f46c <tcp_input+0x7f8>)
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f3d4:	e036      	b.n	800f444 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f3d6:	4b26      	ldr	r3, [pc, #152]	; (800f470 <tcp_input+0x7fc>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	899b      	ldrh	r3, [r3, #12]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7fc f94e 	bl	800b680 <lwip_htons>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	f003 0304 	and.w	r3, r3, #4
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d118      	bne.n	800f422 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3f0:	4b20      	ldr	r3, [pc, #128]	; (800f474 <tcp_input+0x800>)
 800f3f2:	6819      	ldr	r1, [r3, #0]
 800f3f4:	4b20      	ldr	r3, [pc, #128]	; (800f478 <tcp_input+0x804>)
 800f3f6:	881b      	ldrh	r3, [r3, #0]
 800f3f8:	461a      	mov	r2, r3
 800f3fa:	4b20      	ldr	r3, [pc, #128]	; (800f47c <tcp_input+0x808>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f400:	4b1b      	ldr	r3, [pc, #108]	; (800f470 <tcp_input+0x7fc>)
 800f402:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f404:	885b      	ldrh	r3, [r3, #2]
 800f406:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f408:	4a19      	ldr	r2, [pc, #100]	; (800f470 <tcp_input+0x7fc>)
 800f40a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f40c:	8812      	ldrh	r2, [r2, #0]
 800f40e:	b292      	uxth	r2, r2
 800f410:	9202      	str	r2, [sp, #8]
 800f412:	9301      	str	r3, [sp, #4]
 800f414:	4b1a      	ldr	r3, [pc, #104]	; (800f480 <tcp_input+0x80c>)
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	4b1a      	ldr	r3, [pc, #104]	; (800f484 <tcp_input+0x810>)
 800f41a:	4602      	mov	r2, r0
 800f41c:	2000      	movs	r0, #0
 800f41e:	f003 f825 	bl	801246c <tcp_rst>
    pbuf_free(p);
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7fd fde2 	bl	800cfec <pbuf_free>
  return;
 800f428:	e00c      	b.n	800f444 <tcp_input+0x7d0>
    goto dropped;
 800f42a:	bf00      	nop
 800f42c:	e006      	b.n	800f43c <tcp_input+0x7c8>
    goto dropped;
 800f42e:	bf00      	nop
 800f430:	e004      	b.n	800f43c <tcp_input+0x7c8>
    goto dropped;
 800f432:	bf00      	nop
 800f434:	e002      	b.n	800f43c <tcp_input+0x7c8>
      goto dropped;
 800f436:	bf00      	nop
 800f438:	e000      	b.n	800f43c <tcp_input+0x7c8>
      goto dropped;
 800f43a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7fd fdd5 	bl	800cfec <pbuf_free>
 800f442:	e000      	b.n	800f446 <tcp_input+0x7d2>
  return;
 800f444:	bf00      	nop
}
 800f446:	3724      	adds	r7, #36	; 0x24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd90      	pop	{r4, r7, pc}
 800f44c:	2400d6d0 	.word	0x2400d6d0
 800f450:	24009ddd 	.word	0x24009ddd
 800f454:	2400d6bc 	.word	0x2400d6bc
 800f458:	24009dd8 	.word	0x24009dd8
 800f45c:	24009de0 	.word	0x24009de0
 800f460:	08019f1c 	.word	0x08019f1c
 800f464:	0801a0d0 	.word	0x0801a0d0
 800f468:	08019f68 	.word	0x08019f68
 800f46c:	24009db0 	.word	0x24009db0
 800f470:	24009dc0 	.word	0x24009dc0
 800f474:	24009dd4 	.word	0x24009dd4
 800f478:	24009dda 	.word	0x24009dda
 800f47c:	24009dd0 	.word	0x24009dd0
 800f480:	2400a5ec 	.word	0x2400a5ec
 800f484:	2400a5f0 	.word	0x2400a5f0

0800f488 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d106      	bne.n	800f4a4 <tcp_input_delayed_close+0x1c>
 800f496:	4b17      	ldr	r3, [pc, #92]	; (800f4f4 <tcp_input_delayed_close+0x6c>)
 800f498:	f240 225a 	movw	r2, #602	; 0x25a
 800f49c:	4916      	ldr	r1, [pc, #88]	; (800f4f8 <tcp_input_delayed_close+0x70>)
 800f49e:	4817      	ldr	r0, [pc, #92]	; (800f4fc <tcp_input_delayed_close+0x74>)
 800f4a0:	f008 fc2a 	bl	8017cf8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f4a4:	4b16      	ldr	r3, [pc, #88]	; (800f500 <tcp_input_delayed_close+0x78>)
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	f003 0310 	and.w	r3, r3, #16
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d01c      	beq.n	800f4ea <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	8b5b      	ldrh	r3, [r3, #26]
 800f4b4:	f003 0310 	and.w	r3, r3, #16
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d10d      	bne.n	800f4d8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d008      	beq.n	800f4d8 <tcp_input_delayed_close+0x50>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	6912      	ldr	r2, [r2, #16]
 800f4d0:	f06f 010e 	mvn.w	r1, #14
 800f4d4:	4610      	mov	r0, r2
 800f4d6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f4d8:	6879      	ldr	r1, [r7, #4]
 800f4da:	480a      	ldr	r0, [pc, #40]	; (800f504 <tcp_input_delayed_close+0x7c>)
 800f4dc:	f7ff fa52 	bl	800e984 <tcp_pcb_remove>
    tcp_free(pcb);
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7fe f83f 	bl	800d564 <tcp_free>
    return 1;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e000      	b.n	800f4ec <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	08019f1c 	.word	0x08019f1c
 800f4f8:	0801a0ec 	.word	0x0801a0ec
 800f4fc:	08019f68 	.word	0x08019f68
 800f500:	24009ddd 	.word	0x24009ddd
 800f504:	2400d6bc 	.word	0x2400d6bc

0800f508 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f508:	b590      	push	{r4, r7, lr}
 800f50a:	b08b      	sub	sp, #44	; 0x2c
 800f50c:	af04      	add	r7, sp, #16
 800f50e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f510:	4b6f      	ldr	r3, [pc, #444]	; (800f6d0 <tcp_listen_input+0x1c8>)
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	f003 0304 	and.w	r3, r3, #4
 800f518:	2b00      	cmp	r3, #0
 800f51a:	f040 80d2 	bne.w	800f6c2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d106      	bne.n	800f532 <tcp_listen_input+0x2a>
 800f524:	4b6b      	ldr	r3, [pc, #428]	; (800f6d4 <tcp_listen_input+0x1cc>)
 800f526:	f240 2281 	movw	r2, #641	; 0x281
 800f52a:	496b      	ldr	r1, [pc, #428]	; (800f6d8 <tcp_listen_input+0x1d0>)
 800f52c:	486b      	ldr	r0, [pc, #428]	; (800f6dc <tcp_listen_input+0x1d4>)
 800f52e:	f008 fbe3 	bl	8017cf8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f532:	4b67      	ldr	r3, [pc, #412]	; (800f6d0 <tcp_listen_input+0x1c8>)
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	f003 0310 	and.w	r3, r3, #16
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d019      	beq.n	800f572 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f53e:	4b68      	ldr	r3, [pc, #416]	; (800f6e0 <tcp_listen_input+0x1d8>)
 800f540:	6819      	ldr	r1, [r3, #0]
 800f542:	4b68      	ldr	r3, [pc, #416]	; (800f6e4 <tcp_listen_input+0x1dc>)
 800f544:	881b      	ldrh	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	4b67      	ldr	r3, [pc, #412]	; (800f6e8 <tcp_listen_input+0x1e0>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f54e:	4b67      	ldr	r3, [pc, #412]	; (800f6ec <tcp_listen_input+0x1e4>)
 800f550:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f552:	885b      	ldrh	r3, [r3, #2]
 800f554:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f556:	4a65      	ldr	r2, [pc, #404]	; (800f6ec <tcp_listen_input+0x1e4>)
 800f558:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f55a:	8812      	ldrh	r2, [r2, #0]
 800f55c:	b292      	uxth	r2, r2
 800f55e:	9202      	str	r2, [sp, #8]
 800f560:	9301      	str	r3, [sp, #4]
 800f562:	4b63      	ldr	r3, [pc, #396]	; (800f6f0 <tcp_listen_input+0x1e8>)
 800f564:	9300      	str	r3, [sp, #0]
 800f566:	4b63      	ldr	r3, [pc, #396]	; (800f6f4 <tcp_listen_input+0x1ec>)
 800f568:	4602      	mov	r2, r0
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f002 ff7e 	bl	801246c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f570:	e0a9      	b.n	800f6c6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f572:	4b57      	ldr	r3, [pc, #348]	; (800f6d0 <tcp_listen_input+0x1c8>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	f003 0302 	and.w	r3, r3, #2
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f000 80a3 	beq.w	800f6c6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	7d5b      	ldrb	r3, [r3, #21]
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff f929 	bl	800e7dc <tcp_alloc>
 800f58a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d111      	bne.n	800f5b6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	699b      	ldr	r3, [r3, #24]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00a      	beq.n	800f5b0 <tcp_listen_input+0xa8>
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	699b      	ldr	r3, [r3, #24]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	6910      	ldr	r0, [r2, #16]
 800f5a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	4798      	blx	r3
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	73bb      	strb	r3, [r7, #14]
      return;
 800f5ae:	e08b      	b.n	800f6c8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f5b0:	23f0      	movs	r3, #240	; 0xf0
 800f5b2:	73bb      	strb	r3, [r7, #14]
      return;
 800f5b4:	e088      	b.n	800f6c8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f5b6:	4b50      	ldr	r3, [pc, #320]	; (800f6f8 <tcp_listen_input+0x1f0>)
 800f5b8:	695a      	ldr	r2, [r3, #20]
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f5be:	4b4e      	ldr	r3, [pc, #312]	; (800f6f8 <tcp_listen_input+0x1f0>)
 800f5c0:	691a      	ldr	r2, [r3, #16]
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	8ada      	ldrh	r2, [r3, #22]
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f5ce:	4b47      	ldr	r3, [pc, #284]	; (800f6ec <tcp_listen_input+0x1e4>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	881b      	ldrh	r3, [r3, #0]
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	2203      	movs	r2, #3
 800f5de:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f5e0:	4b41      	ldr	r3, [pc, #260]	; (800f6e8 <tcp_listen_input+0x1e0>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	1c5a      	adds	r2, r3, #1
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5ee:	697b      	ldr	r3, [r7, #20]
 800f5f0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f5f2:	6978      	ldr	r0, [r7, #20]
 800f5f4:	f7ff fa5a 	bl	800eaac <tcp_next_iss>
 800f5f8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f606:	697b      	ldr	r3, [r7, #20]
 800f608:	693a      	ldr	r2, [r7, #16]
 800f60a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	693a      	ldr	r2, [r7, #16]
 800f610:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f612:	4b35      	ldr	r3, [pc, #212]	; (800f6e8 <tcp_listen_input+0x1e0>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	1e5a      	subs	r2, r3, #1
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	691a      	ldr	r2, [r3, #16]
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	687a      	ldr	r2, [r7, #4]
 800f628:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	7a5b      	ldrb	r3, [r3, #9]
 800f62e:	f003 030c 	and.w	r3, r3, #12
 800f632:	b2da      	uxtb	r2, r3
 800f634:	697b      	ldr	r3, [r7, #20]
 800f636:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7a1a      	ldrb	r2, [r3, #8]
 800f63c:	697b      	ldr	r3, [r7, #20]
 800f63e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f640:	4b2e      	ldr	r3, [pc, #184]	; (800f6fc <tcp_listen_input+0x1f4>)
 800f642:	681a      	ldr	r2, [r3, #0]
 800f644:	697b      	ldr	r3, [r7, #20]
 800f646:	60da      	str	r2, [r3, #12]
 800f648:	4a2c      	ldr	r2, [pc, #176]	; (800f6fc <tcp_listen_input+0x1f4>)
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	f003 f8cf 	bl	80127f0 <tcp_timer_needed>
 800f652:	4b2b      	ldr	r3, [pc, #172]	; (800f700 <tcp_listen_input+0x1f8>)
 800f654:	2201      	movs	r2, #1
 800f656:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f658:	6978      	ldr	r0, [r7, #20]
 800f65a:	f001 fd8d 	bl	8011178 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f65e:	4b23      	ldr	r3, [pc, #140]	; (800f6ec <tcp_listen_input+0x1e4>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	89db      	ldrh	r3, [r3, #14]
 800f664:	b29a      	uxth	r2, r3
 800f666:	697b      	ldr	r3, [r7, #20]
 800f668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f66c:	697b      	ldr	r3, [r7, #20]
 800f66e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	3304      	adds	r3, #4
 800f680:	4618      	mov	r0, r3
 800f682:	f006 fe83 	bl	801638c <ip4_route>
 800f686:	4601      	mov	r1, r0
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	3304      	adds	r3, #4
 800f68c:	461a      	mov	r2, r3
 800f68e:	4620      	mov	r0, r4
 800f690:	f7ff fa32 	bl	800eaf8 <tcp_eff_send_mss_netif>
 800f694:	4603      	mov	r3, r0
 800f696:	461a      	mov	r2, r3
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f69c:	2112      	movs	r1, #18
 800f69e:	6978      	ldr	r0, [r7, #20]
 800f6a0:	f002 f842 	bl	8011728 <tcp_enqueue_flags>
 800f6a4:	4603      	mov	r3, r0
 800f6a6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f6a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	6978      	ldr	r0, [r7, #20]
 800f6b4:	f7fe f980 	bl	800d9b8 <tcp_abandon>
      return;
 800f6b8:	e006      	b.n	800f6c8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f6ba:	6978      	ldr	r0, [r7, #20]
 800f6bc:	f002 f922 	bl	8011904 <tcp_output>
  return;
 800f6c0:	e001      	b.n	800f6c6 <tcp_listen_input+0x1be>
    return;
 800f6c2:	bf00      	nop
 800f6c4:	e000      	b.n	800f6c8 <tcp_listen_input+0x1c0>
  return;
 800f6c6:	bf00      	nop
}
 800f6c8:	371c      	adds	r7, #28
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd90      	pop	{r4, r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	24009ddc 	.word	0x24009ddc
 800f6d4:	08019f1c 	.word	0x08019f1c
 800f6d8:	0801a114 	.word	0x0801a114
 800f6dc:	08019f68 	.word	0x08019f68
 800f6e0:	24009dd4 	.word	0x24009dd4
 800f6e4:	24009dda 	.word	0x24009dda
 800f6e8:	24009dd0 	.word	0x24009dd0
 800f6ec:	24009dc0 	.word	0x24009dc0
 800f6f0:	2400a5ec 	.word	0x2400a5ec
 800f6f4:	2400a5f0 	.word	0x2400a5f0
 800f6f8:	2400a5dc 	.word	0x2400a5dc
 800f6fc:	2400d6bc 	.word	0x2400d6bc
 800f700:	2400d6b8 	.word	0x2400d6b8

0800f704 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af04      	add	r7, sp, #16
 800f70a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f70c:	4b2f      	ldr	r3, [pc, #188]	; (800f7cc <tcp_timewait_input+0xc8>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f003 0304 	and.w	r3, r3, #4
 800f714:	2b00      	cmp	r3, #0
 800f716:	d153      	bne.n	800f7c0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d106      	bne.n	800f72c <tcp_timewait_input+0x28>
 800f71e:	4b2c      	ldr	r3, [pc, #176]	; (800f7d0 <tcp_timewait_input+0xcc>)
 800f720:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f724:	492b      	ldr	r1, [pc, #172]	; (800f7d4 <tcp_timewait_input+0xd0>)
 800f726:	482c      	ldr	r0, [pc, #176]	; (800f7d8 <tcp_timewait_input+0xd4>)
 800f728:	f008 fae6 	bl	8017cf8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f72c:	4b27      	ldr	r3, [pc, #156]	; (800f7cc <tcp_timewait_input+0xc8>)
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	f003 0302 	and.w	r3, r3, #2
 800f734:	2b00      	cmp	r3, #0
 800f736:	d02a      	beq.n	800f78e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f738:	4b28      	ldr	r3, [pc, #160]	; (800f7dc <tcp_timewait_input+0xd8>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f740:	1ad3      	subs	r3, r2, r3
 800f742:	2b00      	cmp	r3, #0
 800f744:	db2d      	blt.n	800f7a2 <tcp_timewait_input+0x9e>
 800f746:	4b25      	ldr	r3, [pc, #148]	; (800f7dc <tcp_timewait_input+0xd8>)
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74e:	6879      	ldr	r1, [r7, #4]
 800f750:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f752:	440b      	add	r3, r1
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	2b00      	cmp	r3, #0
 800f758:	dc23      	bgt.n	800f7a2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f75a:	4b21      	ldr	r3, [pc, #132]	; (800f7e0 <tcp_timewait_input+0xdc>)
 800f75c:	6819      	ldr	r1, [r3, #0]
 800f75e:	4b21      	ldr	r3, [pc, #132]	; (800f7e4 <tcp_timewait_input+0xe0>)
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	4b1d      	ldr	r3, [pc, #116]	; (800f7dc <tcp_timewait_input+0xd8>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f76a:	4b1f      	ldr	r3, [pc, #124]	; (800f7e8 <tcp_timewait_input+0xe4>)
 800f76c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f76e:	885b      	ldrh	r3, [r3, #2]
 800f770:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f772:	4a1d      	ldr	r2, [pc, #116]	; (800f7e8 <tcp_timewait_input+0xe4>)
 800f774:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f776:	8812      	ldrh	r2, [r2, #0]
 800f778:	b292      	uxth	r2, r2
 800f77a:	9202      	str	r2, [sp, #8]
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	4b1b      	ldr	r3, [pc, #108]	; (800f7ec <tcp_timewait_input+0xe8>)
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	4b1b      	ldr	r3, [pc, #108]	; (800f7f0 <tcp_timewait_input+0xec>)
 800f784:	4602      	mov	r2, r0
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f002 fe70 	bl	801246c <tcp_rst>
      return;
 800f78c:	e01b      	b.n	800f7c6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f78e:	4b0f      	ldr	r3, [pc, #60]	; (800f7cc <tcp_timewait_input+0xc8>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	f003 0301 	and.w	r3, r3, #1
 800f796:	2b00      	cmp	r3, #0
 800f798:	d003      	beq.n	800f7a2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f79a:	4b16      	ldr	r3, [pc, #88]	; (800f7f4 <tcp_timewait_input+0xf0>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f7a2:	4b10      	ldr	r3, [pc, #64]	; (800f7e4 <tcp_timewait_input+0xe0>)
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00c      	beq.n	800f7c4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	8b5b      	ldrh	r3, [r3, #26]
 800f7ae:	f043 0302 	orr.w	r3, r3, #2
 800f7b2:	b29a      	uxth	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f002 f8a3 	bl	8011904 <tcp_output>
  }
  return;
 800f7be:	e001      	b.n	800f7c4 <tcp_timewait_input+0xc0>
    return;
 800f7c0:	bf00      	nop
 800f7c2:	e000      	b.n	800f7c6 <tcp_timewait_input+0xc2>
  return;
 800f7c4:	bf00      	nop
}
 800f7c6:	3708      	adds	r7, #8
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	bd80      	pop	{r7, pc}
 800f7cc:	24009ddc 	.word	0x24009ddc
 800f7d0:	08019f1c 	.word	0x08019f1c
 800f7d4:	0801a134 	.word	0x0801a134
 800f7d8:	08019f68 	.word	0x08019f68
 800f7dc:	24009dd0 	.word	0x24009dd0
 800f7e0:	24009dd4 	.word	0x24009dd4
 800f7e4:	24009dda 	.word	0x24009dda
 800f7e8:	24009dc0 	.word	0x24009dc0
 800f7ec:	2400a5ec 	.word	0x2400a5ec
 800f7f0:	2400a5f0 	.word	0x2400a5f0
 800f7f4:	2400d6c0 	.word	0x2400d6c0

0800f7f8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f7f8:	b590      	push	{r4, r7, lr}
 800f7fa:	b08d      	sub	sp, #52	; 0x34
 800f7fc:	af04      	add	r7, sp, #16
 800f7fe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f800:	2300      	movs	r3, #0
 800f802:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f804:	2300      	movs	r3, #0
 800f806:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d106      	bne.n	800f81c <tcp_process+0x24>
 800f80e:	4ba5      	ldr	r3, [pc, #660]	; (800faa4 <tcp_process+0x2ac>)
 800f810:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f814:	49a4      	ldr	r1, [pc, #656]	; (800faa8 <tcp_process+0x2b0>)
 800f816:	48a5      	ldr	r0, [pc, #660]	; (800faac <tcp_process+0x2b4>)
 800f818:	f008 fa6e 	bl	8017cf8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f81c:	4ba4      	ldr	r3, [pc, #656]	; (800fab0 <tcp_process+0x2b8>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b00      	cmp	r3, #0
 800f826:	d04e      	beq.n	800f8c6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	7d1b      	ldrb	r3, [r3, #20]
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d108      	bne.n	800f842 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f834:	4b9f      	ldr	r3, [pc, #636]	; (800fab4 <tcp_process+0x2bc>)
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d123      	bne.n	800f884 <tcp_process+0x8c>
        acceptable = 1;
 800f83c:	2301      	movs	r3, #1
 800f83e:	76fb      	strb	r3, [r7, #27]
 800f840:	e020      	b.n	800f884 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f846:	4b9c      	ldr	r3, [pc, #624]	; (800fab8 <tcp_process+0x2c0>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d102      	bne.n	800f854 <tcp_process+0x5c>
        acceptable = 1;
 800f84e:	2301      	movs	r3, #1
 800f850:	76fb      	strb	r3, [r7, #27]
 800f852:	e017      	b.n	800f884 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f854:	4b98      	ldr	r3, [pc, #608]	; (800fab8 <tcp_process+0x2c0>)
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	2b00      	cmp	r3, #0
 800f860:	db10      	blt.n	800f884 <tcp_process+0x8c>
 800f862:	4b95      	ldr	r3, [pc, #596]	; (800fab8 <tcp_process+0x2c0>)
 800f864:	681a      	ldr	r2, [r3, #0]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f86a:	6879      	ldr	r1, [r7, #4]
 800f86c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f86e:	440b      	add	r3, r1
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	2b00      	cmp	r3, #0
 800f874:	dc06      	bgt.n	800f884 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	8b5b      	ldrh	r3, [r3, #26]
 800f87a:	f043 0302 	orr.w	r3, r3, #2
 800f87e:	b29a      	uxth	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f884:	7efb      	ldrb	r3, [r7, #27]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d01b      	beq.n	800f8c2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	7d1b      	ldrb	r3, [r3, #20]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d106      	bne.n	800f8a0 <tcp_process+0xa8>
 800f892:	4b84      	ldr	r3, [pc, #528]	; (800faa4 <tcp_process+0x2ac>)
 800f894:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f898:	4988      	ldr	r1, [pc, #544]	; (800fabc <tcp_process+0x2c4>)
 800f89a:	4884      	ldr	r0, [pc, #528]	; (800faac <tcp_process+0x2b4>)
 800f89c:	f008 fa2c 	bl	8017cf8 <iprintf>
      recv_flags |= TF_RESET;
 800f8a0:	4b87      	ldr	r3, [pc, #540]	; (800fac0 <tcp_process+0x2c8>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f043 0308 	orr.w	r3, r3, #8
 800f8a8:	b2da      	uxtb	r2, r3
 800f8aa:	4b85      	ldr	r3, [pc, #532]	; (800fac0 <tcp_process+0x2c8>)
 800f8ac:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	8b5b      	ldrh	r3, [r3, #26]
 800f8b2:	f023 0301 	bic.w	r3, r3, #1
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f8bc:	f06f 030d 	mvn.w	r3, #13
 800f8c0:	e37a      	b.n	800ffb8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	e378      	b.n	800ffb8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f8c6:	4b7a      	ldr	r3, [pc, #488]	; (800fab0 <tcp_process+0x2b8>)
 800f8c8:	781b      	ldrb	r3, [r3, #0]
 800f8ca:	f003 0302 	and.w	r3, r3, #2
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d010      	beq.n	800f8f4 <tcp_process+0xfc>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	7d1b      	ldrb	r3, [r3, #20]
 800f8d6:	2b02      	cmp	r3, #2
 800f8d8:	d00c      	beq.n	800f8f4 <tcp_process+0xfc>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	7d1b      	ldrb	r3, [r3, #20]
 800f8de:	2b03      	cmp	r3, #3
 800f8e0:	d008      	beq.n	800f8f4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	8b5b      	ldrh	r3, [r3, #26]
 800f8e6:	f043 0302 	orr.w	r3, r3, #2
 800f8ea:	b29a      	uxth	r2, r3
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	e361      	b.n	800ffb8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8b5b      	ldrh	r3, [r3, #26]
 800f8f8:	f003 0310 	and.w	r3, r3, #16
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d103      	bne.n	800f908 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f900:	4b70      	ldr	r3, [pc, #448]	; (800fac4 <tcp_process+0x2cc>)
 800f902:	681a      	ldr	r2, [r3, #0]
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	2200      	movs	r2, #0
 800f90c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2200      	movs	r2, #0
 800f914:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f001 fc2d 	bl	8011178 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	7d1b      	ldrb	r3, [r3, #20]
 800f922:	3b02      	subs	r3, #2
 800f924:	2b07      	cmp	r3, #7
 800f926:	f200 8337 	bhi.w	800ff98 <tcp_process+0x7a0>
 800f92a:	a201      	add	r2, pc, #4	; (adr r2, 800f930 <tcp_process+0x138>)
 800f92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f930:	0800f951 	.word	0x0800f951
 800f934:	0800fb81 	.word	0x0800fb81
 800f938:	0800fcf9 	.word	0x0800fcf9
 800f93c:	0800fd23 	.word	0x0800fd23
 800f940:	0800fe47 	.word	0x0800fe47
 800f944:	0800fcf9 	.word	0x0800fcf9
 800f948:	0800fed3 	.word	0x0800fed3
 800f94c:	0800ff63 	.word	0x0800ff63
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f950:	4b57      	ldr	r3, [pc, #348]	; (800fab0 <tcp_process+0x2b8>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	f003 0310 	and.w	r3, r3, #16
 800f958:	2b00      	cmp	r3, #0
 800f95a:	f000 80e4 	beq.w	800fb26 <tcp_process+0x32e>
 800f95e:	4b54      	ldr	r3, [pc, #336]	; (800fab0 <tcp_process+0x2b8>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	f003 0302 	and.w	r3, r3, #2
 800f966:	2b00      	cmp	r3, #0
 800f968:	f000 80dd 	beq.w	800fb26 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	4b50      	ldr	r3, [pc, #320]	; (800fab4 <tcp_process+0x2bc>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	429a      	cmp	r2, r3
 800f978:	f040 80d5 	bne.w	800fb26 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f97c:	4b4e      	ldr	r3, [pc, #312]	; (800fab8 <tcp_process+0x2c0>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	1c5a      	adds	r2, r3, #1
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f98e:	4b49      	ldr	r3, [pc, #292]	; (800fab4 <tcp_process+0x2bc>)
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f996:	4b4c      	ldr	r3, [pc, #304]	; (800fac8 <tcp_process+0x2d0>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	89db      	ldrh	r3, [r3, #14]
 800f99c:	b29a      	uxth	r2, r3
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f9b0:	4b41      	ldr	r3, [pc, #260]	; (800fab8 <tcp_process+0x2c0>)
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	1e5a      	subs	r2, r3, #1
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2204      	movs	r2, #4
 800f9be:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3304      	adds	r3, #4
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f006 fcdf 	bl	801638c <ip4_route>
 800f9ce:	4601      	mov	r1, r0
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	3304      	adds	r3, #4
 800f9d4:	461a      	mov	r2, r3
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f7ff f88e 	bl	800eaf8 <tcp_eff_send_mss_netif>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	461a      	mov	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9e8:	009a      	lsls	r2, r3, #2
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9ee:	005b      	lsls	r3, r3, #1
 800f9f0:	f241 111c 	movw	r1, #4380	; 0x111c
 800f9f4:	428b      	cmp	r3, r1
 800f9f6:	bf38      	it	cc
 800f9f8:	460b      	movcc	r3, r1
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d204      	bcs.n	800fa08 <tcp_process+0x210>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa02:	009b      	lsls	r3, r3, #2
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	e00d      	b.n	800fa24 <tcp_process+0x22c>
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa0c:	005b      	lsls	r3, r3, #1
 800fa0e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d904      	bls.n	800fa20 <tcp_process+0x228>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fa1a:	005b      	lsls	r3, r3, #1
 800fa1c:	b29b      	uxth	r3, r3
 800fa1e:	e001      	b.n	800fa24 <tcp_process+0x22c>
 800fa20:	f241 131c 	movw	r3, #4380	; 0x111c
 800fa24:	687a      	ldr	r2, [r7, #4]
 800fa26:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <tcp_process+0x24a>
 800fa34:	4b1b      	ldr	r3, [pc, #108]	; (800faa4 <tcp_process+0x2ac>)
 800fa36:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800fa3a:	4924      	ldr	r1, [pc, #144]	; (800facc <tcp_process+0x2d4>)
 800fa3c:	481b      	ldr	r0, [pc, #108]	; (800faac <tcp_process+0x2b4>)
 800fa3e:	f008 f95b 	bl	8017cf8 <iprintf>
        --pcb->snd_queuelen;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fa48:	3b01      	subs	r3, #1
 800fa4a:	b29a      	uxth	r2, r3
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa56:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d111      	bne.n	800fa82 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa62:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d106      	bne.n	800fa78 <tcp_process+0x280>
 800fa6a:	4b0e      	ldr	r3, [pc, #56]	; (800faa4 <tcp_process+0x2ac>)
 800fa6c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800fa70:	4917      	ldr	r1, [pc, #92]	; (800fad0 <tcp_process+0x2d8>)
 800fa72:	480e      	ldr	r0, [pc, #56]	; (800faac <tcp_process+0x2b4>)
 800fa74:	f008 f940 	bl	8017cf8 <iprintf>
          pcb->unsent = rseg->next;
 800fa78:	69fb      	ldr	r3, [r7, #28]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa80:	e003      	b.n	800fa8a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800fa82:	69fb      	ldr	r3, [r7, #28]
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fa8a:	69f8      	ldr	r0, [r7, #28]
 800fa8c:	f7fe fd3d 	bl	800e50a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d11d      	bne.n	800fad4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa9e:	861a      	strh	r2, [r3, #48]	; 0x30
 800faa0:	e01f      	b.n	800fae2 <tcp_process+0x2ea>
 800faa2:	bf00      	nop
 800faa4:	08019f1c 	.word	0x08019f1c
 800faa8:	0801a154 	.word	0x0801a154
 800faac:	08019f68 	.word	0x08019f68
 800fab0:	24009ddc 	.word	0x24009ddc
 800fab4:	24009dd4 	.word	0x24009dd4
 800fab8:	24009dd0 	.word	0x24009dd0
 800fabc:	0801a170 	.word	0x0801a170
 800fac0:	24009ddd 	.word	0x24009ddd
 800fac4:	2400d6c0 	.word	0x2400d6c0
 800fac8:	24009dc0 	.word	0x24009dc0
 800facc:	0801a190 	.word	0x0801a190
 800fad0:	0801a1a8 	.word	0x0801a1a8
        } else {
          pcb->rtime = 0;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2200      	movs	r2, #0
 800fade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d00a      	beq.n	800fb02 <tcp_process+0x30a>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faf2:	687a      	ldr	r2, [r7, #4]
 800faf4:	6910      	ldr	r0, [r2, #16]
 800faf6:	2200      	movs	r2, #0
 800faf8:	6879      	ldr	r1, [r7, #4]
 800fafa:	4798      	blx	r3
 800fafc:	4603      	mov	r3, r0
 800fafe:	76bb      	strb	r3, [r7, #26]
 800fb00:	e001      	b.n	800fb06 <tcp_process+0x30e>
 800fb02:	2300      	movs	r3, #0
 800fb04:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fb06:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb0a:	f113 0f0d 	cmn.w	r3, #13
 800fb0e:	d102      	bne.n	800fb16 <tcp_process+0x31e>
          return ERR_ABRT;
 800fb10:	f06f 030c 	mvn.w	r3, #12
 800fb14:	e250      	b.n	800ffb8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8b5b      	ldrh	r3, [r3, #26]
 800fb1a:	f043 0302 	orr.w	r3, r3, #2
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fb24:	e23a      	b.n	800ff9c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fb26:	4b9d      	ldr	r3, [pc, #628]	; (800fd9c <tcp_process+0x5a4>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	f003 0310 	and.w	r3, r3, #16
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f000 8234 	beq.w	800ff9c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb34:	4b9a      	ldr	r3, [pc, #616]	; (800fda0 <tcp_process+0x5a8>)
 800fb36:	6819      	ldr	r1, [r3, #0]
 800fb38:	4b9a      	ldr	r3, [pc, #616]	; (800fda4 <tcp_process+0x5ac>)
 800fb3a:	881b      	ldrh	r3, [r3, #0]
 800fb3c:	461a      	mov	r2, r3
 800fb3e:	4b9a      	ldr	r3, [pc, #616]	; (800fda8 <tcp_process+0x5b0>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb44:	4b99      	ldr	r3, [pc, #612]	; (800fdac <tcp_process+0x5b4>)
 800fb46:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb48:	885b      	ldrh	r3, [r3, #2]
 800fb4a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb4c:	4a97      	ldr	r2, [pc, #604]	; (800fdac <tcp_process+0x5b4>)
 800fb4e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb50:	8812      	ldrh	r2, [r2, #0]
 800fb52:	b292      	uxth	r2, r2
 800fb54:	9202      	str	r2, [sp, #8]
 800fb56:	9301      	str	r3, [sp, #4]
 800fb58:	4b95      	ldr	r3, [pc, #596]	; (800fdb0 <tcp_process+0x5b8>)
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	4b95      	ldr	r3, [pc, #596]	; (800fdb4 <tcp_process+0x5bc>)
 800fb5e:	4602      	mov	r2, r0
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	f002 fc83 	bl	801246c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb6c:	2b05      	cmp	r3, #5
 800fb6e:	f200 8215 	bhi.w	800ff9c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	2200      	movs	r2, #0
 800fb76:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f002 fa4d 	bl	8012018 <tcp_rexmit_rto>
      break;
 800fb7e:	e20d      	b.n	800ff9c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fb80:	4b86      	ldr	r3, [pc, #536]	; (800fd9c <tcp_process+0x5a4>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	f003 0310 	and.w	r3, r3, #16
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f000 80a1 	beq.w	800fcd0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb8e:	4b84      	ldr	r3, [pc, #528]	; (800fda0 <tcp_process+0x5a8>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	3b01      	subs	r3, #1
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	db7e      	blt.n	800fc9c <tcp_process+0x4a4>
 800fb9e:	4b80      	ldr	r3, [pc, #512]	; (800fda0 <tcp_process+0x5a8>)
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fba6:	1ad3      	subs	r3, r2, r3
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	dc77      	bgt.n	800fc9c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	2204      	movs	r2, #4
 800fbb0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d102      	bne.n	800fbc0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fbba:	23fa      	movs	r3, #250	; 0xfa
 800fbbc:	76bb      	strb	r3, [r7, #26]
 800fbbe:	e01d      	b.n	800fbfc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d106      	bne.n	800fbd8 <tcp_process+0x3e0>
 800fbca:	4b7b      	ldr	r3, [pc, #492]	; (800fdb8 <tcp_process+0x5c0>)
 800fbcc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fbd0:	497a      	ldr	r1, [pc, #488]	; (800fdbc <tcp_process+0x5c4>)
 800fbd2:	487b      	ldr	r0, [pc, #492]	; (800fdc0 <tcp_process+0x5c8>)
 800fbd4:	f008 f890 	bl	8017cf8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbdc:	699b      	ldr	r3, [r3, #24]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00a      	beq.n	800fbf8 <tcp_process+0x400>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	6910      	ldr	r0, [r2, #16]
 800fbec:	2200      	movs	r2, #0
 800fbee:	6879      	ldr	r1, [r7, #4]
 800fbf0:	4798      	blx	r3
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	76bb      	strb	r3, [r7, #26]
 800fbf6:	e001      	b.n	800fbfc <tcp_process+0x404>
 800fbf8:	23f0      	movs	r3, #240	; 0xf0
 800fbfa:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fbfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d00a      	beq.n	800fc1a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fc04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc08:	f113 0f0d 	cmn.w	r3, #13
 800fc0c:	d002      	beq.n	800fc14 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7fd ff90 	bl	800db34 <tcp_abort>
            }
            return ERR_ABRT;
 800fc14:	f06f 030c 	mvn.w	r3, #12
 800fc18:	e1ce      	b.n	800ffb8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f000 fae0 	bl	80101e0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fc20:	4b68      	ldr	r3, [pc, #416]	; (800fdc4 <tcp_process+0x5cc>)
 800fc22:	881b      	ldrh	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d005      	beq.n	800fc34 <tcp_process+0x43c>
            recv_acked--;
 800fc28:	4b66      	ldr	r3, [pc, #408]	; (800fdc4 <tcp_process+0x5cc>)
 800fc2a:	881b      	ldrh	r3, [r3, #0]
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	4b64      	ldr	r3, [pc, #400]	; (800fdc4 <tcp_process+0x5cc>)
 800fc32:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc38:	009a      	lsls	r2, r3, #2
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc3e:	005b      	lsls	r3, r3, #1
 800fc40:	f241 111c 	movw	r1, #4380	; 0x111c
 800fc44:	428b      	cmp	r3, r1
 800fc46:	bf38      	it	cc
 800fc48:	460b      	movcc	r3, r1
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	d204      	bcs.n	800fc58 <tcp_process+0x460>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	e00d      	b.n	800fc74 <tcp_process+0x47c>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc5c:	005b      	lsls	r3, r3, #1
 800fc5e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d904      	bls.n	800fc70 <tcp_process+0x478>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	b29b      	uxth	r3, r3
 800fc6e:	e001      	b.n	800fc74 <tcp_process+0x47c>
 800fc70:	f241 131c 	movw	r3, #4380	; 0x111c
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fc7a:	4b53      	ldr	r3, [pc, #332]	; (800fdc8 <tcp_process+0x5d0>)
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	f003 0320 	and.w	r3, r3, #32
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d037      	beq.n	800fcf6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	8b5b      	ldrh	r3, [r3, #26]
 800fc8a:	f043 0302 	orr.w	r3, r3, #2
 800fc8e:	b29a      	uxth	r2, r3
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2207      	movs	r2, #7
 800fc98:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fc9a:	e02c      	b.n	800fcf6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc9c:	4b40      	ldr	r3, [pc, #256]	; (800fda0 <tcp_process+0x5a8>)
 800fc9e:	6819      	ldr	r1, [r3, #0]
 800fca0:	4b40      	ldr	r3, [pc, #256]	; (800fda4 <tcp_process+0x5ac>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	461a      	mov	r2, r3
 800fca6:	4b40      	ldr	r3, [pc, #256]	; (800fda8 <tcp_process+0x5b0>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcac:	4b3f      	ldr	r3, [pc, #252]	; (800fdac <tcp_process+0x5b4>)
 800fcae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb0:	885b      	ldrh	r3, [r3, #2]
 800fcb2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb4:	4a3d      	ldr	r2, [pc, #244]	; (800fdac <tcp_process+0x5b4>)
 800fcb6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb8:	8812      	ldrh	r2, [r2, #0]
 800fcba:	b292      	uxth	r2, r2
 800fcbc:	9202      	str	r2, [sp, #8]
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	4b3b      	ldr	r3, [pc, #236]	; (800fdb0 <tcp_process+0x5b8>)
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	4b3b      	ldr	r3, [pc, #236]	; (800fdb4 <tcp_process+0x5bc>)
 800fcc6:	4602      	mov	r2, r0
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f002 fbcf 	bl	801246c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fcce:	e167      	b.n	800ffa0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fcd0:	4b32      	ldr	r3, [pc, #200]	; (800fd9c <tcp_process+0x5a4>)
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	f003 0302 	and.w	r3, r3, #2
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	f000 8161 	beq.w	800ffa0 <tcp_process+0x7a8>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fce2:	1e5a      	subs	r2, r3, #1
 800fce4:	4b30      	ldr	r3, [pc, #192]	; (800fda8 <tcp_process+0x5b0>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	429a      	cmp	r2, r3
 800fcea:	f040 8159 	bne.w	800ffa0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fcee:	6878      	ldr	r0, [r7, #4]
 800fcf0:	f002 f9b4 	bl	801205c <tcp_rexmit>
      break;
 800fcf4:	e154      	b.n	800ffa0 <tcp_process+0x7a8>
 800fcf6:	e153      	b.n	800ffa0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f000 fa71 	bl	80101e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fcfe:	4b32      	ldr	r3, [pc, #200]	; (800fdc8 <tcp_process+0x5d0>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	f003 0320 	and.w	r3, r3, #32
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	f000 814c 	beq.w	800ffa4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	8b5b      	ldrh	r3, [r3, #26]
 800fd10:	f043 0302 	orr.w	r3, r3, #2
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2207      	movs	r2, #7
 800fd1e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fd20:	e140      	b.n	800ffa4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f000 fa5c 	bl	80101e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fd28:	4b27      	ldr	r3, [pc, #156]	; (800fdc8 <tcp_process+0x5d0>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	f003 0320 	and.w	r3, r3, #32
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d071      	beq.n	800fe18 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd34:	4b19      	ldr	r3, [pc, #100]	; (800fd9c <tcp_process+0x5a4>)
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	f003 0310 	and.w	r3, r3, #16
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d060      	beq.n	800fe02 <tcp_process+0x60a>
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd44:	4b16      	ldr	r3, [pc, #88]	; (800fda0 <tcp_process+0x5a8>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d15a      	bne.n	800fe02 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d156      	bne.n	800fe02 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	8b5b      	ldrh	r3, [r3, #26]
 800fd58:	f043 0302 	orr.w	r3, r3, #2
 800fd5c:	b29a      	uxth	r2, r3
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7fe fdbe 	bl	800e8e4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fd68:	4b18      	ldr	r3, [pc, #96]	; (800fdcc <tcp_process+0x5d4>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	687a      	ldr	r2, [r7, #4]
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d105      	bne.n	800fd7e <tcp_process+0x586>
 800fd72:	4b16      	ldr	r3, [pc, #88]	; (800fdcc <tcp_process+0x5d4>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	4a14      	ldr	r2, [pc, #80]	; (800fdcc <tcp_process+0x5d4>)
 800fd7a:	6013      	str	r3, [r2, #0]
 800fd7c:	e02e      	b.n	800fddc <tcp_process+0x5e4>
 800fd7e:	4b13      	ldr	r3, [pc, #76]	; (800fdcc <tcp_process+0x5d4>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	617b      	str	r3, [r7, #20]
 800fd84:	e027      	b.n	800fdd6 <tcp_process+0x5de>
 800fd86:	697b      	ldr	r3, [r7, #20]
 800fd88:	68db      	ldr	r3, [r3, #12]
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d11f      	bne.n	800fdd0 <tcp_process+0x5d8>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	68da      	ldr	r2, [r3, #12]
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	60da      	str	r2, [r3, #12]
 800fd98:	e020      	b.n	800fddc <tcp_process+0x5e4>
 800fd9a:	bf00      	nop
 800fd9c:	24009ddc 	.word	0x24009ddc
 800fda0:	24009dd4 	.word	0x24009dd4
 800fda4:	24009dda 	.word	0x24009dda
 800fda8:	24009dd0 	.word	0x24009dd0
 800fdac:	24009dc0 	.word	0x24009dc0
 800fdb0:	2400a5ec 	.word	0x2400a5ec
 800fdb4:	2400a5f0 	.word	0x2400a5f0
 800fdb8:	08019f1c 	.word	0x08019f1c
 800fdbc:	0801a1bc 	.word	0x0801a1bc
 800fdc0:	08019f68 	.word	0x08019f68
 800fdc4:	24009dd8 	.word	0x24009dd8
 800fdc8:	24009ddd 	.word	0x24009ddd
 800fdcc:	2400d6bc 	.word	0x2400d6bc
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	68db      	ldr	r3, [r3, #12]
 800fdd4:	617b      	str	r3, [r7, #20]
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d1d4      	bne.n	800fd86 <tcp_process+0x58e>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2200      	movs	r2, #0
 800fde0:	60da      	str	r2, [r3, #12]
 800fde2:	4b77      	ldr	r3, [pc, #476]	; (800ffc0 <tcp_process+0x7c8>)
 800fde4:	2201      	movs	r2, #1
 800fde6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	220a      	movs	r2, #10
 800fdec:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fdee:	4b75      	ldr	r3, [pc, #468]	; (800ffc4 <tcp_process+0x7cc>)
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	60da      	str	r2, [r3, #12]
 800fdf6:	4a73      	ldr	r2, [pc, #460]	; (800ffc4 <tcp_process+0x7cc>)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6013      	str	r3, [r2, #0]
 800fdfc:	f002 fcf8 	bl	80127f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fe00:	e0d2      	b.n	800ffa8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8b5b      	ldrh	r3, [r3, #26]
 800fe06:	f043 0302 	orr.w	r3, r3, #2
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2208      	movs	r2, #8
 800fe14:	751a      	strb	r2, [r3, #20]
      break;
 800fe16:	e0c7      	b.n	800ffa8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe18:	4b6b      	ldr	r3, [pc, #428]	; (800ffc8 <tcp_process+0x7d0>)
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	f003 0310 	and.w	r3, r3, #16
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	f000 80c1 	beq.w	800ffa8 <tcp_process+0x7b0>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe2a:	4b68      	ldr	r3, [pc, #416]	; (800ffcc <tcp_process+0x7d4>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	f040 80ba 	bne.w	800ffa8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	f040 80b5 	bne.w	800ffa8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2206      	movs	r2, #6
 800fe42:	751a      	strb	r2, [r3, #20]
      break;
 800fe44:	e0b0      	b.n	800ffa8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 f9ca 	bl	80101e0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fe4c:	4b60      	ldr	r3, [pc, #384]	; (800ffd0 <tcp_process+0x7d8>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f003 0320 	and.w	r3, r3, #32
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	f000 80a9 	beq.w	800ffac <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8b5b      	ldrh	r3, [r3, #26]
 800fe5e:	f043 0302 	orr.w	r3, r3, #2
 800fe62:	b29a      	uxth	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7fe fd3b 	bl	800e8e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe6e:	4b59      	ldr	r3, [pc, #356]	; (800ffd4 <tcp_process+0x7dc>)
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d105      	bne.n	800fe84 <tcp_process+0x68c>
 800fe78:	4b56      	ldr	r3, [pc, #344]	; (800ffd4 <tcp_process+0x7dc>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	4a55      	ldr	r2, [pc, #340]	; (800ffd4 <tcp_process+0x7dc>)
 800fe80:	6013      	str	r3, [r2, #0]
 800fe82:	e013      	b.n	800feac <tcp_process+0x6b4>
 800fe84:	4b53      	ldr	r3, [pc, #332]	; (800ffd4 <tcp_process+0x7dc>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	613b      	str	r3, [r7, #16]
 800fe8a:	e00c      	b.n	800fea6 <tcp_process+0x6ae>
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	687a      	ldr	r2, [r7, #4]
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d104      	bne.n	800fea0 <tcp_process+0x6a8>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	68da      	ldr	r2, [r3, #12]
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	60da      	str	r2, [r3, #12]
 800fe9e:	e005      	b.n	800feac <tcp_process+0x6b4>
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	613b      	str	r3, [r7, #16]
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1ef      	bne.n	800fe8c <tcp_process+0x694>
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	60da      	str	r2, [r3, #12]
 800feb2:	4b43      	ldr	r3, [pc, #268]	; (800ffc0 <tcp_process+0x7c8>)
 800feb4:	2201      	movs	r2, #1
 800feb6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	220a      	movs	r2, #10
 800febc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800febe:	4b41      	ldr	r3, [pc, #260]	; (800ffc4 <tcp_process+0x7cc>)
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	60da      	str	r2, [r3, #12]
 800fec6:	4a3f      	ldr	r2, [pc, #252]	; (800ffc4 <tcp_process+0x7cc>)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6013      	str	r3, [r2, #0]
 800fecc:	f002 fc90 	bl	80127f0 <tcp_timer_needed>
      }
      break;
 800fed0:	e06c      	b.n	800ffac <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 f984 	bl	80101e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fed8:	4b3b      	ldr	r3, [pc, #236]	; (800ffc8 <tcp_process+0x7d0>)
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	f003 0310 	and.w	r3, r3, #16
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d065      	beq.n	800ffb0 <tcp_process+0x7b8>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fee8:	4b38      	ldr	r3, [pc, #224]	; (800ffcc <tcp_process+0x7d4>)
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	429a      	cmp	r2, r3
 800feee:	d15f      	bne.n	800ffb0 <tcp_process+0x7b8>
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d15b      	bne.n	800ffb0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f7fe fcf3 	bl	800e8e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fefe:	4b35      	ldr	r3, [pc, #212]	; (800ffd4 <tcp_process+0x7dc>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	687a      	ldr	r2, [r7, #4]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d105      	bne.n	800ff14 <tcp_process+0x71c>
 800ff08:	4b32      	ldr	r3, [pc, #200]	; (800ffd4 <tcp_process+0x7dc>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	4a31      	ldr	r2, [pc, #196]	; (800ffd4 <tcp_process+0x7dc>)
 800ff10:	6013      	str	r3, [r2, #0]
 800ff12:	e013      	b.n	800ff3c <tcp_process+0x744>
 800ff14:	4b2f      	ldr	r3, [pc, #188]	; (800ffd4 <tcp_process+0x7dc>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	60fb      	str	r3, [r7, #12]
 800ff1a:	e00c      	b.n	800ff36 <tcp_process+0x73e>
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d104      	bne.n	800ff30 <tcp_process+0x738>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68da      	ldr	r2, [r3, #12]
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	60da      	str	r2, [r3, #12]
 800ff2e:	e005      	b.n	800ff3c <tcp_process+0x744>
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d1ef      	bne.n	800ff1c <tcp_process+0x724>
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	60da      	str	r2, [r3, #12]
 800ff42:	4b1f      	ldr	r3, [pc, #124]	; (800ffc0 <tcp_process+0x7c8>)
 800ff44:	2201      	movs	r2, #1
 800ff46:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	220a      	movs	r2, #10
 800ff4c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ff4e:	4b1d      	ldr	r3, [pc, #116]	; (800ffc4 <tcp_process+0x7cc>)
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	60da      	str	r2, [r3, #12]
 800ff56:	4a1b      	ldr	r2, [pc, #108]	; (800ffc4 <tcp_process+0x7cc>)
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6013      	str	r3, [r2, #0]
 800ff5c:	f002 fc48 	bl	80127f0 <tcp_timer_needed>
      }
      break;
 800ff60:	e026      	b.n	800ffb0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ff62:	6878      	ldr	r0, [r7, #4]
 800ff64:	f000 f93c 	bl	80101e0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ff68:	4b17      	ldr	r3, [pc, #92]	; (800ffc8 <tcp_process+0x7d0>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f003 0310 	and.w	r3, r3, #16
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d01f      	beq.n	800ffb4 <tcp_process+0x7bc>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff78:	4b14      	ldr	r3, [pc, #80]	; (800ffcc <tcp_process+0x7d4>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d119      	bne.n	800ffb4 <tcp_process+0x7bc>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d115      	bne.n	800ffb4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ff88:	4b11      	ldr	r3, [pc, #68]	; (800ffd0 <tcp_process+0x7d8>)
 800ff8a:	781b      	ldrb	r3, [r3, #0]
 800ff8c:	f043 0310 	orr.w	r3, r3, #16
 800ff90:	b2da      	uxtb	r2, r3
 800ff92:	4b0f      	ldr	r3, [pc, #60]	; (800ffd0 <tcp_process+0x7d8>)
 800ff94:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ff96:	e00d      	b.n	800ffb4 <tcp_process+0x7bc>
    default:
      break;
 800ff98:	bf00      	nop
 800ff9a:	e00c      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ff9c:	bf00      	nop
 800ff9e:	e00a      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ffa0:	bf00      	nop
 800ffa2:	e008      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ffa4:	bf00      	nop
 800ffa6:	e006      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ffa8:	bf00      	nop
 800ffaa:	e004      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ffac:	bf00      	nop
 800ffae:	e002      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ffb0:	bf00      	nop
 800ffb2:	e000      	b.n	800ffb6 <tcp_process+0x7be>
      break;
 800ffb4:	bf00      	nop
  }
  return ERR_OK;
 800ffb6:	2300      	movs	r3, #0
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3724      	adds	r7, #36	; 0x24
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd90      	pop	{r4, r7, pc}
 800ffc0:	2400d6b8 	.word	0x2400d6b8
 800ffc4:	2400d6cc 	.word	0x2400d6cc
 800ffc8:	24009ddc 	.word	0x24009ddc
 800ffcc:	24009dd4 	.word	0x24009dd4
 800ffd0:	24009ddd 	.word	0x24009ddd
 800ffd4:	2400d6bc 	.word	0x2400d6bc

0800ffd8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ffd8:	b590      	push	{r4, r7, lr}
 800ffda:	b085      	sub	sp, #20
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d106      	bne.n	800fff6 <tcp_oos_insert_segment+0x1e>
 800ffe8:	4b3b      	ldr	r3, [pc, #236]	; (80100d8 <tcp_oos_insert_segment+0x100>)
 800ffea:	f240 421f 	movw	r2, #1055	; 0x41f
 800ffee:	493b      	ldr	r1, [pc, #236]	; (80100dc <tcp_oos_insert_segment+0x104>)
 800fff0:	483b      	ldr	r0, [pc, #236]	; (80100e0 <tcp_oos_insert_segment+0x108>)
 800fff2:	f007 fe81 	bl	8017cf8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	68db      	ldr	r3, [r3, #12]
 800fffa:	899b      	ldrh	r3, [r3, #12]
 800fffc:	b29b      	uxth	r3, r3
 800fffe:	4618      	mov	r0, r3
 8010000:	f7fb fb3e 	bl	800b680 <lwip_htons>
 8010004:	4603      	mov	r3, r0
 8010006:	b2db      	uxtb	r3, r3
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	2b00      	cmp	r3, #0
 801000e:	d028      	beq.n	8010062 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010010:	6838      	ldr	r0, [r7, #0]
 8010012:	f7fe fa65 	bl	800e4e0 <tcp_segs_free>
    next = NULL;
 8010016:	2300      	movs	r3, #0
 8010018:	603b      	str	r3, [r7, #0]
 801001a:	e056      	b.n	80100ca <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	899b      	ldrh	r3, [r3, #12]
 8010022:	b29b      	uxth	r3, r3
 8010024:	4618      	mov	r0, r3
 8010026:	f7fb fb2b 	bl	800b680 <lwip_htons>
 801002a:	4603      	mov	r3, r0
 801002c:	b2db      	uxtb	r3, r3
 801002e:	f003 0301 	and.w	r3, r3, #1
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00d      	beq.n	8010052 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	899b      	ldrh	r3, [r3, #12]
 801003c:	b29c      	uxth	r4, r3
 801003e:	2001      	movs	r0, #1
 8010040:	f7fb fb1e 	bl	800b680 <lwip_htons>
 8010044:	4603      	mov	r3, r0
 8010046:	461a      	mov	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	68db      	ldr	r3, [r3, #12]
 801004c:	4322      	orrs	r2, r4
 801004e:	b292      	uxth	r2, r2
 8010050:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7fe fa54 	bl	800e50a <tcp_seg_free>
    while (next &&
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d00e      	beq.n	8010086 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	891b      	ldrh	r3, [r3, #8]
 801006c:	461a      	mov	r2, r3
 801006e:	4b1d      	ldr	r3, [pc, #116]	; (80100e4 <tcp_oos_insert_segment+0x10c>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	441a      	add	r2, r3
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	6839      	ldr	r1, [r7, #0]
 801007c:	8909      	ldrh	r1, [r1, #8]
 801007e:	440b      	add	r3, r1
 8010080:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010082:	2b00      	cmp	r3, #0
 8010084:	daca      	bge.n	801001c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d01e      	beq.n	80100ca <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	891b      	ldrh	r3, [r3, #8]
 8010090:	461a      	mov	r2, r3
 8010092:	4b14      	ldr	r3, [pc, #80]	; (80100e4 <tcp_oos_insert_segment+0x10c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	441a      	add	r2, r3
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	1ad3      	subs	r3, r2, r3
    if (next &&
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	dd12      	ble.n	80100ca <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	4b0d      	ldr	r3, [pc, #52]	; (80100e4 <tcp_oos_insert_segment+0x10c>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685a      	ldr	r2, [r3, #4]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	891b      	ldrh	r3, [r3, #8]
 80100c2:	4619      	mov	r1, r3
 80100c4:	4610      	mov	r0, r2
 80100c6:	f7fc fe0b 	bl	800cce0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	683a      	ldr	r2, [r7, #0]
 80100ce:	601a      	str	r2, [r3, #0]
}
 80100d0:	bf00      	nop
 80100d2:	3714      	adds	r7, #20
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd90      	pop	{r4, r7, pc}
 80100d8:	08019f1c 	.word	0x08019f1c
 80100dc:	0801a1dc 	.word	0x0801a1dc
 80100e0:	08019f68 	.word	0x08019f68
 80100e4:	24009dd0 	.word	0x24009dd0

080100e8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80100e8:	b5b0      	push	{r4, r5, r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	60b9      	str	r1, [r7, #8]
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80100f6:	e03e      	b.n	8010176 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	685b      	ldr	r3, [r3, #4]
 8010106:	4618      	mov	r0, r3
 8010108:	f7fc fffe 	bl	800d108 <pbuf_clen>
 801010c:	4603      	mov	r3, r0
 801010e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010116:	8a7a      	ldrh	r2, [r7, #18]
 8010118:	429a      	cmp	r2, r3
 801011a:	d906      	bls.n	801012a <tcp_free_acked_segments+0x42>
 801011c:	4b2a      	ldr	r3, [pc, #168]	; (80101c8 <tcp_free_acked_segments+0xe0>)
 801011e:	f240 4257 	movw	r2, #1111	; 0x457
 8010122:	492a      	ldr	r1, [pc, #168]	; (80101cc <tcp_free_acked_segments+0xe4>)
 8010124:	482a      	ldr	r0, [pc, #168]	; (80101d0 <tcp_free_acked_segments+0xe8>)
 8010126:	f007 fde7 	bl	8017cf8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010130:	8a7b      	ldrh	r3, [r7, #18]
 8010132:	1ad3      	subs	r3, r2, r3
 8010134:	b29a      	uxth	r2, r3
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801013c:	697b      	ldr	r3, [r7, #20]
 801013e:	891a      	ldrh	r2, [r3, #8]
 8010140:	4b24      	ldr	r3, [pc, #144]	; (80101d4 <tcp_free_acked_segments+0xec>)
 8010142:	881b      	ldrh	r3, [r3, #0]
 8010144:	4413      	add	r3, r2
 8010146:	b29a      	uxth	r2, r3
 8010148:	4b22      	ldr	r3, [pc, #136]	; (80101d4 <tcp_free_acked_segments+0xec>)
 801014a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801014c:	6978      	ldr	r0, [r7, #20]
 801014e:	f7fe f9dc 	bl	800e50a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00c      	beq.n	8010176 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <tcp_free_acked_segments+0x8e>
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d106      	bne.n	8010176 <tcp_free_acked_segments+0x8e>
 8010168:	4b17      	ldr	r3, [pc, #92]	; (80101c8 <tcp_free_acked_segments+0xe0>)
 801016a:	f240 4261 	movw	r2, #1121	; 0x461
 801016e:	491a      	ldr	r1, [pc, #104]	; (80101d8 <tcp_free_acked_segments+0xf0>)
 8010170:	4817      	ldr	r0, [pc, #92]	; (80101d0 <tcp_free_acked_segments+0xe8>)
 8010172:	f007 fdc1 	bl	8017cf8 <iprintf>
  while (seg_list != NULL &&
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d020      	beq.n	80101be <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	685b      	ldr	r3, [r3, #4]
 8010182:	4618      	mov	r0, r3
 8010184:	f7fb fa91 	bl	800b6aa <lwip_htonl>
 8010188:	4604      	mov	r4, r0
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	891b      	ldrh	r3, [r3, #8]
 801018e:	461d      	mov	r5, r3
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	899b      	ldrh	r3, [r3, #12]
 8010196:	b29b      	uxth	r3, r3
 8010198:	4618      	mov	r0, r3
 801019a:	f7fb fa71 	bl	800b680 <lwip_htons>
 801019e:	4603      	mov	r3, r0
 80101a0:	b2db      	uxtb	r3, r3
 80101a2:	f003 0303 	and.w	r3, r3, #3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d001      	beq.n	80101ae <tcp_free_acked_segments+0xc6>
 80101aa:	2301      	movs	r3, #1
 80101ac:	e000      	b.n	80101b0 <tcp_free_acked_segments+0xc8>
 80101ae:	2300      	movs	r3, #0
 80101b0:	442b      	add	r3, r5
 80101b2:	18e2      	adds	r2, r4, r3
 80101b4:	4b09      	ldr	r3, [pc, #36]	; (80101dc <tcp_free_acked_segments+0xf4>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	dd9c      	ble.n	80100f8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80101be:	68bb      	ldr	r3, [r7, #8]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3718      	adds	r7, #24
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bdb0      	pop	{r4, r5, r7, pc}
 80101c8:	08019f1c 	.word	0x08019f1c
 80101cc:	0801a204 	.word	0x0801a204
 80101d0:	08019f68 	.word	0x08019f68
 80101d4:	24009dd8 	.word	0x24009dd8
 80101d8:	0801a22c 	.word	0x0801a22c
 80101dc:	24009dd4 	.word	0x24009dd4

080101e0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80101e0:	b5b0      	push	{r4, r5, r7, lr}
 80101e2:	b094      	sub	sp, #80	; 0x50
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d106      	bne.n	8010200 <tcp_receive+0x20>
 80101f2:	4ba6      	ldr	r3, [pc, #664]	; (801048c <tcp_receive+0x2ac>)
 80101f4:	f240 427b 	movw	r2, #1147	; 0x47b
 80101f8:	49a5      	ldr	r1, [pc, #660]	; (8010490 <tcp_receive+0x2b0>)
 80101fa:	48a6      	ldr	r0, [pc, #664]	; (8010494 <tcp_receive+0x2b4>)
 80101fc:	f007 fd7c 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	7d1b      	ldrb	r3, [r3, #20]
 8010204:	2b03      	cmp	r3, #3
 8010206:	d806      	bhi.n	8010216 <tcp_receive+0x36>
 8010208:	4ba0      	ldr	r3, [pc, #640]	; (801048c <tcp_receive+0x2ac>)
 801020a:	f240 427c 	movw	r2, #1148	; 0x47c
 801020e:	49a2      	ldr	r1, [pc, #648]	; (8010498 <tcp_receive+0x2b8>)
 8010210:	48a0      	ldr	r0, [pc, #640]	; (8010494 <tcp_receive+0x2b4>)
 8010212:	f007 fd71 	bl	8017cf8 <iprintf>

  if (flags & TCP_ACK) {
 8010216:	4ba1      	ldr	r3, [pc, #644]	; (801049c <tcp_receive+0x2bc>)
 8010218:	781b      	ldrb	r3, [r3, #0]
 801021a:	f003 0310 	and.w	r3, r3, #16
 801021e:	2b00      	cmp	r3, #0
 8010220:	f000 8263 	beq.w	80106ea <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801022a:	461a      	mov	r2, r3
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010230:	4413      	add	r3, r2
 8010232:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010238:	4b99      	ldr	r3, [pc, #612]	; (80104a0 <tcp_receive+0x2c0>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	1ad3      	subs	r3, r2, r3
 801023e:	2b00      	cmp	r3, #0
 8010240:	db1b      	blt.n	801027a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010246:	4b96      	ldr	r3, [pc, #600]	; (80104a0 <tcp_receive+0x2c0>)
 8010248:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801024a:	429a      	cmp	r2, r3
 801024c:	d106      	bne.n	801025c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010252:	4b94      	ldr	r3, [pc, #592]	; (80104a4 <tcp_receive+0x2c4>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	1ad3      	subs	r3, r2, r3
 8010258:	2b00      	cmp	r3, #0
 801025a:	db0e      	blt.n	801027a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010260:	4b90      	ldr	r3, [pc, #576]	; (80104a4 <tcp_receive+0x2c4>)
 8010262:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010264:	429a      	cmp	r2, r3
 8010266:	d125      	bne.n	80102b4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010268:	4b8f      	ldr	r3, [pc, #572]	; (80104a8 <tcp_receive+0x2c8>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	89db      	ldrh	r3, [r3, #14]
 801026e:	b29a      	uxth	r2, r3
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010276:	429a      	cmp	r2, r3
 8010278:	d91c      	bls.n	80102b4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801027a:	4b8b      	ldr	r3, [pc, #556]	; (80104a8 <tcp_receive+0x2c8>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	89db      	ldrh	r3, [r3, #14]
 8010280:	b29a      	uxth	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010294:	429a      	cmp	r2, r3
 8010296:	d205      	bcs.n	80102a4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80102a4:	4b7e      	ldr	r3, [pc, #504]	; (80104a0 <tcp_receive+0x2c0>)
 80102a6:	681a      	ldr	r2, [r3, #0]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80102ac:	4b7d      	ldr	r3, [pc, #500]	; (80104a4 <tcp_receive+0x2c4>)
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80102b4:	4b7b      	ldr	r3, [pc, #492]	; (80104a4 <tcp_receive+0x2c4>)
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102bc:	1ad3      	subs	r3, r2, r3
 80102be:	2b00      	cmp	r3, #0
 80102c0:	dc58      	bgt.n	8010374 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80102c2:	4b7a      	ldr	r3, [pc, #488]	; (80104ac <tcp_receive+0x2cc>)
 80102c4:	881b      	ldrh	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d14b      	bne.n	8010362 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80102d4:	4413      	add	r3, r2
 80102d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102d8:	429a      	cmp	r2, r3
 80102da:	d142      	bne.n	8010362 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	db3d      	blt.n	8010362 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102ea:	4b6e      	ldr	r3, [pc, #440]	; (80104a4 <tcp_receive+0x2c4>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d137      	bne.n	8010362 <tcp_receive+0x182>
              found_dupack = 1;
 80102f2:	2301      	movs	r3, #1
 80102f4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102fc:	2bff      	cmp	r3, #255	; 0xff
 80102fe:	d007      	beq.n	8010310 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010306:	3301      	adds	r3, #1
 8010308:	b2da      	uxtb	r2, r3
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010316:	2b03      	cmp	r3, #3
 8010318:	d91b      	bls.n	8010352 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010324:	4413      	add	r3, r2
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801032e:	429a      	cmp	r2, r3
 8010330:	d30a      	bcc.n	8010348 <tcp_receive+0x168>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801033c:	4413      	add	r3, r2
 801033e:	b29a      	uxth	r2, r3
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010346:	e004      	b.n	8010352 <tcp_receive+0x172>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801034e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010358:	2b02      	cmp	r3, #2
 801035a:	d902      	bls.n	8010362 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f001 fee9 	bl	8012134 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010364:	2b00      	cmp	r3, #0
 8010366:	f040 8160 	bne.w	801062a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2200      	movs	r2, #0
 801036e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010372:	e15a      	b.n	801062a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010374:	4b4b      	ldr	r3, [pc, #300]	; (80104a4 <tcp_receive+0x2c4>)
 8010376:	681a      	ldr	r2, [r3, #0]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801037c:	1ad3      	subs	r3, r2, r3
 801037e:	3b01      	subs	r3, #1
 8010380:	2b00      	cmp	r3, #0
 8010382:	f2c0 814d 	blt.w	8010620 <tcp_receive+0x440>
 8010386:	4b47      	ldr	r3, [pc, #284]	; (80104a4 <tcp_receive+0x2c4>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	f300 8145 	bgt.w	8010620 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	8b5b      	ldrh	r3, [r3, #26]
 801039a:	f003 0304 	and.w	r3, r3, #4
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d010      	beq.n	80103c4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	8b5b      	ldrh	r3, [r3, #26]
 80103a6:	f023 0304 	bic.w	r3, r3, #4
 80103aa:	b29a      	uxth	r2, r3
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2200      	movs	r2, #0
 80103c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2200      	movs	r2, #0
 80103c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80103d2:	10db      	asrs	r3, r3, #3
 80103d4:	b21b      	sxth	r3, r3
 80103d6:	b29a      	uxth	r2, r3
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80103de:	b29b      	uxth	r3, r3
 80103e0:	4413      	add	r3, r2
 80103e2:	b29b      	uxth	r3, r3
 80103e4:	b21a      	sxth	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80103ec:	4b2d      	ldr	r3, [pc, #180]	; (80104a4 <tcp_receive+0x2c4>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	b29a      	uxth	r2, r3
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2200      	movs	r2, #0
 8010400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010404:	4b27      	ldr	r3, [pc, #156]	; (80104a4 <tcp_receive+0x2c4>)
 8010406:	681a      	ldr	r2, [r3, #0]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	7d1b      	ldrb	r3, [r3, #20]
 8010410:	2b03      	cmp	r3, #3
 8010412:	f240 8096 	bls.w	8010542 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010422:	429a      	cmp	r2, r3
 8010424:	d244      	bcs.n	80104b0 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	8b5b      	ldrh	r3, [r3, #26]
 801042a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801042e:	2b00      	cmp	r3, #0
 8010430:	d001      	beq.n	8010436 <tcp_receive+0x256>
 8010432:	2301      	movs	r3, #1
 8010434:	e000      	b.n	8010438 <tcp_receive+0x258>
 8010436:	2302      	movs	r3, #2
 8010438:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801043c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010440:	b29a      	uxth	r2, r3
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010446:	fb12 f303 	smulbb	r3, r2, r3
 801044a:	b29b      	uxth	r3, r3
 801044c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801044e:	4293      	cmp	r3, r2
 8010450:	bf28      	it	cs
 8010452:	4613      	movcs	r3, r2
 8010454:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801045c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801045e:	4413      	add	r3, r2
 8010460:	b29a      	uxth	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010468:	429a      	cmp	r2, r3
 801046a:	d309      	bcc.n	8010480 <tcp_receive+0x2a0>
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010472:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010474:	4413      	add	r3, r2
 8010476:	b29a      	uxth	r2, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801047e:	e060      	b.n	8010542 <tcp_receive+0x362>
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010486:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801048a:	e05a      	b.n	8010542 <tcp_receive+0x362>
 801048c:	08019f1c 	.word	0x08019f1c
 8010490:	0801a24c 	.word	0x0801a24c
 8010494:	08019f68 	.word	0x08019f68
 8010498:	0801a268 	.word	0x0801a268
 801049c:	24009ddc 	.word	0x24009ddc
 80104a0:	24009dd0 	.word	0x24009dd0
 80104a4:	24009dd4 	.word	0x24009dd4
 80104a8:	24009dc0 	.word	0x24009dc0
 80104ac:	24009dda 	.word	0x24009dda
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104b8:	4413      	add	r3, r2
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80104c2:	429a      	cmp	r2, r3
 80104c4:	d309      	bcc.n	80104da <tcp_receive+0x2fa>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104ce:	4413      	add	r3, r2
 80104d0:	b29a      	uxth	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80104d8:	e004      	b.n	80104e4 <tcp_receive+0x304>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d326      	bcc.n	8010542 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	b29a      	uxth	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010514:	4413      	add	r3, r2
 8010516:	b29a      	uxth	r2, r3
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801051e:	429a      	cmp	r2, r3
 8010520:	d30a      	bcc.n	8010538 <tcp_receive+0x358>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801052c:	4413      	add	r3, r2
 801052e:	b29a      	uxth	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010536:	e004      	b.n	8010542 <tcp_receive+0x362>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801053e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054a:	4a98      	ldr	r2, [pc, #608]	; (80107ac <tcp_receive+0x5cc>)
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f7ff fdcb 	bl	80100e8 <tcp_free_acked_segments>
 8010552:	4602      	mov	r2, r0
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010560:	4a93      	ldr	r2, [pc, #588]	; (80107b0 <tcp_receive+0x5d0>)
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f7ff fdc0 	bl	80100e8 <tcp_free_acked_segments>
 8010568:	4602      	mov	r2, r0
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010572:	2b00      	cmp	r3, #0
 8010574:	d104      	bne.n	8010580 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801057c:	861a      	strh	r2, [r3, #48]	; 0x30
 801057e:	e002      	b.n	8010586 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010590:	2b00      	cmp	r3, #0
 8010592:	d103      	bne.n	801059c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80105a2:	4b84      	ldr	r3, [pc, #528]	; (80107b4 <tcp_receive+0x5d4>)
 80105a4:	881b      	ldrh	r3, [r3, #0]
 80105a6:	4413      	add	r3, r2
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	8b5b      	ldrh	r3, [r3, #26]
 80105b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d035      	beq.n	8010628 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d118      	bne.n	80105f6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00c      	beq.n	80105e6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	685b      	ldr	r3, [r3, #4]
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fb f866 	bl	800b6aa <lwip_htonl>
 80105de:	4603      	mov	r3, r0
 80105e0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	dc20      	bgt.n	8010628 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	8b5b      	ldrh	r3, [r3, #26]
 80105ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105f4:	e018      	b.n	8010628 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	4618      	mov	r0, r3
 8010604:	f7fb f851 	bl	800b6aa <lwip_htonl>
 8010608:	4603      	mov	r3, r0
 801060a:	1ae3      	subs	r3, r4, r3
 801060c:	2b00      	cmp	r3, #0
 801060e:	dc0b      	bgt.n	8010628 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	8b5b      	ldrh	r3, [r3, #26]
 8010614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010618:	b29a      	uxth	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801061e:	e003      	b.n	8010628 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010620:	6878      	ldr	r0, [r7, #4]
 8010622:	f001 ff75 	bl	8012510 <tcp_send_empty_ack>
 8010626:	e000      	b.n	801062a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010628:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801062e:	2b00      	cmp	r3, #0
 8010630:	d05b      	beq.n	80106ea <tcp_receive+0x50a>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010636:	4b60      	ldr	r3, [pc, #384]	; (80107b8 <tcp_receive+0x5d8>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	1ad3      	subs	r3, r2, r3
 801063c:	2b00      	cmp	r3, #0
 801063e:	da54      	bge.n	80106ea <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010640:	4b5e      	ldr	r3, [pc, #376]	; (80107bc <tcp_receive+0x5dc>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	b29a      	uxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801064a:	b29b      	uxth	r3, r3
 801064c:	1ad3      	subs	r3, r2, r3
 801064e:	b29b      	uxth	r3, r3
 8010650:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010654:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801065e:	10db      	asrs	r3, r3, #3
 8010660:	b21b      	sxth	r3, r3
 8010662:	b29b      	uxth	r3, r3
 8010664:	1ad3      	subs	r3, r2, r3
 8010666:	b29b      	uxth	r3, r3
 8010668:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010672:	b29a      	uxth	r2, r3
 8010674:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010678:	4413      	add	r3, r2
 801067a:	b29b      	uxth	r3, r3
 801067c:	b21a      	sxth	r2, r3
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010682:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010686:	2b00      	cmp	r3, #0
 8010688:	da05      	bge.n	8010696 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801068a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801068e:	425b      	negs	r3, r3
 8010690:	b29b      	uxth	r3, r3
 8010692:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010696:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80106a0:	109b      	asrs	r3, r3, #2
 80106a2:	b21b      	sxth	r3, r3
 80106a4:	b29b      	uxth	r3, r3
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	b29b      	uxth	r3, r3
 80106aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80106ba:	4413      	add	r3, r2
 80106bc:	b29b      	uxth	r3, r3
 80106be:	b21a      	sxth	r2, r3
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80106ca:	10db      	asrs	r3, r3, #3
 80106cc:	b21b      	sxth	r3, r3
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	4413      	add	r3, r2
 80106da:	b29b      	uxth	r3, r3
 80106dc:	b21a      	sxth	r2, r3
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80106ea:	4b35      	ldr	r3, [pc, #212]	; (80107c0 <tcp_receive+0x5e0>)
 80106ec:	881b      	ldrh	r3, [r3, #0]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f000 84e1 	beq.w	80110b6 <tcp_receive+0xed6>
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	7d1b      	ldrb	r3, [r3, #20]
 80106f8:	2b06      	cmp	r3, #6
 80106fa:	f200 84dc 	bhi.w	80110b6 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010702:	4b30      	ldr	r3, [pc, #192]	; (80107c4 <tcp_receive+0x5e4>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	1ad3      	subs	r3, r2, r3
 8010708:	3b01      	subs	r3, #1
 801070a:	2b00      	cmp	r3, #0
 801070c:	f2c0 808e 	blt.w	801082c <tcp_receive+0x64c>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010714:	4b2a      	ldr	r3, [pc, #168]	; (80107c0 <tcp_receive+0x5e0>)
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	4619      	mov	r1, r3
 801071a:	4b2a      	ldr	r3, [pc, #168]	; (80107c4 <tcp_receive+0x5e4>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	440b      	add	r3, r1
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	3301      	adds	r3, #1
 8010724:	2b00      	cmp	r3, #0
 8010726:	f300 8081 	bgt.w	801082c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801072a:	4b27      	ldr	r3, [pc, #156]	; (80107c8 <tcp_receive+0x5e8>)
 801072c:	685b      	ldr	r3, [r3, #4]
 801072e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010734:	4b23      	ldr	r3, [pc, #140]	; (80107c4 <tcp_receive+0x5e4>)
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801073c:	4b22      	ldr	r3, [pc, #136]	; (80107c8 <tcp_receive+0x5e8>)
 801073e:	685b      	ldr	r3, [r3, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d106      	bne.n	8010752 <tcp_receive+0x572>
 8010744:	4b21      	ldr	r3, [pc, #132]	; (80107cc <tcp_receive+0x5ec>)
 8010746:	f240 5294 	movw	r2, #1428	; 0x594
 801074a:	4921      	ldr	r1, [pc, #132]	; (80107d0 <tcp_receive+0x5f0>)
 801074c:	4821      	ldr	r0, [pc, #132]	; (80107d4 <tcp_receive+0x5f4>)
 801074e:	f007 fad3 	bl	8017cf8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010758:	4293      	cmp	r3, r2
 801075a:	d906      	bls.n	801076a <tcp_receive+0x58a>
 801075c:	4b1b      	ldr	r3, [pc, #108]	; (80107cc <tcp_receive+0x5ec>)
 801075e:	f240 5295 	movw	r2, #1429	; 0x595
 8010762:	491d      	ldr	r1, [pc, #116]	; (80107d8 <tcp_receive+0x5f8>)
 8010764:	481b      	ldr	r0, [pc, #108]	; (80107d4 <tcp_receive+0x5f4>)
 8010766:	f007 fac7 	bl	8017cf8 <iprintf>
      off = (u16_t)off32;
 801076a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801076c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010770:	4b15      	ldr	r3, [pc, #84]	; (80107c8 <tcp_receive+0x5e8>)
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	891b      	ldrh	r3, [r3, #8]
 8010776:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801077a:	429a      	cmp	r2, r3
 801077c:	d906      	bls.n	801078c <tcp_receive+0x5ac>
 801077e:	4b13      	ldr	r3, [pc, #76]	; (80107cc <tcp_receive+0x5ec>)
 8010780:	f240 5297 	movw	r2, #1431	; 0x597
 8010784:	4915      	ldr	r1, [pc, #84]	; (80107dc <tcp_receive+0x5fc>)
 8010786:	4813      	ldr	r0, [pc, #76]	; (80107d4 <tcp_receive+0x5f4>)
 8010788:	f007 fab6 	bl	8017cf8 <iprintf>
      inseg.len -= off;
 801078c:	4b0e      	ldr	r3, [pc, #56]	; (80107c8 <tcp_receive+0x5e8>)
 801078e:	891a      	ldrh	r2, [r3, #8]
 8010790:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	b29a      	uxth	r2, r3
 8010798:	4b0b      	ldr	r3, [pc, #44]	; (80107c8 <tcp_receive+0x5e8>)
 801079a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801079c:	4b0a      	ldr	r3, [pc, #40]	; (80107c8 <tcp_receive+0x5e8>)
 801079e:	685b      	ldr	r3, [r3, #4]
 80107a0:	891a      	ldrh	r2, [r3, #8]
 80107a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80107aa:	e029      	b.n	8010800 <tcp_receive+0x620>
 80107ac:	0801a284 	.word	0x0801a284
 80107b0:	0801a28c 	.word	0x0801a28c
 80107b4:	24009dd8 	.word	0x24009dd8
 80107b8:	24009dd4 	.word	0x24009dd4
 80107bc:	2400d6c0 	.word	0x2400d6c0
 80107c0:	24009dda 	.word	0x24009dda
 80107c4:	24009dd0 	.word	0x24009dd0
 80107c8:	24009db0 	.word	0x24009db0
 80107cc:	08019f1c 	.word	0x08019f1c
 80107d0:	0801a294 	.word	0x0801a294
 80107d4:	08019f68 	.word	0x08019f68
 80107d8:	0801a2a4 	.word	0x0801a2a4
 80107dc:	0801a2b4 	.word	0x0801a2b4
        off -= p->len;
 80107e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107e2:	895b      	ldrh	r3, [r3, #10]
 80107e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80107ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80107f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80107f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107f6:	2200      	movs	r2, #0
 80107f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80107fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010802:	895b      	ldrh	r3, [r3, #10]
 8010804:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010808:	429a      	cmp	r2, r3
 801080a:	d8e9      	bhi.n	80107e0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801080c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010810:	4619      	mov	r1, r3
 8010812:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010814:	f7fc fb64 	bl	800cee0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801081c:	4a91      	ldr	r2, [pc, #580]	; (8010a64 <tcp_receive+0x884>)
 801081e:	6013      	str	r3, [r2, #0]
 8010820:	4b91      	ldr	r3, [pc, #580]	; (8010a68 <tcp_receive+0x888>)
 8010822:	68db      	ldr	r3, [r3, #12]
 8010824:	4a8f      	ldr	r2, [pc, #572]	; (8010a64 <tcp_receive+0x884>)
 8010826:	6812      	ldr	r2, [r2, #0]
 8010828:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801082a:	e00d      	b.n	8010848 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801082c:	4b8d      	ldr	r3, [pc, #564]	; (8010a64 <tcp_receive+0x884>)
 801082e:	681a      	ldr	r2, [r3, #0]
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	da06      	bge.n	8010848 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8b5b      	ldrh	r3, [r3, #26]
 801083e:	f043 0302 	orr.w	r3, r3, #2
 8010842:	b29a      	uxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010848:	4b86      	ldr	r3, [pc, #536]	; (8010a64 <tcp_receive+0x884>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010850:	1ad3      	subs	r3, r2, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	f2c0 842a 	blt.w	80110ac <tcp_receive+0xecc>
 8010858:	4b82      	ldr	r3, [pc, #520]	; (8010a64 <tcp_receive+0x884>)
 801085a:	681a      	ldr	r2, [r3, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010860:	6879      	ldr	r1, [r7, #4]
 8010862:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010864:	440b      	add	r3, r1
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	3301      	adds	r3, #1
 801086a:	2b00      	cmp	r3, #0
 801086c:	f300 841e 	bgt.w	80110ac <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010874:	4b7b      	ldr	r3, [pc, #492]	; (8010a64 <tcp_receive+0x884>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	429a      	cmp	r2, r3
 801087a:	f040 829a 	bne.w	8010db2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801087e:	4b7a      	ldr	r3, [pc, #488]	; (8010a68 <tcp_receive+0x888>)
 8010880:	891c      	ldrh	r4, [r3, #8]
 8010882:	4b79      	ldr	r3, [pc, #484]	; (8010a68 <tcp_receive+0x888>)
 8010884:	68db      	ldr	r3, [r3, #12]
 8010886:	899b      	ldrh	r3, [r3, #12]
 8010888:	b29b      	uxth	r3, r3
 801088a:	4618      	mov	r0, r3
 801088c:	f7fa fef8 	bl	800b680 <lwip_htons>
 8010890:	4603      	mov	r3, r0
 8010892:	b2db      	uxtb	r3, r3
 8010894:	f003 0303 	and.w	r3, r3, #3
 8010898:	2b00      	cmp	r3, #0
 801089a:	d001      	beq.n	80108a0 <tcp_receive+0x6c0>
 801089c:	2301      	movs	r3, #1
 801089e:	e000      	b.n	80108a2 <tcp_receive+0x6c2>
 80108a0:	2300      	movs	r3, #0
 80108a2:	4423      	add	r3, r4
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	4b71      	ldr	r3, [pc, #452]	; (8010a6c <tcp_receive+0x88c>)
 80108a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108ae:	4b6f      	ldr	r3, [pc, #444]	; (8010a6c <tcp_receive+0x88c>)
 80108b0:	881b      	ldrh	r3, [r3, #0]
 80108b2:	429a      	cmp	r2, r3
 80108b4:	d275      	bcs.n	80109a2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80108b6:	4b6c      	ldr	r3, [pc, #432]	; (8010a68 <tcp_receive+0x888>)
 80108b8:	68db      	ldr	r3, [r3, #12]
 80108ba:	899b      	ldrh	r3, [r3, #12]
 80108bc:	b29b      	uxth	r3, r3
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fa fede 	bl	800b680 <lwip_htons>
 80108c4:	4603      	mov	r3, r0
 80108c6:	b2db      	uxtb	r3, r3
 80108c8:	f003 0301 	and.w	r3, r3, #1
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d01f      	beq.n	8010910 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80108d0:	4b65      	ldr	r3, [pc, #404]	; (8010a68 <tcp_receive+0x888>)
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	899b      	ldrh	r3, [r3, #12]
 80108d6:	b29b      	uxth	r3, r3
 80108d8:	b21b      	sxth	r3, r3
 80108da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80108de:	b21c      	sxth	r4, r3
 80108e0:	4b61      	ldr	r3, [pc, #388]	; (8010a68 <tcp_receive+0x888>)
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	899b      	ldrh	r3, [r3, #12]
 80108e6:	b29b      	uxth	r3, r3
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fa fec9 	bl	800b680 <lwip_htons>
 80108ee:	4603      	mov	r3, r0
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fa fec0 	bl	800b680 <lwip_htons>
 8010900:	4603      	mov	r3, r0
 8010902:	b21b      	sxth	r3, r3
 8010904:	4323      	orrs	r3, r4
 8010906:	b21a      	sxth	r2, r3
 8010908:	4b57      	ldr	r3, [pc, #348]	; (8010a68 <tcp_receive+0x888>)
 801090a:	68db      	ldr	r3, [r3, #12]
 801090c:	b292      	uxth	r2, r2
 801090e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010914:	4b54      	ldr	r3, [pc, #336]	; (8010a68 <tcp_receive+0x888>)
 8010916:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010918:	4b53      	ldr	r3, [pc, #332]	; (8010a68 <tcp_receive+0x888>)
 801091a:	68db      	ldr	r3, [r3, #12]
 801091c:	899b      	ldrh	r3, [r3, #12]
 801091e:	b29b      	uxth	r3, r3
 8010920:	4618      	mov	r0, r3
 8010922:	f7fa fead 	bl	800b680 <lwip_htons>
 8010926:	4603      	mov	r3, r0
 8010928:	b2db      	uxtb	r3, r3
 801092a:	f003 0302 	and.w	r3, r3, #2
 801092e:	2b00      	cmp	r3, #0
 8010930:	d005      	beq.n	801093e <tcp_receive+0x75e>
            inseg.len -= 1;
 8010932:	4b4d      	ldr	r3, [pc, #308]	; (8010a68 <tcp_receive+0x888>)
 8010934:	891b      	ldrh	r3, [r3, #8]
 8010936:	3b01      	subs	r3, #1
 8010938:	b29a      	uxth	r2, r3
 801093a:	4b4b      	ldr	r3, [pc, #300]	; (8010a68 <tcp_receive+0x888>)
 801093c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801093e:	4b4a      	ldr	r3, [pc, #296]	; (8010a68 <tcp_receive+0x888>)
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	4a49      	ldr	r2, [pc, #292]	; (8010a68 <tcp_receive+0x888>)
 8010944:	8912      	ldrh	r2, [r2, #8]
 8010946:	4611      	mov	r1, r2
 8010948:	4618      	mov	r0, r3
 801094a:	f7fc f9c9 	bl	800cce0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801094e:	4b46      	ldr	r3, [pc, #280]	; (8010a68 <tcp_receive+0x888>)
 8010950:	891c      	ldrh	r4, [r3, #8]
 8010952:	4b45      	ldr	r3, [pc, #276]	; (8010a68 <tcp_receive+0x888>)
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	899b      	ldrh	r3, [r3, #12]
 8010958:	b29b      	uxth	r3, r3
 801095a:	4618      	mov	r0, r3
 801095c:	f7fa fe90 	bl	800b680 <lwip_htons>
 8010960:	4603      	mov	r3, r0
 8010962:	b2db      	uxtb	r3, r3
 8010964:	f003 0303 	and.w	r3, r3, #3
 8010968:	2b00      	cmp	r3, #0
 801096a:	d001      	beq.n	8010970 <tcp_receive+0x790>
 801096c:	2301      	movs	r3, #1
 801096e:	e000      	b.n	8010972 <tcp_receive+0x792>
 8010970:	2300      	movs	r3, #0
 8010972:	4423      	add	r3, r4
 8010974:	b29a      	uxth	r2, r3
 8010976:	4b3d      	ldr	r3, [pc, #244]	; (8010a6c <tcp_receive+0x88c>)
 8010978:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801097a:	4b3c      	ldr	r3, [pc, #240]	; (8010a6c <tcp_receive+0x88c>)
 801097c:	881b      	ldrh	r3, [r3, #0]
 801097e:	461a      	mov	r2, r3
 8010980:	4b38      	ldr	r3, [pc, #224]	; (8010a64 <tcp_receive+0x884>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	441a      	add	r2, r3
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801098a:	6879      	ldr	r1, [r7, #4]
 801098c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801098e:	440b      	add	r3, r1
 8010990:	429a      	cmp	r2, r3
 8010992:	d006      	beq.n	80109a2 <tcp_receive+0x7c2>
 8010994:	4b36      	ldr	r3, [pc, #216]	; (8010a70 <tcp_receive+0x890>)
 8010996:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801099a:	4936      	ldr	r1, [pc, #216]	; (8010a74 <tcp_receive+0x894>)
 801099c:	4836      	ldr	r0, [pc, #216]	; (8010a78 <tcp_receive+0x898>)
 801099e:	f007 f9ab 	bl	8017cf8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f000 80e7 	beq.w	8010b7a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80109ac:	4b2e      	ldr	r3, [pc, #184]	; (8010a68 <tcp_receive+0x888>)
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	899b      	ldrh	r3, [r3, #12]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fa fe63 	bl	800b680 <lwip_htons>
 80109ba:	4603      	mov	r3, r0
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	f003 0301 	and.w	r3, r3, #1
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d010      	beq.n	80109e8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80109c6:	e00a      	b.n	80109de <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109cc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80109d8:	68f8      	ldr	r0, [r7, #12]
 80109da:	f7fd fd96 	bl	800e50a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d1f0      	bne.n	80109c8 <tcp_receive+0x7e8>
 80109e6:	e0c8      	b.n	8010b7a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109ec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80109ee:	e052      	b.n	8010a96 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80109f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	899b      	ldrh	r3, [r3, #12]
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	4618      	mov	r0, r3
 80109fa:	f7fa fe41 	bl	800b680 <lwip_htons>
 80109fe:	4603      	mov	r3, r0
 8010a00:	b2db      	uxtb	r3, r3
 8010a02:	f003 0301 	and.w	r3, r3, #1
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d03d      	beq.n	8010a86 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010a0a:	4b17      	ldr	r3, [pc, #92]	; (8010a68 <tcp_receive+0x888>)
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	899b      	ldrh	r3, [r3, #12]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fa fe34 	bl	800b680 <lwip_htons>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d130      	bne.n	8010a86 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010a24:	4b10      	ldr	r3, [pc, #64]	; (8010a68 <tcp_receive+0x888>)
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	899b      	ldrh	r3, [r3, #12]
 8010a2a:	b29c      	uxth	r4, r3
 8010a2c:	2001      	movs	r0, #1
 8010a2e:	f7fa fe27 	bl	800b680 <lwip_htons>
 8010a32:	4603      	mov	r3, r0
 8010a34:	461a      	mov	r2, r3
 8010a36:	4b0c      	ldr	r3, [pc, #48]	; (8010a68 <tcp_receive+0x888>)
 8010a38:	68db      	ldr	r3, [r3, #12]
 8010a3a:	4322      	orrs	r2, r4
 8010a3c:	b292      	uxth	r2, r2
 8010a3e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010a40:	4b09      	ldr	r3, [pc, #36]	; (8010a68 <tcp_receive+0x888>)
 8010a42:	891c      	ldrh	r4, [r3, #8]
 8010a44:	4b08      	ldr	r3, [pc, #32]	; (8010a68 <tcp_receive+0x888>)
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	899b      	ldrh	r3, [r3, #12]
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fa fe17 	bl	800b680 <lwip_htons>
 8010a52:	4603      	mov	r3, r0
 8010a54:	b2db      	uxtb	r3, r3
 8010a56:	f003 0303 	and.w	r3, r3, #3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d00e      	beq.n	8010a7c <tcp_receive+0x89c>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e00d      	b.n	8010a7e <tcp_receive+0x89e>
 8010a62:	bf00      	nop
 8010a64:	24009dd0 	.word	0x24009dd0
 8010a68:	24009db0 	.word	0x24009db0
 8010a6c:	24009dda 	.word	0x24009dda
 8010a70:	08019f1c 	.word	0x08019f1c
 8010a74:	0801a2c4 	.word	0x0801a2c4
 8010a78:	08019f68 	.word	0x08019f68
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	4423      	add	r3, r4
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	4b98      	ldr	r3, [pc, #608]	; (8010ce4 <tcp_receive+0xb04>)
 8010a84:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a88:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010a90:	6938      	ldr	r0, [r7, #16]
 8010a92:	f7fd fd3a 	bl	800e50a <tcp_seg_free>
            while (next &&
 8010a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00e      	beq.n	8010aba <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010a9c:	4b91      	ldr	r3, [pc, #580]	; (8010ce4 <tcp_receive+0xb04>)
 8010a9e:	881b      	ldrh	r3, [r3, #0]
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	4b91      	ldr	r3, [pc, #580]	; (8010ce8 <tcp_receive+0xb08>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	441a      	add	r2, r3
 8010aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	685b      	ldr	r3, [r3, #4]
 8010aae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010ab0:	8909      	ldrh	r1, [r1, #8]
 8010ab2:	440b      	add	r3, r1
 8010ab4:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	da9a      	bge.n	80109f0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d059      	beq.n	8010b74 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010ac0:	4b88      	ldr	r3, [pc, #544]	; (8010ce4 <tcp_receive+0xb04>)
 8010ac2:	881b      	ldrh	r3, [r3, #0]
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	4b88      	ldr	r3, [pc, #544]	; (8010ce8 <tcp_receive+0xb08>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	441a      	add	r2, r3
 8010acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ace:	68db      	ldr	r3, [r3, #12]
 8010ad0:	685b      	ldr	r3, [r3, #4]
 8010ad2:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	dd4d      	ble.n	8010b74 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	4b81      	ldr	r3, [pc, #516]	; (8010ce8 <tcp_receive+0xb08>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	4b80      	ldr	r3, [pc, #512]	; (8010cec <tcp_receive+0xb0c>)
 8010aec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010aee:	4b7f      	ldr	r3, [pc, #508]	; (8010cec <tcp_receive+0xb0c>)
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	899b      	ldrh	r3, [r3, #12]
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fa fdc2 	bl	800b680 <lwip_htons>
 8010afc:	4603      	mov	r3, r0
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	f003 0302 	and.w	r3, r3, #2
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d005      	beq.n	8010b14 <tcp_receive+0x934>
                inseg.len -= 1;
 8010b08:	4b78      	ldr	r3, [pc, #480]	; (8010cec <tcp_receive+0xb0c>)
 8010b0a:	891b      	ldrh	r3, [r3, #8]
 8010b0c:	3b01      	subs	r3, #1
 8010b0e:	b29a      	uxth	r2, r3
 8010b10:	4b76      	ldr	r3, [pc, #472]	; (8010cec <tcp_receive+0xb0c>)
 8010b12:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010b14:	4b75      	ldr	r3, [pc, #468]	; (8010cec <tcp_receive+0xb0c>)
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	4a74      	ldr	r2, [pc, #464]	; (8010cec <tcp_receive+0xb0c>)
 8010b1a:	8912      	ldrh	r2, [r2, #8]
 8010b1c:	4611      	mov	r1, r2
 8010b1e:	4618      	mov	r0, r3
 8010b20:	f7fc f8de 	bl	800cce0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010b24:	4b71      	ldr	r3, [pc, #452]	; (8010cec <tcp_receive+0xb0c>)
 8010b26:	891c      	ldrh	r4, [r3, #8]
 8010b28:	4b70      	ldr	r3, [pc, #448]	; (8010cec <tcp_receive+0xb0c>)
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	899b      	ldrh	r3, [r3, #12]
 8010b2e:	b29b      	uxth	r3, r3
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fa fda5 	bl	800b680 <lwip_htons>
 8010b36:	4603      	mov	r3, r0
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	f003 0303 	and.w	r3, r3, #3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d001      	beq.n	8010b46 <tcp_receive+0x966>
 8010b42:	2301      	movs	r3, #1
 8010b44:	e000      	b.n	8010b48 <tcp_receive+0x968>
 8010b46:	2300      	movs	r3, #0
 8010b48:	4423      	add	r3, r4
 8010b4a:	b29a      	uxth	r2, r3
 8010b4c:	4b65      	ldr	r3, [pc, #404]	; (8010ce4 <tcp_receive+0xb04>)
 8010b4e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010b50:	4b64      	ldr	r3, [pc, #400]	; (8010ce4 <tcp_receive+0xb04>)
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	461a      	mov	r2, r3
 8010b56:	4b64      	ldr	r3, [pc, #400]	; (8010ce8 <tcp_receive+0xb08>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	441a      	add	r2, r3
 8010b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b5e:	68db      	ldr	r3, [r3, #12]
 8010b60:	685b      	ldr	r3, [r3, #4]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d006      	beq.n	8010b74 <tcp_receive+0x994>
 8010b66:	4b62      	ldr	r3, [pc, #392]	; (8010cf0 <tcp_receive+0xb10>)
 8010b68:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010b6c:	4961      	ldr	r1, [pc, #388]	; (8010cf4 <tcp_receive+0xb14>)
 8010b6e:	4862      	ldr	r0, [pc, #392]	; (8010cf8 <tcp_receive+0xb18>)
 8010b70:	f007 f8c2 	bl	8017cf8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010b78:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010b7a:	4b5a      	ldr	r3, [pc, #360]	; (8010ce4 <tcp_receive+0xb04>)
 8010b7c:	881b      	ldrh	r3, [r3, #0]
 8010b7e:	461a      	mov	r2, r3
 8010b80:	4b59      	ldr	r3, [pc, #356]	; (8010ce8 <tcp_receive+0xb08>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	441a      	add	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b8e:	4b55      	ldr	r3, [pc, #340]	; (8010ce4 <tcp_receive+0xb04>)
 8010b90:	881b      	ldrh	r3, [r3, #0]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d206      	bcs.n	8010ba4 <tcp_receive+0x9c4>
 8010b96:	4b56      	ldr	r3, [pc, #344]	; (8010cf0 <tcp_receive+0xb10>)
 8010b98:	f240 6207 	movw	r2, #1543	; 0x607
 8010b9c:	4957      	ldr	r1, [pc, #348]	; (8010cfc <tcp_receive+0xb1c>)
 8010b9e:	4856      	ldr	r0, [pc, #344]	; (8010cf8 <tcp_receive+0xb18>)
 8010ba0:	f007 f8aa 	bl	8017cf8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ba8:	4b4e      	ldr	r3, [pc, #312]	; (8010ce4 <tcp_receive+0xb04>)
 8010baa:	881b      	ldrh	r3, [r3, #0]
 8010bac:	1ad3      	subs	r3, r2, r3
 8010bae:	b29a      	uxth	r2, r3
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7fc ffc9 	bl	800db4c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010bba:	4b4c      	ldr	r3, [pc, #304]	; (8010cec <tcp_receive+0xb0c>)
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	891b      	ldrh	r3, [r3, #8]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d006      	beq.n	8010bd2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010bc4:	4b49      	ldr	r3, [pc, #292]	; (8010cec <tcp_receive+0xb0c>)
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	4a4d      	ldr	r2, [pc, #308]	; (8010d00 <tcp_receive+0xb20>)
 8010bca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010bcc:	4b47      	ldr	r3, [pc, #284]	; (8010cec <tcp_receive+0xb0c>)
 8010bce:	2200      	movs	r2, #0
 8010bd0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010bd2:	4b46      	ldr	r3, [pc, #280]	; (8010cec <tcp_receive+0xb0c>)
 8010bd4:	68db      	ldr	r3, [r3, #12]
 8010bd6:	899b      	ldrh	r3, [r3, #12]
 8010bd8:	b29b      	uxth	r3, r3
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fa fd50 	bl	800b680 <lwip_htons>
 8010be0:	4603      	mov	r3, r0
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	f003 0301 	and.w	r3, r3, #1
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f000 80b8 	beq.w	8010d5e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010bee:	4b45      	ldr	r3, [pc, #276]	; (8010d04 <tcp_receive+0xb24>)
 8010bf0:	781b      	ldrb	r3, [r3, #0]
 8010bf2:	f043 0320 	orr.w	r3, r3, #32
 8010bf6:	b2da      	uxtb	r2, r3
 8010bf8:	4b42      	ldr	r3, [pc, #264]	; (8010d04 <tcp_receive+0xb24>)
 8010bfa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010bfc:	e0af      	b.n	8010d5e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c02:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	4a36      	ldr	r2, [pc, #216]	; (8010ce8 <tcp_receive+0xb08>)
 8010c0e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	891b      	ldrh	r3, [r3, #8]
 8010c14:	461c      	mov	r4, r3
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	899b      	ldrh	r3, [r3, #12]
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fa fd2e 	bl	800b680 <lwip_htons>
 8010c24:	4603      	mov	r3, r0
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	f003 0303 	and.w	r3, r3, #3
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <tcp_receive+0xa54>
 8010c30:	2301      	movs	r3, #1
 8010c32:	e000      	b.n	8010c36 <tcp_receive+0xa56>
 8010c34:	2300      	movs	r3, #0
 8010c36:	191a      	adds	r2, r3, r4
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c3c:	441a      	add	r2, r3
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c46:	461c      	mov	r4, r3
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	891b      	ldrh	r3, [r3, #8]
 8010c4c:	461d      	mov	r5, r3
 8010c4e:	68bb      	ldr	r3, [r7, #8]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	899b      	ldrh	r3, [r3, #12]
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fa fd12 	bl	800b680 <lwip_htons>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	f003 0303 	and.w	r3, r3, #3
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d001      	beq.n	8010c6c <tcp_receive+0xa8c>
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e000      	b.n	8010c6e <tcp_receive+0xa8e>
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	442b      	add	r3, r5
 8010c70:	429c      	cmp	r4, r3
 8010c72:	d206      	bcs.n	8010c82 <tcp_receive+0xaa2>
 8010c74:	4b1e      	ldr	r3, [pc, #120]	; (8010cf0 <tcp_receive+0xb10>)
 8010c76:	f240 622b 	movw	r2, #1579	; 0x62b
 8010c7a:	4923      	ldr	r1, [pc, #140]	; (8010d08 <tcp_receive+0xb28>)
 8010c7c:	481e      	ldr	r0, [pc, #120]	; (8010cf8 <tcp_receive+0xb18>)
 8010c7e:	f007 f83b 	bl	8017cf8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	891b      	ldrh	r3, [r3, #8]
 8010c86:	461c      	mov	r4, r3
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	68db      	ldr	r3, [r3, #12]
 8010c8c:	899b      	ldrh	r3, [r3, #12]
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	4618      	mov	r0, r3
 8010c92:	f7fa fcf5 	bl	800b680 <lwip_htons>
 8010c96:	4603      	mov	r3, r0
 8010c98:	b2db      	uxtb	r3, r3
 8010c9a:	f003 0303 	and.w	r3, r3, #3
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d001      	beq.n	8010ca6 <tcp_receive+0xac6>
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	e000      	b.n	8010ca8 <tcp_receive+0xac8>
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	1919      	adds	r1, r3, r4
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010cae:	b28b      	uxth	r3, r1
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	b29a      	uxth	r2, r3
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7fc ff47 	bl	800db4c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	891b      	ldrh	r3, [r3, #8]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d028      	beq.n	8010d1a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010cc8:	4b0d      	ldr	r3, [pc, #52]	; (8010d00 <tcp_receive+0xb20>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d01d      	beq.n	8010d0c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010cd0:	4b0b      	ldr	r3, [pc, #44]	; (8010d00 <tcp_receive+0xb20>)
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	4619      	mov	r1, r3
 8010cda:	4610      	mov	r0, r2
 8010cdc:	f7fc fa54 	bl	800d188 <pbuf_cat>
 8010ce0:	e018      	b.n	8010d14 <tcp_receive+0xb34>
 8010ce2:	bf00      	nop
 8010ce4:	24009dda 	.word	0x24009dda
 8010ce8:	24009dd0 	.word	0x24009dd0
 8010cec:	24009db0 	.word	0x24009db0
 8010cf0:	08019f1c 	.word	0x08019f1c
 8010cf4:	0801a2fc 	.word	0x0801a2fc
 8010cf8:	08019f68 	.word	0x08019f68
 8010cfc:	0801a338 	.word	0x0801a338
 8010d00:	24009de0 	.word	0x24009de0
 8010d04:	24009ddd 	.word	0x24009ddd
 8010d08:	0801a358 	.word	0x0801a358
            } else {
              recv_data = cseg->p;
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	4a70      	ldr	r2, [pc, #448]	; (8010ed4 <tcp_receive+0xcf4>)
 8010d12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2200      	movs	r2, #0
 8010d18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	899b      	ldrh	r3, [r3, #12]
 8010d20:	b29b      	uxth	r3, r3
 8010d22:	4618      	mov	r0, r3
 8010d24:	f7fa fcac 	bl	800b680 <lwip_htons>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	b2db      	uxtb	r3, r3
 8010d2c:	f003 0301 	and.w	r3, r3, #1
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d00d      	beq.n	8010d50 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010d34:	4b68      	ldr	r3, [pc, #416]	; (8010ed8 <tcp_receive+0xcf8>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	f043 0320 	orr.w	r3, r3, #32
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	4b66      	ldr	r3, [pc, #408]	; (8010ed8 <tcp_receive+0xcf8>)
 8010d40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	7d1b      	ldrb	r3, [r3, #20]
 8010d46:	2b04      	cmp	r3, #4
 8010d48:	d102      	bne.n	8010d50 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2207      	movs	r2, #7
 8010d4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010d58:	68b8      	ldr	r0, [r7, #8]
 8010d5a:	f7fd fbd6 	bl	800e50a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d008      	beq.n	8010d78 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	685a      	ldr	r2, [r3, #4]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010d72:	429a      	cmp	r2, r3
 8010d74:	f43f af43 	beq.w	8010bfe <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	8b5b      	ldrh	r3, [r3, #26]
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00e      	beq.n	8010da2 <tcp_receive+0xbc2>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	8b5b      	ldrh	r3, [r3, #26]
 8010d88:	f023 0301 	bic.w	r3, r3, #1
 8010d8c:	b29a      	uxth	r2, r3
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	835a      	strh	r2, [r3, #26]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	8b5b      	ldrh	r3, [r3, #26]
 8010d96:	f043 0302 	orr.w	r3, r3, #2
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010da0:	e188      	b.n	80110b4 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	8b5b      	ldrh	r3, [r3, #26]
 8010da6:	f043 0301 	orr.w	r3, r3, #1
 8010daa:	b29a      	uxth	r2, r3
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010db0:	e180      	b.n	80110b4 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d106      	bne.n	8010dc8 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010dba:	4848      	ldr	r0, [pc, #288]	; (8010edc <tcp_receive+0xcfc>)
 8010dbc:	f7fd fbbe 	bl	800e53c <tcp_seg_copy>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	675a      	str	r2, [r3, #116]	; 0x74
 8010dc6:	e16d      	b.n	80110a4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010dc8:	2300      	movs	r3, #0
 8010dca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8010dd2:	e157      	b.n	8011084 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8010dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	685a      	ldr	r2, [r3, #4]
 8010dda:	4b41      	ldr	r3, [pc, #260]	; (8010ee0 <tcp_receive+0xd00>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	429a      	cmp	r2, r3
 8010de0:	d11d      	bne.n	8010e1e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010de2:	4b3e      	ldr	r3, [pc, #248]	; (8010edc <tcp_receive+0xcfc>)
 8010de4:	891a      	ldrh	r2, [r3, #8]
 8010de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de8:	891b      	ldrh	r3, [r3, #8]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	f240 814f 	bls.w	801108e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010df0:	483a      	ldr	r0, [pc, #232]	; (8010edc <tcp_receive+0xcfc>)
 8010df2:	f7fd fba3 	bl	800e53c <tcp_seg_copy>
 8010df6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 8149 	beq.w	8011092 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8010e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d003      	beq.n	8010e0e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e08:	697a      	ldr	r2, [r7, #20]
 8010e0a:	601a      	str	r2, [r3, #0]
 8010e0c:	e002      	b.n	8010e14 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010e14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e16:	6978      	ldr	r0, [r7, #20]
 8010e18:	f7ff f8de 	bl	800ffd8 <tcp_oos_insert_segment>
                }
                break;
 8010e1c:	e139      	b.n	8011092 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d117      	bne.n	8010e54 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010e24:	4b2e      	ldr	r3, [pc, #184]	; (8010ee0 <tcp_receive+0xd00>)
 8010e26:	681a      	ldr	r2, [r3, #0]
 8010e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e2a:	68db      	ldr	r3, [r3, #12]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	da57      	bge.n	8010ee4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e34:	4829      	ldr	r0, [pc, #164]	; (8010edc <tcp_receive+0xcfc>)
 8010e36:	f7fd fb81 	bl	800e53c <tcp_seg_copy>
 8010e3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010e3c:	69bb      	ldr	r3, [r7, #24]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	f000 8129 	beq.w	8011096 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	69ba      	ldr	r2, [r7, #24]
 8010e48:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010e4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e4c:	69b8      	ldr	r0, [r7, #24]
 8010e4e:	f7ff f8c3 	bl	800ffd8 <tcp_oos_insert_segment>
                  }
                  break;
 8010e52:	e120      	b.n	8011096 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010e54:	4b22      	ldr	r3, [pc, #136]	; (8010ee0 <tcp_receive+0xd00>)
 8010e56:	681a      	ldr	r2, [r3, #0]
 8010e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	1ad3      	subs	r3, r2, r3
 8010e60:	3b01      	subs	r3, #1
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	db3e      	blt.n	8010ee4 <tcp_receive+0xd04>
 8010e66:	4b1e      	ldr	r3, [pc, #120]	; (8010ee0 <tcp_receive+0xd00>)
 8010e68:	681a      	ldr	r2, [r3, #0]
 8010e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e6c:	68db      	ldr	r3, [r3, #12]
 8010e6e:	685b      	ldr	r3, [r3, #4]
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	3301      	adds	r3, #1
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	dc35      	bgt.n	8010ee4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010e78:	4818      	ldr	r0, [pc, #96]	; (8010edc <tcp_receive+0xcfc>)
 8010e7a:	f7fd fb5f 	bl	800e53c <tcp_seg_copy>
 8010e7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	f000 8109 	beq.w	801109a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e90:	8912      	ldrh	r2, [r2, #8]
 8010e92:	441a      	add	r2, r3
 8010e94:	4b12      	ldr	r3, [pc, #72]	; (8010ee0 <tcp_receive+0xd00>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	1ad3      	subs	r3, r2, r3
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	dd12      	ble.n	8010ec4 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010e9e:	4b10      	ldr	r3, [pc, #64]	; (8010ee0 <tcp_receive+0xd00>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	b29a      	uxth	r2, r3
 8010ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	1ad3      	subs	r3, r2, r3
 8010eae:	b29a      	uxth	r2, r3
 8010eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eb6:	685a      	ldr	r2, [r3, #4]
 8010eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010eba:	891b      	ldrh	r3, [r3, #8]
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	4610      	mov	r0, r2
 8010ec0:	f7fb ff0e 	bl	800cce0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ec6:	69fa      	ldr	r2, [r7, #28]
 8010ec8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010ecc:	69f8      	ldr	r0, [r7, #28]
 8010ece:	f7ff f883 	bl	800ffd8 <tcp_oos_insert_segment>
                  }
                  break;
 8010ed2:	e0e2      	b.n	801109a <tcp_receive+0xeba>
 8010ed4:	24009de0 	.word	0x24009de0
 8010ed8:	24009ddd 	.word	0x24009ddd
 8010edc:	24009db0 	.word	0x24009db0
 8010ee0:	24009dd0 	.word	0x24009dd0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f040 80c6 	bne.w	801107e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010ef2:	4b80      	ldr	r3, [pc, #512]	; (80110f4 <tcp_receive+0xf14>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef8:	68db      	ldr	r3, [r3, #12]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	f340 80bd 	ble.w	801107e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	899b      	ldrh	r3, [r3, #12]
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	f7fa fbb7 	bl	800b680 <lwip_htons>
 8010f12:	4603      	mov	r3, r0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	f040 80bf 	bne.w	801109e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010f20:	4875      	ldr	r0, [pc, #468]	; (80110f8 <tcp_receive+0xf18>)
 8010f22:	f7fd fb0b 	bl	800e53c <tcp_seg_copy>
 8010f26:	4602      	mov	r2, r0
 8010f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	f000 80b6 	beq.w	80110a2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	68db      	ldr	r3, [r3, #12]
 8010f3a:	685b      	ldr	r3, [r3, #4]
 8010f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f3e:	8912      	ldrh	r2, [r2, #8]
 8010f40:	441a      	add	r2, r3
 8010f42:	4b6c      	ldr	r3, [pc, #432]	; (80110f4 <tcp_receive+0xf14>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	1ad3      	subs	r3, r2, r3
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	dd12      	ble.n	8010f72 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010f4c:	4b69      	ldr	r3, [pc, #420]	; (80110f4 <tcp_receive+0xf14>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	b29a      	uxth	r2, r3
 8010f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	685b      	ldr	r3, [r3, #4]
 8010f58:	b29b      	uxth	r3, r3
 8010f5a:	1ad3      	subs	r3, r2, r3
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f64:	685a      	ldr	r2, [r3, #4]
 8010f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f68:	891b      	ldrh	r3, [r3, #8]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	f7fb feb7 	bl	800cce0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010f72:	4b62      	ldr	r3, [pc, #392]	; (80110fc <tcp_receive+0xf1c>)
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	461a      	mov	r2, r3
 8010f78:	4b5e      	ldr	r3, [pc, #376]	; (80110f4 <tcp_receive+0xf14>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	441a      	add	r2, r3
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f82:	6879      	ldr	r1, [r7, #4]
 8010f84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f86:	440b      	add	r3, r1
 8010f88:	1ad3      	subs	r3, r2, r3
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	f340 8089 	ble.w	80110a2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	68db      	ldr	r3, [r3, #12]
 8010f96:	899b      	ldrh	r3, [r3, #12]
 8010f98:	b29b      	uxth	r3, r3
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fa fb70 	bl	800b680 <lwip_htons>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	b2db      	uxtb	r3, r3
 8010fa4:	f003 0301 	and.w	r3, r3, #1
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d022      	beq.n	8010ff2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	899b      	ldrh	r3, [r3, #12]
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	b21b      	sxth	r3, r3
 8010fb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010fbc:	b21c      	sxth	r4, r3
 8010fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	899b      	ldrh	r3, [r3, #12]
 8010fc6:	b29b      	uxth	r3, r3
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fa fb59 	bl	800b680 <lwip_htons>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	b2db      	uxtb	r3, r3
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fa fb50 	bl	800b680 <lwip_htons>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	b21b      	sxth	r3, r3
 8010fe4:	4323      	orrs	r3, r4
 8010fe6:	b21a      	sxth	r2, r3
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	68db      	ldr	r3, [r3, #12]
 8010fee:	b292      	uxth	r2, r2
 8010ff0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ffc:	4413      	add	r3, r2
 8010ffe:	b299      	uxth	r1, r3
 8011000:	4b3c      	ldr	r3, [pc, #240]	; (80110f4 <tcp_receive+0xf14>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	b29a      	uxth	r2, r3
 8011006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	1a8a      	subs	r2, r1, r2
 801100c:	b292      	uxth	r2, r2
 801100e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	685a      	ldr	r2, [r3, #4]
 8011016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	891b      	ldrh	r3, [r3, #8]
 801101c:	4619      	mov	r1, r3
 801101e:	4610      	mov	r0, r2
 8011020:	f7fb fe5e 	bl	800cce0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	891c      	ldrh	r4, [r3, #8]
 801102a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	899b      	ldrh	r3, [r3, #12]
 8011032:	b29b      	uxth	r3, r3
 8011034:	4618      	mov	r0, r3
 8011036:	f7fa fb23 	bl	800b680 <lwip_htons>
 801103a:	4603      	mov	r3, r0
 801103c:	b2db      	uxtb	r3, r3
 801103e:	f003 0303 	and.w	r3, r3, #3
 8011042:	2b00      	cmp	r3, #0
 8011044:	d001      	beq.n	801104a <tcp_receive+0xe6a>
 8011046:	2301      	movs	r3, #1
 8011048:	e000      	b.n	801104c <tcp_receive+0xe6c>
 801104a:	2300      	movs	r3, #0
 801104c:	4423      	add	r3, r4
 801104e:	b29a      	uxth	r2, r3
 8011050:	4b2a      	ldr	r3, [pc, #168]	; (80110fc <tcp_receive+0xf1c>)
 8011052:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011054:	4b29      	ldr	r3, [pc, #164]	; (80110fc <tcp_receive+0xf1c>)
 8011056:	881b      	ldrh	r3, [r3, #0]
 8011058:	461a      	mov	r2, r3
 801105a:	4b26      	ldr	r3, [pc, #152]	; (80110f4 <tcp_receive+0xf14>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	441a      	add	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011064:	6879      	ldr	r1, [r7, #4]
 8011066:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011068:	440b      	add	r3, r1
 801106a:	429a      	cmp	r2, r3
 801106c:	d019      	beq.n	80110a2 <tcp_receive+0xec2>
 801106e:	4b24      	ldr	r3, [pc, #144]	; (8011100 <tcp_receive+0xf20>)
 8011070:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011074:	4923      	ldr	r1, [pc, #140]	; (8011104 <tcp_receive+0xf24>)
 8011076:	4824      	ldr	r0, [pc, #144]	; (8011108 <tcp_receive+0xf28>)
 8011078:	f006 fe3e 	bl	8017cf8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801107c:	e011      	b.n	80110a2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801107e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	63bb      	str	r3, [r7, #56]	; 0x38
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	2b00      	cmp	r3, #0
 8011088:	f47f aea4 	bne.w	8010dd4 <tcp_receive+0xbf4>
 801108c:	e00a      	b.n	80110a4 <tcp_receive+0xec4>
                break;
 801108e:	bf00      	nop
 8011090:	e008      	b.n	80110a4 <tcp_receive+0xec4>
                break;
 8011092:	bf00      	nop
 8011094:	e006      	b.n	80110a4 <tcp_receive+0xec4>
                  break;
 8011096:	bf00      	nop
 8011098:	e004      	b.n	80110a4 <tcp_receive+0xec4>
                  break;
 801109a:	bf00      	nop
 801109c:	e002      	b.n	80110a4 <tcp_receive+0xec4>
                  break;
 801109e:	bf00      	nop
 80110a0:	e000      	b.n	80110a4 <tcp_receive+0xec4>
                break;
 80110a2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f001 fa33 	bl	8012510 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80110aa:	e003      	b.n	80110b4 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f001 fa2f 	bl	8012510 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110b2:	e01a      	b.n	80110ea <tcp_receive+0xf0a>
 80110b4:	e019      	b.n	80110ea <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80110b6:	4b0f      	ldr	r3, [pc, #60]	; (80110f4 <tcp_receive+0xf14>)
 80110b8:	681a      	ldr	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	db0a      	blt.n	80110da <tcp_receive+0xefa>
 80110c4:	4b0b      	ldr	r3, [pc, #44]	; (80110f4 <tcp_receive+0xf14>)
 80110c6:	681a      	ldr	r2, [r3, #0]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110cc:	6879      	ldr	r1, [r7, #4]
 80110ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110d0:	440b      	add	r3, r1
 80110d2:	1ad3      	subs	r3, r2, r3
 80110d4:	3301      	adds	r3, #1
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	dd07      	ble.n	80110ea <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	8b5b      	ldrh	r3, [r3, #26]
 80110de:	f043 0302 	orr.w	r3, r3, #2
 80110e2:	b29a      	uxth	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80110e8:	e7ff      	b.n	80110ea <tcp_receive+0xf0a>
 80110ea:	bf00      	nop
 80110ec:	3750      	adds	r7, #80	; 0x50
 80110ee:	46bd      	mov	sp, r7
 80110f0:	bdb0      	pop	{r4, r5, r7, pc}
 80110f2:	bf00      	nop
 80110f4:	24009dd0 	.word	0x24009dd0
 80110f8:	24009db0 	.word	0x24009db0
 80110fc:	24009dda 	.word	0x24009dda
 8011100:	08019f1c 	.word	0x08019f1c
 8011104:	0801a2c4 	.word	0x0801a2c4
 8011108:	08019f68 	.word	0x08019f68

0801110c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801110c:	b480      	push	{r7}
 801110e:	b083      	sub	sp, #12
 8011110:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011112:	4b15      	ldr	r3, [pc, #84]	; (8011168 <tcp_get_next_optbyte+0x5c>)
 8011114:	881b      	ldrh	r3, [r3, #0]
 8011116:	1c5a      	adds	r2, r3, #1
 8011118:	b291      	uxth	r1, r2
 801111a:	4a13      	ldr	r2, [pc, #76]	; (8011168 <tcp_get_next_optbyte+0x5c>)
 801111c:	8011      	strh	r1, [r2, #0]
 801111e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011120:	4b12      	ldr	r3, [pc, #72]	; (801116c <tcp_get_next_optbyte+0x60>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d004      	beq.n	8011132 <tcp_get_next_optbyte+0x26>
 8011128:	4b11      	ldr	r3, [pc, #68]	; (8011170 <tcp_get_next_optbyte+0x64>)
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	88fa      	ldrh	r2, [r7, #6]
 801112e:	429a      	cmp	r2, r3
 8011130:	d208      	bcs.n	8011144 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011132:	4b10      	ldr	r3, [pc, #64]	; (8011174 <tcp_get_next_optbyte+0x68>)
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	3314      	adds	r3, #20
 8011138:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801113a:	88fb      	ldrh	r3, [r7, #6]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	4413      	add	r3, r2
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	e00b      	b.n	801115c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011144:	88fb      	ldrh	r3, [r7, #6]
 8011146:	b2da      	uxtb	r2, r3
 8011148:	4b09      	ldr	r3, [pc, #36]	; (8011170 <tcp_get_next_optbyte+0x64>)
 801114a:	881b      	ldrh	r3, [r3, #0]
 801114c:	b2db      	uxtb	r3, r3
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011152:	4b06      	ldr	r3, [pc, #24]	; (801116c <tcp_get_next_optbyte+0x60>)
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	797b      	ldrb	r3, [r7, #5]
 8011158:	4413      	add	r3, r2
 801115a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801115c:	4618      	mov	r0, r3
 801115e:	370c      	adds	r7, #12
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr
 8011168:	24009dcc 	.word	0x24009dcc
 801116c:	24009dc8 	.word	0x24009dc8
 8011170:	24009dc6 	.word	0x24009dc6
 8011174:	24009dc0 	.word	0x24009dc0

08011178 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d106      	bne.n	8011194 <tcp_parseopt+0x1c>
 8011186:	4b32      	ldr	r3, [pc, #200]	; (8011250 <tcp_parseopt+0xd8>)
 8011188:	f240 727d 	movw	r2, #1917	; 0x77d
 801118c:	4931      	ldr	r1, [pc, #196]	; (8011254 <tcp_parseopt+0xdc>)
 801118e:	4832      	ldr	r0, [pc, #200]	; (8011258 <tcp_parseopt+0xe0>)
 8011190:	f006 fdb2 	bl	8017cf8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011194:	4b31      	ldr	r3, [pc, #196]	; (801125c <tcp_parseopt+0xe4>)
 8011196:	881b      	ldrh	r3, [r3, #0]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d055      	beq.n	8011248 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801119c:	4b30      	ldr	r3, [pc, #192]	; (8011260 <tcp_parseopt+0xe8>)
 801119e:	2200      	movs	r2, #0
 80111a0:	801a      	strh	r2, [r3, #0]
 80111a2:	e045      	b.n	8011230 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80111a4:	f7ff ffb2 	bl	801110c <tcp_get_next_optbyte>
 80111a8:	4603      	mov	r3, r0
 80111aa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80111ac:	7bfb      	ldrb	r3, [r7, #15]
 80111ae:	2b02      	cmp	r3, #2
 80111b0:	d006      	beq.n	80111c0 <tcp_parseopt+0x48>
 80111b2:	2b02      	cmp	r3, #2
 80111b4:	dc2b      	bgt.n	801120e <tcp_parseopt+0x96>
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d041      	beq.n	801123e <tcp_parseopt+0xc6>
 80111ba:	2b01      	cmp	r3, #1
 80111bc:	d127      	bne.n	801120e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80111be:	e037      	b.n	8011230 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80111c0:	f7ff ffa4 	bl	801110c <tcp_get_next_optbyte>
 80111c4:	4603      	mov	r3, r0
 80111c6:	2b04      	cmp	r3, #4
 80111c8:	d13b      	bne.n	8011242 <tcp_parseopt+0xca>
 80111ca:	4b25      	ldr	r3, [pc, #148]	; (8011260 <tcp_parseopt+0xe8>)
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	3301      	adds	r3, #1
 80111d0:	4a22      	ldr	r2, [pc, #136]	; (801125c <tcp_parseopt+0xe4>)
 80111d2:	8812      	ldrh	r2, [r2, #0]
 80111d4:	4293      	cmp	r3, r2
 80111d6:	da34      	bge.n	8011242 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80111d8:	f7ff ff98 	bl	801110c <tcp_get_next_optbyte>
 80111dc:	4603      	mov	r3, r0
 80111de:	b29b      	uxth	r3, r3
 80111e0:	021b      	lsls	r3, r3, #8
 80111e2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80111e4:	f7ff ff92 	bl	801110c <tcp_get_next_optbyte>
 80111e8:	4603      	mov	r3, r0
 80111ea:	b29a      	uxth	r2, r3
 80111ec:	89bb      	ldrh	r3, [r7, #12]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80111f2:	89bb      	ldrh	r3, [r7, #12]
 80111f4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80111f8:	d804      	bhi.n	8011204 <tcp_parseopt+0x8c>
 80111fa:	89bb      	ldrh	r3, [r7, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d001      	beq.n	8011204 <tcp_parseopt+0x8c>
 8011200:	89ba      	ldrh	r2, [r7, #12]
 8011202:	e001      	b.n	8011208 <tcp_parseopt+0x90>
 8011204:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801120c:	e010      	b.n	8011230 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801120e:	f7ff ff7d 	bl	801110c <tcp_get_next_optbyte>
 8011212:	4603      	mov	r3, r0
 8011214:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011216:	7afb      	ldrb	r3, [r7, #11]
 8011218:	2b01      	cmp	r3, #1
 801121a:	d914      	bls.n	8011246 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801121c:	7afb      	ldrb	r3, [r7, #11]
 801121e:	b29a      	uxth	r2, r3
 8011220:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <tcp_parseopt+0xe8>)
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	4413      	add	r3, r2
 8011226:	b29b      	uxth	r3, r3
 8011228:	3b02      	subs	r3, #2
 801122a:	b29a      	uxth	r2, r3
 801122c:	4b0c      	ldr	r3, [pc, #48]	; (8011260 <tcp_parseopt+0xe8>)
 801122e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011230:	4b0b      	ldr	r3, [pc, #44]	; (8011260 <tcp_parseopt+0xe8>)
 8011232:	881a      	ldrh	r2, [r3, #0]
 8011234:	4b09      	ldr	r3, [pc, #36]	; (801125c <tcp_parseopt+0xe4>)
 8011236:	881b      	ldrh	r3, [r3, #0]
 8011238:	429a      	cmp	r2, r3
 801123a:	d3b3      	bcc.n	80111a4 <tcp_parseopt+0x2c>
 801123c:	e004      	b.n	8011248 <tcp_parseopt+0xd0>
          return;
 801123e:	bf00      	nop
 8011240:	e002      	b.n	8011248 <tcp_parseopt+0xd0>
            return;
 8011242:	bf00      	nop
 8011244:	e000      	b.n	8011248 <tcp_parseopt+0xd0>
            return;
 8011246:	bf00      	nop
      }
    }
  }
}
 8011248:	3710      	adds	r7, #16
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	08019f1c 	.word	0x08019f1c
 8011254:	0801a380 	.word	0x0801a380
 8011258:	08019f68 	.word	0x08019f68
 801125c:	24009dc4 	.word	0x24009dc4
 8011260:	24009dcc 	.word	0x24009dcc

08011264 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011264:	b480      	push	{r7}
 8011266:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011268:	4b05      	ldr	r3, [pc, #20]	; (8011280 <tcp_trigger_input_pcb_close+0x1c>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f043 0310 	orr.w	r3, r3, #16
 8011270:	b2da      	uxtb	r2, r3
 8011272:	4b03      	ldr	r3, [pc, #12]	; (8011280 <tcp_trigger_input_pcb_close+0x1c>)
 8011274:	701a      	strb	r2, [r3, #0]
}
 8011276:	bf00      	nop
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr
 8011280:	24009ddd 	.word	0x24009ddd

08011284 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00a      	beq.n	80112ac <tcp_route+0x28>
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	7a1b      	ldrb	r3, [r3, #8]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d006      	beq.n	80112ac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	7a1b      	ldrb	r3, [r3, #8]
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fb fb14 	bl	800c8d0 <netif_get_by_index>
 80112a8:	4603      	mov	r3, r0
 80112aa:	e003      	b.n	80112b4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80112ac:	6878      	ldr	r0, [r7, #4]
 80112ae:	f005 f86d 	bl	801638c <ip4_route>
 80112b2:	4603      	mov	r3, r0
  }
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3710      	adds	r7, #16
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80112bc:	b590      	push	{r4, r7, lr}
 80112be:	b087      	sub	sp, #28
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	60f8      	str	r0, [r7, #12]
 80112c4:	60b9      	str	r1, [r7, #8]
 80112c6:	603b      	str	r3, [r7, #0]
 80112c8:	4613      	mov	r3, r2
 80112ca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d105      	bne.n	80112de <tcp_create_segment+0x22>
 80112d2:	4b44      	ldr	r3, [pc, #272]	; (80113e4 <tcp_create_segment+0x128>)
 80112d4:	22a3      	movs	r2, #163	; 0xa3
 80112d6:	4944      	ldr	r1, [pc, #272]	; (80113e8 <tcp_create_segment+0x12c>)
 80112d8:	4844      	ldr	r0, [pc, #272]	; (80113ec <tcp_create_segment+0x130>)
 80112da:	f006 fd0d 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d105      	bne.n	80112f0 <tcp_create_segment+0x34>
 80112e4:	4b3f      	ldr	r3, [pc, #252]	; (80113e4 <tcp_create_segment+0x128>)
 80112e6:	22a4      	movs	r2, #164	; 0xa4
 80112e8:	4941      	ldr	r1, [pc, #260]	; (80113f0 <tcp_create_segment+0x134>)
 80112ea:	4840      	ldr	r0, [pc, #256]	; (80113ec <tcp_create_segment+0x130>)
 80112ec:	f006 fd04 	bl	8017cf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80112f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	b2db      	uxtb	r3, r3
 80112f8:	f003 0304 	and.w	r3, r3, #4
 80112fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80112fe:	2003      	movs	r0, #3
 8011300:	f7fa ff4e 	bl	800c1a0 <memp_malloc>
 8011304:	6138      	str	r0, [r7, #16]
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d104      	bne.n	8011316 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801130c:	68b8      	ldr	r0, [r7, #8]
 801130e:	f7fb fe6d 	bl	800cfec <pbuf_free>
    return NULL;
 8011312:	2300      	movs	r3, #0
 8011314:	e061      	b.n	80113da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801131c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801131e:	693b      	ldr	r3, [r7, #16]
 8011320:	2200      	movs	r2, #0
 8011322:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011324:	693b      	ldr	r3, [r7, #16]
 8011326:	68ba      	ldr	r2, [r7, #8]
 8011328:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	891a      	ldrh	r2, [r3, #8]
 801132e:	7dfb      	ldrb	r3, [r7, #23]
 8011330:	b29b      	uxth	r3, r3
 8011332:	429a      	cmp	r2, r3
 8011334:	d205      	bcs.n	8011342 <tcp_create_segment+0x86>
 8011336:	4b2b      	ldr	r3, [pc, #172]	; (80113e4 <tcp_create_segment+0x128>)
 8011338:	22b0      	movs	r2, #176	; 0xb0
 801133a:	492e      	ldr	r1, [pc, #184]	; (80113f4 <tcp_create_segment+0x138>)
 801133c:	482b      	ldr	r0, [pc, #172]	; (80113ec <tcp_create_segment+0x130>)
 801133e:	f006 fcdb 	bl	8017cf8 <iprintf>
  seg->len = p->tot_len - optlen;
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	891a      	ldrh	r2, [r3, #8]
 8011346:	7dfb      	ldrb	r3, [r7, #23]
 8011348:	b29b      	uxth	r3, r3
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	b29a      	uxth	r2, r3
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011352:	2114      	movs	r1, #20
 8011354:	68b8      	ldr	r0, [r7, #8]
 8011356:	f7fb fdb3 	bl	800cec0 <pbuf_add_header>
 801135a:	4603      	mov	r3, r0
 801135c:	2b00      	cmp	r3, #0
 801135e:	d004      	beq.n	801136a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011360:	6938      	ldr	r0, [r7, #16]
 8011362:	f7fd f8d2 	bl	800e50a <tcp_seg_free>
    return NULL;
 8011366:	2300      	movs	r3, #0
 8011368:	e037      	b.n	80113da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	685a      	ldr	r2, [r3, #4]
 8011370:	693b      	ldr	r3, [r7, #16]
 8011372:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	8ada      	ldrh	r2, [r3, #22]
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	68dc      	ldr	r4, [r3, #12]
 801137c:	4610      	mov	r0, r2
 801137e:	f7fa f97f 	bl	800b680 <lwip_htons>
 8011382:	4603      	mov	r3, r0
 8011384:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	8b1a      	ldrh	r2, [r3, #24]
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	68dc      	ldr	r4, [r3, #12]
 801138e:	4610      	mov	r0, r2
 8011390:	f7fa f976 	bl	800b680 <lwip_htons>
 8011394:	4603      	mov	r3, r0
 8011396:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011398:	693b      	ldr	r3, [r7, #16]
 801139a:	68dc      	ldr	r4, [r3, #12]
 801139c:	6838      	ldr	r0, [r7, #0]
 801139e:	f7fa f984 	bl	800b6aa <lwip_htonl>
 80113a2:	4603      	mov	r3, r0
 80113a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80113a6:	7dfb      	ldrb	r3, [r7, #23]
 80113a8:	089b      	lsrs	r3, r3, #2
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	b29b      	uxth	r3, r3
 80113ae:	3305      	adds	r3, #5
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	031b      	lsls	r3, r3, #12
 80113b4:	b29a      	uxth	r2, r3
 80113b6:	79fb      	ldrb	r3, [r7, #7]
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	4313      	orrs	r3, r2
 80113bc:	b29a      	uxth	r2, r3
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	68dc      	ldr	r4, [r3, #12]
 80113c2:	4610      	mov	r0, r2
 80113c4:	f7fa f95c 	bl	800b680 <lwip_htons>
 80113c8:	4603      	mov	r3, r0
 80113ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	68db      	ldr	r3, [r3, #12]
 80113d0:	2200      	movs	r2, #0
 80113d2:	749a      	strb	r2, [r3, #18]
 80113d4:	2200      	movs	r2, #0
 80113d6:	74da      	strb	r2, [r3, #19]
  return seg;
 80113d8:	693b      	ldr	r3, [r7, #16]
}
 80113da:	4618      	mov	r0, r3
 80113dc:	371c      	adds	r7, #28
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd90      	pop	{r4, r7, pc}
 80113e2:	bf00      	nop
 80113e4:	0801a39c 	.word	0x0801a39c
 80113e8:	0801a3d0 	.word	0x0801a3d0
 80113ec:	0801a3f0 	.word	0x0801a3f0
 80113f0:	0801a418 	.word	0x0801a418
 80113f4:	0801a43c 	.word	0x0801a43c

080113f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80113f8:	b590      	push	{r4, r7, lr}
 80113fa:	b08b      	sub	sp, #44	; 0x2c
 80113fc:	af02      	add	r7, sp, #8
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	460b      	mov	r3, r1
 8011402:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011404:	2300      	movs	r3, #0
 8011406:	61fb      	str	r3, [r7, #28]
 8011408:	2300      	movs	r3, #0
 801140a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801140c:	2300      	movs	r3, #0
 801140e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d106      	bne.n	8011424 <tcp_split_unsent_seg+0x2c>
 8011416:	4b95      	ldr	r3, [pc, #596]	; (801166c <tcp_split_unsent_seg+0x274>)
 8011418:	f240 324b 	movw	r2, #843	; 0x34b
 801141c:	4994      	ldr	r1, [pc, #592]	; (8011670 <tcp_split_unsent_seg+0x278>)
 801141e:	4895      	ldr	r0, [pc, #596]	; (8011674 <tcp_split_unsent_seg+0x27c>)
 8011420:	f006 fc6a 	bl	8017cf8 <iprintf>

  useg = pcb->unsent;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011428:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d102      	bne.n	8011436 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011434:	e116      	b.n	8011664 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011436:	887b      	ldrh	r3, [r7, #2]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d109      	bne.n	8011450 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801143c:	4b8b      	ldr	r3, [pc, #556]	; (801166c <tcp_split_unsent_seg+0x274>)
 801143e:	f240 3253 	movw	r2, #851	; 0x353
 8011442:	498d      	ldr	r1, [pc, #564]	; (8011678 <tcp_split_unsent_seg+0x280>)
 8011444:	488b      	ldr	r0, [pc, #556]	; (8011674 <tcp_split_unsent_seg+0x27c>)
 8011446:	f006 fc57 	bl	8017cf8 <iprintf>
    return ERR_VAL;
 801144a:	f06f 0305 	mvn.w	r3, #5
 801144e:	e109      	b.n	8011664 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	891b      	ldrh	r3, [r3, #8]
 8011454:	887a      	ldrh	r2, [r7, #2]
 8011456:	429a      	cmp	r2, r3
 8011458:	d301      	bcc.n	801145e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801145a:	2300      	movs	r3, #0
 801145c:	e102      	b.n	8011664 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011462:	887a      	ldrh	r2, [r7, #2]
 8011464:	429a      	cmp	r2, r3
 8011466:	d906      	bls.n	8011476 <tcp_split_unsent_seg+0x7e>
 8011468:	4b80      	ldr	r3, [pc, #512]	; (801166c <tcp_split_unsent_seg+0x274>)
 801146a:	f240 325b 	movw	r2, #859	; 0x35b
 801146e:	4983      	ldr	r1, [pc, #524]	; (801167c <tcp_split_unsent_seg+0x284>)
 8011470:	4880      	ldr	r0, [pc, #512]	; (8011674 <tcp_split_unsent_seg+0x27c>)
 8011472:	f006 fc41 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	891b      	ldrh	r3, [r3, #8]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d106      	bne.n	801148c <tcp_split_unsent_seg+0x94>
 801147e:	4b7b      	ldr	r3, [pc, #492]	; (801166c <tcp_split_unsent_seg+0x274>)
 8011480:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011484:	497e      	ldr	r1, [pc, #504]	; (8011680 <tcp_split_unsent_seg+0x288>)
 8011486:	487b      	ldr	r0, [pc, #492]	; (8011674 <tcp_split_unsent_seg+0x27c>)
 8011488:	f006 fc36 	bl	8017cf8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801148c:	697b      	ldr	r3, [r7, #20]
 801148e:	7a9b      	ldrb	r3, [r3, #10]
 8011490:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011492:	7bfb      	ldrb	r3, [r7, #15]
 8011494:	009b      	lsls	r3, r3, #2
 8011496:	b2db      	uxtb	r3, r3
 8011498:	f003 0304 	and.w	r3, r3, #4
 801149c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801149e:	697b      	ldr	r3, [r7, #20]
 80114a0:	891a      	ldrh	r2, [r3, #8]
 80114a2:	887b      	ldrh	r3, [r7, #2]
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80114a8:	7bbb      	ldrb	r3, [r7, #14]
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	89bb      	ldrh	r3, [r7, #12]
 80114ae:	4413      	add	r3, r2
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114b6:	4619      	mov	r1, r3
 80114b8:	2036      	movs	r0, #54	; 0x36
 80114ba:	f7fb fab3 	bl	800ca24 <pbuf_alloc>
 80114be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	f000 80b7 	beq.w	8011636 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	891a      	ldrh	r2, [r3, #8]
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	891b      	ldrh	r3, [r3, #8]
 80114d2:	1ad3      	subs	r3, r2, r3
 80114d4:	b29a      	uxth	r2, r3
 80114d6:	887b      	ldrh	r3, [r7, #2]
 80114d8:	4413      	add	r3, r2
 80114da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	6858      	ldr	r0, [r3, #4]
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	685a      	ldr	r2, [r3, #4]
 80114e4:	7bbb      	ldrb	r3, [r7, #14]
 80114e6:	18d1      	adds	r1, r2, r3
 80114e8:	897b      	ldrh	r3, [r7, #10]
 80114ea:	89ba      	ldrh	r2, [r7, #12]
 80114ec:	f7fb ff84 	bl	800d3f8 <pbuf_copy_partial>
 80114f0:	4603      	mov	r3, r0
 80114f2:	461a      	mov	r2, r3
 80114f4:	89bb      	ldrh	r3, [r7, #12]
 80114f6:	4293      	cmp	r3, r2
 80114f8:	f040 809f 	bne.w	801163a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	68db      	ldr	r3, [r3, #12]
 8011500:	899b      	ldrh	r3, [r3, #12]
 8011502:	b29b      	uxth	r3, r3
 8011504:	4618      	mov	r0, r3
 8011506:	f7fa f8bb 	bl	800b680 <lwip_htons>
 801150a:	4603      	mov	r3, r0
 801150c:	b2db      	uxtb	r3, r3
 801150e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011512:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011514:	2300      	movs	r3, #0
 8011516:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011518:	7efb      	ldrb	r3, [r7, #27]
 801151a:	f003 0308 	and.w	r3, r3, #8
 801151e:	2b00      	cmp	r3, #0
 8011520:	d007      	beq.n	8011532 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011522:	7efb      	ldrb	r3, [r7, #27]
 8011524:	f023 0308 	bic.w	r3, r3, #8
 8011528:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801152a:	7ebb      	ldrb	r3, [r7, #26]
 801152c:	f043 0308 	orr.w	r3, r3, #8
 8011530:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011532:	7efb      	ldrb	r3, [r7, #27]
 8011534:	f003 0301 	and.w	r3, r3, #1
 8011538:	2b00      	cmp	r3, #0
 801153a:	d007      	beq.n	801154c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801153c:	7efb      	ldrb	r3, [r7, #27]
 801153e:	f023 0301 	bic.w	r3, r3, #1
 8011542:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011544:	7ebb      	ldrb	r3, [r7, #26]
 8011546:	f043 0301 	orr.w	r3, r3, #1
 801154a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	4618      	mov	r0, r3
 8011554:	f7fa f8a9 	bl	800b6aa <lwip_htonl>
 8011558:	4602      	mov	r2, r0
 801155a:	887b      	ldrh	r3, [r7, #2]
 801155c:	18d1      	adds	r1, r2, r3
 801155e:	7eba      	ldrb	r2, [r7, #26]
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	9300      	str	r3, [sp, #0]
 8011564:	460b      	mov	r3, r1
 8011566:	6939      	ldr	r1, [r7, #16]
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7ff fea7 	bl	80112bc <tcp_create_segment>
 801156e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d063      	beq.n	801163e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	4618      	mov	r0, r3
 801157c:	f7fb fdc4 	bl	800d108 <pbuf_clen>
 8011580:	4603      	mov	r3, r0
 8011582:	461a      	mov	r2, r3
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801158a:	1a9b      	subs	r3, r3, r2
 801158c:	b29a      	uxth	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	6858      	ldr	r0, [r3, #4]
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	891a      	ldrh	r2, [r3, #8]
 801159e:	89bb      	ldrh	r3, [r7, #12]
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	b29b      	uxth	r3, r3
 80115a4:	4619      	mov	r1, r3
 80115a6:	f7fb fb9b 	bl	800cce0 <pbuf_realloc>
  useg->len -= remainder;
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	891a      	ldrh	r2, [r3, #8]
 80115ae:	89bb      	ldrh	r3, [r7, #12]
 80115b0:	1ad3      	subs	r3, r2, r3
 80115b2:	b29a      	uxth	r2, r3
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	b29c      	uxth	r4, r3
 80115c0:	7efb      	ldrb	r3, [r7, #27]
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7fa f85b 	bl	800b680 <lwip_htons>
 80115ca:	4603      	mov	r3, r0
 80115cc:	461a      	mov	r2, r3
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	68db      	ldr	r3, [r3, #12]
 80115d2:	4322      	orrs	r2, r4
 80115d4:	b292      	uxth	r2, r2
 80115d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80115d8:	697b      	ldr	r3, [r7, #20]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fb fd93 	bl	800d108 <pbuf_clen>
 80115e2:	4603      	mov	r3, r0
 80115e4:	461a      	mov	r2, r3
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115ec:	4413      	add	r3, r2
 80115ee:	b29a      	uxth	r2, r3
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7fb fd84 	bl	800d108 <pbuf_clen>
 8011600:	4603      	mov	r3, r0
 8011602:	461a      	mov	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801160a:	4413      	add	r3, r2
 801160c:	b29a      	uxth	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011614:	697b      	ldr	r3, [r7, #20]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	69fa      	ldr	r2, [r7, #28]
 8011620:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011622:	69fb      	ldr	r3, [r7, #28]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d103      	bne.n	8011632 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	2200      	movs	r2, #0
 801162e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011632:	2300      	movs	r3, #0
 8011634:	e016      	b.n	8011664 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011636:	bf00      	nop
 8011638:	e002      	b.n	8011640 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801163a:	bf00      	nop
 801163c:	e000      	b.n	8011640 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801163e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d006      	beq.n	8011654 <tcp_split_unsent_seg+0x25c>
 8011646:	4b09      	ldr	r3, [pc, #36]	; (801166c <tcp_split_unsent_seg+0x274>)
 8011648:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801164c:	490d      	ldr	r1, [pc, #52]	; (8011684 <tcp_split_unsent_seg+0x28c>)
 801164e:	4809      	ldr	r0, [pc, #36]	; (8011674 <tcp_split_unsent_seg+0x27c>)
 8011650:	f006 fb52 	bl	8017cf8 <iprintf>
  if (p != NULL) {
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d002      	beq.n	8011660 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801165a:	6938      	ldr	r0, [r7, #16]
 801165c:	f7fb fcc6 	bl	800cfec <pbuf_free>
  }

  return ERR_MEM;
 8011660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011664:	4618      	mov	r0, r3
 8011666:	3724      	adds	r7, #36	; 0x24
 8011668:	46bd      	mov	sp, r7
 801166a:	bd90      	pop	{r4, r7, pc}
 801166c:	0801a39c 	.word	0x0801a39c
 8011670:	0801a730 	.word	0x0801a730
 8011674:	0801a3f0 	.word	0x0801a3f0
 8011678:	0801a754 	.word	0x0801a754
 801167c:	0801a778 	.word	0x0801a778
 8011680:	0801a788 	.word	0x0801a788
 8011684:	0801a798 	.word	0x0801a798

08011688 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011688:	b590      	push	{r4, r7, lr}
 801168a:	b085      	sub	sp, #20
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d106      	bne.n	80116a4 <tcp_send_fin+0x1c>
 8011696:	4b21      	ldr	r3, [pc, #132]	; (801171c <tcp_send_fin+0x94>)
 8011698:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801169c:	4920      	ldr	r1, [pc, #128]	; (8011720 <tcp_send_fin+0x98>)
 801169e:	4821      	ldr	r0, [pc, #132]	; (8011724 <tcp_send_fin+0x9c>)
 80116a0:	f006 fb2a 	bl	8017cf8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d02e      	beq.n	801170a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116b0:	60fb      	str	r3, [r7, #12]
 80116b2:	e002      	b.n	80116ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1f8      	bne.n	80116b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	68db      	ldr	r3, [r3, #12]
 80116c6:	899b      	ldrh	r3, [r3, #12]
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	4618      	mov	r0, r3
 80116cc:	f7f9 ffd8 	bl	800b680 <lwip_htons>
 80116d0:	4603      	mov	r3, r0
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	f003 0307 	and.w	r3, r3, #7
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d116      	bne.n	801170a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	899b      	ldrh	r3, [r3, #12]
 80116e2:	b29c      	uxth	r4, r3
 80116e4:	2001      	movs	r0, #1
 80116e6:	f7f9 ffcb 	bl	800b680 <lwip_htons>
 80116ea:	4603      	mov	r3, r0
 80116ec:	461a      	mov	r2, r3
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	4322      	orrs	r2, r4
 80116f4:	b292      	uxth	r2, r2
 80116f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	8b5b      	ldrh	r3, [r3, #26]
 80116fc:	f043 0320 	orr.w	r3, r3, #32
 8011700:	b29a      	uxth	r2, r3
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011706:	2300      	movs	r3, #0
 8011708:	e004      	b.n	8011714 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801170a:	2101      	movs	r1, #1
 801170c:	6878      	ldr	r0, [r7, #4]
 801170e:	f000 f80b 	bl	8011728 <tcp_enqueue_flags>
 8011712:	4603      	mov	r3, r0
}
 8011714:	4618      	mov	r0, r3
 8011716:	3714      	adds	r7, #20
 8011718:	46bd      	mov	sp, r7
 801171a:	bd90      	pop	{r4, r7, pc}
 801171c:	0801a39c 	.word	0x0801a39c
 8011720:	0801a7a4 	.word	0x0801a7a4
 8011724:	0801a3f0 	.word	0x0801a3f0

08011728 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b08a      	sub	sp, #40	; 0x28
 801172c:	af02      	add	r7, sp, #8
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	460b      	mov	r3, r1
 8011732:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011734:	2300      	movs	r3, #0
 8011736:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011738:	2300      	movs	r3, #0
 801173a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801173c:	78fb      	ldrb	r3, [r7, #3]
 801173e:	f003 0303 	and.w	r3, r3, #3
 8011742:	2b00      	cmp	r3, #0
 8011744:	d106      	bne.n	8011754 <tcp_enqueue_flags+0x2c>
 8011746:	4b67      	ldr	r3, [pc, #412]	; (80118e4 <tcp_enqueue_flags+0x1bc>)
 8011748:	f240 4211 	movw	r2, #1041	; 0x411
 801174c:	4966      	ldr	r1, [pc, #408]	; (80118e8 <tcp_enqueue_flags+0x1c0>)
 801174e:	4867      	ldr	r0, [pc, #412]	; (80118ec <tcp_enqueue_flags+0x1c4>)
 8011750:	f006 fad2 	bl	8017cf8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d106      	bne.n	8011768 <tcp_enqueue_flags+0x40>
 801175a:	4b62      	ldr	r3, [pc, #392]	; (80118e4 <tcp_enqueue_flags+0x1bc>)
 801175c:	f240 4213 	movw	r2, #1043	; 0x413
 8011760:	4963      	ldr	r1, [pc, #396]	; (80118f0 <tcp_enqueue_flags+0x1c8>)
 8011762:	4862      	ldr	r0, [pc, #392]	; (80118ec <tcp_enqueue_flags+0x1c4>)
 8011764:	f006 fac8 	bl	8017cf8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011768:	78fb      	ldrb	r3, [r7, #3]
 801176a:	f003 0302 	and.w	r3, r3, #2
 801176e:	2b00      	cmp	r3, #0
 8011770:	d001      	beq.n	8011776 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011772:	2301      	movs	r3, #1
 8011774:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011776:	7ffb      	ldrb	r3, [r7, #31]
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	b2db      	uxtb	r3, r3
 801177c:	f003 0304 	and.w	r3, r3, #4
 8011780:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011782:	7dfb      	ldrb	r3, [r7, #23]
 8011784:	b29b      	uxth	r3, r3
 8011786:	f44f 7220 	mov.w	r2, #640	; 0x280
 801178a:	4619      	mov	r1, r3
 801178c:	2036      	movs	r0, #54	; 0x36
 801178e:	f7fb f949 	bl	800ca24 <pbuf_alloc>
 8011792:	6138      	str	r0, [r7, #16]
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d109      	bne.n	80117ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	8b5b      	ldrh	r3, [r3, #26]
 801179e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117a2:	b29a      	uxth	r2, r3
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117ac:	e095      	b.n	80118da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	895a      	ldrh	r2, [r3, #10]
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	429a      	cmp	r2, r3
 80117b8:	d206      	bcs.n	80117c8 <tcp_enqueue_flags+0xa0>
 80117ba:	4b4a      	ldr	r3, [pc, #296]	; (80118e4 <tcp_enqueue_flags+0x1bc>)
 80117bc:	f240 4239 	movw	r2, #1081	; 0x439
 80117c0:	494c      	ldr	r1, [pc, #304]	; (80118f4 <tcp_enqueue_flags+0x1cc>)
 80117c2:	484a      	ldr	r0, [pc, #296]	; (80118ec <tcp_enqueue_flags+0x1c4>)
 80117c4:	f006 fa98 	bl	8017cf8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80117cc:	78fa      	ldrb	r2, [r7, #3]
 80117ce:	7ffb      	ldrb	r3, [r7, #31]
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	460b      	mov	r3, r1
 80117d4:	6939      	ldr	r1, [r7, #16]
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f7ff fd70 	bl	80112bc <tcp_create_segment>
 80117dc:	60f8      	str	r0, [r7, #12]
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d109      	bne.n	80117f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	8b5b      	ldrh	r3, [r3, #26]
 80117e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117f6:	e070      	b.n	80118da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	f003 0303 	and.w	r3, r3, #3
 8011800:	2b00      	cmp	r3, #0
 8011802:	d006      	beq.n	8011812 <tcp_enqueue_flags+0xea>
 8011804:	4b37      	ldr	r3, [pc, #220]	; (80118e4 <tcp_enqueue_flags+0x1bc>)
 8011806:	f240 4242 	movw	r2, #1090	; 0x442
 801180a:	493b      	ldr	r1, [pc, #236]	; (80118f8 <tcp_enqueue_flags+0x1d0>)
 801180c:	4837      	ldr	r0, [pc, #220]	; (80118ec <tcp_enqueue_flags+0x1c4>)
 801180e:	f006 fa73 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	891b      	ldrh	r3, [r3, #8]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d006      	beq.n	8011828 <tcp_enqueue_flags+0x100>
 801181a:	4b32      	ldr	r3, [pc, #200]	; (80118e4 <tcp_enqueue_flags+0x1bc>)
 801181c:	f240 4243 	movw	r2, #1091	; 0x443
 8011820:	4936      	ldr	r1, [pc, #216]	; (80118fc <tcp_enqueue_flags+0x1d4>)
 8011822:	4832      	ldr	r0, [pc, #200]	; (80118ec <tcp_enqueue_flags+0x1c4>)
 8011824:	f006 fa68 	bl	8017cf8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801182c:	2b00      	cmp	r3, #0
 801182e:	d103      	bne.n	8011838 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	68fa      	ldr	r2, [r7, #12]
 8011834:	66da      	str	r2, [r3, #108]	; 0x6c
 8011836:	e00d      	b.n	8011854 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801183c:	61bb      	str	r3, [r7, #24]
 801183e:	e002      	b.n	8011846 <tcp_enqueue_flags+0x11e>
 8011840:	69bb      	ldr	r3, [r7, #24]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	61bb      	str	r3, [r7, #24]
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d1f8      	bne.n	8011840 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801184e:	69bb      	ldr	r3, [r7, #24]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2200      	movs	r2, #0
 8011858:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801185c:	78fb      	ldrb	r3, [r7, #3]
 801185e:	f003 0302 	and.w	r3, r3, #2
 8011862:	2b00      	cmp	r3, #0
 8011864:	d104      	bne.n	8011870 <tcp_enqueue_flags+0x148>
 8011866:	78fb      	ldrb	r3, [r7, #3]
 8011868:	f003 0301 	and.w	r3, r3, #1
 801186c:	2b00      	cmp	r3, #0
 801186e:	d004      	beq.n	801187a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801187a:	78fb      	ldrb	r3, [r7, #3]
 801187c:	f003 0301 	and.w	r3, r3, #1
 8011880:	2b00      	cmp	r3, #0
 8011882:	d006      	beq.n	8011892 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	8b5b      	ldrh	r3, [r3, #26]
 8011888:	f043 0320 	orr.w	r3, r3, #32
 801188c:	b29a      	uxth	r2, r3
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	4618      	mov	r0, r3
 8011898:	f7fb fc36 	bl	800d108 <pbuf_clen>
 801189c:	4603      	mov	r3, r0
 801189e:	461a      	mov	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118a6:	4413      	add	r3, r2
 80118a8:	b29a      	uxth	r2, r3
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d00e      	beq.n	80118d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10a      	bne.n	80118d8 <tcp_enqueue_flags+0x1b0>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d106      	bne.n	80118d8 <tcp_enqueue_flags+0x1b0>
 80118ca:	4b06      	ldr	r3, [pc, #24]	; (80118e4 <tcp_enqueue_flags+0x1bc>)
 80118cc:	f240 4265 	movw	r2, #1125	; 0x465
 80118d0:	490b      	ldr	r1, [pc, #44]	; (8011900 <tcp_enqueue_flags+0x1d8>)
 80118d2:	4806      	ldr	r0, [pc, #24]	; (80118ec <tcp_enqueue_flags+0x1c4>)
 80118d4:	f006 fa10 	bl	8017cf8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80118d8:	2300      	movs	r3, #0
}
 80118da:	4618      	mov	r0, r3
 80118dc:	3720      	adds	r7, #32
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	0801a39c 	.word	0x0801a39c
 80118e8:	0801a7c0 	.word	0x0801a7c0
 80118ec:	0801a3f0 	.word	0x0801a3f0
 80118f0:	0801a818 	.word	0x0801a818
 80118f4:	0801a838 	.word	0x0801a838
 80118f8:	0801a874 	.word	0x0801a874
 80118fc:	0801a88c 	.word	0x0801a88c
 8011900:	0801a8b8 	.word	0x0801a8b8

08011904 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011904:	b5b0      	push	{r4, r5, r7, lr}
 8011906:	b08a      	sub	sp, #40	; 0x28
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d106      	bne.n	8011920 <tcp_output+0x1c>
 8011912:	4b9e      	ldr	r3, [pc, #632]	; (8011b8c <tcp_output+0x288>)
 8011914:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011918:	499d      	ldr	r1, [pc, #628]	; (8011b90 <tcp_output+0x28c>)
 801191a:	489e      	ldr	r0, [pc, #632]	; (8011b94 <tcp_output+0x290>)
 801191c:	f006 f9ec 	bl	8017cf8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	7d1b      	ldrb	r3, [r3, #20]
 8011924:	2b01      	cmp	r3, #1
 8011926:	d106      	bne.n	8011936 <tcp_output+0x32>
 8011928:	4b98      	ldr	r3, [pc, #608]	; (8011b8c <tcp_output+0x288>)
 801192a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801192e:	499a      	ldr	r1, [pc, #616]	; (8011b98 <tcp_output+0x294>)
 8011930:	4898      	ldr	r0, [pc, #608]	; (8011b94 <tcp_output+0x290>)
 8011932:	f006 f9e1 	bl	8017cf8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011936:	4b99      	ldr	r3, [pc, #612]	; (8011b9c <tcp_output+0x298>)
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	429a      	cmp	r2, r3
 801193e:	d101      	bne.n	8011944 <tcp_output+0x40>
    return ERR_OK;
 8011940:	2300      	movs	r3, #0
 8011942:	e1ce      	b.n	8011ce2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011950:	4293      	cmp	r3, r2
 8011952:	bf28      	it	cs
 8011954:	4613      	movcs	r3, r2
 8011956:	b29b      	uxth	r3, r3
 8011958:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801195e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10b      	bne.n	801197e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	8b5b      	ldrh	r3, [r3, #26]
 801196a:	f003 0302 	and.w	r3, r3, #2
 801196e:	2b00      	cmp	r3, #0
 8011970:	f000 81aa 	beq.w	8011cc8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f000 fdcb 	bl	8012510 <tcp_send_empty_ack>
 801197a:	4603      	mov	r3, r0
 801197c:	e1b1      	b.n	8011ce2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801197e:	6879      	ldr	r1, [r7, #4]
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	3304      	adds	r3, #4
 8011984:	461a      	mov	r2, r3
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f7ff fc7c 	bl	8011284 <tcp_route>
 801198c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d102      	bne.n	801199a <tcp_output+0x96>
    return ERR_RTE;
 8011994:	f06f 0303 	mvn.w	r3, #3
 8011998:	e1a3      	b.n	8011ce2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d003      	beq.n	80119a8 <tcp_output+0xa4>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d111      	bne.n	80119cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d002      	beq.n	80119b4 <tcp_output+0xb0>
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	3304      	adds	r3, #4
 80119b2:	e000      	b.n	80119b6 <tcp_output+0xb2>
 80119b4:	2300      	movs	r3, #0
 80119b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d102      	bne.n	80119c4 <tcp_output+0xc0>
      return ERR_RTE;
 80119be:	f06f 0303 	mvn.w	r3, #3
 80119c2:	e18e      	b.n	8011ce2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	681a      	ldr	r2, [r3, #0]
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80119cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7f9 fe69 	bl	800b6aa <lwip_htonl>
 80119d8:	4602      	mov	r2, r0
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119de:	1ad3      	subs	r3, r2, r3
 80119e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119e2:	8912      	ldrh	r2, [r2, #8]
 80119e4:	4413      	add	r3, r2
 80119e6:	69ba      	ldr	r2, [r7, #24]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d227      	bcs.n	8011a3c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119f2:	461a      	mov	r2, r3
 80119f4:	69bb      	ldr	r3, [r7, #24]
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d114      	bne.n	8011a24 <tcp_output+0x120>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d110      	bne.n	8011a24 <tcp_output+0x120>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d10b      	bne.n	8011a24 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2200      	movs	r2, #0
 8011a10:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2201      	movs	r2, #1
 8011a18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2200      	movs	r2, #0
 8011a20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	8b5b      	ldrh	r3, [r3, #26]
 8011a28:	f003 0302 	and.w	r3, r3, #2
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f000 814d 	beq.w	8011ccc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011a32:	6878      	ldr	r0, [r7, #4]
 8011a34:	f000 fd6c 	bl	8012510 <tcp_send_empty_ack>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	e152      	b.n	8011ce2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a48:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a4a:	6a3b      	ldr	r3, [r7, #32]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	f000 811c 	beq.w	8011c8a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011a52:	e002      	b.n	8011a5a <tcp_output+0x156>
 8011a54:	6a3b      	ldr	r3, [r7, #32]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	623b      	str	r3, [r7, #32]
 8011a5a:	6a3b      	ldr	r3, [r7, #32]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d1f8      	bne.n	8011a54 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011a62:	e112      	b.n	8011c8a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	899b      	ldrh	r3, [r3, #12]
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f7f9 fe07 	bl	800b680 <lwip_htons>
 8011a72:	4603      	mov	r3, r0
 8011a74:	b2db      	uxtb	r3, r3
 8011a76:	f003 0304 	and.w	r3, r3, #4
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d006      	beq.n	8011a8c <tcp_output+0x188>
 8011a7e:	4b43      	ldr	r3, [pc, #268]	; (8011b8c <tcp_output+0x288>)
 8011a80:	f240 5236 	movw	r2, #1334	; 0x536
 8011a84:	4946      	ldr	r1, [pc, #280]	; (8011ba0 <tcp_output+0x29c>)
 8011a86:	4843      	ldr	r0, [pc, #268]	; (8011b94 <tcp_output+0x290>)
 8011a88:	f006 f936 	bl	8017cf8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d01f      	beq.n	8011ad4 <tcp_output+0x1d0>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	8b5b      	ldrh	r3, [r3, #26]
 8011a98:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d119      	bne.n	8011ad4 <tcp_output+0x1d0>
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d00b      	beq.n	8011ac0 <tcp_output+0x1bc>
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d110      	bne.n	8011ad4 <tcp_output+0x1d0>
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ab6:	891a      	ldrh	r2, [r3, #8]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d209      	bcs.n	8011ad4 <tcp_output+0x1d0>
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d004      	beq.n	8011ad4 <tcp_output+0x1d0>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ad0:	2b08      	cmp	r3, #8
 8011ad2:	d901      	bls.n	8011ad8 <tcp_output+0x1d4>
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	e000      	b.n	8011ada <tcp_output+0x1d6>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d106      	bne.n	8011aec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	8b5b      	ldrh	r3, [r3, #26]
 8011ae2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f000 80e4 	beq.w	8011cb4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	7d1b      	ldrb	r3, [r3, #20]
 8011af0:	2b02      	cmp	r3, #2
 8011af2:	d00d      	beq.n	8011b10 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	68db      	ldr	r3, [r3, #12]
 8011af8:	899b      	ldrh	r3, [r3, #12]
 8011afa:	b29c      	uxth	r4, r3
 8011afc:	2010      	movs	r0, #16
 8011afe:	f7f9 fdbf 	bl	800b680 <lwip_htons>
 8011b02:	4603      	mov	r3, r0
 8011b04:	461a      	mov	r2, r3
 8011b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	4322      	orrs	r2, r4
 8011b0c:	b292      	uxth	r2, r2
 8011b0e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011b10:	697a      	ldr	r2, [r7, #20]
 8011b12:	6879      	ldr	r1, [r7, #4]
 8011b14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b16:	f000 f909 	bl	8011d2c <tcp_output_segment>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d009      	beq.n	8011b3a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	8b5b      	ldrh	r3, [r3, #26]
 8011b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b2e:	b29a      	uxth	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	835a      	strh	r2, [r3, #26]
      return err;
 8011b34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b38:	e0d3      	b.n	8011ce2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	7d1b      	ldrb	r3, [r3, #20]
 8011b46:	2b02      	cmp	r3, #2
 8011b48:	d006      	beq.n	8011b58 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	8b5b      	ldrh	r3, [r3, #26]
 8011b4e:	f023 0303 	bic.w	r3, r3, #3
 8011b52:	b29a      	uxth	r2, r3
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b5a:	68db      	ldr	r3, [r3, #12]
 8011b5c:	685b      	ldr	r3, [r3, #4]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f7f9 fda3 	bl	800b6aa <lwip_htonl>
 8011b64:	4604      	mov	r4, r0
 8011b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b68:	891b      	ldrh	r3, [r3, #8]
 8011b6a:	461d      	mov	r5, r3
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	899b      	ldrh	r3, [r3, #12]
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7f9 fd83 	bl	800b680 <lwip_htons>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	f003 0303 	and.w	r3, r3, #3
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d00e      	beq.n	8011ba4 <tcp_output+0x2a0>
 8011b86:	2301      	movs	r3, #1
 8011b88:	e00d      	b.n	8011ba6 <tcp_output+0x2a2>
 8011b8a:	bf00      	nop
 8011b8c:	0801a39c 	.word	0x0801a39c
 8011b90:	0801a8e0 	.word	0x0801a8e0
 8011b94:	0801a3f0 	.word	0x0801a3f0
 8011b98:	0801a8f8 	.word	0x0801a8f8
 8011b9c:	2400d6d0 	.word	0x2400d6d0
 8011ba0:	0801a920 	.word	0x0801a920
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	442b      	add	r3, r5
 8011ba8:	4423      	add	r3, r4
 8011baa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011bb0:	68bb      	ldr	r3, [r7, #8]
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	da02      	bge.n	8011bbe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	68ba      	ldr	r2, [r7, #8]
 8011bbc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc0:	891b      	ldrh	r3, [r3, #8]
 8011bc2:	461c      	mov	r4, r3
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	899b      	ldrh	r3, [r3, #12]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7f9 fd57 	bl	800b680 <lwip_htons>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	b2db      	uxtb	r3, r3
 8011bd6:	f003 0303 	and.w	r3, r3, #3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d001      	beq.n	8011be2 <tcp_output+0x2de>
 8011bde:	2301      	movs	r3, #1
 8011be0:	e000      	b.n	8011be4 <tcp_output+0x2e0>
 8011be2:	2300      	movs	r3, #0
 8011be4:	4423      	add	r3, r4
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d049      	beq.n	8011c7e <tcp_output+0x37a>
      seg->next = NULL;
 8011bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bec:	2200      	movs	r2, #0
 8011bee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d105      	bne.n	8011c04 <tcp_output+0x300>
        pcb->unacked = seg;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bfc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c00:	623b      	str	r3, [r7, #32]
 8011c02:	e03f      	b.n	8011c84 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7f9 fd4d 	bl	800b6aa <lwip_htonl>
 8011c10:	4604      	mov	r4, r0
 8011c12:	6a3b      	ldr	r3, [r7, #32]
 8011c14:	68db      	ldr	r3, [r3, #12]
 8011c16:	685b      	ldr	r3, [r3, #4]
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7f9 fd46 	bl	800b6aa <lwip_htonl>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	1ae3      	subs	r3, r4, r3
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	da24      	bge.n	8011c70 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	3370      	adds	r3, #112	; 0x70
 8011c2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c2c:	e002      	b.n	8011c34 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c34:	69fb      	ldr	r3, [r7, #28]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d011      	beq.n	8011c60 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c3c:	69fb      	ldr	r3, [r7, #28]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	68db      	ldr	r3, [r3, #12]
 8011c42:	685b      	ldr	r3, [r3, #4]
 8011c44:	4618      	mov	r0, r3
 8011c46:	f7f9 fd30 	bl	800b6aa <lwip_htonl>
 8011c4a:	4604      	mov	r4, r0
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	4618      	mov	r0, r3
 8011c54:	f7f9 fd29 	bl	800b6aa <lwip_htonl>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	dbe6      	blt.n	8011c2e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011c60:	69fb      	ldr	r3, [r7, #28]
 8011c62:	681a      	ldr	r2, [r3, #0]
 8011c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c66:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c6c:	601a      	str	r2, [r3, #0]
 8011c6e:	e009      	b.n	8011c84 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011c70:	6a3b      	ldr	r3, [r7, #32]
 8011c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c74:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	623b      	str	r3, [r7, #32]
 8011c7c:	e002      	b.n	8011c84 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011c7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c80:	f7fc fc43 	bl	800e50a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c88:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d012      	beq.n	8011cb6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c92:	68db      	ldr	r3, [r3, #12]
 8011c94:	685b      	ldr	r3, [r3, #4]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7f9 fd07 	bl	800b6aa <lwip_htonl>
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ca2:	1ad3      	subs	r3, r2, r3
 8011ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ca6:	8912      	ldrh	r2, [r2, #8]
 8011ca8:	4413      	add	r3, r2
  while (seg != NULL &&
 8011caa:	69ba      	ldr	r2, [r7, #24]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	f4bf aed9 	bcs.w	8011a64 <tcp_output+0x160>
 8011cb2:	e000      	b.n	8011cb6 <tcp_output+0x3b2>
      break;
 8011cb4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d108      	bne.n	8011cd0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011cc6:	e004      	b.n	8011cd2 <tcp_output+0x3ce>
    goto output_done;
 8011cc8:	bf00      	nop
 8011cca:	e002      	b.n	8011cd2 <tcp_output+0x3ce>
    goto output_done;
 8011ccc:	bf00      	nop
 8011cce:	e000      	b.n	8011cd2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011cd0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	8b5b      	ldrh	r3, [r3, #26]
 8011cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011cda:	b29a      	uxth	r2, r3
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3728      	adds	r7, #40	; 0x28
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8011cea:	bf00      	nop

08011cec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b082      	sub	sp, #8
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d106      	bne.n	8011d08 <tcp_output_segment_busy+0x1c>
 8011cfa:	4b09      	ldr	r3, [pc, #36]	; (8011d20 <tcp_output_segment_busy+0x34>)
 8011cfc:	f240 529a 	movw	r2, #1434	; 0x59a
 8011d00:	4908      	ldr	r1, [pc, #32]	; (8011d24 <tcp_output_segment_busy+0x38>)
 8011d02:	4809      	ldr	r0, [pc, #36]	; (8011d28 <tcp_output_segment_busy+0x3c>)
 8011d04:	f005 fff8 	bl	8017cf8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	685b      	ldr	r3, [r3, #4]
 8011d0c:	7b9b      	ldrb	r3, [r3, #14]
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	d001      	beq.n	8011d16 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011d12:	2301      	movs	r3, #1
 8011d14:	e000      	b.n	8011d18 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	0801a39c 	.word	0x0801a39c
 8011d24:	0801a938 	.word	0x0801a938
 8011d28:	0801a3f0 	.word	0x0801a3f0

08011d2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d2c:	b5b0      	push	{r4, r5, r7, lr}
 8011d2e:	b08c      	sub	sp, #48	; 0x30
 8011d30:	af04      	add	r7, sp, #16
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	60b9      	str	r1, [r7, #8]
 8011d36:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d106      	bne.n	8011d4c <tcp_output_segment+0x20>
 8011d3e:	4b63      	ldr	r3, [pc, #396]	; (8011ecc <tcp_output_segment+0x1a0>)
 8011d40:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011d44:	4962      	ldr	r1, [pc, #392]	; (8011ed0 <tcp_output_segment+0x1a4>)
 8011d46:	4863      	ldr	r0, [pc, #396]	; (8011ed4 <tcp_output_segment+0x1a8>)
 8011d48:	f005 ffd6 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d106      	bne.n	8011d60 <tcp_output_segment+0x34>
 8011d52:	4b5e      	ldr	r3, [pc, #376]	; (8011ecc <tcp_output_segment+0x1a0>)
 8011d54:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011d58:	495f      	ldr	r1, [pc, #380]	; (8011ed8 <tcp_output_segment+0x1ac>)
 8011d5a:	485e      	ldr	r0, [pc, #376]	; (8011ed4 <tcp_output_segment+0x1a8>)
 8011d5c:	f005 ffcc 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d106      	bne.n	8011d74 <tcp_output_segment+0x48>
 8011d66:	4b59      	ldr	r3, [pc, #356]	; (8011ecc <tcp_output_segment+0x1a0>)
 8011d68:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011d6c:	495b      	ldr	r1, [pc, #364]	; (8011edc <tcp_output_segment+0x1b0>)
 8011d6e:	4859      	ldr	r0, [pc, #356]	; (8011ed4 <tcp_output_segment+0x1a8>)
 8011d70:	f005 ffc2 	bl	8017cf8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011d74:	68f8      	ldr	r0, [r7, #12]
 8011d76:	f7ff ffb9 	bl	8011cec <tcp_output_segment_busy>
 8011d7a:	4603      	mov	r3, r0
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d001      	beq.n	8011d84 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011d80:	2300      	movs	r3, #0
 8011d82:	e09f      	b.n	8011ec4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	68dc      	ldr	r4, [r3, #12]
 8011d8c:	4610      	mov	r0, r2
 8011d8e:	f7f9 fc8c 	bl	800b6aa <lwip_htonl>
 8011d92:	4603      	mov	r3, r0
 8011d94:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	68dc      	ldr	r4, [r3, #12]
 8011d9e:	4610      	mov	r0, r2
 8011da0:	f7f9 fc6e 	bl	800b680 <lwip_htons>
 8011da4:	4603      	mov	r3, r0
 8011da6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dac:	68ba      	ldr	r2, [r7, #8]
 8011dae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011db0:	441a      	add	r2, r3
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	3314      	adds	r3, #20
 8011dbc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	7a9b      	ldrb	r3, [r3, #10]
 8011dc2:	f003 0301 	and.w	r3, r3, #1
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d015      	beq.n	8011df6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	3304      	adds	r3, #4
 8011dce:	461a      	mov	r2, r3
 8011dd0:	6879      	ldr	r1, [r7, #4]
 8011dd2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011dd6:	f7fc fe8f 	bl	800eaf8 <tcp_eff_send_mss_netif>
 8011dda:	4603      	mov	r3, r0
 8011ddc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011dde:	8b7b      	ldrh	r3, [r7, #26]
 8011de0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011de4:	4618      	mov	r0, r3
 8011de6:	f7f9 fc60 	bl	800b6aa <lwip_htonl>
 8011dea:	4602      	mov	r2, r0
 8011dec:	69fb      	ldr	r3, [r7, #28]
 8011dee:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011df0:	69fb      	ldr	r3, [r7, #28]
 8011df2:	3304      	adds	r3, #4
 8011df4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	da02      	bge.n	8011e06 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	2200      	movs	r2, #0
 8011e04:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011e06:	68bb      	ldr	r3, [r7, #8]
 8011e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d10c      	bne.n	8011e28 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011e0e:	4b34      	ldr	r3, [pc, #208]	; (8011ee0 <tcp_output_segment+0x1b4>)
 8011e10:	681a      	ldr	r2, [r3, #0]
 8011e12:	68bb      	ldr	r3, [r7, #8]
 8011e14:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	f7f9 fc44 	bl	800b6aa <lwip_htonl>
 8011e22:	4602      	mov	r2, r0
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	68da      	ldr	r2, [r3, #12]
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	1ad3      	subs	r3, r2, r3
 8011e34:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	685b      	ldr	r3, [r3, #4]
 8011e3a:	8959      	ldrh	r1, [r3, #10]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	685b      	ldr	r3, [r3, #4]
 8011e40:	8b3a      	ldrh	r2, [r7, #24]
 8011e42:	1a8a      	subs	r2, r1, r2
 8011e44:	b292      	uxth	r2, r2
 8011e46:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	8919      	ldrh	r1, [r3, #8]
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	8b3a      	ldrh	r2, [r7, #24]
 8011e54:	1a8a      	subs	r2, r1, r2
 8011e56:	b292      	uxth	r2, r2
 8011e58:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	68fa      	ldr	r2, [r7, #12]
 8011e60:	68d2      	ldr	r2, [r2, #12]
 8011e62:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	68db      	ldr	r3, [r3, #12]
 8011e68:	2200      	movs	r2, #0
 8011e6a:	741a      	strb	r2, [r3, #16]
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	68db      	ldr	r3, [r3, #12]
 8011e74:	f103 0214 	add.w	r2, r3, #20
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	7a9b      	ldrb	r3, [r3, #10]
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	f003 0304 	and.w	r3, r3, #4
 8011e82:	4413      	add	r3, r2
 8011e84:	69fa      	ldr	r2, [r7, #28]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d006      	beq.n	8011e98 <tcp_output_segment+0x16c>
 8011e8a:	4b10      	ldr	r3, [pc, #64]	; (8011ecc <tcp_output_segment+0x1a0>)
 8011e8c:	f240 621c 	movw	r2, #1564	; 0x61c
 8011e90:	4914      	ldr	r1, [pc, #80]	; (8011ee4 <tcp_output_segment+0x1b8>)
 8011e92:	4810      	ldr	r0, [pc, #64]	; (8011ed4 <tcp_output_segment+0x1a8>)
 8011e94:	f005 ff30 	bl	8017cf8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	6858      	ldr	r0, [r3, #4]
 8011e9c:	68b9      	ldr	r1, [r7, #8]
 8011e9e:	68bb      	ldr	r3, [r7, #8]
 8011ea0:	1d1c      	adds	r4, r3, #4
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	7add      	ldrb	r5, [r3, #11]
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	7a9b      	ldrb	r3, [r3, #10]
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	9202      	str	r2, [sp, #8]
 8011eae:	2206      	movs	r2, #6
 8011eb0:	9201      	str	r2, [sp, #4]
 8011eb2:	9300      	str	r3, [sp, #0]
 8011eb4:	462b      	mov	r3, r5
 8011eb6:	4622      	mov	r2, r4
 8011eb8:	f004 fc44 	bl	8016744 <ip4_output_if>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011ec0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	3720      	adds	r7, #32
 8011ec8:	46bd      	mov	sp, r7
 8011eca:	bdb0      	pop	{r4, r5, r7, pc}
 8011ecc:	0801a39c 	.word	0x0801a39c
 8011ed0:	0801a960 	.word	0x0801a960
 8011ed4:	0801a3f0 	.word	0x0801a3f0
 8011ed8:	0801a980 	.word	0x0801a980
 8011edc:	0801a9a0 	.word	0x0801a9a0
 8011ee0:	2400d6c0 	.word	0x2400d6c0
 8011ee4:	0801a9c4 	.word	0x0801a9c4

08011ee8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011ee8:	b5b0      	push	{r4, r5, r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d106      	bne.n	8011f04 <tcp_rexmit_rto_prepare+0x1c>
 8011ef6:	4b31      	ldr	r3, [pc, #196]	; (8011fbc <tcp_rexmit_rto_prepare+0xd4>)
 8011ef8:	f240 6263 	movw	r2, #1635	; 0x663
 8011efc:	4930      	ldr	r1, [pc, #192]	; (8011fc0 <tcp_rexmit_rto_prepare+0xd8>)
 8011efe:	4831      	ldr	r0, [pc, #196]	; (8011fc4 <tcp_rexmit_rto_prepare+0xdc>)
 8011f00:	f005 fefa 	bl	8017cf8 <iprintf>

  if (pcb->unacked == NULL) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d102      	bne.n	8011f12 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011f0c:	f06f 0305 	mvn.w	r3, #5
 8011f10:	e050      	b.n	8011fb4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f16:	60fb      	str	r3, [r7, #12]
 8011f18:	e00b      	b.n	8011f32 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f7ff fee6 	bl	8011cec <tcp_output_segment_busy>
 8011f20:	4603      	mov	r3, r0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d002      	beq.n	8011f2c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011f26:	f06f 0305 	mvn.w	r3, #5
 8011f2a:	e043      	b.n	8011fb4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	60fb      	str	r3, [r7, #12]
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1ef      	bne.n	8011f1a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f7ff fed6 	bl	8011cec <tcp_output_segment_busy>
 8011f40:	4603      	mov	r3, r0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d002      	beq.n	8011f4c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011f46:	f06f 0305 	mvn.w	r3, #5
 8011f4a:	e033      	b.n	8011fb4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	8b5b      	ldrh	r3, [r3, #26]
 8011f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	685b      	ldr	r3, [r3, #4]
 8011f76:	4618      	mov	r0, r3
 8011f78:	f7f9 fb97 	bl	800b6aa <lwip_htonl>
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	891b      	ldrh	r3, [r3, #8]
 8011f82:	461d      	mov	r5, r3
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	68db      	ldr	r3, [r3, #12]
 8011f88:	899b      	ldrh	r3, [r3, #12]
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f7f9 fb77 	bl	800b680 <lwip_htons>
 8011f92:	4603      	mov	r3, r0
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	f003 0303 	and.w	r3, r3, #3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d001      	beq.n	8011fa2 <tcp_rexmit_rto_prepare+0xba>
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	e000      	b.n	8011fa4 <tcp_rexmit_rto_prepare+0xbc>
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	442b      	add	r3, r5
 8011fa6:	18e2      	adds	r2, r4, r3
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011fb2:	2300      	movs	r3, #0
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bdb0      	pop	{r4, r5, r7, pc}
 8011fbc:	0801a39c 	.word	0x0801a39c
 8011fc0:	0801a9d8 	.word	0x0801a9d8
 8011fc4:	0801a3f0 	.word	0x0801a3f0

08011fc8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b082      	sub	sp, #8
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d106      	bne.n	8011fe4 <tcp_rexmit_rto_commit+0x1c>
 8011fd6:	4b0d      	ldr	r3, [pc, #52]	; (801200c <tcp_rexmit_rto_commit+0x44>)
 8011fd8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011fdc:	490c      	ldr	r1, [pc, #48]	; (8012010 <tcp_rexmit_rto_commit+0x48>)
 8011fde:	480d      	ldr	r0, [pc, #52]	; (8012014 <tcp_rexmit_rto_commit+0x4c>)
 8011fe0:	f005 fe8a 	bl	8017cf8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fea:	2bff      	cmp	r3, #255	; 0xff
 8011fec:	d007      	beq.n	8011ffe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	b2da      	uxtb	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011ffe:	6878      	ldr	r0, [r7, #4]
 8012000:	f7ff fc80 	bl	8011904 <tcp_output>
}
 8012004:	bf00      	nop
 8012006:	3708      	adds	r7, #8
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	0801a39c 	.word	0x0801a39c
 8012010:	0801a9fc 	.word	0x0801a9fc
 8012014:	0801a3f0 	.word	0x0801a3f0

08012018 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b082      	sub	sp, #8
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <tcp_rexmit_rto+0x1c>
 8012026:	4b0a      	ldr	r3, [pc, #40]	; (8012050 <tcp_rexmit_rto+0x38>)
 8012028:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801202c:	4909      	ldr	r1, [pc, #36]	; (8012054 <tcp_rexmit_rto+0x3c>)
 801202e:	480a      	ldr	r0, [pc, #40]	; (8012058 <tcp_rexmit_rto+0x40>)
 8012030:	f005 fe62 	bl	8017cf8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f7ff ff57 	bl	8011ee8 <tcp_rexmit_rto_prepare>
 801203a:	4603      	mov	r3, r0
 801203c:	2b00      	cmp	r3, #0
 801203e:	d102      	bne.n	8012046 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012040:	6878      	ldr	r0, [r7, #4]
 8012042:	f7ff ffc1 	bl	8011fc8 <tcp_rexmit_rto_commit>
  }
}
 8012046:	bf00      	nop
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}
 801204e:	bf00      	nop
 8012050:	0801a39c 	.word	0x0801a39c
 8012054:	0801aa20 	.word	0x0801aa20
 8012058:	0801a3f0 	.word	0x0801a3f0

0801205c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801205c:	b590      	push	{r4, r7, lr}
 801205e:	b085      	sub	sp, #20
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d106      	bne.n	8012078 <tcp_rexmit+0x1c>
 801206a:	4b2f      	ldr	r3, [pc, #188]	; (8012128 <tcp_rexmit+0xcc>)
 801206c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012070:	492e      	ldr	r1, [pc, #184]	; (801212c <tcp_rexmit+0xd0>)
 8012072:	482f      	ldr	r0, [pc, #188]	; (8012130 <tcp_rexmit+0xd4>)
 8012074:	f005 fe40 	bl	8017cf8 <iprintf>

  if (pcb->unacked == NULL) {
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801207c:	2b00      	cmp	r3, #0
 801207e:	d102      	bne.n	8012086 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012080:	f06f 0305 	mvn.w	r3, #5
 8012084:	e04c      	b.n	8012120 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801208a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801208c:	68b8      	ldr	r0, [r7, #8]
 801208e:	f7ff fe2d 	bl	8011cec <tcp_output_segment_busy>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d002      	beq.n	801209e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012098:	f06f 0305 	mvn.w	r3, #5
 801209c:	e040      	b.n	8012120 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	336c      	adds	r3, #108	; 0x6c
 80120aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120ac:	e002      	b.n	80120b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d011      	beq.n	80120e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	68db      	ldr	r3, [r3, #12]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	4618      	mov	r0, r3
 80120c6:	f7f9 faf0 	bl	800b6aa <lwip_htonl>
 80120ca:	4604      	mov	r4, r0
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	685b      	ldr	r3, [r3, #4]
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7f9 fae9 	bl	800b6aa <lwip_htonl>
 80120d8:	4603      	mov	r3, r0
 80120da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80120dc:	2b00      	cmp	r3, #0
 80120de:	dbe6      	blt.n	80120ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	681a      	ldr	r2, [r3, #0]
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d103      	bne.n	80120fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2200      	movs	r2, #0
 80120fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012104:	2bff      	cmp	r3, #255	; 0xff
 8012106:	d007      	beq.n	8012118 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801210e:	3301      	adds	r3, #1
 8012110:	b2da      	uxtb	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2200      	movs	r2, #0
 801211c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801211e:	2300      	movs	r3, #0
}
 8012120:	4618      	mov	r0, r3
 8012122:	3714      	adds	r7, #20
 8012124:	46bd      	mov	sp, r7
 8012126:	bd90      	pop	{r4, r7, pc}
 8012128:	0801a39c 	.word	0x0801a39c
 801212c:	0801aa3c 	.word	0x0801aa3c
 8012130:	0801a3f0 	.word	0x0801a3f0

08012134 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <tcp_rexmit_fast+0x1c>
 8012142:	4b2a      	ldr	r3, [pc, #168]	; (80121ec <tcp_rexmit_fast+0xb8>)
 8012144:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012148:	4929      	ldr	r1, [pc, #164]	; (80121f0 <tcp_rexmit_fast+0xbc>)
 801214a:	482a      	ldr	r0, [pc, #168]	; (80121f4 <tcp_rexmit_fast+0xc0>)
 801214c:	f005 fdd4 	bl	8017cf8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012154:	2b00      	cmp	r3, #0
 8012156:	d045      	beq.n	80121e4 <tcp_rexmit_fast+0xb0>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	8b5b      	ldrh	r3, [r3, #26]
 801215c:	f003 0304 	and.w	r3, r3, #4
 8012160:	2b00      	cmp	r3, #0
 8012162:	d13f      	bne.n	80121e4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7ff ff79 	bl	801205c <tcp_rexmit>
 801216a:	4603      	mov	r3, r0
 801216c:	2b00      	cmp	r3, #0
 801216e:	d139      	bne.n	80121e4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801217c:	4293      	cmp	r3, r2
 801217e:	bf28      	it	cs
 8012180:	4613      	movcs	r3, r2
 8012182:	b29b      	uxth	r3, r3
 8012184:	2b00      	cmp	r3, #0
 8012186:	da00      	bge.n	801218a <tcp_rexmit_fast+0x56>
 8012188:	3301      	adds	r3, #1
 801218a:	105b      	asrs	r3, r3, #1
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801219a:	461a      	mov	r2, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121a0:	005b      	lsls	r3, r3, #1
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d206      	bcs.n	80121b4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121aa:	005b      	lsls	r3, r3, #1
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121be:	4619      	mov	r1, r3
 80121c0:	0049      	lsls	r1, r1, #1
 80121c2:	440b      	add	r3, r1
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	4413      	add	r3, r2
 80121c8:	b29a      	uxth	r2, r3
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	8b5b      	ldrh	r3, [r3, #26]
 80121d4:	f043 0304 	orr.w	r3, r3, #4
 80121d8:	b29a      	uxth	r2, r3
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2200      	movs	r2, #0
 80121e2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80121e4:	bf00      	nop
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	0801a39c 	.word	0x0801a39c
 80121f0:	0801aa54 	.word	0x0801aa54
 80121f4:	0801a3f0 	.word	0x0801a3f0

080121f8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b086      	sub	sp, #24
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	60f8      	str	r0, [r7, #12]
 8012200:	607b      	str	r3, [r7, #4]
 8012202:	460b      	mov	r3, r1
 8012204:	817b      	strh	r3, [r7, #10]
 8012206:	4613      	mov	r3, r2
 8012208:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801220a:	897a      	ldrh	r2, [r7, #10]
 801220c:	893b      	ldrh	r3, [r7, #8]
 801220e:	4413      	add	r3, r2
 8012210:	b29b      	uxth	r3, r3
 8012212:	3314      	adds	r3, #20
 8012214:	b29b      	uxth	r3, r3
 8012216:	f44f 7220 	mov.w	r2, #640	; 0x280
 801221a:	4619      	mov	r1, r3
 801221c:	2022      	movs	r0, #34	; 0x22
 801221e:	f7fa fc01 	bl	800ca24 <pbuf_alloc>
 8012222:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d04d      	beq.n	80122c6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801222a:	897b      	ldrh	r3, [r7, #10]
 801222c:	3313      	adds	r3, #19
 801222e:	697a      	ldr	r2, [r7, #20]
 8012230:	8952      	ldrh	r2, [r2, #10]
 8012232:	4293      	cmp	r3, r2
 8012234:	db06      	blt.n	8012244 <tcp_output_alloc_header_common+0x4c>
 8012236:	4b26      	ldr	r3, [pc, #152]	; (80122d0 <tcp_output_alloc_header_common+0xd8>)
 8012238:	f240 7223 	movw	r2, #1827	; 0x723
 801223c:	4925      	ldr	r1, [pc, #148]	; (80122d4 <tcp_output_alloc_header_common+0xdc>)
 801223e:	4826      	ldr	r0, [pc, #152]	; (80122d8 <tcp_output_alloc_header_common+0xe0>)
 8012240:	f005 fd5a 	bl	8017cf8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	685b      	ldr	r3, [r3, #4]
 8012248:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801224a:	8c3b      	ldrh	r3, [r7, #32]
 801224c:	4618      	mov	r0, r3
 801224e:	f7f9 fa17 	bl	800b680 <lwip_htons>
 8012252:	4603      	mov	r3, r0
 8012254:	461a      	mov	r2, r3
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801225a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801225c:	4618      	mov	r0, r3
 801225e:	f7f9 fa0f 	bl	800b680 <lwip_htons>
 8012262:	4603      	mov	r3, r0
 8012264:	461a      	mov	r2, r3
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	687a      	ldr	r2, [r7, #4]
 801226e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012270:	68f8      	ldr	r0, [r7, #12]
 8012272:	f7f9 fa1a 	bl	800b6aa <lwip_htonl>
 8012276:	4602      	mov	r2, r0
 8012278:	693b      	ldr	r3, [r7, #16]
 801227a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801227c:	897b      	ldrh	r3, [r7, #10]
 801227e:	089b      	lsrs	r3, r3, #2
 8012280:	b29b      	uxth	r3, r3
 8012282:	3305      	adds	r3, #5
 8012284:	b29b      	uxth	r3, r3
 8012286:	031b      	lsls	r3, r3, #12
 8012288:	b29a      	uxth	r2, r3
 801228a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801228e:	b29b      	uxth	r3, r3
 8012290:	4313      	orrs	r3, r2
 8012292:	b29b      	uxth	r3, r3
 8012294:	4618      	mov	r0, r3
 8012296:	f7f9 f9f3 	bl	800b680 <lwip_htons>
 801229a:	4603      	mov	r3, r0
 801229c:	461a      	mov	r2, r3
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80122a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122a4:	4618      	mov	r0, r3
 80122a6:	f7f9 f9eb 	bl	800b680 <lwip_htons>
 80122aa:	4603      	mov	r3, r0
 80122ac:	461a      	mov	r2, r3
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80122b2:	693b      	ldr	r3, [r7, #16]
 80122b4:	2200      	movs	r2, #0
 80122b6:	741a      	strb	r2, [r3, #16]
 80122b8:	2200      	movs	r2, #0
 80122ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	2200      	movs	r2, #0
 80122c0:	749a      	strb	r2, [r3, #18]
 80122c2:	2200      	movs	r2, #0
 80122c4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80122c6:	697b      	ldr	r3, [r7, #20]
}
 80122c8:	4618      	mov	r0, r3
 80122ca:	3718      	adds	r7, #24
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bd80      	pop	{r7, pc}
 80122d0:	0801a39c 	.word	0x0801a39c
 80122d4:	0801aa74 	.word	0x0801aa74
 80122d8:	0801a3f0 	.word	0x0801a3f0

080122dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80122dc:	b5b0      	push	{r4, r5, r7, lr}
 80122de:	b08a      	sub	sp, #40	; 0x28
 80122e0:	af04      	add	r7, sp, #16
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	607b      	str	r3, [r7, #4]
 80122e6:	460b      	mov	r3, r1
 80122e8:	817b      	strh	r3, [r7, #10]
 80122ea:	4613      	mov	r3, r2
 80122ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d106      	bne.n	8012302 <tcp_output_alloc_header+0x26>
 80122f4:	4b15      	ldr	r3, [pc, #84]	; (801234c <tcp_output_alloc_header+0x70>)
 80122f6:	f240 7242 	movw	r2, #1858	; 0x742
 80122fa:	4915      	ldr	r1, [pc, #84]	; (8012350 <tcp_output_alloc_header+0x74>)
 80122fc:	4815      	ldr	r0, [pc, #84]	; (8012354 <tcp_output_alloc_header+0x78>)
 80122fe:	f005 fcfb 	bl	8017cf8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	8adb      	ldrh	r3, [r3, #22]
 801230a:	68fa      	ldr	r2, [r7, #12]
 801230c:	8b12      	ldrh	r2, [r2, #24]
 801230e:	68f9      	ldr	r1, [r7, #12]
 8012310:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012312:	893d      	ldrh	r5, [r7, #8]
 8012314:	897c      	ldrh	r4, [r7, #10]
 8012316:	9103      	str	r1, [sp, #12]
 8012318:	2110      	movs	r1, #16
 801231a:	9102      	str	r1, [sp, #8]
 801231c:	9201      	str	r2, [sp, #4]
 801231e:	9300      	str	r3, [sp, #0]
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	462a      	mov	r2, r5
 8012324:	4621      	mov	r1, r4
 8012326:	f7ff ff67 	bl	80121f8 <tcp_output_alloc_header_common>
 801232a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d006      	beq.n	8012340 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012336:	68fa      	ldr	r2, [r7, #12]
 8012338:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801233a:	441a      	add	r2, r3
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012340:	697b      	ldr	r3, [r7, #20]
}
 8012342:	4618      	mov	r0, r3
 8012344:	3718      	adds	r7, #24
 8012346:	46bd      	mov	sp, r7
 8012348:	bdb0      	pop	{r4, r5, r7, pc}
 801234a:	bf00      	nop
 801234c:	0801a39c 	.word	0x0801a39c
 8012350:	0801aaa4 	.word	0x0801aaa4
 8012354:	0801a3f0 	.word	0x0801a3f0

08012358 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012358:	b580      	push	{r7, lr}
 801235a:	b088      	sub	sp, #32
 801235c:	af00      	add	r7, sp, #0
 801235e:	60f8      	str	r0, [r7, #12]
 8012360:	60b9      	str	r1, [r7, #8]
 8012362:	4611      	mov	r1, r2
 8012364:	461a      	mov	r2, r3
 8012366:	460b      	mov	r3, r1
 8012368:	71fb      	strb	r3, [r7, #7]
 801236a:	4613      	mov	r3, r2
 801236c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801236e:	2300      	movs	r3, #0
 8012370:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d106      	bne.n	8012386 <tcp_output_fill_options+0x2e>
 8012378:	4b13      	ldr	r3, [pc, #76]	; (80123c8 <tcp_output_fill_options+0x70>)
 801237a:	f240 7256 	movw	r2, #1878	; 0x756
 801237e:	4913      	ldr	r1, [pc, #76]	; (80123cc <tcp_output_fill_options+0x74>)
 8012380:	4813      	ldr	r0, [pc, #76]	; (80123d0 <tcp_output_fill_options+0x78>)
 8012382:	f005 fcb9 	bl	8017cf8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801238c:	69bb      	ldr	r3, [r7, #24]
 801238e:	3314      	adds	r3, #20
 8012390:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	f103 0214 	add.w	r2, r3, #20
 8012398:	8bfb      	ldrh	r3, [r7, #30]
 801239a:	009b      	lsls	r3, r3, #2
 801239c:	4619      	mov	r1, r3
 801239e:	79fb      	ldrb	r3, [r7, #7]
 80123a0:	009b      	lsls	r3, r3, #2
 80123a2:	f003 0304 	and.w	r3, r3, #4
 80123a6:	440b      	add	r3, r1
 80123a8:	4413      	add	r3, r2
 80123aa:	697a      	ldr	r2, [r7, #20]
 80123ac:	429a      	cmp	r2, r3
 80123ae:	d006      	beq.n	80123be <tcp_output_fill_options+0x66>
 80123b0:	4b05      	ldr	r3, [pc, #20]	; (80123c8 <tcp_output_fill_options+0x70>)
 80123b2:	f240 7275 	movw	r2, #1909	; 0x775
 80123b6:	4907      	ldr	r1, [pc, #28]	; (80123d4 <tcp_output_fill_options+0x7c>)
 80123b8:	4805      	ldr	r0, [pc, #20]	; (80123d0 <tcp_output_fill_options+0x78>)
 80123ba:	f005 fc9d 	bl	8017cf8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80123be:	bf00      	nop
 80123c0:	3720      	adds	r7, #32
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	0801a39c 	.word	0x0801a39c
 80123cc:	0801aacc 	.word	0x0801aacc
 80123d0:	0801a3f0 	.word	0x0801a3f0
 80123d4:	0801a9c4 	.word	0x0801a9c4

080123d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b08a      	sub	sp, #40	; 0x28
 80123dc:	af04      	add	r7, sp, #16
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d106      	bne.n	80123fa <tcp_output_control_segment+0x22>
 80123ec:	4b1c      	ldr	r3, [pc, #112]	; (8012460 <tcp_output_control_segment+0x88>)
 80123ee:	f240 7287 	movw	r2, #1927	; 0x787
 80123f2:	491c      	ldr	r1, [pc, #112]	; (8012464 <tcp_output_control_segment+0x8c>)
 80123f4:	481c      	ldr	r0, [pc, #112]	; (8012468 <tcp_output_control_segment+0x90>)
 80123f6:	f005 fc7f 	bl	8017cf8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80123fa:	683a      	ldr	r2, [r7, #0]
 80123fc:	6879      	ldr	r1, [r7, #4]
 80123fe:	68f8      	ldr	r0, [r7, #12]
 8012400:	f7fe ff40 	bl	8011284 <tcp_route>
 8012404:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d102      	bne.n	8012412 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801240c:	23fc      	movs	r3, #252	; 0xfc
 801240e:	75fb      	strb	r3, [r7, #23]
 8012410:	e01c      	b.n	801244c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d006      	beq.n	8012426 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012418:	68fb      	ldr	r3, [r7, #12]
 801241a:	7adb      	ldrb	r3, [r3, #11]
 801241c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	7a9b      	ldrb	r3, [r3, #10]
 8012422:	757b      	strb	r3, [r7, #21]
 8012424:	e003      	b.n	801242e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012426:	23ff      	movs	r3, #255	; 0xff
 8012428:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801242a:	2300      	movs	r3, #0
 801242c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801242e:	7dba      	ldrb	r2, [r7, #22]
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	9302      	str	r3, [sp, #8]
 8012434:	2306      	movs	r3, #6
 8012436:	9301      	str	r3, [sp, #4]
 8012438:	7d7b      	ldrb	r3, [r7, #21]
 801243a:	9300      	str	r3, [sp, #0]
 801243c:	4613      	mov	r3, r2
 801243e:	683a      	ldr	r2, [r7, #0]
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	68b8      	ldr	r0, [r7, #8]
 8012444:	f004 f97e 	bl	8016744 <ip4_output_if>
 8012448:	4603      	mov	r3, r0
 801244a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801244c:	68b8      	ldr	r0, [r7, #8]
 801244e:	f7fa fdcd 	bl	800cfec <pbuf_free>
  return err;
 8012452:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012456:	4618      	mov	r0, r3
 8012458:	3718      	adds	r7, #24
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}
 801245e:	bf00      	nop
 8012460:	0801a39c 	.word	0x0801a39c
 8012464:	0801aaf4 	.word	0x0801aaf4
 8012468:	0801a3f0 	.word	0x0801a3f0

0801246c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801246c:	b590      	push	{r4, r7, lr}
 801246e:	b08b      	sub	sp, #44	; 0x2c
 8012470:	af04      	add	r7, sp, #16
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d106      	bne.n	801248e <tcp_rst+0x22>
 8012480:	4b1f      	ldr	r3, [pc, #124]	; (8012500 <tcp_rst+0x94>)
 8012482:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012486:	491f      	ldr	r1, [pc, #124]	; (8012504 <tcp_rst+0x98>)
 8012488:	481f      	ldr	r0, [pc, #124]	; (8012508 <tcp_rst+0x9c>)
 801248a:	f005 fc35 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801248e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012490:	2b00      	cmp	r3, #0
 8012492:	d106      	bne.n	80124a2 <tcp_rst+0x36>
 8012494:	4b1a      	ldr	r3, [pc, #104]	; (8012500 <tcp_rst+0x94>)
 8012496:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801249a:	491c      	ldr	r1, [pc, #112]	; (801250c <tcp_rst+0xa0>)
 801249c:	481a      	ldr	r0, [pc, #104]	; (8012508 <tcp_rst+0x9c>)
 801249e:	f005 fc2b 	bl	8017cf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80124a2:	2300      	movs	r3, #0
 80124a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80124a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80124aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80124ac:	7dfb      	ldrb	r3, [r7, #23]
 80124ae:	b29c      	uxth	r4, r3
 80124b0:	68b8      	ldr	r0, [r7, #8]
 80124b2:	f7f9 f8fa 	bl	800b6aa <lwip_htonl>
 80124b6:	4602      	mov	r2, r0
 80124b8:	8abb      	ldrh	r3, [r7, #20]
 80124ba:	9303      	str	r3, [sp, #12]
 80124bc:	2314      	movs	r3, #20
 80124be:	9302      	str	r3, [sp, #8]
 80124c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80124c2:	9301      	str	r3, [sp, #4]
 80124c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80124c6:	9300      	str	r3, [sp, #0]
 80124c8:	4613      	mov	r3, r2
 80124ca:	2200      	movs	r2, #0
 80124cc:	4621      	mov	r1, r4
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ff fe92 	bl	80121f8 <tcp_output_alloc_header_common>
 80124d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d00c      	beq.n	80124f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80124dc:	7dfb      	ldrb	r3, [r7, #23]
 80124de:	2200      	movs	r2, #0
 80124e0:	6939      	ldr	r1, [r7, #16]
 80124e2:	68f8      	ldr	r0, [r7, #12]
 80124e4:	f7ff ff38 	bl	8012358 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80124e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ea:	683a      	ldr	r2, [r7, #0]
 80124ec:	6939      	ldr	r1, [r7, #16]
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f7ff ff72 	bl	80123d8 <tcp_output_control_segment>
 80124f4:	e000      	b.n	80124f8 <tcp_rst+0x8c>
    return;
 80124f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80124f8:	371c      	adds	r7, #28
 80124fa:	46bd      	mov	sp, r7
 80124fc:	bd90      	pop	{r4, r7, pc}
 80124fe:	bf00      	nop
 8012500:	0801a39c 	.word	0x0801a39c
 8012504:	0801ab20 	.word	0x0801ab20
 8012508:	0801a3f0 	.word	0x0801a3f0
 801250c:	0801ab3c 	.word	0x0801ab3c

08012510 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012510:	b590      	push	{r4, r7, lr}
 8012512:	b087      	sub	sp, #28
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012518:	2300      	movs	r3, #0
 801251a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801251c:	2300      	movs	r3, #0
 801251e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d106      	bne.n	8012534 <tcp_send_empty_ack+0x24>
 8012526:	4b28      	ldr	r3, [pc, #160]	; (80125c8 <tcp_send_empty_ack+0xb8>)
 8012528:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801252c:	4927      	ldr	r1, [pc, #156]	; (80125cc <tcp_send_empty_ack+0xbc>)
 801252e:	4828      	ldr	r0, [pc, #160]	; (80125d0 <tcp_send_empty_ack+0xc0>)
 8012530:	f005 fbe2 	bl	8017cf8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012534:	7dfb      	ldrb	r3, [r7, #23]
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	b2db      	uxtb	r3, r3
 801253a:	f003 0304 	and.w	r3, r3, #4
 801253e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012540:	7d7b      	ldrb	r3, [r7, #21]
 8012542:	b29c      	uxth	r4, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012548:	4618      	mov	r0, r3
 801254a:	f7f9 f8ae 	bl	800b6aa <lwip_htonl>
 801254e:	4603      	mov	r3, r0
 8012550:	2200      	movs	r2, #0
 8012552:	4621      	mov	r1, r4
 8012554:	6878      	ldr	r0, [r7, #4]
 8012556:	f7ff fec1 	bl	80122dc <tcp_output_alloc_header>
 801255a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801255c:	693b      	ldr	r3, [r7, #16]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d109      	bne.n	8012576 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	8b5b      	ldrh	r3, [r3, #26]
 8012566:	f043 0303 	orr.w	r3, r3, #3
 801256a:	b29a      	uxth	r2, r3
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012570:	f06f 0301 	mvn.w	r3, #1
 8012574:	e023      	b.n	80125be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012576:	7dbb      	ldrb	r3, [r7, #22]
 8012578:	7dfa      	ldrb	r2, [r7, #23]
 801257a:	6939      	ldr	r1, [r7, #16]
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7ff feeb 	bl	8012358 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	3304      	adds	r3, #4
 8012588:	6939      	ldr	r1, [r7, #16]
 801258a:	6878      	ldr	r0, [r7, #4]
 801258c:	f7ff ff24 	bl	80123d8 <tcp_output_control_segment>
 8012590:	4603      	mov	r3, r0
 8012592:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d007      	beq.n	80125ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	8b5b      	ldrh	r3, [r3, #26]
 80125a0:	f043 0303 	orr.w	r3, r3, #3
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	835a      	strh	r2, [r3, #26]
 80125aa:	e006      	b.n	80125ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	8b5b      	ldrh	r3, [r3, #26]
 80125b0:	f023 0303 	bic.w	r3, r3, #3
 80125b4:	b29a      	uxth	r2, r3
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80125ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80125be:	4618      	mov	r0, r3
 80125c0:	371c      	adds	r7, #28
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bd90      	pop	{r4, r7, pc}
 80125c6:	bf00      	nop
 80125c8:	0801a39c 	.word	0x0801a39c
 80125cc:	0801ab58 	.word	0x0801ab58
 80125d0:	0801a3f0 	.word	0x0801a3f0

080125d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80125d4:	b590      	push	{r4, r7, lr}
 80125d6:	b087      	sub	sp, #28
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125dc:	2300      	movs	r3, #0
 80125de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d106      	bne.n	80125f4 <tcp_keepalive+0x20>
 80125e6:	4b18      	ldr	r3, [pc, #96]	; (8012648 <tcp_keepalive+0x74>)
 80125e8:	f640 0224 	movw	r2, #2084	; 0x824
 80125ec:	4917      	ldr	r1, [pc, #92]	; (801264c <tcp_keepalive+0x78>)
 80125ee:	4818      	ldr	r0, [pc, #96]	; (8012650 <tcp_keepalive+0x7c>)
 80125f0:	f005 fb82 	bl	8017cf8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80125f4:	7dfb      	ldrb	r3, [r7, #23]
 80125f6:	b29c      	uxth	r4, r3
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80125fc:	3b01      	subs	r3, #1
 80125fe:	4618      	mov	r0, r3
 8012600:	f7f9 f853 	bl	800b6aa <lwip_htonl>
 8012604:	4603      	mov	r3, r0
 8012606:	2200      	movs	r2, #0
 8012608:	4621      	mov	r1, r4
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7ff fe66 	bl	80122dc <tcp_output_alloc_header>
 8012610:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801261c:	e010      	b.n	8012640 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801261e:	7dfb      	ldrb	r3, [r7, #23]
 8012620:	2200      	movs	r2, #0
 8012622:	6939      	ldr	r1, [r7, #16]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f7ff fe97 	bl	8012358 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	3304      	adds	r3, #4
 8012630:	6939      	ldr	r1, [r7, #16]
 8012632:	6878      	ldr	r0, [r7, #4]
 8012634:	f7ff fed0 	bl	80123d8 <tcp_output_control_segment>
 8012638:	4603      	mov	r3, r0
 801263a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801263c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012640:	4618      	mov	r0, r3
 8012642:	371c      	adds	r7, #28
 8012644:	46bd      	mov	sp, r7
 8012646:	bd90      	pop	{r4, r7, pc}
 8012648:	0801a39c 	.word	0x0801a39c
 801264c:	0801ab78 	.word	0x0801ab78
 8012650:	0801a3f0 	.word	0x0801a3f0

08012654 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012654:	b590      	push	{r4, r7, lr}
 8012656:	b08b      	sub	sp, #44	; 0x2c
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801265c:	2300      	movs	r3, #0
 801265e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d106      	bne.n	8012676 <tcp_zero_window_probe+0x22>
 8012668:	4b4c      	ldr	r3, [pc, #304]	; (801279c <tcp_zero_window_probe+0x148>)
 801266a:	f640 024f 	movw	r2, #2127	; 0x84f
 801266e:	494c      	ldr	r1, [pc, #304]	; (80127a0 <tcp_zero_window_probe+0x14c>)
 8012670:	484c      	ldr	r0, [pc, #304]	; (80127a4 <tcp_zero_window_probe+0x150>)
 8012672:	f005 fb41 	bl	8017cf8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801267a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801267c:	6a3b      	ldr	r3, [r7, #32]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d101      	bne.n	8012686 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012682:	2300      	movs	r3, #0
 8012684:	e086      	b.n	8012794 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801268c:	2bff      	cmp	r3, #255	; 0xff
 801268e:	d007      	beq.n	80126a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012696:	3301      	adds	r3, #1
 8012698:	b2da      	uxtb	r2, r3
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80126a0:	6a3b      	ldr	r3, [r7, #32]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	899b      	ldrh	r3, [r3, #12]
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7f8 ffe9 	bl	800b680 <lwip_htons>
 80126ae:	4603      	mov	r3, r0
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	f003 0301 	and.w	r3, r3, #1
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d005      	beq.n	80126c6 <tcp_zero_window_probe+0x72>
 80126ba:	6a3b      	ldr	r3, [r7, #32]
 80126bc:	891b      	ldrh	r3, [r3, #8]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d101      	bne.n	80126c6 <tcp_zero_window_probe+0x72>
 80126c2:	2301      	movs	r3, #1
 80126c4:	e000      	b.n	80126c8 <tcp_zero_window_probe+0x74>
 80126c6:	2300      	movs	r3, #0
 80126c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80126ca:	7ffb      	ldrb	r3, [r7, #31]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	bf0c      	ite	eq
 80126d0:	2301      	moveq	r3, #1
 80126d2:	2300      	movne	r3, #0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80126d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126dc:	b299      	uxth	r1, r3
 80126de:	6a3b      	ldr	r3, [r7, #32]
 80126e0:	68db      	ldr	r3, [r3, #12]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	8bba      	ldrh	r2, [r7, #28]
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f7ff fdf8 	bl	80122dc <tcp_output_alloc_header>
 80126ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80126ee:	69bb      	ldr	r3, [r7, #24]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d102      	bne.n	80126fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80126f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80126f8:	e04c      	b.n	8012794 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012700:	7ffb      	ldrb	r3, [r7, #31]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d011      	beq.n	801272a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	899b      	ldrh	r3, [r3, #12]
 801270a:	b29b      	uxth	r3, r3
 801270c:	b21b      	sxth	r3, r3
 801270e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012712:	b21c      	sxth	r4, r3
 8012714:	2011      	movs	r0, #17
 8012716:	f7f8 ffb3 	bl	800b680 <lwip_htons>
 801271a:	4603      	mov	r3, r0
 801271c:	b21b      	sxth	r3, r3
 801271e:	4323      	orrs	r3, r4
 8012720:	b21b      	sxth	r3, r3
 8012722:	b29a      	uxth	r2, r3
 8012724:	697b      	ldr	r3, [r7, #20]
 8012726:	819a      	strh	r2, [r3, #12]
 8012728:	e010      	b.n	801274c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801272a:	69bb      	ldr	r3, [r7, #24]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	3314      	adds	r3, #20
 8012730:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012732:	6a3b      	ldr	r3, [r7, #32]
 8012734:	6858      	ldr	r0, [r3, #4]
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	685b      	ldr	r3, [r3, #4]
 801273a:	891a      	ldrh	r2, [r3, #8]
 801273c:	6a3b      	ldr	r3, [r7, #32]
 801273e:	891b      	ldrh	r3, [r3, #8]
 8012740:	1ad3      	subs	r3, r2, r3
 8012742:	b29b      	uxth	r3, r3
 8012744:	2201      	movs	r2, #1
 8012746:	6939      	ldr	r1, [r7, #16]
 8012748:	f7fa fe56 	bl	800d3f8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801274c:	6a3b      	ldr	r3, [r7, #32]
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	f7f8 ffa9 	bl	800b6aa <lwip_htonl>
 8012758:	4603      	mov	r3, r0
 801275a:	3301      	adds	r3, #1
 801275c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	1ad3      	subs	r3, r2, r3
 8012766:	2b00      	cmp	r3, #0
 8012768:	da02      	bge.n	8012770 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	68fa      	ldr	r2, [r7, #12]
 801276e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012774:	2200      	movs	r2, #0
 8012776:	69b9      	ldr	r1, [r7, #24]
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff fded 	bl	8012358 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3304      	adds	r3, #4
 8012784:	69b9      	ldr	r1, [r7, #24]
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7ff fe26 	bl	80123d8 <tcp_output_control_segment>
 801278c:	4603      	mov	r3, r0
 801278e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012790:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012794:	4618      	mov	r0, r3
 8012796:	372c      	adds	r7, #44	; 0x2c
 8012798:	46bd      	mov	sp, r7
 801279a:	bd90      	pop	{r4, r7, pc}
 801279c:	0801a39c 	.word	0x0801a39c
 80127a0:	0801ab94 	.word	0x0801ab94
 80127a4:	0801a3f0 	.word	0x0801a3f0

080127a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80127b0:	f7fa ff10 	bl	800d5d4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80127b4:	4b0a      	ldr	r3, [pc, #40]	; (80127e0 <tcpip_tcp_timer+0x38>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d103      	bne.n	80127c4 <tcpip_tcp_timer+0x1c>
 80127bc:	4b09      	ldr	r3, [pc, #36]	; (80127e4 <tcpip_tcp_timer+0x3c>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d005      	beq.n	80127d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80127c4:	2200      	movs	r2, #0
 80127c6:	4908      	ldr	r1, [pc, #32]	; (80127e8 <tcpip_tcp_timer+0x40>)
 80127c8:	20fa      	movs	r0, #250	; 0xfa
 80127ca:	f000 f8f3 	bl	80129b4 <sys_timeout>
 80127ce:	e003      	b.n	80127d8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80127d0:	4b06      	ldr	r3, [pc, #24]	; (80127ec <tcpip_tcp_timer+0x44>)
 80127d2:	2200      	movs	r2, #0
 80127d4:	601a      	str	r2, [r3, #0]
  }
}
 80127d6:	bf00      	nop
 80127d8:	bf00      	nop
 80127da:	3708      	adds	r7, #8
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}
 80127e0:	2400d6bc 	.word	0x2400d6bc
 80127e4:	2400d6cc 	.word	0x2400d6cc
 80127e8:	080127a9 	.word	0x080127a9
 80127ec:	24009dec 	.word	0x24009dec

080127f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80127f4:	4b0a      	ldr	r3, [pc, #40]	; (8012820 <tcp_timer_needed+0x30>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d10f      	bne.n	801281c <tcp_timer_needed+0x2c>
 80127fc:	4b09      	ldr	r3, [pc, #36]	; (8012824 <tcp_timer_needed+0x34>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d103      	bne.n	801280c <tcp_timer_needed+0x1c>
 8012804:	4b08      	ldr	r3, [pc, #32]	; (8012828 <tcp_timer_needed+0x38>)
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d007      	beq.n	801281c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801280c:	4b04      	ldr	r3, [pc, #16]	; (8012820 <tcp_timer_needed+0x30>)
 801280e:	2201      	movs	r2, #1
 8012810:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012812:	2200      	movs	r2, #0
 8012814:	4905      	ldr	r1, [pc, #20]	; (801282c <tcp_timer_needed+0x3c>)
 8012816:	20fa      	movs	r0, #250	; 0xfa
 8012818:	f000 f8cc 	bl	80129b4 <sys_timeout>
  }
}
 801281c:	bf00      	nop
 801281e:	bd80      	pop	{r7, pc}
 8012820:	24009dec 	.word	0x24009dec
 8012824:	2400d6bc 	.word	0x2400d6bc
 8012828:	2400d6cc 	.word	0x2400d6cc
 801282c:	080127a9 	.word	0x080127a9

08012830 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012830:	b580      	push	{r7, lr}
 8012832:	b086      	sub	sp, #24
 8012834:	af00      	add	r7, sp, #0
 8012836:	60f8      	str	r0, [r7, #12]
 8012838:	60b9      	str	r1, [r7, #8]
 801283a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801283c:	200a      	movs	r0, #10
 801283e:	f7f9 fcaf 	bl	800c1a0 <memp_malloc>
 8012842:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d109      	bne.n	801285e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d151      	bne.n	80128f4 <sys_timeout_abs+0xc4>
 8012850:	4b2a      	ldr	r3, [pc, #168]	; (80128fc <sys_timeout_abs+0xcc>)
 8012852:	22be      	movs	r2, #190	; 0xbe
 8012854:	492a      	ldr	r1, [pc, #168]	; (8012900 <sys_timeout_abs+0xd0>)
 8012856:	482b      	ldr	r0, [pc, #172]	; (8012904 <sys_timeout_abs+0xd4>)
 8012858:	f005 fa4e 	bl	8017cf8 <iprintf>
    return;
 801285c:	e04a      	b.n	80128f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	2200      	movs	r2, #0
 8012862:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012864:	693b      	ldr	r3, [r7, #16]
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	68fa      	ldr	r2, [r7, #12]
 8012874:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012876:	4b24      	ldr	r3, [pc, #144]	; (8012908 <sys_timeout_abs+0xd8>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d103      	bne.n	8012886 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801287e:	4a22      	ldr	r2, [pc, #136]	; (8012908 <sys_timeout_abs+0xd8>)
 8012880:	693b      	ldr	r3, [r7, #16]
 8012882:	6013      	str	r3, [r2, #0]
    return;
 8012884:	e037      	b.n	80128f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	685a      	ldr	r2, [r3, #4]
 801288a:	4b1f      	ldr	r3, [pc, #124]	; (8012908 <sys_timeout_abs+0xd8>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	685b      	ldr	r3, [r3, #4]
 8012890:	1ad3      	subs	r3, r2, r3
 8012892:	0fdb      	lsrs	r3, r3, #31
 8012894:	f003 0301 	and.w	r3, r3, #1
 8012898:	b2db      	uxtb	r3, r3
 801289a:	2b00      	cmp	r3, #0
 801289c:	d007      	beq.n	80128ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801289e:	4b1a      	ldr	r3, [pc, #104]	; (8012908 <sys_timeout_abs+0xd8>)
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80128a6:	4a18      	ldr	r2, [pc, #96]	; (8012908 <sys_timeout_abs+0xd8>)
 80128a8:	693b      	ldr	r3, [r7, #16]
 80128aa:	6013      	str	r3, [r2, #0]
 80128ac:	e023      	b.n	80128f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80128ae:	4b16      	ldr	r3, [pc, #88]	; (8012908 <sys_timeout_abs+0xd8>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	617b      	str	r3, [r7, #20]
 80128b4:	e01a      	b.n	80128ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d00b      	beq.n	80128d6 <sys_timeout_abs+0xa6>
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	685a      	ldr	r2, [r3, #4]
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	1ad3      	subs	r3, r2, r3
 80128ca:	0fdb      	lsrs	r3, r3, #31
 80128cc:	f003 0301 	and.w	r3, r3, #1
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d007      	beq.n	80128e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	693b      	ldr	r3, [r7, #16]
 80128dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80128de:	697b      	ldr	r3, [r7, #20]
 80128e0:	693a      	ldr	r2, [r7, #16]
 80128e2:	601a      	str	r2, [r3, #0]
        break;
 80128e4:	e007      	b.n	80128f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	617b      	str	r3, [r7, #20]
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d1e1      	bne.n	80128b6 <sys_timeout_abs+0x86>
 80128f2:	e000      	b.n	80128f6 <sys_timeout_abs+0xc6>
    return;
 80128f4:	bf00      	nop
      }
    }
  }
}
 80128f6:	3718      	adds	r7, #24
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	0801abb8 	.word	0x0801abb8
 8012900:	0801abec 	.word	0x0801abec
 8012904:	0801ac2c 	.word	0x0801ac2c
 8012908:	24009de4 	.word	0x24009de4

0801290c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	4798      	blx	r3

  now = sys_now();
 801291e:	f7f5 fd37 	bl	8008390 <sys_now>
 8012922:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	681a      	ldr	r2, [r3, #0]
 8012928:	4b0f      	ldr	r3, [pc, #60]	; (8012968 <lwip_cyclic_timer+0x5c>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	4413      	add	r3, r2
 801292e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	1ad3      	subs	r3, r2, r3
 8012936:	0fdb      	lsrs	r3, r3, #31
 8012938:	f003 0301 	and.w	r3, r3, #1
 801293c:	b2db      	uxtb	r3, r3
 801293e:	2b00      	cmp	r3, #0
 8012940:	d009      	beq.n	8012956 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	4413      	add	r3, r2
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	4907      	ldr	r1, [pc, #28]	; (801296c <lwip_cyclic_timer+0x60>)
 801294e:	4618      	mov	r0, r3
 8012950:	f7ff ff6e 	bl	8012830 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012954:	e004      	b.n	8012960 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012956:	687a      	ldr	r2, [r7, #4]
 8012958:	4904      	ldr	r1, [pc, #16]	; (801296c <lwip_cyclic_timer+0x60>)
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff ff68 	bl	8012830 <sys_timeout_abs>
}
 8012960:	bf00      	nop
 8012962:	3718      	adds	r7, #24
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	24009de8 	.word	0x24009de8
 801296c:	0801290d 	.word	0x0801290d

08012970 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012976:	2301      	movs	r3, #1
 8012978:	607b      	str	r3, [r7, #4]
 801297a:	e00e      	b.n	801299a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801297c:	4a0b      	ldr	r2, [pc, #44]	; (80129ac <sys_timeouts_init+0x3c>)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	00db      	lsls	r3, r3, #3
 8012988:	4a08      	ldr	r2, [pc, #32]	; (80129ac <sys_timeouts_init+0x3c>)
 801298a:	4413      	add	r3, r2
 801298c:	461a      	mov	r2, r3
 801298e:	4908      	ldr	r1, [pc, #32]	; (80129b0 <sys_timeouts_init+0x40>)
 8012990:	f000 f810 	bl	80129b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	3301      	adds	r3, #1
 8012998:	607b      	str	r3, [r7, #4]
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2b04      	cmp	r3, #4
 801299e:	d9ed      	bls.n	801297c <sys_timeouts_init+0xc>
  }
}
 80129a0:	bf00      	nop
 80129a2:	bf00      	nop
 80129a4:	3708      	adds	r7, #8
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	0801bba4 	.word	0x0801bba4
 80129b0:	0801290d 	.word	0x0801290d

080129b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b086      	sub	sp, #24
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129c6:	d306      	bcc.n	80129d6 <sys_timeout+0x22>
 80129c8:	4b0a      	ldr	r3, [pc, #40]	; (80129f4 <sys_timeout+0x40>)
 80129ca:	f240 1229 	movw	r2, #297	; 0x129
 80129ce:	490a      	ldr	r1, [pc, #40]	; (80129f8 <sys_timeout+0x44>)
 80129d0:	480a      	ldr	r0, [pc, #40]	; (80129fc <sys_timeout+0x48>)
 80129d2:	f005 f991 	bl	8017cf8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80129d6:	f7f5 fcdb 	bl	8008390 <sys_now>
 80129da:	4602      	mov	r2, r0
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	4413      	add	r3, r2
 80129e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	68b9      	ldr	r1, [r7, #8]
 80129e6:	6978      	ldr	r0, [r7, #20]
 80129e8:	f7ff ff22 	bl	8012830 <sys_timeout_abs>
#endif
}
 80129ec:	bf00      	nop
 80129ee:	3718      	adds	r7, #24
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	0801abb8 	.word	0x0801abb8
 80129f8:	0801ac54 	.word	0x0801ac54
 80129fc:	0801ac2c 	.word	0x0801ac2c

08012a00 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	b084      	sub	sp, #16
 8012a04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012a06:	f7f5 fcc3 	bl	8008390 <sys_now>
 8012a0a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012a0c:	4b17      	ldr	r3, [pc, #92]	; (8012a6c <sys_check_timeouts+0x6c>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012a12:	68bb      	ldr	r3, [r7, #8]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d022      	beq.n	8012a5e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	0fdb      	lsrs	r3, r3, #31
 8012a22:	f003 0301 	and.w	r3, r3, #1
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d11a      	bne.n	8012a62 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a0e      	ldr	r2, [pc, #56]	; (8012a6c <sys_check_timeouts+0x6c>)
 8012a32:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	689b      	ldr	r3, [r3, #8]
 8012a38:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012a3a:	68bb      	ldr	r3, [r7, #8]
 8012a3c:	68db      	ldr	r3, [r3, #12]
 8012a3e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	4a0a      	ldr	r2, [pc, #40]	; (8012a70 <sys_check_timeouts+0x70>)
 8012a46:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012a48:	68b9      	ldr	r1, [r7, #8]
 8012a4a:	200a      	movs	r0, #10
 8012a4c:	f7f9 fc1e 	bl	800c28c <memp_free>
    if (handler != NULL) {
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d0da      	beq.n	8012a0c <sys_check_timeouts+0xc>
      handler(arg);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6838      	ldr	r0, [r7, #0]
 8012a5a:	4798      	blx	r3
  do {
 8012a5c:	e7d6      	b.n	8012a0c <sys_check_timeouts+0xc>
      return;
 8012a5e:	bf00      	nop
 8012a60:	e000      	b.n	8012a64 <sys_check_timeouts+0x64>
      return;
 8012a62:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012a64:	3710      	adds	r7, #16
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}
 8012a6a:	bf00      	nop
 8012a6c:	24009de4 	.word	0x24009de4
 8012a70:	24009de8 	.word	0x24009de8

08012a74 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b082      	sub	sp, #8
 8012a78:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012a7a:	4b16      	ldr	r3, [pc, #88]	; (8012ad4 <sys_timeouts_sleeptime+0x60>)
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d102      	bne.n	8012a88 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012a82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a86:	e020      	b.n	8012aca <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012a88:	f7f5 fc82 	bl	8008390 <sys_now>
 8012a8c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012a8e:	4b11      	ldr	r3, [pc, #68]	; (8012ad4 <sys_timeouts_sleeptime+0x60>)
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	685a      	ldr	r2, [r3, #4]
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	1ad3      	subs	r3, r2, r3
 8012a98:	0fdb      	lsrs	r3, r3, #31
 8012a9a:	f003 0301 	and.w	r3, r3, #1
 8012a9e:	b2db      	uxtb	r3, r3
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d001      	beq.n	8012aa8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	e010      	b.n	8012aca <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012aa8:	4b0a      	ldr	r3, [pc, #40]	; (8012ad4 <sys_timeouts_sleeptime+0x60>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	da06      	bge.n	8012ac8 <sys_timeouts_sleeptime+0x54>
 8012aba:	4b07      	ldr	r3, [pc, #28]	; (8012ad8 <sys_timeouts_sleeptime+0x64>)
 8012abc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012ac0:	4906      	ldr	r1, [pc, #24]	; (8012adc <sys_timeouts_sleeptime+0x68>)
 8012ac2:	4807      	ldr	r0, [pc, #28]	; (8012ae0 <sys_timeouts_sleeptime+0x6c>)
 8012ac4:	f005 f918 	bl	8017cf8 <iprintf>
    return ret;
 8012ac8:	683b      	ldr	r3, [r7, #0]
  }
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3708      	adds	r7, #8
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	24009de4 	.word	0x24009de4
 8012ad8:	0801abb8 	.word	0x0801abb8
 8012adc:	0801ac8c 	.word	0x0801ac8c
 8012ae0:	0801ac2c 	.word	0x0801ac2c

08012ae4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012ae8:	f005 f91e 	bl	8017d28 <rand>
 8012aec:	4603      	mov	r3, r0
 8012aee:	b29b      	uxth	r3, r3
 8012af0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012af4:	b29b      	uxth	r3, r3
 8012af6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012afa:	b29a      	uxth	r2, r3
 8012afc:	4b01      	ldr	r3, [pc, #4]	; (8012b04 <udp_init+0x20>)
 8012afe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012b00:	bf00      	nop
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	24000030 	.word	0x24000030

08012b08 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b083      	sub	sp, #12
 8012b0c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012b12:	4b17      	ldr	r3, [pc, #92]	; (8012b70 <udp_new_port+0x68>)
 8012b14:	881b      	ldrh	r3, [r3, #0]
 8012b16:	1c5a      	adds	r2, r3, #1
 8012b18:	b291      	uxth	r1, r2
 8012b1a:	4a15      	ldr	r2, [pc, #84]	; (8012b70 <udp_new_port+0x68>)
 8012b1c:	8011      	strh	r1, [r2, #0]
 8012b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b22:	4293      	cmp	r3, r2
 8012b24:	d103      	bne.n	8012b2e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012b26:	4b12      	ldr	r3, [pc, #72]	; (8012b70 <udp_new_port+0x68>)
 8012b28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012b2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b2e:	4b11      	ldr	r3, [pc, #68]	; (8012b74 <udp_new_port+0x6c>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	603b      	str	r3, [r7, #0]
 8012b34:	e011      	b.n	8012b5a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	8a5a      	ldrh	r2, [r3, #18]
 8012b3a:	4b0d      	ldr	r3, [pc, #52]	; (8012b70 <udp_new_port+0x68>)
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d108      	bne.n	8012b54 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012b42:	88fb      	ldrh	r3, [r7, #6]
 8012b44:	3301      	adds	r3, #1
 8012b46:	80fb      	strh	r3, [r7, #6]
 8012b48:	88fb      	ldrh	r3, [r7, #6]
 8012b4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012b4e:	d3e0      	bcc.n	8012b12 <udp_new_port+0xa>
        return 0;
 8012b50:	2300      	movs	r3, #0
 8012b52:	e007      	b.n	8012b64 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	603b      	str	r3, [r7, #0]
 8012b5a:	683b      	ldr	r3, [r7, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1ea      	bne.n	8012b36 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012b60:	4b03      	ldr	r3, [pc, #12]	; (8012b70 <udp_new_port+0x68>)
 8012b62:	881b      	ldrh	r3, [r3, #0]
}
 8012b64:	4618      	mov	r0, r3
 8012b66:	370c      	adds	r7, #12
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6e:	4770      	bx	lr
 8012b70:	24000030 	.word	0x24000030
 8012b74:	2400d6d4 	.word	0x2400d6d4

08012b78 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	4613      	mov	r3, r2
 8012b84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d105      	bne.n	8012b98 <udp_input_local_match+0x20>
 8012b8c:	4b27      	ldr	r3, [pc, #156]	; (8012c2c <udp_input_local_match+0xb4>)
 8012b8e:	2287      	movs	r2, #135	; 0x87
 8012b90:	4927      	ldr	r1, [pc, #156]	; (8012c30 <udp_input_local_match+0xb8>)
 8012b92:	4828      	ldr	r0, [pc, #160]	; (8012c34 <udp_input_local_match+0xbc>)
 8012b94:	f005 f8b0 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d105      	bne.n	8012baa <udp_input_local_match+0x32>
 8012b9e:	4b23      	ldr	r3, [pc, #140]	; (8012c2c <udp_input_local_match+0xb4>)
 8012ba0:	2288      	movs	r2, #136	; 0x88
 8012ba2:	4925      	ldr	r1, [pc, #148]	; (8012c38 <udp_input_local_match+0xc0>)
 8012ba4:	4823      	ldr	r0, [pc, #140]	; (8012c34 <udp_input_local_match+0xbc>)
 8012ba6:	f005 f8a7 	bl	8017cf8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	7a1b      	ldrb	r3, [r3, #8]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d00b      	beq.n	8012bca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	7a1a      	ldrb	r2, [r3, #8]
 8012bb6:	4b21      	ldr	r3, [pc, #132]	; (8012c3c <udp_input_local_match+0xc4>)
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d001      	beq.n	8012bca <udp_input_local_match+0x52>
    return 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	e02b      	b.n	8012c22 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012bca:	79fb      	ldrb	r3, [r7, #7]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d018      	beq.n	8012c02 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d013      	beq.n	8012bfe <udp_input_local_match+0x86>
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d00f      	beq.n	8012bfe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012bde:	4b17      	ldr	r3, [pc, #92]	; (8012c3c <udp_input_local_match+0xc4>)
 8012be0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012be2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012be6:	d00a      	beq.n	8012bfe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	4b13      	ldr	r3, [pc, #76]	; (8012c3c <udp_input_local_match+0xc4>)
 8012bee:	695b      	ldr	r3, [r3, #20]
 8012bf0:	405a      	eors	r2, r3
 8012bf2:	68bb      	ldr	r3, [r7, #8]
 8012bf4:	3308      	adds	r3, #8
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d110      	bne.n	8012c20 <udp_input_local_match+0xa8>
          return 1;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e00f      	b.n	8012c22 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d009      	beq.n	8012c1c <udp_input_local_match+0xa4>
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d005      	beq.n	8012c1c <udp_input_local_match+0xa4>
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681a      	ldr	r2, [r3, #0]
 8012c14:	4b09      	ldr	r3, [pc, #36]	; (8012c3c <udp_input_local_match+0xc4>)
 8012c16:	695b      	ldr	r3, [r3, #20]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d101      	bne.n	8012c20 <udp_input_local_match+0xa8>
        return 1;
 8012c1c:	2301      	movs	r3, #1
 8012c1e:	e000      	b.n	8012c22 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012c20:	2300      	movs	r3, #0
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	3710      	adds	r7, #16
 8012c26:	46bd      	mov	sp, r7
 8012c28:	bd80      	pop	{r7, pc}
 8012c2a:	bf00      	nop
 8012c2c:	0801aca0 	.word	0x0801aca0
 8012c30:	0801acd0 	.word	0x0801acd0
 8012c34:	0801acf4 	.word	0x0801acf4
 8012c38:	0801ad1c 	.word	0x0801ad1c
 8012c3c:	2400a5dc 	.word	0x2400a5dc

08012c40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012c40:	b590      	push	{r4, r7, lr}
 8012c42:	b08d      	sub	sp, #52	; 0x34
 8012c44:	af02      	add	r7, sp, #8
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d105      	bne.n	8012c60 <udp_input+0x20>
 8012c54:	4b7c      	ldr	r3, [pc, #496]	; (8012e48 <udp_input+0x208>)
 8012c56:	22cf      	movs	r2, #207	; 0xcf
 8012c58:	497c      	ldr	r1, [pc, #496]	; (8012e4c <udp_input+0x20c>)
 8012c5a:	487d      	ldr	r0, [pc, #500]	; (8012e50 <udp_input+0x210>)
 8012c5c:	f005 f84c 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d105      	bne.n	8012c72 <udp_input+0x32>
 8012c66:	4b78      	ldr	r3, [pc, #480]	; (8012e48 <udp_input+0x208>)
 8012c68:	22d0      	movs	r2, #208	; 0xd0
 8012c6a:	497a      	ldr	r1, [pc, #488]	; (8012e54 <udp_input+0x214>)
 8012c6c:	4878      	ldr	r0, [pc, #480]	; (8012e50 <udp_input+0x210>)
 8012c6e:	f005 f843 	bl	8017cf8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	895b      	ldrh	r3, [r3, #10]
 8012c76:	2b07      	cmp	r3, #7
 8012c78:	d803      	bhi.n	8012c82 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012c7a:	6878      	ldr	r0, [r7, #4]
 8012c7c:	f7fa f9b6 	bl	800cfec <pbuf_free>
    goto end;
 8012c80:	e0de      	b.n	8012e40 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012c88:	4b73      	ldr	r3, [pc, #460]	; (8012e58 <udp_input+0x218>)
 8012c8a:	695b      	ldr	r3, [r3, #20]
 8012c8c:	4a72      	ldr	r2, [pc, #456]	; (8012e58 <udp_input+0x218>)
 8012c8e:	6812      	ldr	r2, [r2, #0]
 8012c90:	4611      	mov	r1, r2
 8012c92:	4618      	mov	r0, r3
 8012c94:	f003 fe2e 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7f8 fcec 	bl	800b680 <lwip_htons>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	885b      	ldrh	r3, [r3, #2]
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	f7f8 fce4 	bl	800b680 <lwip_htons>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012cc8:	4b64      	ldr	r3, [pc, #400]	; (8012e5c <udp_input+0x21c>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8012cce:	e054      	b.n	8012d7a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	8a5b      	ldrh	r3, [r3, #18]
 8012cd4:	89fa      	ldrh	r2, [r7, #14]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	d14a      	bne.n	8012d70 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012cda:	7cfb      	ldrb	r3, [r7, #19]
 8012cdc:	461a      	mov	r2, r3
 8012cde:	6839      	ldr	r1, [r7, #0]
 8012ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ce2:	f7ff ff49 	bl	8012b78 <udp_input_local_match>
 8012ce6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d041      	beq.n	8012d70 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cee:	7c1b      	ldrb	r3, [r3, #16]
 8012cf0:	f003 0304 	and.w	r3, r3, #4
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d11d      	bne.n	8012d34 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012cf8:	69fb      	ldr	r3, [r7, #28]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d102      	bne.n	8012d04 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d00:	61fb      	str	r3, [r7, #28]
 8012d02:	e017      	b.n	8012d34 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012d04:	7cfb      	ldrb	r3, [r7, #19]
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d014      	beq.n	8012d34 <udp_input+0xf4>
 8012d0a:	4b53      	ldr	r3, [pc, #332]	; (8012e58 <udp_input+0x218>)
 8012d0c:	695b      	ldr	r3, [r3, #20]
 8012d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d12:	d10f      	bne.n	8012d34 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012d14:	69fb      	ldr	r3, [r7, #28]
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	3304      	adds	r3, #4
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d008      	beq.n	8012d34 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d24:	681a      	ldr	r2, [r3, #0]
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	3304      	adds	r3, #4
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	d101      	bne.n	8012d34 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d32:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d36:	8a9b      	ldrh	r3, [r3, #20]
 8012d38:	8a3a      	ldrh	r2, [r7, #16]
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d118      	bne.n	8012d70 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d40:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d005      	beq.n	8012d52 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d48:	685a      	ldr	r2, [r3, #4]
 8012d4a:	4b43      	ldr	r3, [pc, #268]	; (8012e58 <udp_input+0x218>)
 8012d4c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d10e      	bne.n	8012d70 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012d52:	6a3b      	ldr	r3, [r7, #32]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d014      	beq.n	8012d82 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5a:	68da      	ldr	r2, [r3, #12]
 8012d5c:	6a3b      	ldr	r3, [r7, #32]
 8012d5e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012d60:	4b3e      	ldr	r3, [pc, #248]	; (8012e5c <udp_input+0x21c>)
 8012d62:	681a      	ldr	r2, [r3, #0]
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012d68:	4a3c      	ldr	r2, [pc, #240]	; (8012e5c <udp_input+0x21c>)
 8012d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012d6e:	e008      	b.n	8012d82 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d72:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	627b      	str	r3, [r7, #36]	; 0x24
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d1a7      	bne.n	8012cd0 <udp_input+0x90>
 8012d80:	e000      	b.n	8012d84 <udp_input+0x144>
        break;
 8012d82:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d101      	bne.n	8012d8e <udp_input+0x14e>
    pcb = uncon_pcb;
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d002      	beq.n	8012d9a <udp_input+0x15a>
    for_us = 1;
 8012d94:	2301      	movs	r3, #1
 8012d96:	76fb      	strb	r3, [r7, #27]
 8012d98:	e00a      	b.n	8012db0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012d9a:	683b      	ldr	r3, [r7, #0]
 8012d9c:	3304      	adds	r3, #4
 8012d9e:	681a      	ldr	r2, [r3, #0]
 8012da0:	4b2d      	ldr	r3, [pc, #180]	; (8012e58 <udp_input+0x218>)
 8012da2:	695b      	ldr	r3, [r3, #20]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	bf0c      	ite	eq
 8012da8:	2301      	moveq	r3, #1
 8012daa:	2300      	movne	r3, #0
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012db0:	7efb      	ldrb	r3, [r7, #27]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d041      	beq.n	8012e3a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012db6:	2108      	movs	r1, #8
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f7fa f891 	bl	800cee0 <pbuf_remove_header>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d00a      	beq.n	8012dda <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012dc4:	4b20      	ldr	r3, [pc, #128]	; (8012e48 <udp_input+0x208>)
 8012dc6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012dca:	4925      	ldr	r1, [pc, #148]	; (8012e60 <udp_input+0x220>)
 8012dcc:	4820      	ldr	r0, [pc, #128]	; (8012e50 <udp_input+0x210>)
 8012dce:	f004 ff93 	bl	8017cf8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012dd2:	6878      	ldr	r0, [r7, #4]
 8012dd4:	f7fa f90a 	bl	800cfec <pbuf_free>
      goto end;
 8012dd8:	e032      	b.n	8012e40 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d012      	beq.n	8012e06 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de2:	699b      	ldr	r3, [r3, #24]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d00a      	beq.n	8012dfe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dea:	699c      	ldr	r4, [r3, #24]
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	69d8      	ldr	r0, [r3, #28]
 8012df0:	8a3b      	ldrh	r3, [r7, #16]
 8012df2:	9300      	str	r3, [sp, #0]
 8012df4:	4b1b      	ldr	r3, [pc, #108]	; (8012e64 <udp_input+0x224>)
 8012df6:	687a      	ldr	r2, [r7, #4]
 8012df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012dfa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012dfc:	e021      	b.n	8012e42 <udp_input+0x202>
        pbuf_free(p);
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7fa f8f4 	bl	800cfec <pbuf_free>
        goto end;
 8012e04:	e01c      	b.n	8012e40 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012e06:	7cfb      	ldrb	r3, [r7, #19]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d112      	bne.n	8012e32 <udp_input+0x1f2>
 8012e0c:	4b12      	ldr	r3, [pc, #72]	; (8012e58 <udp_input+0x218>)
 8012e0e:	695b      	ldr	r3, [r3, #20]
 8012e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012e14:	2be0      	cmp	r3, #224	; 0xe0
 8012e16:	d00c      	beq.n	8012e32 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012e18:	4b0f      	ldr	r3, [pc, #60]	; (8012e58 <udp_input+0x218>)
 8012e1a:	899b      	ldrh	r3, [r3, #12]
 8012e1c:	3308      	adds	r3, #8
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	b21b      	sxth	r3, r3
 8012e22:	4619      	mov	r1, r3
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f7fa f8ce 	bl	800cfc6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012e2a:	2103      	movs	r1, #3
 8012e2c:	6878      	ldr	r0, [r7, #4]
 8012e2e:	f003 fa19 	bl	8016264 <icmp_dest_unreach>
      pbuf_free(p);
 8012e32:	6878      	ldr	r0, [r7, #4]
 8012e34:	f7fa f8da 	bl	800cfec <pbuf_free>
  return;
 8012e38:	e003      	b.n	8012e42 <udp_input+0x202>
    pbuf_free(p);
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f7fa f8d6 	bl	800cfec <pbuf_free>
  return;
 8012e40:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012e42:	372c      	adds	r7, #44	; 0x2c
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd90      	pop	{r4, r7, pc}
 8012e48:	0801aca0 	.word	0x0801aca0
 8012e4c:	0801ad44 	.word	0x0801ad44
 8012e50:	0801acf4 	.word	0x0801acf4
 8012e54:	0801ad5c 	.word	0x0801ad5c
 8012e58:	2400a5dc 	.word	0x2400a5dc
 8012e5c:	2400d6d4 	.word	0x2400d6d4
 8012e60:	0801ad78 	.word	0x0801ad78
 8012e64:	2400a5ec 	.word	0x2400a5ec

08012e68 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b088      	sub	sp, #32
 8012e6c:	af02      	add	r7, sp, #8
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
 8012e74:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d109      	bne.n	8012e90 <udp_sendto_if+0x28>
 8012e7c:	4b2e      	ldr	r3, [pc, #184]	; (8012f38 <udp_sendto_if+0xd0>)
 8012e7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e82:	492e      	ldr	r1, [pc, #184]	; (8012f3c <udp_sendto_if+0xd4>)
 8012e84:	482e      	ldr	r0, [pc, #184]	; (8012f40 <udp_sendto_if+0xd8>)
 8012e86:	f004 ff37 	bl	8017cf8 <iprintf>
 8012e8a:	f06f 030f 	mvn.w	r3, #15
 8012e8e:	e04f      	b.n	8012f30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d109      	bne.n	8012eaa <udp_sendto_if+0x42>
 8012e96:	4b28      	ldr	r3, [pc, #160]	; (8012f38 <udp_sendto_if+0xd0>)
 8012e98:	f240 2281 	movw	r2, #641	; 0x281
 8012e9c:	4929      	ldr	r1, [pc, #164]	; (8012f44 <udp_sendto_if+0xdc>)
 8012e9e:	4828      	ldr	r0, [pc, #160]	; (8012f40 <udp_sendto_if+0xd8>)
 8012ea0:	f004 ff2a 	bl	8017cf8 <iprintf>
 8012ea4:	f06f 030f 	mvn.w	r3, #15
 8012ea8:	e042      	b.n	8012f30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d109      	bne.n	8012ec4 <udp_sendto_if+0x5c>
 8012eb0:	4b21      	ldr	r3, [pc, #132]	; (8012f38 <udp_sendto_if+0xd0>)
 8012eb2:	f240 2282 	movw	r2, #642	; 0x282
 8012eb6:	4924      	ldr	r1, [pc, #144]	; (8012f48 <udp_sendto_if+0xe0>)
 8012eb8:	4821      	ldr	r0, [pc, #132]	; (8012f40 <udp_sendto_if+0xd8>)
 8012eba:	f004 ff1d 	bl	8017cf8 <iprintf>
 8012ebe:	f06f 030f 	mvn.w	r3, #15
 8012ec2:	e035      	b.n	8012f30 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012ec4:	6a3b      	ldr	r3, [r7, #32]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d109      	bne.n	8012ede <udp_sendto_if+0x76>
 8012eca:	4b1b      	ldr	r3, [pc, #108]	; (8012f38 <udp_sendto_if+0xd0>)
 8012ecc:	f240 2283 	movw	r2, #643	; 0x283
 8012ed0:	491e      	ldr	r1, [pc, #120]	; (8012f4c <udp_sendto_if+0xe4>)
 8012ed2:	481b      	ldr	r0, [pc, #108]	; (8012f40 <udp_sendto_if+0xd8>)
 8012ed4:	f004 ff10 	bl	8017cf8 <iprintf>
 8012ed8:	f06f 030f 	mvn.w	r3, #15
 8012edc:	e028      	b.n	8012f30 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d009      	beq.n	8012ef8 <udp_sendto_if+0x90>
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d005      	beq.n	8012ef8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ef4:	2be0      	cmp	r3, #224	; 0xe0
 8012ef6:	d103      	bne.n	8012f00 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012ef8:	6a3b      	ldr	r3, [r7, #32]
 8012efa:	3304      	adds	r3, #4
 8012efc:	617b      	str	r3, [r7, #20]
 8012efe:	e00b      	b.n	8012f18 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	6a3b      	ldr	r3, [r7, #32]
 8012f06:	3304      	adds	r3, #4
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d002      	beq.n	8012f14 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012f0e:	f06f 0303 	mvn.w	r3, #3
 8012f12:	e00d      	b.n	8012f30 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012f18:	887a      	ldrh	r2, [r7, #2]
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	9301      	str	r3, [sp, #4]
 8012f1e:	6a3b      	ldr	r3, [r7, #32]
 8012f20:	9300      	str	r3, [sp, #0]
 8012f22:	4613      	mov	r3, r2
 8012f24:	687a      	ldr	r2, [r7, #4]
 8012f26:	68b9      	ldr	r1, [r7, #8]
 8012f28:	68f8      	ldr	r0, [r7, #12]
 8012f2a:	f000 f811 	bl	8012f50 <udp_sendto_if_src>
 8012f2e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	3718      	adds	r7, #24
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	0801aca0 	.word	0x0801aca0
 8012f3c:	0801ae14 	.word	0x0801ae14
 8012f40:	0801acf4 	.word	0x0801acf4
 8012f44:	0801ae30 	.word	0x0801ae30
 8012f48:	0801ae4c 	.word	0x0801ae4c
 8012f4c:	0801ae6c 	.word	0x0801ae6c

08012f50 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b08c      	sub	sp, #48	; 0x30
 8012f54:	af04      	add	r7, sp, #16
 8012f56:	60f8      	str	r0, [r7, #12]
 8012f58:	60b9      	str	r1, [r7, #8]
 8012f5a:	607a      	str	r2, [r7, #4]
 8012f5c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d109      	bne.n	8012f78 <udp_sendto_if_src+0x28>
 8012f64:	4b65      	ldr	r3, [pc, #404]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012f66:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012f6a:	4965      	ldr	r1, [pc, #404]	; (8013100 <udp_sendto_if_src+0x1b0>)
 8012f6c:	4865      	ldr	r0, [pc, #404]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012f6e:	f004 fec3 	bl	8017cf8 <iprintf>
 8012f72:	f06f 030f 	mvn.w	r3, #15
 8012f76:	e0bc      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d109      	bne.n	8012f92 <udp_sendto_if_src+0x42>
 8012f7e:	4b5f      	ldr	r3, [pc, #380]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012f80:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012f84:	4960      	ldr	r1, [pc, #384]	; (8013108 <udp_sendto_if_src+0x1b8>)
 8012f86:	485f      	ldr	r0, [pc, #380]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012f88:	f004 feb6 	bl	8017cf8 <iprintf>
 8012f8c:	f06f 030f 	mvn.w	r3, #15
 8012f90:	e0af      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d109      	bne.n	8012fac <udp_sendto_if_src+0x5c>
 8012f98:	4b58      	ldr	r3, [pc, #352]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012f9a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012f9e:	495b      	ldr	r1, [pc, #364]	; (801310c <udp_sendto_if_src+0x1bc>)
 8012fa0:	4858      	ldr	r0, [pc, #352]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012fa2:	f004 fea9 	bl	8017cf8 <iprintf>
 8012fa6:	f06f 030f 	mvn.w	r3, #15
 8012faa:	e0a2      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d109      	bne.n	8012fc6 <udp_sendto_if_src+0x76>
 8012fb2:	4b52      	ldr	r3, [pc, #328]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012fb4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012fb8:	4955      	ldr	r1, [pc, #340]	; (8013110 <udp_sendto_if_src+0x1c0>)
 8012fba:	4852      	ldr	r0, [pc, #328]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012fbc:	f004 fe9c 	bl	8017cf8 <iprintf>
 8012fc0:	f06f 030f 	mvn.w	r3, #15
 8012fc4:	e095      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d109      	bne.n	8012fe0 <udp_sendto_if_src+0x90>
 8012fcc:	4b4b      	ldr	r3, [pc, #300]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8012fce:	f240 22d5 	movw	r2, #725	; 0x2d5
 8012fd2:	4950      	ldr	r1, [pc, #320]	; (8013114 <udp_sendto_if_src+0x1c4>)
 8012fd4:	484b      	ldr	r0, [pc, #300]	; (8013104 <udp_sendto_if_src+0x1b4>)
 8012fd6:	f004 fe8f 	bl	8017cf8 <iprintf>
 8012fda:	f06f 030f 	mvn.w	r3, #15
 8012fde:	e088      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	8a5b      	ldrh	r3, [r3, #18]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10f      	bne.n	8013008 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012fe8:	68f9      	ldr	r1, [r7, #12]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	8a5b      	ldrh	r3, [r3, #18]
 8012fee:	461a      	mov	r2, r3
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f000 f893 	bl	801311c <udp_bind>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012ffa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d002      	beq.n	8013008 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013002:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013006:	e074      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013008:	68bb      	ldr	r3, [r7, #8]
 801300a:	891b      	ldrh	r3, [r3, #8]
 801300c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013010:	4293      	cmp	r3, r2
 8013012:	d902      	bls.n	801301a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013018:	e06b      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801301a:	2108      	movs	r1, #8
 801301c:	68b8      	ldr	r0, [r7, #8]
 801301e:	f7f9 ff4f 	bl	800cec0 <pbuf_add_header>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d015      	beq.n	8013054 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013028:	f44f 7220 	mov.w	r2, #640	; 0x280
 801302c:	2108      	movs	r1, #8
 801302e:	2022      	movs	r0, #34	; 0x22
 8013030:	f7f9 fcf8 	bl	800ca24 <pbuf_alloc>
 8013034:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d102      	bne.n	8013042 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801303c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013040:	e057      	b.n	80130f2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	891b      	ldrh	r3, [r3, #8]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d006      	beq.n	8013058 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801304a:	68b9      	ldr	r1, [r7, #8]
 801304c:	69f8      	ldr	r0, [r7, #28]
 801304e:	f7fa f8f1 	bl	800d234 <pbuf_chain>
 8013052:	e001      	b.n	8013058 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	895b      	ldrh	r3, [r3, #10]
 801305c:	2b07      	cmp	r3, #7
 801305e:	d806      	bhi.n	801306e <udp_sendto_if_src+0x11e>
 8013060:	4b26      	ldr	r3, [pc, #152]	; (80130fc <udp_sendto_if_src+0x1ac>)
 8013062:	f240 320d 	movw	r2, #781	; 0x30d
 8013066:	492c      	ldr	r1, [pc, #176]	; (8013118 <udp_sendto_if_src+0x1c8>)
 8013068:	4826      	ldr	r0, [pc, #152]	; (8013104 <udp_sendto_if_src+0x1b4>)
 801306a:	f004 fe45 	bl	8017cf8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	8a5b      	ldrh	r3, [r3, #18]
 8013078:	4618      	mov	r0, r3
 801307a:	f7f8 fb01 	bl	800b680 <lwip_htons>
 801307e:	4603      	mov	r3, r0
 8013080:	461a      	mov	r2, r3
 8013082:	697b      	ldr	r3, [r7, #20]
 8013084:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013086:	887b      	ldrh	r3, [r7, #2]
 8013088:	4618      	mov	r0, r3
 801308a:	f7f8 faf9 	bl	800b680 <lwip_htons>
 801308e:	4603      	mov	r3, r0
 8013090:	461a      	mov	r2, r3
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2200      	movs	r2, #0
 801309a:	719a      	strb	r2, [r3, #6]
 801309c:	2200      	movs	r2, #0
 801309e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80130a0:	69fb      	ldr	r3, [r7, #28]
 80130a2:	891b      	ldrh	r3, [r3, #8]
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f8 faeb 	bl	800b680 <lwip_htons>
 80130aa:	4603      	mov	r3, r0
 80130ac:	461a      	mov	r2, r3
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80130b2:	2311      	movs	r3, #17
 80130b4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	7adb      	ldrb	r3, [r3, #11]
 80130ba:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	7a9b      	ldrb	r3, [r3, #10]
 80130c0:	7cb9      	ldrb	r1, [r7, #18]
 80130c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130c4:	9202      	str	r2, [sp, #8]
 80130c6:	7cfa      	ldrb	r2, [r7, #19]
 80130c8:	9201      	str	r2, [sp, #4]
 80130ca:	9300      	str	r3, [sp, #0]
 80130cc:	460b      	mov	r3, r1
 80130ce:	687a      	ldr	r2, [r7, #4]
 80130d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80130d2:	69f8      	ldr	r0, [r7, #28]
 80130d4:	f003 fb60 	bl	8016798 <ip4_output_if_src>
 80130d8:	4603      	mov	r3, r0
 80130da:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80130dc:	69fa      	ldr	r2, [r7, #28]
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	429a      	cmp	r2, r3
 80130e2:	d004      	beq.n	80130ee <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80130e4:	69f8      	ldr	r0, [r7, #28]
 80130e6:	f7f9 ff81 	bl	800cfec <pbuf_free>
    q = NULL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80130ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3720      	adds	r7, #32
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
 80130fa:	bf00      	nop
 80130fc:	0801aca0 	.word	0x0801aca0
 8013100:	0801ae8c 	.word	0x0801ae8c
 8013104:	0801acf4 	.word	0x0801acf4
 8013108:	0801aeac 	.word	0x0801aeac
 801310c:	0801aecc 	.word	0x0801aecc
 8013110:	0801aef0 	.word	0x0801aef0
 8013114:	0801af14 	.word	0x0801af14
 8013118:	0801af38 	.word	0x0801af38

0801311c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b086      	sub	sp, #24
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	4613      	mov	r3, r2
 8013128:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d101      	bne.n	8013134 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013130:	4b39      	ldr	r3, [pc, #228]	; (8013218 <udp_bind+0xfc>)
 8013132:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d109      	bne.n	801314e <udp_bind+0x32>
 801313a:	4b38      	ldr	r3, [pc, #224]	; (801321c <udp_bind+0x100>)
 801313c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013140:	4937      	ldr	r1, [pc, #220]	; (8013220 <udp_bind+0x104>)
 8013142:	4838      	ldr	r0, [pc, #224]	; (8013224 <udp_bind+0x108>)
 8013144:	f004 fdd8 	bl	8017cf8 <iprintf>
 8013148:	f06f 030f 	mvn.w	r3, #15
 801314c:	e060      	b.n	8013210 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013152:	4b35      	ldr	r3, [pc, #212]	; (8013228 <udp_bind+0x10c>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	e009      	b.n	801316e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801315a:	68fa      	ldr	r2, [r7, #12]
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	429a      	cmp	r2, r3
 8013160:	d102      	bne.n	8013168 <udp_bind+0x4c>
      rebind = 1;
 8013162:	2301      	movs	r3, #1
 8013164:	74fb      	strb	r3, [r7, #19]
      break;
 8013166:	e005      	b.n	8013174 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	68db      	ldr	r3, [r3, #12]
 801316c:	617b      	str	r3, [r7, #20]
 801316e:	697b      	ldr	r3, [r7, #20]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d1f2      	bne.n	801315a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013174:	88fb      	ldrh	r3, [r7, #6]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d109      	bne.n	801318e <udp_bind+0x72>
    port = udp_new_port();
 801317a:	f7ff fcc5 	bl	8012b08 <udp_new_port>
 801317e:	4603      	mov	r3, r0
 8013180:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013182:	88fb      	ldrh	r3, [r7, #6]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d12c      	bne.n	80131e2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013188:	f06f 0307 	mvn.w	r3, #7
 801318c:	e040      	b.n	8013210 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801318e:	4b26      	ldr	r3, [pc, #152]	; (8013228 <udp_bind+0x10c>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e022      	b.n	80131dc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013196:	68fa      	ldr	r2, [r7, #12]
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	429a      	cmp	r2, r3
 801319c:	d01b      	beq.n	80131d6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801319e:	697b      	ldr	r3, [r7, #20]
 80131a0:	8a5b      	ldrh	r3, [r3, #18]
 80131a2:	88fa      	ldrh	r2, [r7, #6]
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d116      	bne.n	80131d6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80131b0:	429a      	cmp	r2, r3
 80131b2:	d00d      	beq.n	80131d0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d00a      	beq.n	80131d0 <udp_bind+0xb4>
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d006      	beq.n	80131d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80131c2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d003      	beq.n	80131d0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d102      	bne.n	80131d6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80131d0:	f06f 0307 	mvn.w	r3, #7
 80131d4:	e01c      	b.n	8013210 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	68db      	ldr	r3, [r3, #12]
 80131da:	617b      	str	r3, [r7, #20]
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d1d9      	bne.n	8013196 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d002      	beq.n	80131ee <udp_bind+0xd2>
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	e000      	b.n	80131f0 <udp_bind+0xd4>
 80131ee:	2300      	movs	r3, #0
 80131f0:	68fa      	ldr	r2, [r7, #12]
 80131f2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	88fa      	ldrh	r2, [r7, #6]
 80131f8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80131fa:	7cfb      	ldrb	r3, [r7, #19]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d106      	bne.n	801320e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013200:	4b09      	ldr	r3, [pc, #36]	; (8013228 <udp_bind+0x10c>)
 8013202:	681a      	ldr	r2, [r3, #0]
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013208:	4a07      	ldr	r2, [pc, #28]	; (8013228 <udp_bind+0x10c>)
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801320e:	2300      	movs	r3, #0
}
 8013210:	4618      	mov	r0, r3
 8013212:	3718      	adds	r7, #24
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	0801bbcc 	.word	0x0801bbcc
 801321c:	0801aca0 	.word	0x0801aca0
 8013220:	0801af68 	.word	0x0801af68
 8013224:	0801acf4 	.word	0x0801acf4
 8013228:	2400d6d4 	.word	0x2400d6d4

0801322c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b086      	sub	sp, #24
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	4613      	mov	r3, r2
 8013238:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d109      	bne.n	8013254 <udp_connect+0x28>
 8013240:	4b2c      	ldr	r3, [pc, #176]	; (80132f4 <udp_connect+0xc8>)
 8013242:	f240 4235 	movw	r2, #1077	; 0x435
 8013246:	492c      	ldr	r1, [pc, #176]	; (80132f8 <udp_connect+0xcc>)
 8013248:	482c      	ldr	r0, [pc, #176]	; (80132fc <udp_connect+0xd0>)
 801324a:	f004 fd55 	bl	8017cf8 <iprintf>
 801324e:	f06f 030f 	mvn.w	r3, #15
 8013252:	e04b      	b.n	80132ec <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d109      	bne.n	801326e <udp_connect+0x42>
 801325a:	4b26      	ldr	r3, [pc, #152]	; (80132f4 <udp_connect+0xc8>)
 801325c:	f240 4236 	movw	r2, #1078	; 0x436
 8013260:	4927      	ldr	r1, [pc, #156]	; (8013300 <udp_connect+0xd4>)
 8013262:	4826      	ldr	r0, [pc, #152]	; (80132fc <udp_connect+0xd0>)
 8013264:	f004 fd48 	bl	8017cf8 <iprintf>
 8013268:	f06f 030f 	mvn.w	r3, #15
 801326c:	e03e      	b.n	80132ec <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	8a5b      	ldrh	r3, [r3, #18]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d10f      	bne.n	8013296 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013276:	68f9      	ldr	r1, [r7, #12]
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	8a5b      	ldrh	r3, [r3, #18]
 801327c:	461a      	mov	r2, r3
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f7ff ff4c 	bl	801311c <udp_bind>
 8013284:	4603      	mov	r3, r0
 8013286:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8013288:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d002      	beq.n	8013296 <udp_connect+0x6a>
      return err;
 8013290:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013294:	e02a      	b.n	80132ec <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013296:	68bb      	ldr	r3, [r7, #8]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d002      	beq.n	80132a2 <udp_connect+0x76>
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	e000      	b.n	80132a4 <udp_connect+0x78>
 80132a2:	2300      	movs	r3, #0
 80132a4:	68fa      	ldr	r2, [r7, #12]
 80132a6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	88fa      	ldrh	r2, [r7, #6]
 80132ac:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	7c1b      	ldrb	r3, [r3, #16]
 80132b2:	f043 0304 	orr.w	r3, r3, #4
 80132b6:	b2da      	uxtb	r2, r3
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132bc:	4b11      	ldr	r3, [pc, #68]	; (8013304 <udp_connect+0xd8>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	617b      	str	r3, [r7, #20]
 80132c2:	e008      	b.n	80132d6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	429a      	cmp	r2, r3
 80132ca:	d101      	bne.n	80132d0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80132cc:	2300      	movs	r3, #0
 80132ce:	e00d      	b.n	80132ec <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	68db      	ldr	r3, [r3, #12]
 80132d4:	617b      	str	r3, [r7, #20]
 80132d6:	697b      	ldr	r3, [r7, #20]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1f3      	bne.n	80132c4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80132dc:	4b09      	ldr	r3, [pc, #36]	; (8013304 <udp_connect+0xd8>)
 80132de:	681a      	ldr	r2, [r3, #0]
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80132e4:	4a07      	ldr	r2, [pc, #28]	; (8013304 <udp_connect+0xd8>)
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3718      	adds	r7, #24
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}
 80132f4:	0801aca0 	.word	0x0801aca0
 80132f8:	0801af80 	.word	0x0801af80
 80132fc:	0801acf4 	.word	0x0801acf4
 8013300:	0801af9c 	.word	0x0801af9c
 8013304:	2400d6d4 	.word	0x2400d6d4

08013308 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b084      	sub	sp, #16
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d107      	bne.n	801332a <udp_recv+0x22>
 801331a:	4b08      	ldr	r3, [pc, #32]	; (801333c <udp_recv+0x34>)
 801331c:	f240 428a 	movw	r2, #1162	; 0x48a
 8013320:	4907      	ldr	r1, [pc, #28]	; (8013340 <udp_recv+0x38>)
 8013322:	4808      	ldr	r0, [pc, #32]	; (8013344 <udp_recv+0x3c>)
 8013324:	f004 fce8 	bl	8017cf8 <iprintf>
 8013328:	e005      	b.n	8013336 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	687a      	ldr	r2, [r7, #4]
 8013334:	61da      	str	r2, [r3, #28]
}
 8013336:	3710      	adds	r7, #16
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}
 801333c:	0801aca0 	.word	0x0801aca0
 8013340:	0801afd4 	.word	0x0801afd4
 8013344:	0801acf4 	.word	0x0801acf4

08013348 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d107      	bne.n	8013366 <udp_remove+0x1e>
 8013356:	4b19      	ldr	r3, [pc, #100]	; (80133bc <udp_remove+0x74>)
 8013358:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801335c:	4918      	ldr	r1, [pc, #96]	; (80133c0 <udp_remove+0x78>)
 801335e:	4819      	ldr	r0, [pc, #100]	; (80133c4 <udp_remove+0x7c>)
 8013360:	f004 fcca 	bl	8017cf8 <iprintf>
 8013364:	e026      	b.n	80133b4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013366:	4b18      	ldr	r3, [pc, #96]	; (80133c8 <udp_remove+0x80>)
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	429a      	cmp	r2, r3
 801336e:	d105      	bne.n	801337c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8013370:	4b15      	ldr	r3, [pc, #84]	; (80133c8 <udp_remove+0x80>)
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	68db      	ldr	r3, [r3, #12]
 8013376:	4a14      	ldr	r2, [pc, #80]	; (80133c8 <udp_remove+0x80>)
 8013378:	6013      	str	r3, [r2, #0]
 801337a:	e017      	b.n	80133ac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801337c:	4b12      	ldr	r3, [pc, #72]	; (80133c8 <udp_remove+0x80>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	60fb      	str	r3, [r7, #12]
 8013382:	e010      	b.n	80133a6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d009      	beq.n	80133a0 <udp_remove+0x58>
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	68db      	ldr	r3, [r3, #12]
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	429a      	cmp	r2, r3
 8013394:	d104      	bne.n	80133a0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	68da      	ldr	r2, [r3, #12]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	60da      	str	r2, [r3, #12]
        break;
 801339e:	e005      	b.n	80133ac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	68db      	ldr	r3, [r3, #12]
 80133a4:	60fb      	str	r3, [r7, #12]
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d1eb      	bne.n	8013384 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80133ac:	6879      	ldr	r1, [r7, #4]
 80133ae:	2000      	movs	r0, #0
 80133b0:	f7f8 ff6c 	bl	800c28c <memp_free>
}
 80133b4:	3710      	adds	r7, #16
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	0801aca0 	.word	0x0801aca0
 80133c0:	0801afec 	.word	0x0801afec
 80133c4:	0801acf4 	.word	0x0801acf4
 80133c8:	2400d6d4 	.word	0x2400d6d4

080133cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b082      	sub	sp, #8
 80133d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80133d2:	2000      	movs	r0, #0
 80133d4:	f7f8 fee4 	bl	800c1a0 <memp_malloc>
 80133d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d007      	beq.n	80133f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80133e0:	2220      	movs	r2, #32
 80133e2:	2100      	movs	r1, #0
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f004 fc24 	bl	8017c32 <memset>
    pcb->ttl = UDP_TTL;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	22ff      	movs	r2, #255	; 0xff
 80133ee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80133f0:	687b      	ldr	r3, [r7, #4]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
	...

080133fc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80133fc:	b480      	push	{r7}
 80133fe:	b085      	sub	sp, #20
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d01e      	beq.n	801344a <udp_netif_ip_addr_changed+0x4e>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d01a      	beq.n	801344a <udp_netif_ip_addr_changed+0x4e>
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d017      	beq.n	801344a <udp_netif_ip_addr_changed+0x4e>
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d013      	beq.n	801344a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013422:	4b0d      	ldr	r3, [pc, #52]	; (8013458 <udp_netif_ip_addr_changed+0x5c>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	60fb      	str	r3, [r7, #12]
 8013428:	e00c      	b.n	8013444 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	429a      	cmp	r2, r3
 8013434:	d103      	bne.n	801343e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	681a      	ldr	r2, [r3, #0]
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	60fb      	str	r3, [r7, #12]
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d1ef      	bne.n	801342a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801344a:	bf00      	nop
 801344c:	3714      	adds	r7, #20
 801344e:	46bd      	mov	sp, r7
 8013450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013454:	4770      	bx	lr
 8013456:	bf00      	nop
 8013458:	2400d6d4 	.word	0x2400d6d4

0801345c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013460:	4b20      	ldr	r3, [pc, #128]	; (80134e4 <dhcp_inc_pcb_refcount+0x88>)
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d133      	bne.n	80134d0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013468:	4b1f      	ldr	r3, [pc, #124]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d005      	beq.n	801347c <dhcp_inc_pcb_refcount+0x20>
 8013470:	4b1e      	ldr	r3, [pc, #120]	; (80134ec <dhcp_inc_pcb_refcount+0x90>)
 8013472:	22e5      	movs	r2, #229	; 0xe5
 8013474:	491e      	ldr	r1, [pc, #120]	; (80134f0 <dhcp_inc_pcb_refcount+0x94>)
 8013476:	481f      	ldr	r0, [pc, #124]	; (80134f4 <dhcp_inc_pcb_refcount+0x98>)
 8013478:	f004 fc3e 	bl	8017cf8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801347c:	f7ff ffa6 	bl	80133cc <udp_new>
 8013480:	4603      	mov	r3, r0
 8013482:	4a19      	ldr	r2, [pc, #100]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013484:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8013486:	4b18      	ldr	r3, [pc, #96]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d102      	bne.n	8013494 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801348e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013492:	e024      	b.n	80134de <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013494:	4b14      	ldr	r3, [pc, #80]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	7a5a      	ldrb	r2, [r3, #9]
 801349a:	4b13      	ldr	r3, [pc, #76]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 0220 	orr.w	r2, r2, #32
 80134a2:	b2d2      	uxtb	r2, r2
 80134a4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80134a6:	4b10      	ldr	r3, [pc, #64]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	2244      	movs	r2, #68	; 0x44
 80134ac:	4912      	ldr	r1, [pc, #72]	; (80134f8 <dhcp_inc_pcb_refcount+0x9c>)
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7ff fe34 	bl	801311c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80134b4:	4b0c      	ldr	r3, [pc, #48]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2243      	movs	r2, #67	; 0x43
 80134ba:	490f      	ldr	r1, [pc, #60]	; (80134f8 <dhcp_inc_pcb_refcount+0x9c>)
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff feb5 	bl	801322c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80134c2:	4b09      	ldr	r3, [pc, #36]	; (80134e8 <dhcp_inc_pcb_refcount+0x8c>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2200      	movs	r2, #0
 80134c8:	490c      	ldr	r1, [pc, #48]	; (80134fc <dhcp_inc_pcb_refcount+0xa0>)
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7ff ff1c 	bl	8013308 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80134d0:	4b04      	ldr	r3, [pc, #16]	; (80134e4 <dhcp_inc_pcb_refcount+0x88>)
 80134d2:	781b      	ldrb	r3, [r3, #0]
 80134d4:	3301      	adds	r3, #1
 80134d6:	b2da      	uxtb	r2, r3
 80134d8:	4b02      	ldr	r3, [pc, #8]	; (80134e4 <dhcp_inc_pcb_refcount+0x88>)
 80134da:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	bf00      	nop
 80134e4:	24009df4 	.word	0x24009df4
 80134e8:	24009df0 	.word	0x24009df0
 80134ec:	0801b004 	.word	0x0801b004
 80134f0:	0801b03c 	.word	0x0801b03c
 80134f4:	0801b064 	.word	0x0801b064
 80134f8:	0801bbcc 	.word	0x0801bbcc
 80134fc:	08014d95 	.word	0x08014d95

08013500 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013504:	4b0e      	ldr	r3, [pc, #56]	; (8013540 <dhcp_dec_pcb_refcount+0x40>)
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d105      	bne.n	8013518 <dhcp_dec_pcb_refcount+0x18>
 801350c:	4b0d      	ldr	r3, [pc, #52]	; (8013544 <dhcp_dec_pcb_refcount+0x44>)
 801350e:	22ff      	movs	r2, #255	; 0xff
 8013510:	490d      	ldr	r1, [pc, #52]	; (8013548 <dhcp_dec_pcb_refcount+0x48>)
 8013512:	480e      	ldr	r0, [pc, #56]	; (801354c <dhcp_dec_pcb_refcount+0x4c>)
 8013514:	f004 fbf0 	bl	8017cf8 <iprintf>
  dhcp_pcb_refcount--;
 8013518:	4b09      	ldr	r3, [pc, #36]	; (8013540 <dhcp_dec_pcb_refcount+0x40>)
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	3b01      	subs	r3, #1
 801351e:	b2da      	uxtb	r2, r3
 8013520:	4b07      	ldr	r3, [pc, #28]	; (8013540 <dhcp_dec_pcb_refcount+0x40>)
 8013522:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013524:	4b06      	ldr	r3, [pc, #24]	; (8013540 <dhcp_dec_pcb_refcount+0x40>)
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d107      	bne.n	801353c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801352c:	4b08      	ldr	r3, [pc, #32]	; (8013550 <dhcp_dec_pcb_refcount+0x50>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	4618      	mov	r0, r3
 8013532:	f7ff ff09 	bl	8013348 <udp_remove>
    dhcp_pcb = NULL;
 8013536:	4b06      	ldr	r3, [pc, #24]	; (8013550 <dhcp_dec_pcb_refcount+0x50>)
 8013538:	2200      	movs	r2, #0
 801353a:	601a      	str	r2, [r3, #0]
  }
}
 801353c:	bf00      	nop
 801353e:	bd80      	pop	{r7, pc}
 8013540:	24009df4 	.word	0x24009df4
 8013544:	0801b004 	.word	0x0801b004
 8013548:	0801b08c 	.word	0x0801b08c
 801354c:	0801b064 	.word	0x0801b064
 8013550:	24009df0 	.word	0x24009df0

08013554 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013554:	b580      	push	{r7, lr}
 8013556:	b084      	sub	sp, #16
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013560:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013562:	210c      	movs	r1, #12
 8013564:	68f8      	ldr	r0, [r7, #12]
 8013566:	f001 f857 	bl	8014618 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801356a:	4b06      	ldr	r3, [pc, #24]	; (8013584 <dhcp_handle_nak+0x30>)
 801356c:	4a05      	ldr	r2, [pc, #20]	; (8013584 <dhcp_handle_nak+0x30>)
 801356e:	4905      	ldr	r1, [pc, #20]	; (8013584 <dhcp_handle_nak+0x30>)
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7f9 f82d 	bl	800c5d0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8013576:	6878      	ldr	r0, [r7, #4]
 8013578:	f000 fc4a 	bl	8013e10 <dhcp_discover>
}
 801357c:	bf00      	nop
 801357e:	3710      	adds	r7, #16
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}
 8013584:	0801bbcc 	.word	0x0801bbcc

08013588 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8013588:	b580      	push	{r7, lr}
 801358a:	b084      	sub	sp, #16
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013594:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013596:	2108      	movs	r1, #8
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f001 f83d 	bl	8014618 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	331c      	adds	r3, #28
 80135a2:	2200      	movs	r2, #0
 80135a4:	4619      	mov	r1, r3
 80135a6:	6878      	ldr	r0, [r7, #4]
 80135a8:	f002 fb3e 	bl	8015c28 <etharp_query>
 80135ac:	4603      	mov	r3, r0
 80135ae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	799b      	ldrb	r3, [r3, #6]
 80135b4:	2bff      	cmp	r3, #255	; 0xff
 80135b6:	d005      	beq.n	80135c4 <dhcp_check+0x3c>
    dhcp->tries++;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	799b      	ldrb	r3, [r3, #6]
 80135bc:	3301      	adds	r3, #1
 80135be:	b2da      	uxtb	r2, r3
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80135c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80135c8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80135ca:	893b      	ldrh	r3, [r7, #8]
 80135cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135d0:	4a06      	ldr	r2, [pc, #24]	; (80135ec <dhcp_check+0x64>)
 80135d2:	fb82 1203 	smull	r1, r2, r2, r3
 80135d6:	1152      	asrs	r2, r2, #5
 80135d8:	17db      	asrs	r3, r3, #31
 80135da:	1ad3      	subs	r3, r2, r3
 80135dc:	b29a      	uxth	r2, r3
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80135e2:	bf00      	nop
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	10624dd3 	.word	0x10624dd3

080135f0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b084      	sub	sp, #16
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013600:	4b0c      	ldr	r3, [pc, #48]	; (8013634 <dhcp_handle_offer+0x44>)
 8013602:	789b      	ldrb	r3, [r3, #2]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d011      	beq.n	801362c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	2200      	movs	r2, #0
 801360c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801360e:	4b0a      	ldr	r3, [pc, #40]	; (8013638 <dhcp_handle_offer+0x48>)
 8013610:	689b      	ldr	r3, [r3, #8]
 8013612:	4618      	mov	r0, r3
 8013614:	f7f8 f849 	bl	800b6aa <lwip_htonl>
 8013618:	4602      	mov	r2, r0
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	691a      	ldr	r2, [r3, #16]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f000 f808 	bl	801363c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801362c:	bf00      	nop
 801362e:	3710      	adds	r7, #16
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}
 8013634:	2400d6d8 	.word	0x2400d6d8
 8013638:	2400d6e0 	.word	0x2400d6e0

0801363c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801363c:	b5b0      	push	{r4, r5, r7, lr}
 801363e:	b08a      	sub	sp, #40	; 0x28
 8013640:	af02      	add	r7, sp, #8
 8013642:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d109      	bne.n	801365e <dhcp_select+0x22>
 801364a:	4b71      	ldr	r3, [pc, #452]	; (8013810 <dhcp_select+0x1d4>)
 801364c:	f240 1277 	movw	r2, #375	; 0x177
 8013650:	4970      	ldr	r1, [pc, #448]	; (8013814 <dhcp_select+0x1d8>)
 8013652:	4871      	ldr	r0, [pc, #452]	; (8013818 <dhcp_select+0x1dc>)
 8013654:	f004 fb50 	bl	8017cf8 <iprintf>
 8013658:	f06f 030f 	mvn.w	r3, #15
 801365c:	e0d3      	b.n	8013806 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013662:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d109      	bne.n	801367e <dhcp_select+0x42>
 801366a:	4b69      	ldr	r3, [pc, #420]	; (8013810 <dhcp_select+0x1d4>)
 801366c:	f240 1279 	movw	r2, #377	; 0x179
 8013670:	496a      	ldr	r1, [pc, #424]	; (801381c <dhcp_select+0x1e0>)
 8013672:	4869      	ldr	r0, [pc, #420]	; (8013818 <dhcp_select+0x1dc>)
 8013674:	f004 fb40 	bl	8017cf8 <iprintf>
 8013678:	f06f 0305 	mvn.w	r3, #5
 801367c:	e0c3      	b.n	8013806 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801367e:	2101      	movs	r1, #1
 8013680:	69b8      	ldr	r0, [r7, #24]
 8013682:	f000 ffc9 	bl	8014618 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013686:	f107 030c 	add.w	r3, r7, #12
 801368a:	2203      	movs	r2, #3
 801368c:	69b9      	ldr	r1, [r7, #24]
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f001 fc4e 	bl	8014f30 <dhcp_create_msg>
 8013694:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	2b00      	cmp	r3, #0
 801369a:	f000 8085 	beq.w	80137a8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80136a4:	89b8      	ldrh	r0, [r7, #12]
 80136a6:	693b      	ldr	r3, [r7, #16]
 80136a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136ac:	2302      	movs	r3, #2
 80136ae:	2239      	movs	r2, #57	; 0x39
 80136b0:	f000 ffcc 	bl	801464c <dhcp_option>
 80136b4:	4603      	mov	r3, r0
 80136b6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80136b8:	89b8      	ldrh	r0, [r7, #12]
 80136ba:	693b      	ldr	r3, [r7, #16]
 80136bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80136c4:	461a      	mov	r2, r3
 80136c6:	f001 f81b 	bl	8014700 <dhcp_option_short>
 80136ca:	4603      	mov	r3, r0
 80136cc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80136ce:	89b8      	ldrh	r0, [r7, #12]
 80136d0:	693b      	ldr	r3, [r7, #16]
 80136d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136d6:	2304      	movs	r3, #4
 80136d8:	2232      	movs	r2, #50	; 0x32
 80136da:	f000 ffb7 	bl	801464c <dhcp_option>
 80136de:	4603      	mov	r3, r0
 80136e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80136e2:	89bc      	ldrh	r4, [r7, #12]
 80136e4:	693b      	ldr	r3, [r7, #16]
 80136e6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80136ea:	69bb      	ldr	r3, [r7, #24]
 80136ec:	69db      	ldr	r3, [r3, #28]
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7f7 ffdb 	bl	800b6aa <lwip_htonl>
 80136f4:	4603      	mov	r3, r0
 80136f6:	461a      	mov	r2, r3
 80136f8:	4629      	mov	r1, r5
 80136fa:	4620      	mov	r0, r4
 80136fc:	f001 f832 	bl	8014764 <dhcp_option_long>
 8013700:	4603      	mov	r3, r0
 8013702:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013704:	89b8      	ldrh	r0, [r7, #12]
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801370c:	2304      	movs	r3, #4
 801370e:	2236      	movs	r2, #54	; 0x36
 8013710:	f000 ff9c 	bl	801464c <dhcp_option>
 8013714:	4603      	mov	r3, r0
 8013716:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013718:	89bc      	ldrh	r4, [r7, #12]
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	699b      	ldr	r3, [r3, #24]
 8013724:	4618      	mov	r0, r3
 8013726:	f7f7 ffc0 	bl	800b6aa <lwip_htonl>
 801372a:	4603      	mov	r3, r0
 801372c:	461a      	mov	r2, r3
 801372e:	4629      	mov	r1, r5
 8013730:	4620      	mov	r0, r4
 8013732:	f001 f817 	bl	8014764 <dhcp_option_long>
 8013736:	4603      	mov	r3, r0
 8013738:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801373a:	89b8      	ldrh	r0, [r7, #12]
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013742:	2303      	movs	r3, #3
 8013744:	2237      	movs	r2, #55	; 0x37
 8013746:	f000 ff81 	bl	801464c <dhcp_option>
 801374a:	4603      	mov	r3, r0
 801374c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801374e:	2300      	movs	r3, #0
 8013750:	77bb      	strb	r3, [r7, #30]
 8013752:	e00e      	b.n	8013772 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013754:	89b8      	ldrh	r0, [r7, #12]
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801375c:	7fbb      	ldrb	r3, [r7, #30]
 801375e:	4a30      	ldr	r2, [pc, #192]	; (8013820 <dhcp_select+0x1e4>)
 8013760:	5cd3      	ldrb	r3, [r2, r3]
 8013762:	461a      	mov	r2, r3
 8013764:	f000 ffa6 	bl	80146b4 <dhcp_option_byte>
 8013768:	4603      	mov	r3, r0
 801376a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801376c:	7fbb      	ldrb	r3, [r7, #30]
 801376e:	3301      	adds	r3, #1
 8013770:	77bb      	strb	r3, [r7, #30]
 8013772:	7fbb      	ldrb	r3, [r7, #30]
 8013774:	2b02      	cmp	r3, #2
 8013776:	d9ed      	bls.n	8013754 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013778:	89b8      	ldrh	r0, [r7, #12]
 801377a:	693b      	ldr	r3, [r7, #16]
 801377c:	33f0      	adds	r3, #240	; 0xf0
 801377e:	697a      	ldr	r2, [r7, #20]
 8013780:	4619      	mov	r1, r3
 8013782:	f001 fcab 	bl	80150dc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013786:	4b27      	ldr	r3, [pc, #156]	; (8013824 <dhcp_select+0x1e8>)
 8013788:	6818      	ldr	r0, [r3, #0]
 801378a:	4b27      	ldr	r3, [pc, #156]	; (8013828 <dhcp_select+0x1ec>)
 801378c:	9301      	str	r3, [sp, #4]
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	9300      	str	r3, [sp, #0]
 8013792:	2343      	movs	r3, #67	; 0x43
 8013794:	4a25      	ldr	r2, [pc, #148]	; (801382c <dhcp_select+0x1f0>)
 8013796:	6979      	ldr	r1, [r7, #20]
 8013798:	f7ff fbda 	bl	8012f50 <udp_sendto_if_src>
 801379c:	4603      	mov	r3, r0
 801379e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80137a0:	6978      	ldr	r0, [r7, #20]
 80137a2:	f7f9 fc23 	bl	800cfec <pbuf_free>
 80137a6:	e001      	b.n	80137ac <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80137a8:	23ff      	movs	r3, #255	; 0xff
 80137aa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80137ac:	69bb      	ldr	r3, [r7, #24]
 80137ae:	799b      	ldrb	r3, [r3, #6]
 80137b0:	2bff      	cmp	r3, #255	; 0xff
 80137b2:	d005      	beq.n	80137c0 <dhcp_select+0x184>
    dhcp->tries++;
 80137b4:	69bb      	ldr	r3, [r7, #24]
 80137b6:	799b      	ldrb	r3, [r3, #6]
 80137b8:	3301      	adds	r3, #1
 80137ba:	b2da      	uxtb	r2, r3
 80137bc:	69bb      	ldr	r3, [r7, #24]
 80137be:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80137c0:	69bb      	ldr	r3, [r7, #24]
 80137c2:	799b      	ldrb	r3, [r3, #6]
 80137c4:	2b05      	cmp	r3, #5
 80137c6:	d80d      	bhi.n	80137e4 <dhcp_select+0x1a8>
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	799b      	ldrb	r3, [r3, #6]
 80137cc:	461a      	mov	r2, r3
 80137ce:	2301      	movs	r3, #1
 80137d0:	4093      	lsls	r3, r2
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	461a      	mov	r2, r3
 80137d6:	0152      	lsls	r2, r2, #5
 80137d8:	1ad2      	subs	r2, r2, r3
 80137da:	0092      	lsls	r2, r2, #2
 80137dc:	4413      	add	r3, r2
 80137de:	00db      	lsls	r3, r3, #3
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	e001      	b.n	80137e8 <dhcp_select+0x1ac>
 80137e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80137e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80137ea:	89fb      	ldrh	r3, [r7, #14]
 80137ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80137f0:	4a0f      	ldr	r2, [pc, #60]	; (8013830 <dhcp_select+0x1f4>)
 80137f2:	fb82 1203 	smull	r1, r2, r2, r3
 80137f6:	1152      	asrs	r2, r2, #5
 80137f8:	17db      	asrs	r3, r3, #31
 80137fa:	1ad3      	subs	r3, r2, r3
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013802:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013806:	4618      	mov	r0, r3
 8013808:	3720      	adds	r7, #32
 801380a:	46bd      	mov	sp, r7
 801380c:	bdb0      	pop	{r4, r5, r7, pc}
 801380e:	bf00      	nop
 8013810:	0801b004 	.word	0x0801b004
 8013814:	0801b0b0 	.word	0x0801b0b0
 8013818:	0801b064 	.word	0x0801b064
 801381c:	0801b0cc 	.word	0x0801b0cc
 8013820:	24000034 	.word	0x24000034
 8013824:	24009df0 	.word	0x24009df0
 8013828:	0801bbcc 	.word	0x0801bbcc
 801382c:	0801bbd0 	.word	0x0801bbd0
 8013830:	10624dd3 	.word	0x10624dd3

08013834 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801383a:	4b27      	ldr	r3, [pc, #156]	; (80138d8 <dhcp_coarse_tmr+0xa4>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	607b      	str	r3, [r7, #4]
 8013840:	e042      	b.n	80138c8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013846:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d039      	beq.n	80138c2 <dhcp_coarse_tmr+0x8e>
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	795b      	ldrb	r3, [r3, #5]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d035      	beq.n	80138c2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	8a9b      	ldrh	r3, [r3, #20]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d012      	beq.n	8013884 <dhcp_coarse_tmr+0x50>
 801385e:	683b      	ldr	r3, [r7, #0]
 8013860:	8a5b      	ldrh	r3, [r3, #18]
 8013862:	3301      	adds	r3, #1
 8013864:	b29a      	uxth	r2, r3
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	825a      	strh	r2, [r3, #18]
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	8a5a      	ldrh	r2, [r3, #18]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	8a9b      	ldrh	r3, [r3, #20]
 8013872:	429a      	cmp	r2, r3
 8013874:	d106      	bne.n	8013884 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f000 fe34 	bl	80144e4 <dhcp_release_and_stop>
        dhcp_start(netif);
 801387c:	6878      	ldr	r0, [r7, #4]
 801387e:	f000 f96b 	bl	8013b58 <dhcp_start>
 8013882:	e01e      	b.n	80138c2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	8a1b      	ldrh	r3, [r3, #16]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d00b      	beq.n	80138a4 <dhcp_coarse_tmr+0x70>
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	8a1b      	ldrh	r3, [r3, #16]
 8013890:	1e5a      	subs	r2, r3, #1
 8013892:	b291      	uxth	r1, r2
 8013894:	683a      	ldr	r2, [r7, #0]
 8013896:	8211      	strh	r1, [r2, #16]
 8013898:	2b01      	cmp	r3, #1
 801389a:	d103      	bne.n	80138a4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 f8c7 	bl	8013a30 <dhcp_t2_timeout>
 80138a2:	e00e      	b.n	80138c2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	89db      	ldrh	r3, [r3, #14]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d00a      	beq.n	80138c2 <dhcp_coarse_tmr+0x8e>
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	89db      	ldrh	r3, [r3, #14]
 80138b0:	1e5a      	subs	r2, r3, #1
 80138b2:	b291      	uxth	r1, r2
 80138b4:	683a      	ldr	r2, [r7, #0]
 80138b6:	81d1      	strh	r1, [r2, #14]
 80138b8:	2b01      	cmp	r3, #1
 80138ba:	d102      	bne.n	80138c2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f000 f888 	bl	80139d2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	607b      	str	r3, [r7, #4]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d1b9      	bne.n	8013842 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80138ce:	bf00      	nop
 80138d0:	bf00      	nop
 80138d2:	3708      	adds	r7, #8
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}
 80138d8:	2400d6ac 	.word	0x2400d6ac

080138dc <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80138e2:	4b16      	ldr	r3, [pc, #88]	; (801393c <dhcp_fine_tmr+0x60>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	607b      	str	r3, [r7, #4]
 80138e8:	e020      	b.n	801392c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ee:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d017      	beq.n	8013926 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	891b      	ldrh	r3, [r3, #8]
 80138fa:	2b01      	cmp	r3, #1
 80138fc:	d906      	bls.n	801390c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	891b      	ldrh	r3, [r3, #8]
 8013902:	3b01      	subs	r3, #1
 8013904:	b29a      	uxth	r2, r3
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	811a      	strh	r2, [r3, #8]
 801390a:	e00c      	b.n	8013926 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	891b      	ldrh	r3, [r3, #8]
 8013910:	2b01      	cmp	r3, #1
 8013912:	d108      	bne.n	8013926 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	891b      	ldrh	r3, [r3, #8]
 8013918:	3b01      	subs	r3, #1
 801391a:	b29a      	uxth	r2, r3
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 f80d 	bl	8013940 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	607b      	str	r3, [r7, #4]
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1db      	bne.n	80138ea <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013932:	bf00      	nop
 8013934:	bf00      	nop
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	2400d6ac 	.word	0x2400d6ac

08013940 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b084      	sub	sp, #16
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801394c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	795b      	ldrb	r3, [r3, #5]
 8013952:	2b0c      	cmp	r3, #12
 8013954:	d003      	beq.n	801395e <dhcp_timeout+0x1e>
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	795b      	ldrb	r3, [r3, #5]
 801395a:	2b06      	cmp	r3, #6
 801395c:	d103      	bne.n	8013966 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801395e:	6878      	ldr	r0, [r7, #4]
 8013960:	f000 fa56 	bl	8013e10 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013964:	e031      	b.n	80139ca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	795b      	ldrb	r3, [r3, #5]
 801396a:	2b01      	cmp	r3, #1
 801396c:	d10e      	bne.n	801398c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	799b      	ldrb	r3, [r3, #6]
 8013972:	2b05      	cmp	r3, #5
 8013974:	d803      	bhi.n	801397e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7ff fe60 	bl	801363c <dhcp_select>
}
 801397c:	e025      	b.n	80139ca <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f000 fdb0 	bl	80144e4 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013984:	6878      	ldr	r0, [r7, #4]
 8013986:	f000 f8e7 	bl	8013b58 <dhcp_start>
}
 801398a:	e01e      	b.n	80139ca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	795b      	ldrb	r3, [r3, #5]
 8013990:	2b08      	cmp	r3, #8
 8013992:	d10b      	bne.n	80139ac <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	799b      	ldrb	r3, [r3, #6]
 8013998:	2b01      	cmp	r3, #1
 801399a:	d803      	bhi.n	80139a4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801399c:	6878      	ldr	r0, [r7, #4]
 801399e:	f7ff fdf3 	bl	8013588 <dhcp_check>
}
 80139a2:	e012      	b.n	80139ca <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80139a4:	6878      	ldr	r0, [r7, #4]
 80139a6:	f000 fad5 	bl	8013f54 <dhcp_bind>
}
 80139aa:	e00e      	b.n	80139ca <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	795b      	ldrb	r3, [r3, #5]
 80139b0:	2b03      	cmp	r3, #3
 80139b2:	d10a      	bne.n	80139ca <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	799b      	ldrb	r3, [r3, #6]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d803      	bhi.n	80139c4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 fcdb 	bl	8014378 <dhcp_reboot>
}
 80139c2:	e002      	b.n	80139ca <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80139c4:	6878      	ldr	r0, [r7, #4]
 80139c6:	f000 fa23 	bl	8013e10 <dhcp_discover>
}
 80139ca:	bf00      	nop
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}

080139d2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80139d2:	b580      	push	{r7, lr}
 80139d4:	b084      	sub	sp, #16
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139de:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	795b      	ldrb	r3, [r3, #5]
 80139e4:	2b01      	cmp	r3, #1
 80139e6:	d007      	beq.n	80139f8 <dhcp_t1_timeout+0x26>
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	795b      	ldrb	r3, [r3, #5]
 80139ec:	2b0a      	cmp	r3, #10
 80139ee:	d003      	beq.n	80139f8 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80139f4:	2b05      	cmp	r3, #5
 80139f6:	d117      	bne.n	8013a28 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 fb85 	bl	8014108 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	899b      	ldrh	r3, [r3, #12]
 8013a02:	461a      	mov	r2, r3
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	8a5b      	ldrh	r3, [r3, #18]
 8013a08:	1ad3      	subs	r3, r2, r3
 8013a0a:	2b01      	cmp	r3, #1
 8013a0c:	dd0c      	ble.n	8013a28 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	899b      	ldrh	r3, [r3, #12]
 8013a12:	461a      	mov	r2, r3
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	8a5b      	ldrh	r3, [r3, #18]
 8013a18:	1ad3      	subs	r3, r2, r3
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	da00      	bge.n	8013a20 <dhcp_t1_timeout+0x4e>
 8013a1e:	3301      	adds	r3, #1
 8013a20:	105b      	asrs	r3, r3, #1
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013a28:	bf00      	nop
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}

08013a30 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013a30:	b580      	push	{r7, lr}
 8013a32:	b084      	sub	sp, #16
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a3c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	795b      	ldrb	r3, [r3, #5]
 8013a42:	2b01      	cmp	r3, #1
 8013a44:	d00b      	beq.n	8013a5e <dhcp_t2_timeout+0x2e>
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	795b      	ldrb	r3, [r3, #5]
 8013a4a:	2b0a      	cmp	r3, #10
 8013a4c:	d007      	beq.n	8013a5e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013a52:	2b05      	cmp	r3, #5
 8013a54:	d003      	beq.n	8013a5e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	795b      	ldrb	r3, [r3, #5]
 8013a5a:	2b04      	cmp	r3, #4
 8013a5c:	d117      	bne.n	8013a8e <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f000 fbee 	bl	8014240 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	8a9b      	ldrh	r3, [r3, #20]
 8013a68:	461a      	mov	r2, r3
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	8a5b      	ldrh	r3, [r3, #18]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	2b01      	cmp	r3, #1
 8013a72:	dd0c      	ble.n	8013a8e <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	8a9b      	ldrh	r3, [r3, #20]
 8013a78:	461a      	mov	r2, r3
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	8a5b      	ldrh	r3, [r3, #18]
 8013a7e:	1ad3      	subs	r3, r2, r3
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	da00      	bge.n	8013a86 <dhcp_t2_timeout+0x56>
 8013a84:	3301      	adds	r3, #1
 8013a86:	105b      	asrs	r3, r3, #1
 8013a88:	b29a      	uxth	r2, r3
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013a8e:	bf00      	nop
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
	...

08013a98 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b084      	sub	sp, #16
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aa6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2200      	movs	r2, #0
 8013aac:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	2200      	movs	r2, #0
 8013ab2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013ab4:	4b26      	ldr	r3, [pc, #152]	; (8013b50 <dhcp_handle_ack+0xb8>)
 8013ab6:	78db      	ldrb	r3, [r3, #3]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d003      	beq.n	8013ac4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013abc:	4b25      	ldr	r3, [pc, #148]	; (8013b54 <dhcp_handle_ack+0xbc>)
 8013abe:	68da      	ldr	r2, [r3, #12]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013ac4:	4b22      	ldr	r3, [pc, #136]	; (8013b50 <dhcp_handle_ack+0xb8>)
 8013ac6:	791b      	ldrb	r3, [r3, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d004      	beq.n	8013ad6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013acc:	4b21      	ldr	r3, [pc, #132]	; (8013b54 <dhcp_handle_ack+0xbc>)
 8013ace:	691a      	ldr	r2, [r3, #16]
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	62da      	str	r2, [r3, #44]	; 0x2c
 8013ad4:	e004      	b.n	8013ae0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ada:	085a      	lsrs	r2, r3, #1
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013ae0:	4b1b      	ldr	r3, [pc, #108]	; (8013b50 <dhcp_handle_ack+0xb8>)
 8013ae2:	795b      	ldrb	r3, [r3, #5]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d004      	beq.n	8013af2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013ae8:	4b1a      	ldr	r3, [pc, #104]	; (8013b54 <dhcp_handle_ack+0xbc>)
 8013aea:	695a      	ldr	r2, [r3, #20]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	631a      	str	r2, [r3, #48]	; 0x30
 8013af0:	e007      	b.n	8013b02 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013af6:	4613      	mov	r3, r2
 8013af8:	00db      	lsls	r3, r3, #3
 8013afa:	1a9b      	subs	r3, r3, r2
 8013afc:	08da      	lsrs	r2, r3, #3
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013b02:	683b      	ldr	r3, [r7, #0]
 8013b04:	691a      	ldr	r2, [r3, #16]
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013b0a:	4b11      	ldr	r3, [pc, #68]	; (8013b50 <dhcp_handle_ack+0xb8>)
 8013b0c:	799b      	ldrb	r3, [r3, #6]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00b      	beq.n	8013b2a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013b12:	4b10      	ldr	r3, [pc, #64]	; (8013b54 <dhcp_handle_ack+0xbc>)
 8013b14:	699b      	ldr	r3, [r3, #24]
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7f7 fdc7 	bl	800b6aa <lwip_htonl>
 8013b1c:	4602      	mov	r2, r0
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2201      	movs	r2, #1
 8013b26:	71da      	strb	r2, [r3, #7]
 8013b28:	e002      	b.n	8013b30 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013b30:	4b07      	ldr	r3, [pc, #28]	; (8013b50 <dhcp_handle_ack+0xb8>)
 8013b32:	79db      	ldrb	r3, [r3, #7]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d007      	beq.n	8013b48 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013b38:	4b06      	ldr	r3, [pc, #24]	; (8013b54 <dhcp_handle_ack+0xbc>)
 8013b3a:	69db      	ldr	r3, [r3, #28]
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f7 fdb4 	bl	800b6aa <lwip_htonl>
 8013b42:	4602      	mov	r2, r0
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013b48:	bf00      	nop
 8013b4a:	3710      	adds	r7, #16
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	2400d6d8 	.word	0x2400d6d8
 8013b54:	2400d6e0 	.word	0x2400d6e0

08013b58 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d109      	bne.n	8013b7a <dhcp_start+0x22>
 8013b66:	4b37      	ldr	r3, [pc, #220]	; (8013c44 <dhcp_start+0xec>)
 8013b68:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013b6c:	4936      	ldr	r1, [pc, #216]	; (8013c48 <dhcp_start+0xf0>)
 8013b6e:	4837      	ldr	r0, [pc, #220]	; (8013c4c <dhcp_start+0xf4>)
 8013b70:	f004 f8c2 	bl	8017cf8 <iprintf>
 8013b74:	f06f 030f 	mvn.w	r3, #15
 8013b78:	e060      	b.n	8013c3c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b80:	f003 0301 	and.w	r3, r3, #1
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d109      	bne.n	8013b9c <dhcp_start+0x44>
 8013b88:	4b2e      	ldr	r3, [pc, #184]	; (8013c44 <dhcp_start+0xec>)
 8013b8a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013b8e:	4930      	ldr	r1, [pc, #192]	; (8013c50 <dhcp_start+0xf8>)
 8013b90:	482e      	ldr	r0, [pc, #184]	; (8013c4c <dhcp_start+0xf4>)
 8013b92:	f004 f8b1 	bl	8017cf8 <iprintf>
 8013b96:	f06f 030f 	mvn.w	r3, #15
 8013b9a:	e04f      	b.n	8013c3c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ba0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ba6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013baa:	d202      	bcs.n	8013bb2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013bac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bb0:	e044      	b.n	8013c3c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d10d      	bne.n	8013bd4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013bb8:	2034      	movs	r0, #52	; 0x34
 8013bba:	f7f8 f94d 	bl	800be58 <mem_malloc>
 8013bbe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d102      	bne.n	8013bcc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bca:	e037      	b.n	8013c3c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	625a      	str	r2, [r3, #36]	; 0x24
 8013bd2:	e005      	b.n	8013be0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	791b      	ldrb	r3, [r3, #4]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d001      	beq.n	8013be0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013bdc:	f7ff fc90 	bl	8013500 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013be0:	2234      	movs	r2, #52	; 0x34
 8013be2:	2100      	movs	r1, #0
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f004 f824 	bl	8017c32 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013bea:	f7ff fc37 	bl	801345c <dhcp_inc_pcb_refcount>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d002      	beq.n	8013bfa <dhcp_start+0xa2>
    return ERR_MEM;
 8013bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bf8:	e020      	b.n	8013c3c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2201      	movs	r2, #1
 8013bfe:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013c06:	f003 0304 	and.w	r3, r3, #4
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d105      	bne.n	8013c1a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013c0e:	2102      	movs	r1, #2
 8013c10:	68f8      	ldr	r0, [r7, #12]
 8013c12:	f000 fd01 	bl	8014618 <dhcp_set_state>
    return ERR_OK;
 8013c16:	2300      	movs	r3, #0
 8013c18:	e010      	b.n	8013c3c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f000 f8f8 	bl	8013e10 <dhcp_discover>
 8013c20:	4603      	mov	r3, r0
 8013c22:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013c24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d005      	beq.n	8013c38 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013c2c:	6878      	ldr	r0, [r7, #4]
 8013c2e:	f000 fc59 	bl	80144e4 <dhcp_release_and_stop>
    return ERR_MEM;
 8013c32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c36:	e001      	b.n	8013c3c <dhcp_start+0xe4>
  }
  return result;
 8013c38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	3710      	adds	r7, #16
 8013c40:	46bd      	mov	sp, r7
 8013c42:	bd80      	pop	{r7, pc}
 8013c44:	0801b004 	.word	0x0801b004
 8013c48:	0801b0e8 	.word	0x0801b0e8
 8013c4c:	0801b064 	.word	0x0801b064
 8013c50:	0801b12c 	.word	0x0801b12c

08013c54 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b084      	sub	sp, #16
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c60:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d025      	beq.n	8013cb4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	795b      	ldrb	r3, [r3, #5]
 8013c6c:	2b0a      	cmp	r3, #10
 8013c6e:	d008      	beq.n	8013c82 <dhcp_network_changed+0x2e>
 8013c70:	2b0a      	cmp	r3, #10
 8013c72:	dc0d      	bgt.n	8013c90 <dhcp_network_changed+0x3c>
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d01f      	beq.n	8013cb8 <dhcp_network_changed+0x64>
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	db09      	blt.n	8013c90 <dhcp_network_changed+0x3c>
 8013c7c:	3b03      	subs	r3, #3
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d806      	bhi.n	8013c90 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	2200      	movs	r2, #0
 8013c86:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fb75 	bl	8014378 <dhcp_reboot>
      break;
 8013c8e:	e014      	b.n	8013cba <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	795b      	ldrb	r3, [r3, #5]
 8013c94:	2b0c      	cmp	r3, #12
 8013c96:	d906      	bls.n	8013ca6 <dhcp_network_changed+0x52>
 8013c98:	4b09      	ldr	r3, [pc, #36]	; (8013cc0 <dhcp_network_changed+0x6c>)
 8013c9a:	f240 326d 	movw	r2, #877	; 0x36d
 8013c9e:	4909      	ldr	r1, [pc, #36]	; (8013cc4 <dhcp_network_changed+0x70>)
 8013ca0:	4809      	ldr	r0, [pc, #36]	; (8013cc8 <dhcp_network_changed+0x74>)
 8013ca2:	f004 f829 	bl	8017cf8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f000 f8af 	bl	8013e10 <dhcp_discover>
      break;
 8013cb2:	e002      	b.n	8013cba <dhcp_network_changed+0x66>
    return;
 8013cb4:	bf00      	nop
 8013cb6:	e000      	b.n	8013cba <dhcp_network_changed+0x66>
      break;
 8013cb8:	bf00      	nop
  }
}
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	0801b004 	.word	0x0801b004
 8013cc4:	0801b150 	.word	0x0801b150
 8013cc8:	0801b064 	.word	0x0801b064

08013ccc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013ccc:	b580      	push	{r7, lr}
 8013cce:	b084      	sub	sp, #16
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d107      	bne.n	8013cec <dhcp_arp_reply+0x20>
 8013cdc:	4b0e      	ldr	r3, [pc, #56]	; (8013d18 <dhcp_arp_reply+0x4c>)
 8013cde:	f240 328b 	movw	r2, #907	; 0x38b
 8013ce2:	490e      	ldr	r1, [pc, #56]	; (8013d1c <dhcp_arp_reply+0x50>)
 8013ce4:	480e      	ldr	r0, [pc, #56]	; (8013d20 <dhcp_arp_reply+0x54>)
 8013ce6:	f004 f807 	bl	8017cf8 <iprintf>
 8013cea:	e012      	b.n	8013d12 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cf0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00c      	beq.n	8013d12 <dhcp_arp_reply+0x46>
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	795b      	ldrb	r3, [r3, #5]
 8013cfc:	2b08      	cmp	r3, #8
 8013cfe:	d108      	bne.n	8013d12 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	681a      	ldr	r2, [r3, #0]
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	69db      	ldr	r3, [r3, #28]
 8013d08:	429a      	cmp	r2, r3
 8013d0a:	d102      	bne.n	8013d12 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013d0c:	6878      	ldr	r0, [r7, #4]
 8013d0e:	f000 f809 	bl	8013d24 <dhcp_decline>
    }
  }
}
 8013d12:	3710      	adds	r7, #16
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	0801b004 	.word	0x0801b004
 8013d1c:	0801b0e8 	.word	0x0801b0e8
 8013d20:	0801b064 	.word	0x0801b064

08013d24 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013d24:	b5b0      	push	{r4, r5, r7, lr}
 8013d26:	b08a      	sub	sp, #40	; 0x28
 8013d28:	af02      	add	r7, sp, #8
 8013d2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d30:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013d32:	210c      	movs	r1, #12
 8013d34:	69b8      	ldr	r0, [r7, #24]
 8013d36:	f000 fc6f 	bl	8014618 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013d3a:	f107 030c 	add.w	r3, r7, #12
 8013d3e:	2204      	movs	r2, #4
 8013d40:	69b9      	ldr	r1, [r7, #24]
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f001 f8f4 	bl	8014f30 <dhcp_create_msg>
 8013d48:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013d4a:	697b      	ldr	r3, [r7, #20]
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d035      	beq.n	8013dbc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013d56:	89b8      	ldrh	r0, [r7, #12]
 8013d58:	693b      	ldr	r3, [r7, #16]
 8013d5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d5e:	2304      	movs	r3, #4
 8013d60:	2232      	movs	r2, #50	; 0x32
 8013d62:	f000 fc73 	bl	801464c <dhcp_option>
 8013d66:	4603      	mov	r3, r0
 8013d68:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013d6a:	89bc      	ldrh	r4, [r7, #12]
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013d72:	69bb      	ldr	r3, [r7, #24]
 8013d74:	69db      	ldr	r3, [r3, #28]
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7f7 fc97 	bl	800b6aa <lwip_htonl>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	461a      	mov	r2, r3
 8013d80:	4629      	mov	r1, r5
 8013d82:	4620      	mov	r0, r4
 8013d84:	f000 fcee 	bl	8014764 <dhcp_option_long>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013d8c:	89b8      	ldrh	r0, [r7, #12]
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	33f0      	adds	r3, #240	; 0xf0
 8013d92:	697a      	ldr	r2, [r7, #20]
 8013d94:	4619      	mov	r1, r3
 8013d96:	f001 f9a1 	bl	80150dc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013d9a:	4b19      	ldr	r3, [pc, #100]	; (8013e00 <dhcp_decline+0xdc>)
 8013d9c:	6818      	ldr	r0, [r3, #0]
 8013d9e:	4b19      	ldr	r3, [pc, #100]	; (8013e04 <dhcp_decline+0xe0>)
 8013da0:	9301      	str	r3, [sp, #4]
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	9300      	str	r3, [sp, #0]
 8013da6:	2343      	movs	r3, #67	; 0x43
 8013da8:	4a17      	ldr	r2, [pc, #92]	; (8013e08 <dhcp_decline+0xe4>)
 8013daa:	6979      	ldr	r1, [r7, #20]
 8013dac:	f7ff f8d0 	bl	8012f50 <udp_sendto_if_src>
 8013db0:	4603      	mov	r3, r0
 8013db2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013db4:	6978      	ldr	r0, [r7, #20]
 8013db6:	f7f9 f919 	bl	800cfec <pbuf_free>
 8013dba:	e001      	b.n	8013dc0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013dbc:	23ff      	movs	r3, #255	; 0xff
 8013dbe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013dc0:	69bb      	ldr	r3, [r7, #24]
 8013dc2:	799b      	ldrb	r3, [r3, #6]
 8013dc4:	2bff      	cmp	r3, #255	; 0xff
 8013dc6:	d005      	beq.n	8013dd4 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	799b      	ldrb	r3, [r3, #6]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	b2da      	uxtb	r2, r3
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013dd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8013dd8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013dda:	89fb      	ldrh	r3, [r7, #14]
 8013ddc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013de0:	4a0a      	ldr	r2, [pc, #40]	; (8013e0c <dhcp_decline+0xe8>)
 8013de2:	fb82 1203 	smull	r1, r2, r2, r3
 8013de6:	1152      	asrs	r2, r2, #5
 8013de8:	17db      	asrs	r3, r3, #31
 8013dea:	1ad3      	subs	r3, r2, r3
 8013dec:	b29a      	uxth	r2, r3
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013df2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3720      	adds	r7, #32
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8013dfe:	bf00      	nop
 8013e00:	24009df0 	.word	0x24009df0
 8013e04:	0801bbcc 	.word	0x0801bbcc
 8013e08:	0801bbd0 	.word	0x0801bbd0
 8013e0c:	10624dd3 	.word	0x10624dd3

08013e10 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b08a      	sub	sp, #40	; 0x28
 8013e14:	af02      	add	r7, sp, #8
 8013e16:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e1c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	2200      	movs	r2, #0
 8013e26:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013e28:	2106      	movs	r1, #6
 8013e2a:	69b8      	ldr	r0, [r7, #24]
 8013e2c:	f000 fbf4 	bl	8014618 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013e30:	f107 0308 	add.w	r3, r7, #8
 8013e34:	2201      	movs	r2, #1
 8013e36:	69b9      	ldr	r1, [r7, #24]
 8013e38:	6878      	ldr	r0, [r7, #4]
 8013e3a:	f001 f879 	bl	8014f30 <dhcp_create_msg>
 8013e3e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d04b      	beq.n	8013ede <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	685b      	ldr	r3, [r3, #4]
 8013e4a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013e4c:	8938      	ldrh	r0, [r7, #8]
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e54:	2302      	movs	r3, #2
 8013e56:	2239      	movs	r2, #57	; 0x39
 8013e58:	f000 fbf8 	bl	801464c <dhcp_option>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013e60:	8938      	ldrh	r0, [r7, #8]
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e6c:	461a      	mov	r2, r3
 8013e6e:	f000 fc47 	bl	8014700 <dhcp_option_short>
 8013e72:	4603      	mov	r3, r0
 8013e74:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013e76:	8938      	ldrh	r0, [r7, #8]
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e7e:	2303      	movs	r3, #3
 8013e80:	2237      	movs	r2, #55	; 0x37
 8013e82:	f000 fbe3 	bl	801464c <dhcp_option>
 8013e86:	4603      	mov	r3, r0
 8013e88:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	77fb      	strb	r3, [r7, #31]
 8013e8e:	e00e      	b.n	8013eae <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013e90:	8938      	ldrh	r0, [r7, #8]
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e98:	7ffb      	ldrb	r3, [r7, #31]
 8013e9a:	4a29      	ldr	r2, [pc, #164]	; (8013f40 <dhcp_discover+0x130>)
 8013e9c:	5cd3      	ldrb	r3, [r2, r3]
 8013e9e:	461a      	mov	r2, r3
 8013ea0:	f000 fc08 	bl	80146b4 <dhcp_option_byte>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013ea8:	7ffb      	ldrb	r3, [r7, #31]
 8013eaa:	3301      	adds	r3, #1
 8013eac:	77fb      	strb	r3, [r7, #31]
 8013eae:	7ffb      	ldrb	r3, [r7, #31]
 8013eb0:	2b02      	cmp	r3, #2
 8013eb2:	d9ed      	bls.n	8013e90 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013eb4:	8938      	ldrh	r0, [r7, #8]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	33f0      	adds	r3, #240	; 0xf0
 8013eba:	693a      	ldr	r2, [r7, #16]
 8013ebc:	4619      	mov	r1, r3
 8013ebe:	f001 f90d 	bl	80150dc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013ec2:	4b20      	ldr	r3, [pc, #128]	; (8013f44 <dhcp_discover+0x134>)
 8013ec4:	6818      	ldr	r0, [r3, #0]
 8013ec6:	4b20      	ldr	r3, [pc, #128]	; (8013f48 <dhcp_discover+0x138>)
 8013ec8:	9301      	str	r3, [sp, #4]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	2343      	movs	r3, #67	; 0x43
 8013ed0:	4a1e      	ldr	r2, [pc, #120]	; (8013f4c <dhcp_discover+0x13c>)
 8013ed2:	6939      	ldr	r1, [r7, #16]
 8013ed4:	f7ff f83c 	bl	8012f50 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013ed8:	6938      	ldr	r0, [r7, #16]
 8013eda:	f7f9 f887 	bl	800cfec <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013ede:	69bb      	ldr	r3, [r7, #24]
 8013ee0:	799b      	ldrb	r3, [r3, #6]
 8013ee2:	2bff      	cmp	r3, #255	; 0xff
 8013ee4:	d005      	beq.n	8013ef2 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013ee6:	69bb      	ldr	r3, [r7, #24]
 8013ee8:	799b      	ldrb	r3, [r3, #6]
 8013eea:	3301      	adds	r3, #1
 8013eec:	b2da      	uxtb	r2, r3
 8013eee:	69bb      	ldr	r3, [r7, #24]
 8013ef0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013ef2:	69bb      	ldr	r3, [r7, #24]
 8013ef4:	799b      	ldrb	r3, [r3, #6]
 8013ef6:	2b05      	cmp	r3, #5
 8013ef8:	d80d      	bhi.n	8013f16 <dhcp_discover+0x106>
 8013efa:	69bb      	ldr	r3, [r7, #24]
 8013efc:	799b      	ldrb	r3, [r3, #6]
 8013efe:	461a      	mov	r2, r3
 8013f00:	2301      	movs	r3, #1
 8013f02:	4093      	lsls	r3, r2
 8013f04:	b29b      	uxth	r3, r3
 8013f06:	461a      	mov	r2, r3
 8013f08:	0152      	lsls	r2, r2, #5
 8013f0a:	1ad2      	subs	r2, r2, r3
 8013f0c:	0092      	lsls	r2, r2, #2
 8013f0e:	4413      	add	r3, r2
 8013f10:	00db      	lsls	r3, r3, #3
 8013f12:	b29b      	uxth	r3, r3
 8013f14:	e001      	b.n	8013f1a <dhcp_discover+0x10a>
 8013f16:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013f1a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013f1c:	897b      	ldrh	r3, [r7, #10]
 8013f1e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f22:	4a0b      	ldr	r2, [pc, #44]	; (8013f50 <dhcp_discover+0x140>)
 8013f24:	fb82 1203 	smull	r1, r2, r2, r3
 8013f28:	1152      	asrs	r2, r2, #5
 8013f2a:	17db      	asrs	r3, r3, #31
 8013f2c:	1ad3      	subs	r3, r2, r3
 8013f2e:	b29a      	uxth	r2, r3
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3720      	adds	r7, #32
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}
 8013f40:	24000034 	.word	0x24000034
 8013f44:	24009df0 	.word	0x24009df0
 8013f48:	0801bbcc 	.word	0x0801bbcc
 8013f4c:	0801bbd0 	.word	0x0801bbd0
 8013f50:	10624dd3 	.word	0x10624dd3

08013f54 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b088      	sub	sp, #32
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d107      	bne.n	8013f72 <dhcp_bind+0x1e>
 8013f62:	4b64      	ldr	r3, [pc, #400]	; (80140f4 <dhcp_bind+0x1a0>)
 8013f64:	f240 4215 	movw	r2, #1045	; 0x415
 8013f68:	4963      	ldr	r1, [pc, #396]	; (80140f8 <dhcp_bind+0x1a4>)
 8013f6a:	4864      	ldr	r0, [pc, #400]	; (80140fc <dhcp_bind+0x1a8>)
 8013f6c:	f003 fec4 	bl	8017cf8 <iprintf>
 8013f70:	e0bc      	b.n	80140ec <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f76:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013f78:	69bb      	ldr	r3, [r7, #24]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d107      	bne.n	8013f8e <dhcp_bind+0x3a>
 8013f7e:	4b5d      	ldr	r3, [pc, #372]	; (80140f4 <dhcp_bind+0x1a0>)
 8013f80:	f240 4217 	movw	r2, #1047	; 0x417
 8013f84:	495e      	ldr	r1, [pc, #376]	; (8014100 <dhcp_bind+0x1ac>)
 8013f86:	485d      	ldr	r0, [pc, #372]	; (80140fc <dhcp_bind+0x1a8>)
 8013f88:	f003 feb6 	bl	8017cf8 <iprintf>
 8013f8c:	e0ae      	b.n	80140ec <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8013f8e:	69bb      	ldr	r3, [r7, #24]
 8013f90:	2200      	movs	r2, #0
 8013f92:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013f94:	69bb      	ldr	r3, [r7, #24]
 8013f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013f98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f9c:	d019      	beq.n	8013fd2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013f9e:	69bb      	ldr	r3, [r7, #24]
 8013fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013fa2:	331e      	adds	r3, #30
 8013fa4:	4a57      	ldr	r2, [pc, #348]	; (8014104 <dhcp_bind+0x1b0>)
 8013fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8013faa:	095b      	lsrs	r3, r3, #5
 8013fac:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013fae:	69fb      	ldr	r3, [r7, #28]
 8013fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013fb4:	d302      	bcc.n	8013fbc <dhcp_bind+0x68>
      timeout = 0xffff;
 8013fb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013fba:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013fbc:	69fb      	ldr	r3, [r7, #28]
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013fc4:	69bb      	ldr	r3, [r7, #24]
 8013fc6:	8a9b      	ldrh	r3, [r3, #20]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d102      	bne.n	8013fd2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8013fcc:	69bb      	ldr	r3, [r7, #24]
 8013fce:	2201      	movs	r2, #1
 8013fd0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013fd2:	69bb      	ldr	r3, [r7, #24]
 8013fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fda:	d01d      	beq.n	8014018 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8013fdc:	69bb      	ldr	r3, [r7, #24]
 8013fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fe0:	331e      	adds	r3, #30
 8013fe2:	4a48      	ldr	r2, [pc, #288]	; (8014104 <dhcp_bind+0x1b0>)
 8013fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8013fe8:	095b      	lsrs	r3, r3, #5
 8013fea:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8013fec:	69fb      	ldr	r3, [r7, #28]
 8013fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013ff2:	d302      	bcc.n	8013ffa <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ff8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8013ffa:	69fb      	ldr	r3, [r7, #28]
 8013ffc:	b29a      	uxth	r2, r3
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014002:	69bb      	ldr	r3, [r7, #24]
 8014004:	895b      	ldrh	r3, [r3, #10]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d102      	bne.n	8014010 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801400a:	69bb      	ldr	r3, [r7, #24]
 801400c:	2201      	movs	r2, #1
 801400e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014010:	69bb      	ldr	r3, [r7, #24]
 8014012:	895a      	ldrh	r2, [r3, #10]
 8014014:	69bb      	ldr	r3, [r7, #24]
 8014016:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801401c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014020:	d01d      	beq.n	801405e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014022:	69bb      	ldr	r3, [r7, #24]
 8014024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014026:	331e      	adds	r3, #30
 8014028:	4a36      	ldr	r2, [pc, #216]	; (8014104 <dhcp_bind+0x1b0>)
 801402a:	fba2 2303 	umull	r2, r3, r2, r3
 801402e:	095b      	lsrs	r3, r3, #5
 8014030:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014038:	d302      	bcc.n	8014040 <dhcp_bind+0xec>
      timeout = 0xffff;
 801403a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801403e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	b29a      	uxth	r2, r3
 8014044:	69bb      	ldr	r3, [r7, #24]
 8014046:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	899b      	ldrh	r3, [r3, #12]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014050:	69bb      	ldr	r3, [r7, #24]
 8014052:	2201      	movs	r2, #1
 8014054:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014056:	69bb      	ldr	r3, [r7, #24]
 8014058:	899a      	ldrh	r2, [r3, #12]
 801405a:	69bb      	ldr	r3, [r7, #24]
 801405c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	895a      	ldrh	r2, [r3, #10]
 8014062:	69bb      	ldr	r3, [r7, #24]
 8014064:	899b      	ldrh	r3, [r3, #12]
 8014066:	429a      	cmp	r2, r3
 8014068:	d306      	bcc.n	8014078 <dhcp_bind+0x124>
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	899b      	ldrh	r3, [r3, #12]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d002      	beq.n	8014078 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014072:	69bb      	ldr	r3, [r7, #24]
 8014074:	2200      	movs	r2, #0
 8014076:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8014078:	69bb      	ldr	r3, [r7, #24]
 801407a:	79db      	ldrb	r3, [r3, #7]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d003      	beq.n	8014088 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	6a1b      	ldr	r3, [r3, #32]
 8014084:	613b      	str	r3, [r7, #16]
 8014086:	e014      	b.n	80140b2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014088:	69bb      	ldr	r3, [r7, #24]
 801408a:	331c      	adds	r3, #28
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014094:	2b00      	cmp	r3, #0
 8014096:	db02      	blt.n	801409e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014098:	23ff      	movs	r3, #255	; 0xff
 801409a:	613b      	str	r3, [r7, #16]
 801409c:	e009      	b.n	80140b2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801409e:	7dfb      	ldrb	r3, [r7, #23]
 80140a0:	2bbf      	cmp	r3, #191	; 0xbf
 80140a2:	d903      	bls.n	80140ac <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80140a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80140a8:	613b      	str	r3, [r7, #16]
 80140aa:	e002      	b.n	80140b2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80140ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140b0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80140b2:	69bb      	ldr	r3, [r7, #24]
 80140b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140b6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d108      	bne.n	80140d0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	69da      	ldr	r2, [r3, #28]
 80140c2:	693b      	ldr	r3, [r7, #16]
 80140c4:	4013      	ands	r3, r2
 80140c6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80140ce:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80140d0:	210a      	movs	r1, #10
 80140d2:	69b8      	ldr	r0, [r7, #24]
 80140d4:	f000 faa0 	bl	8014618 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80140d8:	69bb      	ldr	r3, [r7, #24]
 80140da:	f103 011c 	add.w	r1, r3, #28
 80140de:	f107 030c 	add.w	r3, r7, #12
 80140e2:	f107 0210 	add.w	r2, r7, #16
 80140e6:	6878      	ldr	r0, [r7, #4]
 80140e8:	f7f8 fa72 	bl	800c5d0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80140ec:	3720      	adds	r7, #32
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bd80      	pop	{r7, pc}
 80140f2:	bf00      	nop
 80140f4:	0801b004 	.word	0x0801b004
 80140f8:	0801b164 	.word	0x0801b164
 80140fc:	0801b064 	.word	0x0801b064
 8014100:	0801b180 	.word	0x0801b180
 8014104:	88888889 	.word	0x88888889

08014108 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014108:	b580      	push	{r7, lr}
 801410a:	b08a      	sub	sp, #40	; 0x28
 801410c:	af02      	add	r7, sp, #8
 801410e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014114:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014116:	2105      	movs	r1, #5
 8014118:	69b8      	ldr	r0, [r7, #24]
 801411a:	f000 fa7d 	bl	8014618 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801411e:	f107 030c 	add.w	r3, r7, #12
 8014122:	2203      	movs	r2, #3
 8014124:	69b9      	ldr	r1, [r7, #24]
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 ff02 	bl	8014f30 <dhcp_create_msg>
 801412c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d04e      	beq.n	80141d2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801413a:	89b8      	ldrh	r0, [r7, #12]
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014142:	2302      	movs	r3, #2
 8014144:	2239      	movs	r2, #57	; 0x39
 8014146:	f000 fa81 	bl	801464c <dhcp_option>
 801414a:	4603      	mov	r3, r0
 801414c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801414e:	89b8      	ldrh	r0, [r7, #12]
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801415a:	461a      	mov	r2, r3
 801415c:	f000 fad0 	bl	8014700 <dhcp_option_short>
 8014160:	4603      	mov	r3, r0
 8014162:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014164:	89b8      	ldrh	r0, [r7, #12]
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801416c:	2303      	movs	r3, #3
 801416e:	2237      	movs	r2, #55	; 0x37
 8014170:	f000 fa6c 	bl	801464c <dhcp_option>
 8014174:	4603      	mov	r3, r0
 8014176:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014178:	2300      	movs	r3, #0
 801417a:	77bb      	strb	r3, [r7, #30]
 801417c:	e00e      	b.n	801419c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801417e:	89b8      	ldrh	r0, [r7, #12]
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014186:	7fbb      	ldrb	r3, [r7, #30]
 8014188:	4a2a      	ldr	r2, [pc, #168]	; (8014234 <dhcp_renew+0x12c>)
 801418a:	5cd3      	ldrb	r3, [r2, r3]
 801418c:	461a      	mov	r2, r3
 801418e:	f000 fa91 	bl	80146b4 <dhcp_option_byte>
 8014192:	4603      	mov	r3, r0
 8014194:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014196:	7fbb      	ldrb	r3, [r7, #30]
 8014198:	3301      	adds	r3, #1
 801419a:	77bb      	strb	r3, [r7, #30]
 801419c:	7fbb      	ldrb	r3, [r7, #30]
 801419e:	2b02      	cmp	r3, #2
 80141a0:	d9ed      	bls.n	801417e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80141a2:	89b8      	ldrh	r0, [r7, #12]
 80141a4:	693b      	ldr	r3, [r7, #16]
 80141a6:	33f0      	adds	r3, #240	; 0xf0
 80141a8:	697a      	ldr	r2, [r7, #20]
 80141aa:	4619      	mov	r1, r3
 80141ac:	f000 ff96 	bl	80150dc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80141b0:	4b21      	ldr	r3, [pc, #132]	; (8014238 <dhcp_renew+0x130>)
 80141b2:	6818      	ldr	r0, [r3, #0]
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	f103 0218 	add.w	r2, r3, #24
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	9300      	str	r3, [sp, #0]
 80141be:	2343      	movs	r3, #67	; 0x43
 80141c0:	6979      	ldr	r1, [r7, #20]
 80141c2:	f7fe fe51 	bl	8012e68 <udp_sendto_if>
 80141c6:	4603      	mov	r3, r0
 80141c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80141ca:	6978      	ldr	r0, [r7, #20]
 80141cc:	f7f8 ff0e 	bl	800cfec <pbuf_free>
 80141d0:	e001      	b.n	80141d6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80141d2:	23ff      	movs	r3, #255	; 0xff
 80141d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	799b      	ldrb	r3, [r3, #6]
 80141da:	2bff      	cmp	r3, #255	; 0xff
 80141dc:	d005      	beq.n	80141ea <dhcp_renew+0xe2>
    dhcp->tries++;
 80141de:	69bb      	ldr	r3, [r7, #24]
 80141e0:	799b      	ldrb	r3, [r3, #6]
 80141e2:	3301      	adds	r3, #1
 80141e4:	b2da      	uxtb	r2, r3
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80141ea:	69bb      	ldr	r3, [r7, #24]
 80141ec:	799b      	ldrb	r3, [r3, #6]
 80141ee:	2b09      	cmp	r3, #9
 80141f0:	d80a      	bhi.n	8014208 <dhcp_renew+0x100>
 80141f2:	69bb      	ldr	r3, [r7, #24]
 80141f4:	799b      	ldrb	r3, [r3, #6]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	461a      	mov	r2, r3
 80141fa:	0152      	lsls	r2, r2, #5
 80141fc:	1ad2      	subs	r2, r2, r3
 80141fe:	0092      	lsls	r2, r2, #2
 8014200:	4413      	add	r3, r2
 8014202:	011b      	lsls	r3, r3, #4
 8014204:	b29b      	uxth	r3, r3
 8014206:	e001      	b.n	801420c <dhcp_renew+0x104>
 8014208:	f644 6320 	movw	r3, #20000	; 0x4e20
 801420c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801420e:	89fb      	ldrh	r3, [r7, #14]
 8014210:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014214:	4a09      	ldr	r2, [pc, #36]	; (801423c <dhcp_renew+0x134>)
 8014216:	fb82 1203 	smull	r1, r2, r2, r3
 801421a:	1152      	asrs	r2, r2, #5
 801421c:	17db      	asrs	r3, r3, #31
 801421e:	1ad3      	subs	r3, r2, r3
 8014220:	b29a      	uxth	r2, r3
 8014222:	69bb      	ldr	r3, [r7, #24]
 8014224:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014226:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801422a:	4618      	mov	r0, r3
 801422c:	3720      	adds	r7, #32
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	24000034 	.word	0x24000034
 8014238:	24009df0 	.word	0x24009df0
 801423c:	10624dd3 	.word	0x10624dd3

08014240 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b08a      	sub	sp, #40	; 0x28
 8014244:	af02      	add	r7, sp, #8
 8014246:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801424c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801424e:	2104      	movs	r1, #4
 8014250:	69b8      	ldr	r0, [r7, #24]
 8014252:	f000 f9e1 	bl	8014618 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014256:	f107 030c 	add.w	r3, r7, #12
 801425a:	2203      	movs	r2, #3
 801425c:	69b9      	ldr	r1, [r7, #24]
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 fe66 	bl	8014f30 <dhcp_create_msg>
 8014264:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d04c      	beq.n	8014306 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801426c:	697b      	ldr	r3, [r7, #20]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014272:	89b8      	ldrh	r0, [r7, #12]
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801427a:	2302      	movs	r3, #2
 801427c:	2239      	movs	r2, #57	; 0x39
 801427e:	f000 f9e5 	bl	801464c <dhcp_option>
 8014282:	4603      	mov	r3, r0
 8014284:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014286:	89b8      	ldrh	r0, [r7, #12]
 8014288:	693b      	ldr	r3, [r7, #16]
 801428a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014292:	461a      	mov	r2, r3
 8014294:	f000 fa34 	bl	8014700 <dhcp_option_short>
 8014298:	4603      	mov	r3, r0
 801429a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801429c:	89b8      	ldrh	r0, [r7, #12]
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142a4:	2303      	movs	r3, #3
 80142a6:	2237      	movs	r2, #55	; 0x37
 80142a8:	f000 f9d0 	bl	801464c <dhcp_option>
 80142ac:	4603      	mov	r3, r0
 80142ae:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142b0:	2300      	movs	r3, #0
 80142b2:	77bb      	strb	r3, [r7, #30]
 80142b4:	e00e      	b.n	80142d4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80142b6:	89b8      	ldrh	r0, [r7, #12]
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142be:	7fbb      	ldrb	r3, [r7, #30]
 80142c0:	4a29      	ldr	r2, [pc, #164]	; (8014368 <dhcp_rebind+0x128>)
 80142c2:	5cd3      	ldrb	r3, [r2, r3]
 80142c4:	461a      	mov	r2, r3
 80142c6:	f000 f9f5 	bl	80146b4 <dhcp_option_byte>
 80142ca:	4603      	mov	r3, r0
 80142cc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142ce:	7fbb      	ldrb	r3, [r7, #30]
 80142d0:	3301      	adds	r3, #1
 80142d2:	77bb      	strb	r3, [r7, #30]
 80142d4:	7fbb      	ldrb	r3, [r7, #30]
 80142d6:	2b02      	cmp	r3, #2
 80142d8:	d9ed      	bls.n	80142b6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80142da:	89b8      	ldrh	r0, [r7, #12]
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	33f0      	adds	r3, #240	; 0xf0
 80142e0:	697a      	ldr	r2, [r7, #20]
 80142e2:	4619      	mov	r1, r3
 80142e4:	f000 fefa 	bl	80150dc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80142e8:	4b20      	ldr	r3, [pc, #128]	; (801436c <dhcp_rebind+0x12c>)
 80142ea:	6818      	ldr	r0, [r3, #0]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	9300      	str	r3, [sp, #0]
 80142f0:	2343      	movs	r3, #67	; 0x43
 80142f2:	4a1f      	ldr	r2, [pc, #124]	; (8014370 <dhcp_rebind+0x130>)
 80142f4:	6979      	ldr	r1, [r7, #20]
 80142f6:	f7fe fdb7 	bl	8012e68 <udp_sendto_if>
 80142fa:	4603      	mov	r3, r0
 80142fc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80142fe:	6978      	ldr	r0, [r7, #20]
 8014300:	f7f8 fe74 	bl	800cfec <pbuf_free>
 8014304:	e001      	b.n	801430a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014306:	23ff      	movs	r3, #255	; 0xff
 8014308:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	799b      	ldrb	r3, [r3, #6]
 801430e:	2bff      	cmp	r3, #255	; 0xff
 8014310:	d005      	beq.n	801431e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014312:	69bb      	ldr	r3, [r7, #24]
 8014314:	799b      	ldrb	r3, [r3, #6]
 8014316:	3301      	adds	r3, #1
 8014318:	b2da      	uxtb	r2, r3
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801431e:	69bb      	ldr	r3, [r7, #24]
 8014320:	799b      	ldrb	r3, [r3, #6]
 8014322:	2b09      	cmp	r3, #9
 8014324:	d80a      	bhi.n	801433c <dhcp_rebind+0xfc>
 8014326:	69bb      	ldr	r3, [r7, #24]
 8014328:	799b      	ldrb	r3, [r3, #6]
 801432a:	b29b      	uxth	r3, r3
 801432c:	461a      	mov	r2, r3
 801432e:	0152      	lsls	r2, r2, #5
 8014330:	1ad2      	subs	r2, r2, r3
 8014332:	0092      	lsls	r2, r2, #2
 8014334:	4413      	add	r3, r2
 8014336:	00db      	lsls	r3, r3, #3
 8014338:	b29b      	uxth	r3, r3
 801433a:	e001      	b.n	8014340 <dhcp_rebind+0x100>
 801433c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014340:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014342:	89fb      	ldrh	r3, [r7, #14]
 8014344:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014348:	4a0a      	ldr	r2, [pc, #40]	; (8014374 <dhcp_rebind+0x134>)
 801434a:	fb82 1203 	smull	r1, r2, r2, r3
 801434e:	1152      	asrs	r2, r2, #5
 8014350:	17db      	asrs	r3, r3, #31
 8014352:	1ad3      	subs	r3, r2, r3
 8014354:	b29a      	uxth	r2, r3
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801435a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801435e:	4618      	mov	r0, r3
 8014360:	3720      	adds	r7, #32
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	24000034 	.word	0x24000034
 801436c:	24009df0 	.word	0x24009df0
 8014370:	0801bbd0 	.word	0x0801bbd0
 8014374:	10624dd3 	.word	0x10624dd3

08014378 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8014378:	b5b0      	push	{r4, r5, r7, lr}
 801437a:	b08a      	sub	sp, #40	; 0x28
 801437c:	af02      	add	r7, sp, #8
 801437e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014384:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8014386:	2103      	movs	r1, #3
 8014388:	69b8      	ldr	r0, [r7, #24]
 801438a:	f000 f945 	bl	8014618 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801438e:	f107 030c 	add.w	r3, r7, #12
 8014392:	2203      	movs	r2, #3
 8014394:	69b9      	ldr	r1, [r7, #24]
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f000 fdca 	bl	8014f30 <dhcp_create_msg>
 801439c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d066      	beq.n	8014472 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80143aa:	89b8      	ldrh	r0, [r7, #12]
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143b2:	2302      	movs	r3, #2
 80143b4:	2239      	movs	r2, #57	; 0x39
 80143b6:	f000 f949 	bl	801464c <dhcp_option>
 80143ba:	4603      	mov	r3, r0
 80143bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80143be:	89b8      	ldrh	r0, [r7, #12]
 80143c0:	693b      	ldr	r3, [r7, #16]
 80143c2:	33f0      	adds	r3, #240	; 0xf0
 80143c4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80143c8:	4619      	mov	r1, r3
 80143ca:	f000 f999 	bl	8014700 <dhcp_option_short>
 80143ce:	4603      	mov	r3, r0
 80143d0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80143d2:	89b8      	ldrh	r0, [r7, #12]
 80143d4:	693b      	ldr	r3, [r7, #16]
 80143d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143da:	2304      	movs	r3, #4
 80143dc:	2232      	movs	r2, #50	; 0x32
 80143de:	f000 f935 	bl	801464c <dhcp_option>
 80143e2:	4603      	mov	r3, r0
 80143e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80143e6:	89bc      	ldrh	r4, [r7, #12]
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80143ee:	69bb      	ldr	r3, [r7, #24]
 80143f0:	69db      	ldr	r3, [r3, #28]
 80143f2:	4618      	mov	r0, r3
 80143f4:	f7f7 f959 	bl	800b6aa <lwip_htonl>
 80143f8:	4603      	mov	r3, r0
 80143fa:	461a      	mov	r2, r3
 80143fc:	4629      	mov	r1, r5
 80143fe:	4620      	mov	r0, r4
 8014400:	f000 f9b0 	bl	8014764 <dhcp_option_long>
 8014404:	4603      	mov	r3, r0
 8014406:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014408:	89b8      	ldrh	r0, [r7, #12]
 801440a:	693b      	ldr	r3, [r7, #16]
 801440c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014410:	2303      	movs	r3, #3
 8014412:	2237      	movs	r2, #55	; 0x37
 8014414:	f000 f91a 	bl	801464c <dhcp_option>
 8014418:	4603      	mov	r3, r0
 801441a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801441c:	2300      	movs	r3, #0
 801441e:	77bb      	strb	r3, [r7, #30]
 8014420:	e00e      	b.n	8014440 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014422:	89b8      	ldrh	r0, [r7, #12]
 8014424:	693b      	ldr	r3, [r7, #16]
 8014426:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801442a:	7fbb      	ldrb	r3, [r7, #30]
 801442c:	4a29      	ldr	r2, [pc, #164]	; (80144d4 <dhcp_reboot+0x15c>)
 801442e:	5cd3      	ldrb	r3, [r2, r3]
 8014430:	461a      	mov	r2, r3
 8014432:	f000 f93f 	bl	80146b4 <dhcp_option_byte>
 8014436:	4603      	mov	r3, r0
 8014438:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801443a:	7fbb      	ldrb	r3, [r7, #30]
 801443c:	3301      	adds	r3, #1
 801443e:	77bb      	strb	r3, [r7, #30]
 8014440:	7fbb      	ldrb	r3, [r7, #30]
 8014442:	2b02      	cmp	r3, #2
 8014444:	d9ed      	bls.n	8014422 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014446:	89b8      	ldrh	r0, [r7, #12]
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	33f0      	adds	r3, #240	; 0xf0
 801444c:	697a      	ldr	r2, [r7, #20]
 801444e:	4619      	mov	r1, r3
 8014450:	f000 fe44 	bl	80150dc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014454:	4b20      	ldr	r3, [pc, #128]	; (80144d8 <dhcp_reboot+0x160>)
 8014456:	6818      	ldr	r0, [r3, #0]
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	2343      	movs	r3, #67	; 0x43
 801445e:	4a1f      	ldr	r2, [pc, #124]	; (80144dc <dhcp_reboot+0x164>)
 8014460:	6979      	ldr	r1, [r7, #20]
 8014462:	f7fe fd01 	bl	8012e68 <udp_sendto_if>
 8014466:	4603      	mov	r3, r0
 8014468:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801446a:	6978      	ldr	r0, [r7, #20]
 801446c:	f7f8 fdbe 	bl	800cfec <pbuf_free>
 8014470:	e001      	b.n	8014476 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014472:	23ff      	movs	r3, #255	; 0xff
 8014474:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014476:	69bb      	ldr	r3, [r7, #24]
 8014478:	799b      	ldrb	r3, [r3, #6]
 801447a:	2bff      	cmp	r3, #255	; 0xff
 801447c:	d005      	beq.n	801448a <dhcp_reboot+0x112>
    dhcp->tries++;
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	799b      	ldrb	r3, [r3, #6]
 8014482:	3301      	adds	r3, #1
 8014484:	b2da      	uxtb	r2, r3
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	799b      	ldrb	r3, [r3, #6]
 801448e:	2b09      	cmp	r3, #9
 8014490:	d80a      	bhi.n	80144a8 <dhcp_reboot+0x130>
 8014492:	69bb      	ldr	r3, [r7, #24]
 8014494:	799b      	ldrb	r3, [r3, #6]
 8014496:	b29b      	uxth	r3, r3
 8014498:	461a      	mov	r2, r3
 801449a:	0152      	lsls	r2, r2, #5
 801449c:	1ad2      	subs	r2, r2, r3
 801449e:	0092      	lsls	r2, r2, #2
 80144a0:	4413      	add	r3, r2
 80144a2:	00db      	lsls	r3, r3, #3
 80144a4:	b29b      	uxth	r3, r3
 80144a6:	e001      	b.n	80144ac <dhcp_reboot+0x134>
 80144a8:	f242 7310 	movw	r3, #10000	; 0x2710
 80144ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80144ae:	89fb      	ldrh	r3, [r7, #14]
 80144b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144b4:	4a0a      	ldr	r2, [pc, #40]	; (80144e0 <dhcp_reboot+0x168>)
 80144b6:	fb82 1203 	smull	r1, r2, r2, r3
 80144ba:	1152      	asrs	r2, r2, #5
 80144bc:	17db      	asrs	r3, r3, #31
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80144ca:	4618      	mov	r0, r3
 80144cc:	3720      	adds	r7, #32
 80144ce:	46bd      	mov	sp, r7
 80144d0:	bdb0      	pop	{r4, r5, r7, pc}
 80144d2:	bf00      	nop
 80144d4:	24000034 	.word	0x24000034
 80144d8:	24009df0 	.word	0x24009df0
 80144dc:	0801bbd0 	.word	0x0801bbd0
 80144e0:	10624dd3 	.word	0x10624dd3

080144e4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80144e4:	b5b0      	push	{r4, r5, r7, lr}
 80144e6:	b08a      	sub	sp, #40	; 0x28
 80144e8:	af02      	add	r7, sp, #8
 80144ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80144f2:	69fb      	ldr	r3, [r7, #28]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	f000 8084 	beq.w	8014602 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80144fa:	69fb      	ldr	r3, [r7, #28]
 80144fc:	795b      	ldrb	r3, [r3, #5]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	f000 8081 	beq.w	8014606 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	699b      	ldr	r3, [r3, #24]
 8014508:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	2200      	movs	r2, #0
 801450e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	2200      	movs	r2, #0
 8014514:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014516:	69fb      	ldr	r3, [r7, #28]
 8014518:	2200      	movs	r2, #0
 801451a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801451c:	69fb      	ldr	r3, [r7, #28]
 801451e:	2200      	movs	r2, #0
 8014520:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014522:	69fb      	ldr	r3, [r7, #28]
 8014524:	2200      	movs	r2, #0
 8014526:	631a      	str	r2, [r3, #48]	; 0x30
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801452c:	69fb      	ldr	r3, [r7, #28]
 801452e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014530:	69fb      	ldr	r3, [r7, #28]
 8014532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	2200      	movs	r2, #0
 801453c:	829a      	strh	r2, [r3, #20]
 801453e:	69fb      	ldr	r3, [r7, #28]
 8014540:	8a9a      	ldrh	r2, [r3, #20]
 8014542:	69fb      	ldr	r3, [r7, #28]
 8014544:	825a      	strh	r2, [r3, #18]
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	8a5a      	ldrh	r2, [r3, #18]
 801454a:	69fb      	ldr	r3, [r7, #28]
 801454c:	821a      	strh	r2, [r3, #16]
 801454e:	69fb      	ldr	r3, [r7, #28]
 8014550:	8a1a      	ldrh	r2, [r3, #16]
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 fdee 	bl	8015138 <dhcp_supplied_address>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d03b      	beq.n	80145da <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014562:	f107 030e 	add.w	r3, r7, #14
 8014566:	2207      	movs	r2, #7
 8014568:	69f9      	ldr	r1, [r7, #28]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fce0 	bl	8014f30 <dhcp_create_msg>
 8014570:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8014572:	69bb      	ldr	r3, [r7, #24]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d030      	beq.n	80145da <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014578:	69bb      	ldr	r3, [r7, #24]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801457e:	89f8      	ldrh	r0, [r7, #14]
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014586:	2304      	movs	r3, #4
 8014588:	2236      	movs	r2, #54	; 0x36
 801458a:	f000 f85f 	bl	801464c <dhcp_option>
 801458e:	4603      	mov	r3, r0
 8014590:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8014592:	89fc      	ldrh	r4, [r7, #14]
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	4618      	mov	r0, r3
 801459e:	f7f7 f884 	bl	800b6aa <lwip_htonl>
 80145a2:	4603      	mov	r3, r0
 80145a4:	461a      	mov	r2, r3
 80145a6:	4629      	mov	r1, r5
 80145a8:	4620      	mov	r0, r4
 80145aa:	f000 f8db 	bl	8014764 <dhcp_option_long>
 80145ae:	4603      	mov	r3, r0
 80145b0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80145b2:	89f8      	ldrh	r0, [r7, #14]
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	33f0      	adds	r3, #240	; 0xf0
 80145b8:	69ba      	ldr	r2, [r7, #24]
 80145ba:	4619      	mov	r1, r3
 80145bc:	f000 fd8e 	bl	80150dc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80145c0:	4b13      	ldr	r3, [pc, #76]	; (8014610 <dhcp_release_and_stop+0x12c>)
 80145c2:	6818      	ldr	r0, [r3, #0]
 80145c4:	f107 0210 	add.w	r2, r7, #16
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	9300      	str	r3, [sp, #0]
 80145cc:	2343      	movs	r3, #67	; 0x43
 80145ce:	69b9      	ldr	r1, [r7, #24]
 80145d0:	f7fe fc4a 	bl	8012e68 <udp_sendto_if>
      pbuf_free(p_out);
 80145d4:	69b8      	ldr	r0, [r7, #24]
 80145d6:	f7f8 fd09 	bl	800cfec <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80145da:	4b0e      	ldr	r3, [pc, #56]	; (8014614 <dhcp_release_and_stop+0x130>)
 80145dc:	4a0d      	ldr	r2, [pc, #52]	; (8014614 <dhcp_release_and_stop+0x130>)
 80145de:	490d      	ldr	r1, [pc, #52]	; (8014614 <dhcp_release_and_stop+0x130>)
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f7f7 fff5 	bl	800c5d0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80145e6:	2100      	movs	r1, #0
 80145e8:	69f8      	ldr	r0, [r7, #28]
 80145ea:	f000 f815 	bl	8014618 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	791b      	ldrb	r3, [r3, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d008      	beq.n	8014608 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80145f6:	f7fe ff83 	bl	8013500 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	2200      	movs	r2, #0
 80145fe:	711a      	strb	r2, [r3, #4]
 8014600:	e002      	b.n	8014608 <dhcp_release_and_stop+0x124>
    return;
 8014602:	bf00      	nop
 8014604:	e000      	b.n	8014608 <dhcp_release_and_stop+0x124>
    return;
 8014606:	bf00      	nop
  }
}
 8014608:	3720      	adds	r7, #32
 801460a:	46bd      	mov	sp, r7
 801460c:	bdb0      	pop	{r4, r5, r7, pc}
 801460e:	bf00      	nop
 8014610:	24009df0 	.word	0x24009df0
 8014614:	0801bbcc 	.word	0x0801bbcc

08014618 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014618:	b480      	push	{r7}
 801461a:	b083      	sub	sp, #12
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	460b      	mov	r3, r1
 8014622:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	795b      	ldrb	r3, [r3, #5]
 8014628:	78fa      	ldrb	r2, [r7, #3]
 801462a:	429a      	cmp	r2, r3
 801462c:	d008      	beq.n	8014640 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	78fa      	ldrb	r2, [r7, #3]
 8014632:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2200      	movs	r2, #0
 8014638:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	2200      	movs	r2, #0
 801463e:	811a      	strh	r2, [r3, #8]
  }
}
 8014640:	bf00      	nop
 8014642:	370c      	adds	r7, #12
 8014644:	46bd      	mov	sp, r7
 8014646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464a:	4770      	bx	lr

0801464c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6039      	str	r1, [r7, #0]
 8014654:	4611      	mov	r1, r2
 8014656:	461a      	mov	r2, r3
 8014658:	4603      	mov	r3, r0
 801465a:	80fb      	strh	r3, [r7, #6]
 801465c:	460b      	mov	r3, r1
 801465e:	717b      	strb	r3, [r7, #5]
 8014660:	4613      	mov	r3, r2
 8014662:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014664:	88fa      	ldrh	r2, [r7, #6]
 8014666:	793b      	ldrb	r3, [r7, #4]
 8014668:	4413      	add	r3, r2
 801466a:	3302      	adds	r3, #2
 801466c:	2b44      	cmp	r3, #68	; 0x44
 801466e:	d906      	bls.n	801467e <dhcp_option+0x32>
 8014670:	4b0d      	ldr	r3, [pc, #52]	; (80146a8 <dhcp_option+0x5c>)
 8014672:	f240 529a 	movw	r2, #1434	; 0x59a
 8014676:	490d      	ldr	r1, [pc, #52]	; (80146ac <dhcp_option+0x60>)
 8014678:	480d      	ldr	r0, [pc, #52]	; (80146b0 <dhcp_option+0x64>)
 801467a:	f003 fb3d 	bl	8017cf8 <iprintf>
  options[options_out_len++] = option_type;
 801467e:	88fb      	ldrh	r3, [r7, #6]
 8014680:	1c5a      	adds	r2, r3, #1
 8014682:	80fa      	strh	r2, [r7, #6]
 8014684:	461a      	mov	r2, r3
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	4413      	add	r3, r2
 801468a:	797a      	ldrb	r2, [r7, #5]
 801468c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801468e:	88fb      	ldrh	r3, [r7, #6]
 8014690:	1c5a      	adds	r2, r3, #1
 8014692:	80fa      	strh	r2, [r7, #6]
 8014694:	461a      	mov	r2, r3
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	4413      	add	r3, r2
 801469a:	793a      	ldrb	r2, [r7, #4]
 801469c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801469e:	88fb      	ldrh	r3, [r7, #6]
}
 80146a0:	4618      	mov	r0, r3
 80146a2:	3708      	adds	r7, #8
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}
 80146a8:	0801b004 	.word	0x0801b004
 80146ac:	0801b198 	.word	0x0801b198
 80146b0:	0801b064 	.word	0x0801b064

080146b4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	4603      	mov	r3, r0
 80146bc:	6039      	str	r1, [r7, #0]
 80146be:	80fb      	strh	r3, [r7, #6]
 80146c0:	4613      	mov	r3, r2
 80146c2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80146c4:	88fb      	ldrh	r3, [r7, #6]
 80146c6:	2b43      	cmp	r3, #67	; 0x43
 80146c8:	d906      	bls.n	80146d8 <dhcp_option_byte+0x24>
 80146ca:	4b0a      	ldr	r3, [pc, #40]	; (80146f4 <dhcp_option_byte+0x40>)
 80146cc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80146d0:	4909      	ldr	r1, [pc, #36]	; (80146f8 <dhcp_option_byte+0x44>)
 80146d2:	480a      	ldr	r0, [pc, #40]	; (80146fc <dhcp_option_byte+0x48>)
 80146d4:	f003 fb10 	bl	8017cf8 <iprintf>
  options[options_out_len++] = value;
 80146d8:	88fb      	ldrh	r3, [r7, #6]
 80146da:	1c5a      	adds	r2, r3, #1
 80146dc:	80fa      	strh	r2, [r7, #6]
 80146de:	461a      	mov	r2, r3
 80146e0:	683b      	ldr	r3, [r7, #0]
 80146e2:	4413      	add	r3, r2
 80146e4:	797a      	ldrb	r2, [r7, #5]
 80146e6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80146e8:	88fb      	ldrh	r3, [r7, #6]
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3708      	adds	r7, #8
 80146ee:	46bd      	mov	sp, r7
 80146f0:	bd80      	pop	{r7, pc}
 80146f2:	bf00      	nop
 80146f4:	0801b004 	.word	0x0801b004
 80146f8:	0801b1dc 	.word	0x0801b1dc
 80146fc:	0801b064 	.word	0x0801b064

08014700 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	4603      	mov	r3, r0
 8014708:	6039      	str	r1, [r7, #0]
 801470a:	80fb      	strh	r3, [r7, #6]
 801470c:	4613      	mov	r3, r2
 801470e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014710:	88fb      	ldrh	r3, [r7, #6]
 8014712:	3302      	adds	r3, #2
 8014714:	2b44      	cmp	r3, #68	; 0x44
 8014716:	d906      	bls.n	8014726 <dhcp_option_short+0x26>
 8014718:	4b0f      	ldr	r3, [pc, #60]	; (8014758 <dhcp_option_short+0x58>)
 801471a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801471e:	490f      	ldr	r1, [pc, #60]	; (801475c <dhcp_option_short+0x5c>)
 8014720:	480f      	ldr	r0, [pc, #60]	; (8014760 <dhcp_option_short+0x60>)
 8014722:	f003 fae9 	bl	8017cf8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014726:	88bb      	ldrh	r3, [r7, #4]
 8014728:	0a1b      	lsrs	r3, r3, #8
 801472a:	b29a      	uxth	r2, r3
 801472c:	88fb      	ldrh	r3, [r7, #6]
 801472e:	1c59      	adds	r1, r3, #1
 8014730:	80f9      	strh	r1, [r7, #6]
 8014732:	4619      	mov	r1, r3
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	440b      	add	r3, r1
 8014738:	b2d2      	uxtb	r2, r2
 801473a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801473c:	88fb      	ldrh	r3, [r7, #6]
 801473e:	1c5a      	adds	r2, r3, #1
 8014740:	80fa      	strh	r2, [r7, #6]
 8014742:	461a      	mov	r2, r3
 8014744:	683b      	ldr	r3, [r7, #0]
 8014746:	4413      	add	r3, r2
 8014748:	88ba      	ldrh	r2, [r7, #4]
 801474a:	b2d2      	uxtb	r2, r2
 801474c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801474e:	88fb      	ldrh	r3, [r7, #6]
}
 8014750:	4618      	mov	r0, r3
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}
 8014758:	0801b004 	.word	0x0801b004
 801475c:	0801b214 	.word	0x0801b214
 8014760:	0801b064 	.word	0x0801b064

08014764 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b084      	sub	sp, #16
 8014768:	af00      	add	r7, sp, #0
 801476a:	4603      	mov	r3, r0
 801476c:	60b9      	str	r1, [r7, #8]
 801476e:	607a      	str	r2, [r7, #4]
 8014770:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014772:	89fb      	ldrh	r3, [r7, #14]
 8014774:	3304      	adds	r3, #4
 8014776:	2b44      	cmp	r3, #68	; 0x44
 8014778:	d906      	bls.n	8014788 <dhcp_option_long+0x24>
 801477a:	4b19      	ldr	r3, [pc, #100]	; (80147e0 <dhcp_option_long+0x7c>)
 801477c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8014780:	4918      	ldr	r1, [pc, #96]	; (80147e4 <dhcp_option_long+0x80>)
 8014782:	4819      	ldr	r0, [pc, #100]	; (80147e8 <dhcp_option_long+0x84>)
 8014784:	f003 fab8 	bl	8017cf8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	0e1a      	lsrs	r2, r3, #24
 801478c:	89fb      	ldrh	r3, [r7, #14]
 801478e:	1c59      	adds	r1, r3, #1
 8014790:	81f9      	strh	r1, [r7, #14]
 8014792:	4619      	mov	r1, r3
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	440b      	add	r3, r1
 8014798:	b2d2      	uxtb	r2, r2
 801479a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	0c1a      	lsrs	r2, r3, #16
 80147a0:	89fb      	ldrh	r3, [r7, #14]
 80147a2:	1c59      	adds	r1, r3, #1
 80147a4:	81f9      	strh	r1, [r7, #14]
 80147a6:	4619      	mov	r1, r3
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	440b      	add	r3, r1
 80147ac:	b2d2      	uxtb	r2, r2
 80147ae:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	0a1a      	lsrs	r2, r3, #8
 80147b4:	89fb      	ldrh	r3, [r7, #14]
 80147b6:	1c59      	adds	r1, r3, #1
 80147b8:	81f9      	strh	r1, [r7, #14]
 80147ba:	4619      	mov	r1, r3
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	440b      	add	r3, r1
 80147c0:	b2d2      	uxtb	r2, r2
 80147c2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80147c4:	89fb      	ldrh	r3, [r7, #14]
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	81fa      	strh	r2, [r7, #14]
 80147ca:	461a      	mov	r2, r3
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	4413      	add	r3, r2
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	b2d2      	uxtb	r2, r2
 80147d4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80147d6:	89fb      	ldrh	r3, [r7, #14]
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3710      	adds	r7, #16
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}
 80147e0:	0801b004 	.word	0x0801b004
 80147e4:	0801b250 	.word	0x0801b250
 80147e8:	0801b064 	.word	0x0801b064

080147ec <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b090      	sub	sp, #64	; 0x40
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
 80147f4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80147fa:	2300      	movs	r3, #0
 80147fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80147fe:	2208      	movs	r2, #8
 8014800:	2100      	movs	r1, #0
 8014802:	48be      	ldr	r0, [pc, #760]	; (8014afc <dhcp_parse_reply+0x310>)
 8014804:	f003 fa15 	bl	8017c32 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	895b      	ldrh	r3, [r3, #10]
 801480c:	2b2b      	cmp	r3, #43	; 0x2b
 801480e:	d802      	bhi.n	8014816 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014810:	f06f 0301 	mvn.w	r3, #1
 8014814:	e2a8      	b.n	8014d68 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	685b      	ldr	r3, [r3, #4]
 801481a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801481c:	23f0      	movs	r3, #240	; 0xf0
 801481e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	891b      	ldrh	r3, [r3, #8]
 8014824:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801482a:	e00c      	b.n	8014846 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482e:	895b      	ldrh	r3, [r3, #10]
 8014830:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014838:	895b      	ldrh	r3, [r3, #10]
 801483a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801483c:	1ad3      	subs	r3, r2, r3
 801483e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014848:	2b00      	cmp	r3, #0
 801484a:	d004      	beq.n	8014856 <dhcp_parse_reply+0x6a>
 801484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484e:	895b      	ldrh	r3, [r3, #10]
 8014850:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014852:	429a      	cmp	r2, r3
 8014854:	d2ea      	bcs.n	801482c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014858:	2b00      	cmp	r3, #0
 801485a:	d102      	bne.n	8014862 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801485c:	f06f 0301 	mvn.w	r3, #1
 8014860:	e282      	b.n	8014d68 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8014862:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014864:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014866:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014868:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014870:	e23a      	b.n	8014ce8 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8014872:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014874:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014876:	4413      	add	r3, r2
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801487c:	2300      	movs	r3, #0
 801487e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8014882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014886:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014888:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801488a:	3302      	adds	r3, #2
 801488c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801488e:	8bfa      	ldrh	r2, [r7, #30]
 8014890:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014892:	429a      	cmp	r2, r3
 8014894:	d202      	bcs.n	801489c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014896:	f06f 0301 	mvn.w	r3, #1
 801489a:	e265      	b.n	8014d68 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801489c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801489e:	3301      	adds	r3, #1
 80148a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148a2:	8952      	ldrh	r2, [r2, #10]
 80148a4:	4293      	cmp	r3, r2
 80148a6:	da07      	bge.n	80148b8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80148a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80148aa:	3301      	adds	r3, #1
 80148ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80148ae:	4413      	add	r3, r2
 80148b0:	781b      	ldrb	r3, [r3, #0]
 80148b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148b6:	e00b      	b.n	80148d0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80148b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d004      	beq.n	80148ca <dhcp_parse_reply+0xde>
 80148c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	781b      	ldrb	r3, [r3, #0]
 80148c8:	e000      	b.n	80148cc <dhcp_parse_reply+0xe0>
 80148ca:	2300      	movs	r3, #0
 80148cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80148d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80148d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80148d8:	7dfb      	ldrb	r3, [r7, #23]
 80148da:	2b3b      	cmp	r3, #59	; 0x3b
 80148dc:	f200 812d 	bhi.w	8014b3a <dhcp_parse_reply+0x34e>
 80148e0:	a201      	add	r2, pc, #4	; (adr r2, 80148e8 <dhcp_parse_reply+0xfc>)
 80148e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148e6:	bf00      	nop
 80148e8:	080149d9 	.word	0x080149d9
 80148ec:	080149e9 	.word	0x080149e9
 80148f0:	08014b3b 	.word	0x08014b3b
 80148f4:	08014a0b 	.word	0x08014a0b
 80148f8:	08014b3b 	.word	0x08014b3b
 80148fc:	08014b3b 	.word	0x08014b3b
 8014900:	08014b3b 	.word	0x08014b3b
 8014904:	08014b3b 	.word	0x08014b3b
 8014908:	08014b3b 	.word	0x08014b3b
 801490c:	08014b3b 	.word	0x08014b3b
 8014910:	08014b3b 	.word	0x08014b3b
 8014914:	08014b3b 	.word	0x08014b3b
 8014918:	08014b3b 	.word	0x08014b3b
 801491c:	08014b3b 	.word	0x08014b3b
 8014920:	08014b3b 	.word	0x08014b3b
 8014924:	08014b3b 	.word	0x08014b3b
 8014928:	08014b3b 	.word	0x08014b3b
 801492c:	08014b3b 	.word	0x08014b3b
 8014930:	08014b3b 	.word	0x08014b3b
 8014934:	08014b3b 	.word	0x08014b3b
 8014938:	08014b3b 	.word	0x08014b3b
 801493c:	08014b3b 	.word	0x08014b3b
 8014940:	08014b3b 	.word	0x08014b3b
 8014944:	08014b3b 	.word	0x08014b3b
 8014948:	08014b3b 	.word	0x08014b3b
 801494c:	08014b3b 	.word	0x08014b3b
 8014950:	08014b3b 	.word	0x08014b3b
 8014954:	08014b3b 	.word	0x08014b3b
 8014958:	08014b3b 	.word	0x08014b3b
 801495c:	08014b3b 	.word	0x08014b3b
 8014960:	08014b3b 	.word	0x08014b3b
 8014964:	08014b3b 	.word	0x08014b3b
 8014968:	08014b3b 	.word	0x08014b3b
 801496c:	08014b3b 	.word	0x08014b3b
 8014970:	08014b3b 	.word	0x08014b3b
 8014974:	08014b3b 	.word	0x08014b3b
 8014978:	08014b3b 	.word	0x08014b3b
 801497c:	08014b3b 	.word	0x08014b3b
 8014980:	08014b3b 	.word	0x08014b3b
 8014984:	08014b3b 	.word	0x08014b3b
 8014988:	08014b3b 	.word	0x08014b3b
 801498c:	08014b3b 	.word	0x08014b3b
 8014990:	08014b3b 	.word	0x08014b3b
 8014994:	08014b3b 	.word	0x08014b3b
 8014998:	08014b3b 	.word	0x08014b3b
 801499c:	08014b3b 	.word	0x08014b3b
 80149a0:	08014b3b 	.word	0x08014b3b
 80149a4:	08014b3b 	.word	0x08014b3b
 80149a8:	08014b3b 	.word	0x08014b3b
 80149ac:	08014b3b 	.word	0x08014b3b
 80149b0:	08014b3b 	.word	0x08014b3b
 80149b4:	08014a37 	.word	0x08014a37
 80149b8:	08014a59 	.word	0x08014a59
 80149bc:	08014a95 	.word	0x08014a95
 80149c0:	08014ab7 	.word	0x08014ab7
 80149c4:	08014b3b 	.word	0x08014b3b
 80149c8:	08014b3b 	.word	0x08014b3b
 80149cc:	08014b3b 	.word	0x08014b3b
 80149d0:	08014ad9 	.word	0x08014ad9
 80149d4:	08014b19 	.word	0x08014b19
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80149d8:	2300      	movs	r3, #0
 80149da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80149e6:	e0ac      	b.n	8014b42 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80149e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80149ec:	2b04      	cmp	r3, #4
 80149ee:	d009      	beq.n	8014a04 <dhcp_parse_reply+0x218>
 80149f0:	4b43      	ldr	r3, [pc, #268]	; (8014b00 <dhcp_parse_reply+0x314>)
 80149f2:	f240 622e 	movw	r2, #1582	; 0x62e
 80149f6:	4943      	ldr	r1, [pc, #268]	; (8014b04 <dhcp_parse_reply+0x318>)
 80149f8:	4843      	ldr	r0, [pc, #268]	; (8014b08 <dhcp_parse_reply+0x31c>)
 80149fa:	f003 f97d 	bl	8017cf8 <iprintf>
 80149fe:	f06f 0305 	mvn.w	r3, #5
 8014a02:	e1b1      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014a04:	2306      	movs	r3, #6
 8014a06:	623b      	str	r3, [r7, #32]
        break;
 8014a08:	e09b      	b.n	8014b42 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014a0a:	2304      	movs	r3, #4
 8014a0c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014a10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014a14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d209      	bcs.n	8014a30 <dhcp_parse_reply+0x244>
 8014a1c:	4b38      	ldr	r3, [pc, #224]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014a1e:	f240 6233 	movw	r2, #1587	; 0x633
 8014a22:	493a      	ldr	r1, [pc, #232]	; (8014b0c <dhcp_parse_reply+0x320>)
 8014a24:	4838      	ldr	r0, [pc, #224]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014a26:	f003 f967 	bl	8017cf8 <iprintf>
 8014a2a:	f06f 0305 	mvn.w	r3, #5
 8014a2e:	e19b      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014a30:	2307      	movs	r3, #7
 8014a32:	623b      	str	r3, [r7, #32]
        break;
 8014a34:	e085      	b.n	8014b42 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a3a:	2b04      	cmp	r3, #4
 8014a3c:	d009      	beq.n	8014a52 <dhcp_parse_reply+0x266>
 8014a3e:	4b30      	ldr	r3, [pc, #192]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014a40:	f240 6241 	movw	r2, #1601	; 0x641
 8014a44:	492f      	ldr	r1, [pc, #188]	; (8014b04 <dhcp_parse_reply+0x318>)
 8014a46:	4830      	ldr	r0, [pc, #192]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014a48:	f003 f956 	bl	8017cf8 <iprintf>
 8014a4c:	f06f 0305 	mvn.w	r3, #5
 8014a50:	e18a      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014a52:	2303      	movs	r3, #3
 8014a54:	623b      	str	r3, [r7, #32]
        break;
 8014a56:	e074      	b.n	8014b42 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a5c:	2b01      	cmp	r3, #1
 8014a5e:	d009      	beq.n	8014a74 <dhcp_parse_reply+0x288>
 8014a60:	4b27      	ldr	r3, [pc, #156]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014a62:	f240 624f 	movw	r2, #1615	; 0x64f
 8014a66:	492a      	ldr	r1, [pc, #168]	; (8014b10 <dhcp_parse_reply+0x324>)
 8014a68:	4827      	ldr	r0, [pc, #156]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014a6a:	f003 f945 	bl	8017cf8 <iprintf>
 8014a6e:	f06f 0305 	mvn.w	r3, #5
 8014a72:	e179      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014a74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014a76:	2bf0      	cmp	r3, #240	; 0xf0
 8014a78:	d009      	beq.n	8014a8e <dhcp_parse_reply+0x2a2>
 8014a7a:	4b21      	ldr	r3, [pc, #132]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014a7c:	f240 6251 	movw	r2, #1617	; 0x651
 8014a80:	4924      	ldr	r1, [pc, #144]	; (8014b14 <dhcp_parse_reply+0x328>)
 8014a82:	4821      	ldr	r0, [pc, #132]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014a84:	f003 f938 	bl	8017cf8 <iprintf>
 8014a88:	f06f 0305 	mvn.w	r3, #5
 8014a8c:	e16c      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	623b      	str	r3, [r7, #32]
        break;
 8014a92:	e056      	b.n	8014b42 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a98:	2b01      	cmp	r3, #1
 8014a9a:	d009      	beq.n	8014ab0 <dhcp_parse_reply+0x2c4>
 8014a9c:	4b18      	ldr	r3, [pc, #96]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014a9e:	f240 6255 	movw	r2, #1621	; 0x655
 8014aa2:	491b      	ldr	r1, [pc, #108]	; (8014b10 <dhcp_parse_reply+0x324>)
 8014aa4:	4818      	ldr	r0, [pc, #96]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014aa6:	f003 f927 	bl	8017cf8 <iprintf>
 8014aaa:	f06f 0305 	mvn.w	r3, #5
 8014aae:	e15b      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014ab0:	2301      	movs	r3, #1
 8014ab2:	623b      	str	r3, [r7, #32]
        break;
 8014ab4:	e045      	b.n	8014b42 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aba:	2b04      	cmp	r3, #4
 8014abc:	d009      	beq.n	8014ad2 <dhcp_parse_reply+0x2e6>
 8014abe:	4b10      	ldr	r3, [pc, #64]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014ac0:	f240 6259 	movw	r2, #1625	; 0x659
 8014ac4:	490f      	ldr	r1, [pc, #60]	; (8014b04 <dhcp_parse_reply+0x318>)
 8014ac6:	4810      	ldr	r0, [pc, #64]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014ac8:	f003 f916 	bl	8017cf8 <iprintf>
 8014acc:	f06f 0305 	mvn.w	r3, #5
 8014ad0:	e14a      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014ad2:	2302      	movs	r3, #2
 8014ad4:	623b      	str	r3, [r7, #32]
        break;
 8014ad6:	e034      	b.n	8014b42 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014adc:	2b04      	cmp	r3, #4
 8014ade:	d009      	beq.n	8014af4 <dhcp_parse_reply+0x308>
 8014ae0:	4b07      	ldr	r3, [pc, #28]	; (8014b00 <dhcp_parse_reply+0x314>)
 8014ae2:	f240 625d 	movw	r2, #1629	; 0x65d
 8014ae6:	4907      	ldr	r1, [pc, #28]	; (8014b04 <dhcp_parse_reply+0x318>)
 8014ae8:	4807      	ldr	r0, [pc, #28]	; (8014b08 <dhcp_parse_reply+0x31c>)
 8014aea:	f003 f905 	bl	8017cf8 <iprintf>
 8014aee:	f06f 0305 	mvn.w	r3, #5
 8014af2:	e139      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014af4:	2304      	movs	r3, #4
 8014af6:	623b      	str	r3, [r7, #32]
        break;
 8014af8:	e023      	b.n	8014b42 <dhcp_parse_reply+0x356>
 8014afa:	bf00      	nop
 8014afc:	2400d6d8 	.word	0x2400d6d8
 8014b00:	0801b004 	.word	0x0801b004
 8014b04:	0801b28c 	.word	0x0801b28c
 8014b08:	0801b064 	.word	0x0801b064
 8014b0c:	0801b298 	.word	0x0801b298
 8014b10:	0801b2ac 	.word	0x0801b2ac
 8014b14:	0801b2b8 	.word	0x0801b2b8
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b1c:	2b04      	cmp	r3, #4
 8014b1e:	d009      	beq.n	8014b34 <dhcp_parse_reply+0x348>
 8014b20:	4b93      	ldr	r3, [pc, #588]	; (8014d70 <dhcp_parse_reply+0x584>)
 8014b22:	f240 6261 	movw	r2, #1633	; 0x661
 8014b26:	4993      	ldr	r1, [pc, #588]	; (8014d74 <dhcp_parse_reply+0x588>)
 8014b28:	4893      	ldr	r0, [pc, #588]	; (8014d78 <dhcp_parse_reply+0x58c>)
 8014b2a:	f003 f8e5 	bl	8017cf8 <iprintf>
 8014b2e:	f06f 0305 	mvn.w	r3, #5
 8014b32:	e119      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014b34:	2305      	movs	r3, #5
 8014b36:	623b      	str	r3, [r7, #32]
        break;
 8014b38:	e003      	b.n	8014b42 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8014b3a:	2300      	movs	r3, #0
 8014b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014b40:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014b42:	7dfb      	ldrb	r3, [r7, #23]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d103      	bne.n	8014b50 <dhcp_parse_reply+0x364>
      offset++;
 8014b48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014b4e:	e0a1      	b.n	8014c94 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014b50:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b56:	4413      	add	r3, r2
 8014b58:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014b5c:	4293      	cmp	r3, r2
 8014b5e:	dd02      	ble.n	8014b66 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8014b60:	f06f 0301 	mvn.w	r3, #1
 8014b64:	e100      	b.n	8014d68 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8014b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b6a:	b29a      	uxth	r2, r3
 8014b6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b6e:	4413      	add	r3, r2
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	3302      	adds	r3, #2
 8014b74:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014b76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	f000 808a 	beq.w	8014c94 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8014b80:	2300      	movs	r3, #0
 8014b82:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014b84:	6a3b      	ldr	r3, [r7, #32]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	db02      	blt.n	8014b90 <dhcp_parse_reply+0x3a4>
 8014b8a:	6a3b      	ldr	r3, [r7, #32]
 8014b8c:	2b07      	cmp	r3, #7
 8014b8e:	dd06      	ble.n	8014b9e <dhcp_parse_reply+0x3b2>
 8014b90:	4b77      	ldr	r3, [pc, #476]	; (8014d70 <dhcp_parse_reply+0x584>)
 8014b92:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014b96:	4979      	ldr	r1, [pc, #484]	; (8014d7c <dhcp_parse_reply+0x590>)
 8014b98:	4877      	ldr	r0, [pc, #476]	; (8014d78 <dhcp_parse_reply+0x58c>)
 8014b9a:	f003 f8ad 	bl	8017cf8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014b9e:	4a78      	ldr	r2, [pc, #480]	; (8014d80 <dhcp_parse_reply+0x594>)
 8014ba0:	6a3b      	ldr	r3, [r7, #32]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	781b      	ldrb	r3, [r3, #0]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d174      	bne.n	8014c94 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8014baa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bae:	2b04      	cmp	r3, #4
 8014bb0:	bf28      	it	cs
 8014bb2:	2304      	movcs	r3, #4
 8014bb4:	b2db      	uxtb	r3, r3
 8014bb6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014bb8:	8bfb      	ldrh	r3, [r7, #30]
 8014bba:	8aba      	ldrh	r2, [r7, #20]
 8014bbc:	f107 0108 	add.w	r1, r7, #8
 8014bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014bc2:	f7f8 fc19 	bl	800d3f8 <pbuf_copy_partial>
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	461a      	mov	r2, r3
 8014bca:	8abb      	ldrh	r3, [r7, #20]
 8014bcc:	4293      	cmp	r3, r2
 8014bce:	d002      	beq.n	8014bd6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8014bd0:	f06f 0301 	mvn.w	r3, #1
 8014bd4:	e0c8      	b.n	8014d68 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8014bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bda:	2b04      	cmp	r3, #4
 8014bdc:	d933      	bls.n	8014c46 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014bde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014be2:	f003 0303 	and.w	r3, r3, #3
 8014be6:	b2db      	uxtb	r3, r3
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d009      	beq.n	8014c00 <dhcp_parse_reply+0x414>
 8014bec:	4b60      	ldr	r3, [pc, #384]	; (8014d70 <dhcp_parse_reply+0x584>)
 8014bee:	f240 6281 	movw	r2, #1665	; 0x681
 8014bf2:	4964      	ldr	r1, [pc, #400]	; (8014d84 <dhcp_parse_reply+0x598>)
 8014bf4:	4860      	ldr	r0, [pc, #384]	; (8014d78 <dhcp_parse_reply+0x58c>)
 8014bf6:	f003 f87f 	bl	8017cf8 <iprintf>
 8014bfa:	f06f 0305 	mvn.w	r3, #5
 8014bfe:	e0b3      	b.n	8014d68 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8014c00:	4a5f      	ldr	r2, [pc, #380]	; (8014d80 <dhcp_parse_reply+0x594>)
 8014c02:	6a3b      	ldr	r3, [r7, #32]
 8014c04:	4413      	add	r3, r2
 8014c06:	2201      	movs	r2, #1
 8014c08:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7f6 fd4c 	bl	800b6aa <lwip_htonl>
 8014c12:	4602      	mov	r2, r0
 8014c14:	495c      	ldr	r1, [pc, #368]	; (8014d88 <dhcp_parse_reply+0x59c>)
 8014c16:	6a3b      	ldr	r3, [r7, #32]
 8014c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c20:	3b04      	subs	r3, #4
 8014c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014c26:	8bfb      	ldrh	r3, [r7, #30]
 8014c28:	3304      	adds	r3, #4
 8014c2a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014c2c:	8a7a      	ldrh	r2, [r7, #18]
 8014c2e:	8bfb      	ldrh	r3, [r7, #30]
 8014c30:	429a      	cmp	r2, r3
 8014c32:	d202      	bcs.n	8014c3a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8014c34:	f06f 0301 	mvn.w	r3, #1
 8014c38:	e096      	b.n	8014d68 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8014c3a:	8a7b      	ldrh	r3, [r7, #18]
 8014c3c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014c3e:	6a3b      	ldr	r3, [r7, #32]
 8014c40:	3301      	adds	r3, #1
 8014c42:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014c44:	e79e      	b.n	8014b84 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8014c46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c4a:	2b04      	cmp	r3, #4
 8014c4c:	d106      	bne.n	8014c5c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7f6 fd2a 	bl	800b6aa <lwip_htonl>
 8014c56:	4603      	mov	r3, r0
 8014c58:	60bb      	str	r3, [r7, #8]
 8014c5a:	e011      	b.n	8014c80 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014c5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d009      	beq.n	8014c78 <dhcp_parse_reply+0x48c>
 8014c64:	4b42      	ldr	r3, [pc, #264]	; (8014d70 <dhcp_parse_reply+0x584>)
 8014c66:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014c6a:	4948      	ldr	r1, [pc, #288]	; (8014d8c <dhcp_parse_reply+0x5a0>)
 8014c6c:	4842      	ldr	r0, [pc, #264]	; (8014d78 <dhcp_parse_reply+0x58c>)
 8014c6e:	f003 f843 	bl	8017cf8 <iprintf>
 8014c72:	f06f 0305 	mvn.w	r3, #5
 8014c76:	e077      	b.n	8014d68 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8014c78:	f107 0308 	add.w	r3, r7, #8
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014c80:	4a3f      	ldr	r2, [pc, #252]	; (8014d80 <dhcp_parse_reply+0x594>)
 8014c82:	6a3b      	ldr	r3, [r7, #32]
 8014c84:	4413      	add	r3, r2
 8014c86:	2201      	movs	r2, #1
 8014c88:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014c8a:	68ba      	ldr	r2, [r7, #8]
 8014c8c:	493e      	ldr	r1, [pc, #248]	; (8014d88 <dhcp_parse_reply+0x59c>)
 8014c8e:	6a3b      	ldr	r3, [r7, #32]
 8014c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c96:	895b      	ldrh	r3, [r3, #10]
 8014c98:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d324      	bcc.n	8014ce8 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca0:	895b      	ldrh	r3, [r3, #10]
 8014ca2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014caa:	895b      	ldrh	r3, [r3, #10]
 8014cac:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014cae:	1ad3      	subs	r3, r2, r3
 8014cb0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014cb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014cb4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d213      	bcs.n	8014ce2 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8014cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d109      	bne.n	8014cda <dhcp_parse_reply+0x4ee>
 8014cc6:	4b2a      	ldr	r3, [pc, #168]	; (8014d70 <dhcp_parse_reply+0x584>)
 8014cc8:	f240 629d 	movw	r2, #1693	; 0x69d
 8014ccc:	4930      	ldr	r1, [pc, #192]	; (8014d90 <dhcp_parse_reply+0x5a4>)
 8014cce:	482a      	ldr	r0, [pc, #168]	; (8014d78 <dhcp_parse_reply+0x58c>)
 8014cd0:	f003 f812 	bl	8017cf8 <iprintf>
 8014cd4:	f06f 0305 	mvn.w	r3, #5
 8014cd8:	e046      	b.n	8014d68 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8014cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014ce0:	e002      	b.n	8014ce8 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014ce2:	f06f 0301 	mvn.w	r3, #1
 8014ce6:	e03f      	b.n	8014d68 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d00a      	beq.n	8014d04 <dhcp_parse_reply+0x518>
 8014cee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014cf0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014cf2:	429a      	cmp	r2, r3
 8014cf4:	d206      	bcs.n	8014d04 <dhcp_parse_reply+0x518>
 8014cf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cfa:	4413      	add	r3, r2
 8014cfc:	781b      	ldrb	r3, [r3, #0]
 8014cfe:	2bff      	cmp	r3, #255	; 0xff
 8014d00:	f47f adb7 	bne.w	8014872 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014d04:	4b1e      	ldr	r3, [pc, #120]	; (8014d80 <dhcp_parse_reply+0x594>)
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d018      	beq.n	8014d3e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014d0c:	4b1e      	ldr	r3, [pc, #120]	; (8014d88 <dhcp_parse_reply+0x59c>)
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014d12:	4b1b      	ldr	r3, [pc, #108]	; (8014d80 <dhcp_parse_reply+0x594>)
 8014d14:	2200      	movs	r2, #0
 8014d16:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	2b01      	cmp	r3, #1
 8014d1c:	d102      	bne.n	8014d24 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8014d1e:	2301      	movs	r3, #1
 8014d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014d22:	e00c      	b.n	8014d3e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	2b02      	cmp	r3, #2
 8014d28:	d102      	bne.n	8014d30 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8014d2a:	2301      	movs	r3, #1
 8014d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014d2e:	e006      	b.n	8014d3e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2b03      	cmp	r3, #3
 8014d34:	d103      	bne.n	8014d3e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8014d36:	2301      	movs	r3, #1
 8014d38:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014d3a:	2301      	movs	r3, #1
 8014d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d006      	beq.n	8014d52 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014d44:	2300      	movs	r3, #0
 8014d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014d48:	236c      	movs	r3, #108	; 0x6c
 8014d4a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014d4c:	23ec      	movs	r3, #236	; 0xec
 8014d4e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014d50:	e569      	b.n	8014826 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d006      	beq.n	8014d66 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014d5c:	232c      	movs	r3, #44	; 0x2c
 8014d5e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014d60:	236c      	movs	r3, #108	; 0x6c
 8014d62:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014d64:	e55f      	b.n	8014826 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014d66:	2300      	movs	r3, #0
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3740      	adds	r7, #64	; 0x40
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}
 8014d70:	0801b004 	.word	0x0801b004
 8014d74:	0801b28c 	.word	0x0801b28c
 8014d78:	0801b064 	.word	0x0801b064
 8014d7c:	0801b2d0 	.word	0x0801b2d0
 8014d80:	2400d6d8 	.word	0x2400d6d8
 8014d84:	0801b2e4 	.word	0x0801b2e4
 8014d88:	2400d6e0 	.word	0x2400d6e0
 8014d8c:	0801b2fc 	.word	0x0801b2fc
 8014d90:	0801b310 	.word	0x0801b310

08014d94 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014d94:	b580      	push	{r7, lr}
 8014d96:	b08a      	sub	sp, #40	; 0x28
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607a      	str	r2, [r7, #4]
 8014da0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014da2:	4b60      	ldr	r3, [pc, #384]	; (8014f24 <dhcp_recv+0x190>)
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014da8:	6a3b      	ldr	r3, [r7, #32]
 8014daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dac:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	f000 809d 	beq.w	8014ef6 <dhcp_recv+0x162>
 8014dbc:	69fb      	ldr	r3, [r7, #28]
 8014dbe:	791b      	ldrb	r3, [r3, #4]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	f000 8098 	beq.w	8014ef6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	895b      	ldrh	r3, [r3, #10]
 8014dca:	2b2b      	cmp	r3, #43	; 0x2b
 8014dcc:	f240 8095 	bls.w	8014efa <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	781b      	ldrb	r3, [r3, #0]
 8014dd4:	2b02      	cmp	r3, #2
 8014dd6:	f040 8092 	bne.w	8014efe <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014dda:	2300      	movs	r3, #0
 8014ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014de0:	e012      	b.n	8014e08 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014de2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014de6:	6a3a      	ldr	r2, [r7, #32]
 8014de8:	4413      	add	r3, r2
 8014dea:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014df2:	69b9      	ldr	r1, [r7, #24]
 8014df4:	440b      	add	r3, r1
 8014df6:	7f1b      	ldrb	r3, [r3, #28]
 8014df8:	429a      	cmp	r2, r3
 8014dfa:	f040 8082 	bne.w	8014f02 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e02:	3301      	adds	r3, #1
 8014e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e08:	6a3b      	ldr	r3, [r7, #32]
 8014e0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014e0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d203      	bcs.n	8014e1e <dhcp_recv+0x8a>
 8014e16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e1a:	2b05      	cmp	r3, #5
 8014e1c:	d9e1      	bls.n	8014de2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014e1e:	69bb      	ldr	r3, [r7, #24]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7f6 fc41 	bl	800b6aa <lwip_htonl>
 8014e28:	4602      	mov	r2, r0
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d169      	bne.n	8014f06 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014e32:	69f9      	ldr	r1, [r7, #28]
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f7ff fcd9 	bl	80147ec <dhcp_parse_reply>
 8014e3a:	4603      	mov	r3, r0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d164      	bne.n	8014f0a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014e40:	4b39      	ldr	r3, [pc, #228]	; (8014f28 <dhcp_recv+0x194>)
 8014e42:	785b      	ldrb	r3, [r3, #1]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d062      	beq.n	8014f0e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014e4e:	4b37      	ldr	r3, [pc, #220]	; (8014f2c <dhcp_recv+0x198>)
 8014e50:	685b      	ldr	r3, [r3, #4]
 8014e52:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014e54:	7cfb      	ldrb	r3, [r7, #19]
 8014e56:	2b05      	cmp	r3, #5
 8014e58:	d12a      	bne.n	8014eb0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014e5a:	69fb      	ldr	r3, [r7, #28]
 8014e5c:	795b      	ldrb	r3, [r3, #5]
 8014e5e:	2b01      	cmp	r3, #1
 8014e60:	d112      	bne.n	8014e88 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014e62:	6979      	ldr	r1, [r7, #20]
 8014e64:	6a38      	ldr	r0, [r7, #32]
 8014e66:	f7fe fe17 	bl	8013a98 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014e6a:	6a3b      	ldr	r3, [r7, #32]
 8014e6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e70:	f003 0308 	and.w	r3, r3, #8
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d003      	beq.n	8014e80 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014e78:	6a38      	ldr	r0, [r7, #32]
 8014e7a:	f7fe fb85 	bl	8013588 <dhcp_check>
 8014e7e:	e049      	b.n	8014f14 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014e80:	6a38      	ldr	r0, [r7, #32]
 8014e82:	f7ff f867 	bl	8013f54 <dhcp_bind>
 8014e86:	e045      	b.n	8014f14 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014e88:	69fb      	ldr	r3, [r7, #28]
 8014e8a:	795b      	ldrb	r3, [r3, #5]
 8014e8c:	2b03      	cmp	r3, #3
 8014e8e:	d007      	beq.n	8014ea0 <dhcp_recv+0x10c>
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	795b      	ldrb	r3, [r3, #5]
 8014e94:	2b04      	cmp	r3, #4
 8014e96:	d003      	beq.n	8014ea0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014e9c:	2b05      	cmp	r3, #5
 8014e9e:	d139      	bne.n	8014f14 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014ea0:	6979      	ldr	r1, [r7, #20]
 8014ea2:	6a38      	ldr	r0, [r7, #32]
 8014ea4:	f7fe fdf8 	bl	8013a98 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014ea8:	6a38      	ldr	r0, [r7, #32]
 8014eaa:	f7ff f853 	bl	8013f54 <dhcp_bind>
 8014eae:	e031      	b.n	8014f14 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014eb0:	7cfb      	ldrb	r3, [r7, #19]
 8014eb2:	2b06      	cmp	r3, #6
 8014eb4:	d113      	bne.n	8014ede <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014eb6:	69fb      	ldr	r3, [r7, #28]
 8014eb8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014eba:	2b03      	cmp	r3, #3
 8014ebc:	d00b      	beq.n	8014ed6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014ebe:	69fb      	ldr	r3, [r7, #28]
 8014ec0:	795b      	ldrb	r3, [r3, #5]
 8014ec2:	2b01      	cmp	r3, #1
 8014ec4:	d007      	beq.n	8014ed6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014eca:	2b04      	cmp	r3, #4
 8014ecc:	d003      	beq.n	8014ed6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014ece:	69fb      	ldr	r3, [r7, #28]
 8014ed0:	795b      	ldrb	r3, [r3, #5]
 8014ed2:	2b05      	cmp	r3, #5
 8014ed4:	d103      	bne.n	8014ede <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014ed6:	6a38      	ldr	r0, [r7, #32]
 8014ed8:	f7fe fb3c 	bl	8013554 <dhcp_handle_nak>
 8014edc:	e01a      	b.n	8014f14 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014ede:	7cfb      	ldrb	r3, [r7, #19]
 8014ee0:	2b02      	cmp	r3, #2
 8014ee2:	d116      	bne.n	8014f12 <dhcp_recv+0x17e>
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	795b      	ldrb	r3, [r3, #5]
 8014ee8:	2b06      	cmp	r3, #6
 8014eea:	d112      	bne.n	8014f12 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8014eec:	6979      	ldr	r1, [r7, #20]
 8014eee:	6a38      	ldr	r0, [r7, #32]
 8014ef0:	f7fe fb7e 	bl	80135f0 <dhcp_handle_offer>
 8014ef4:	e00e      	b.n	8014f14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014ef6:	bf00      	nop
 8014ef8:	e00c      	b.n	8014f14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014efa:	bf00      	nop
 8014efc:	e00a      	b.n	8014f14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014efe:	bf00      	nop
 8014f00:	e008      	b.n	8014f14 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8014f02:	bf00      	nop
 8014f04:	e006      	b.n	8014f14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014f06:	bf00      	nop
 8014f08:	e004      	b.n	8014f14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014f0a:	bf00      	nop
 8014f0c:	e002      	b.n	8014f14 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014f0e:	bf00      	nop
 8014f10:	e000      	b.n	8014f14 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8014f12:	bf00      	nop
  pbuf_free(p);
 8014f14:	6878      	ldr	r0, [r7, #4]
 8014f16:	f7f8 f869 	bl	800cfec <pbuf_free>
}
 8014f1a:	bf00      	nop
 8014f1c:	3728      	adds	r7, #40	; 0x28
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	2400a5dc 	.word	0x2400a5dc
 8014f28:	2400d6d8 	.word	0x2400d6d8
 8014f2c:	2400d6e0 	.word	0x2400d6e0

08014f30 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b088      	sub	sp, #32
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	603b      	str	r3, [r7, #0]
 8014f3c:	4613      	mov	r3, r2
 8014f3e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d108      	bne.n	8014f58 <dhcp_create_msg+0x28>
 8014f46:	4b5f      	ldr	r3, [pc, #380]	; (80150c4 <dhcp_create_msg+0x194>)
 8014f48:	f240 7269 	movw	r2, #1897	; 0x769
 8014f4c:	495e      	ldr	r1, [pc, #376]	; (80150c8 <dhcp_create_msg+0x198>)
 8014f4e:	485f      	ldr	r0, [pc, #380]	; (80150cc <dhcp_create_msg+0x19c>)
 8014f50:	f002 fed2 	bl	8017cf8 <iprintf>
 8014f54:	2300      	movs	r3, #0
 8014f56:	e0b1      	b.n	80150bc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d108      	bne.n	8014f70 <dhcp_create_msg+0x40>
 8014f5e:	4b59      	ldr	r3, [pc, #356]	; (80150c4 <dhcp_create_msg+0x194>)
 8014f60:	f240 726a 	movw	r2, #1898	; 0x76a
 8014f64:	495a      	ldr	r1, [pc, #360]	; (80150d0 <dhcp_create_msg+0x1a0>)
 8014f66:	4859      	ldr	r0, [pc, #356]	; (80150cc <dhcp_create_msg+0x19c>)
 8014f68:	f002 fec6 	bl	8017cf8 <iprintf>
 8014f6c:	2300      	movs	r3, #0
 8014f6e:	e0a5      	b.n	80150bc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014f70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f74:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014f78:	2036      	movs	r0, #54	; 0x36
 8014f7a:	f7f7 fd53 	bl	800ca24 <pbuf_alloc>
 8014f7e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d101      	bne.n	8014f8a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014f86:	2300      	movs	r3, #0
 8014f88:	e098      	b.n	80150bc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	895b      	ldrh	r3, [r3, #10]
 8014f8e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014f92:	d206      	bcs.n	8014fa2 <dhcp_create_msg+0x72>
 8014f94:	4b4b      	ldr	r3, [pc, #300]	; (80150c4 <dhcp_create_msg+0x194>)
 8014f96:	f240 7271 	movw	r2, #1905	; 0x771
 8014f9a:	494e      	ldr	r1, [pc, #312]	; (80150d4 <dhcp_create_msg+0x1a4>)
 8014f9c:	484b      	ldr	r0, [pc, #300]	; (80150cc <dhcp_create_msg+0x19c>)
 8014f9e:	f002 feab 	bl	8017cf8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014fa2:	79fb      	ldrb	r3, [r7, #7]
 8014fa4:	2b03      	cmp	r3, #3
 8014fa6:	d103      	bne.n	8014fb0 <dhcp_create_msg+0x80>
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	795b      	ldrb	r3, [r3, #5]
 8014fac:	2b03      	cmp	r3, #3
 8014fae:	d10d      	bne.n	8014fcc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	799b      	ldrb	r3, [r3, #6]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d105      	bne.n	8014fc4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014fb8:	f002 feb6 	bl	8017d28 <rand>
 8014fbc:	4603      	mov	r3, r0
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	4b45      	ldr	r3, [pc, #276]	; (80150d8 <dhcp_create_msg+0x1a8>)
 8014fc2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014fc4:	4b44      	ldr	r3, [pc, #272]	; (80150d8 <dhcp_create_msg+0x1a8>)
 8014fc6:	681a      	ldr	r2, [r3, #0]
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8014fcc:	69bb      	ldr	r3, [r7, #24]
 8014fce:	685b      	ldr	r3, [r3, #4]
 8014fd0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014fd2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014fd6:	2100      	movs	r1, #0
 8014fd8:	6978      	ldr	r0, [r7, #20]
 8014fda:	f002 fe2a 	bl	8017c32 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8014fde:	697b      	ldr	r3, [r7, #20]
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014fe4:	697b      	ldr	r3, [r7, #20]
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014ff0:	697b      	ldr	r3, [r7, #20]
 8014ff2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7f6 fb56 	bl	800b6aa <lwip_htonl>
 8014ffe:	4602      	mov	r2, r0
 8015000:	697b      	ldr	r3, [r7, #20]
 8015002:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015004:	79fb      	ldrb	r3, [r7, #7]
 8015006:	2b08      	cmp	r3, #8
 8015008:	d010      	beq.n	801502c <dhcp_create_msg+0xfc>
 801500a:	79fb      	ldrb	r3, [r7, #7]
 801500c:	2b04      	cmp	r3, #4
 801500e:	d00d      	beq.n	801502c <dhcp_create_msg+0xfc>
 8015010:	79fb      	ldrb	r3, [r7, #7]
 8015012:	2b07      	cmp	r3, #7
 8015014:	d00a      	beq.n	801502c <dhcp_create_msg+0xfc>
 8015016:	79fb      	ldrb	r3, [r7, #7]
 8015018:	2b03      	cmp	r3, #3
 801501a:	d10c      	bne.n	8015036 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015020:	2b05      	cmp	r3, #5
 8015022:	d003      	beq.n	801502c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	795b      	ldrb	r3, [r3, #5]
 8015028:	2b04      	cmp	r3, #4
 801502a:	d104      	bne.n	8015036 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	3304      	adds	r3, #4
 8015030:	681a      	ldr	r2, [r3, #0]
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015036:	2300      	movs	r3, #0
 8015038:	83fb      	strh	r3, [r7, #30]
 801503a:	e00c      	b.n	8015056 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801503c:	8bfa      	ldrh	r2, [r7, #30]
 801503e:	8bfb      	ldrh	r3, [r7, #30]
 8015040:	68f9      	ldr	r1, [r7, #12]
 8015042:	440a      	add	r2, r1
 8015044:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015048:	697a      	ldr	r2, [r7, #20]
 801504a:	4413      	add	r3, r2
 801504c:	460a      	mov	r2, r1
 801504e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015050:	8bfb      	ldrh	r3, [r7, #30]
 8015052:	3301      	adds	r3, #1
 8015054:	83fb      	strh	r3, [r7, #30]
 8015056:	8bfb      	ldrh	r3, [r7, #30]
 8015058:	2b05      	cmp	r3, #5
 801505a:	d9ef      	bls.n	801503c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	2200      	movs	r2, #0
 8015060:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015064:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015068:	2200      	movs	r2, #0
 801506a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801506e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8015072:	2200      	movs	r2, #0
 8015074:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8015078:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801507c:	2200      	movs	r2, #0
 801507e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015082:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801508c:	2301      	movs	r3, #1
 801508e:	2235      	movs	r2, #53	; 0x35
 8015090:	2000      	movs	r0, #0
 8015092:	f7ff fadb 	bl	801464c <dhcp_option>
 8015096:	4603      	mov	r3, r0
 8015098:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801509a:	697b      	ldr	r3, [r7, #20]
 801509c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150a0:	79fa      	ldrb	r2, [r7, #7]
 80150a2:	8a7b      	ldrh	r3, [r7, #18]
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7ff fb05 	bl	80146b4 <dhcp_option_byte>
 80150aa:	4603      	mov	r3, r0
 80150ac:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d002      	beq.n	80150ba <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	8a7a      	ldrh	r2, [r7, #18]
 80150b8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80150ba:	69bb      	ldr	r3, [r7, #24]
}
 80150bc:	4618      	mov	r0, r3
 80150be:	3720      	adds	r7, #32
 80150c0:	46bd      	mov	sp, r7
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	0801b004 	.word	0x0801b004
 80150c8:	0801b324 	.word	0x0801b324
 80150cc:	0801b064 	.word	0x0801b064
 80150d0:	0801b344 	.word	0x0801b344
 80150d4:	0801b364 	.word	0x0801b364
 80150d8:	24009df8 	.word	0x24009df8

080150dc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b084      	sub	sp, #16
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	4603      	mov	r3, r0
 80150e4:	60b9      	str	r1, [r7, #8]
 80150e6:	607a      	str	r2, [r7, #4]
 80150e8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80150ea:	89fb      	ldrh	r3, [r7, #14]
 80150ec:	1c5a      	adds	r2, r3, #1
 80150ee:	81fa      	strh	r2, [r7, #14]
 80150f0:	461a      	mov	r2, r3
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	4413      	add	r3, r2
 80150f6:	22ff      	movs	r2, #255	; 0xff
 80150f8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80150fa:	e007      	b.n	801510c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80150fc:	89fb      	ldrh	r3, [r7, #14]
 80150fe:	1c5a      	adds	r2, r3, #1
 8015100:	81fa      	strh	r2, [r7, #14]
 8015102:	461a      	mov	r2, r3
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	4413      	add	r3, r2
 8015108:	2200      	movs	r2, #0
 801510a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801510c:	89fb      	ldrh	r3, [r7, #14]
 801510e:	2b43      	cmp	r3, #67	; 0x43
 8015110:	d904      	bls.n	801511c <dhcp_option_trailer+0x40>
 8015112:	89fb      	ldrh	r3, [r7, #14]
 8015114:	f003 0303 	and.w	r3, r3, #3
 8015118:	2b00      	cmp	r3, #0
 801511a:	d002      	beq.n	8015122 <dhcp_option_trailer+0x46>
 801511c:	89fb      	ldrh	r3, [r7, #14]
 801511e:	2b43      	cmp	r3, #67	; 0x43
 8015120:	d9ec      	bls.n	80150fc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015122:	89fb      	ldrh	r3, [r7, #14]
 8015124:	33f0      	adds	r3, #240	; 0xf0
 8015126:	b29b      	uxth	r3, r3
 8015128:	4619      	mov	r1, r3
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f7f7 fdd8 	bl	800cce0 <pbuf_realloc>
}
 8015130:	bf00      	nop
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015138:	b480      	push	{r7}
 801513a:	b085      	sub	sp, #20
 801513c:	af00      	add	r7, sp, #0
 801513e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d017      	beq.n	8015176 <dhcp_supplied_address+0x3e>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514a:	2b00      	cmp	r3, #0
 801514c:	d013      	beq.n	8015176 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015152:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	795b      	ldrb	r3, [r3, #5]
 8015158:	2b0a      	cmp	r3, #10
 801515a:	d007      	beq.n	801516c <dhcp_supplied_address+0x34>
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	795b      	ldrb	r3, [r3, #5]
 8015160:	2b05      	cmp	r3, #5
 8015162:	d003      	beq.n	801516c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015168:	2b04      	cmp	r3, #4
 801516a:	d101      	bne.n	8015170 <dhcp_supplied_address+0x38>
 801516c:	2301      	movs	r3, #1
 801516e:	e000      	b.n	8015172 <dhcp_supplied_address+0x3a>
 8015170:	2300      	movs	r3, #0
 8015172:	b2db      	uxtb	r3, r3
 8015174:	e000      	b.n	8015178 <dhcp_supplied_address+0x40>
  }
  return 0;
 8015176:	2300      	movs	r3, #0
}
 8015178:	4618      	mov	r0, r3
 801517a:	3714      	adds	r7, #20
 801517c:	46bd      	mov	sp, r7
 801517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015182:	4770      	bx	lr

08015184 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
 801518a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801518c:	4915      	ldr	r1, [pc, #84]	; (80151e4 <etharp_free_entry+0x60>)
 801518e:	687a      	ldr	r2, [r7, #4]
 8015190:	4613      	mov	r3, r2
 8015192:	005b      	lsls	r3, r3, #1
 8015194:	4413      	add	r3, r2
 8015196:	00db      	lsls	r3, r3, #3
 8015198:	440b      	add	r3, r1
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d013      	beq.n	80151c8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80151a0:	4910      	ldr	r1, [pc, #64]	; (80151e4 <etharp_free_entry+0x60>)
 80151a2:	687a      	ldr	r2, [r7, #4]
 80151a4:	4613      	mov	r3, r2
 80151a6:	005b      	lsls	r3, r3, #1
 80151a8:	4413      	add	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	440b      	add	r3, r1
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7f7 ff1b 	bl	800cfec <pbuf_free>
    arp_table[i].q = NULL;
 80151b6:	490b      	ldr	r1, [pc, #44]	; (80151e4 <etharp_free_entry+0x60>)
 80151b8:	687a      	ldr	r2, [r7, #4]
 80151ba:	4613      	mov	r3, r2
 80151bc:	005b      	lsls	r3, r3, #1
 80151be:	4413      	add	r3, r2
 80151c0:	00db      	lsls	r3, r3, #3
 80151c2:	440b      	add	r3, r1
 80151c4:	2200      	movs	r2, #0
 80151c6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80151c8:	4906      	ldr	r1, [pc, #24]	; (80151e4 <etharp_free_entry+0x60>)
 80151ca:	687a      	ldr	r2, [r7, #4]
 80151cc:	4613      	mov	r3, r2
 80151ce:	005b      	lsls	r3, r3, #1
 80151d0:	4413      	add	r3, r2
 80151d2:	00db      	lsls	r3, r3, #3
 80151d4:	440b      	add	r3, r1
 80151d6:	3314      	adds	r3, #20
 80151d8:	2200      	movs	r2, #0
 80151da:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80151dc:	bf00      	nop
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}
 80151e4:	24009dfc 	.word	0x24009dfc

080151e8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b082      	sub	sp, #8
 80151ec:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80151ee:	2300      	movs	r3, #0
 80151f0:	607b      	str	r3, [r7, #4]
 80151f2:	e096      	b.n	8015322 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80151f4:	494f      	ldr	r1, [pc, #316]	; (8015334 <etharp_tmr+0x14c>)
 80151f6:	687a      	ldr	r2, [r7, #4]
 80151f8:	4613      	mov	r3, r2
 80151fa:	005b      	lsls	r3, r3, #1
 80151fc:	4413      	add	r3, r2
 80151fe:	00db      	lsls	r3, r3, #3
 8015200:	440b      	add	r3, r1
 8015202:	3314      	adds	r3, #20
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015208:	78fb      	ldrb	r3, [r7, #3]
 801520a:	2b00      	cmp	r3, #0
 801520c:	f000 8086 	beq.w	801531c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015210:	4948      	ldr	r1, [pc, #288]	; (8015334 <etharp_tmr+0x14c>)
 8015212:	687a      	ldr	r2, [r7, #4]
 8015214:	4613      	mov	r3, r2
 8015216:	005b      	lsls	r3, r3, #1
 8015218:	4413      	add	r3, r2
 801521a:	00db      	lsls	r3, r3, #3
 801521c:	440b      	add	r3, r1
 801521e:	3312      	adds	r3, #18
 8015220:	881b      	ldrh	r3, [r3, #0]
 8015222:	3301      	adds	r3, #1
 8015224:	b298      	uxth	r0, r3
 8015226:	4943      	ldr	r1, [pc, #268]	; (8015334 <etharp_tmr+0x14c>)
 8015228:	687a      	ldr	r2, [r7, #4]
 801522a:	4613      	mov	r3, r2
 801522c:	005b      	lsls	r3, r3, #1
 801522e:	4413      	add	r3, r2
 8015230:	00db      	lsls	r3, r3, #3
 8015232:	440b      	add	r3, r1
 8015234:	3312      	adds	r3, #18
 8015236:	4602      	mov	r2, r0
 8015238:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801523a:	493e      	ldr	r1, [pc, #248]	; (8015334 <etharp_tmr+0x14c>)
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	4613      	mov	r3, r2
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	4413      	add	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	440b      	add	r3, r1
 8015248:	3312      	adds	r3, #18
 801524a:	881b      	ldrh	r3, [r3, #0]
 801524c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015250:	d215      	bcs.n	801527e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015252:	4938      	ldr	r1, [pc, #224]	; (8015334 <etharp_tmr+0x14c>)
 8015254:	687a      	ldr	r2, [r7, #4]
 8015256:	4613      	mov	r3, r2
 8015258:	005b      	lsls	r3, r3, #1
 801525a:	4413      	add	r3, r2
 801525c:	00db      	lsls	r3, r3, #3
 801525e:	440b      	add	r3, r1
 8015260:	3314      	adds	r3, #20
 8015262:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015264:	2b01      	cmp	r3, #1
 8015266:	d10e      	bne.n	8015286 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015268:	4932      	ldr	r1, [pc, #200]	; (8015334 <etharp_tmr+0x14c>)
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	4613      	mov	r3, r2
 801526e:	005b      	lsls	r3, r3, #1
 8015270:	4413      	add	r3, r2
 8015272:	00db      	lsls	r3, r3, #3
 8015274:	440b      	add	r3, r1
 8015276:	3312      	adds	r3, #18
 8015278:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801527a:	2b04      	cmp	r3, #4
 801527c:	d903      	bls.n	8015286 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801527e:	6878      	ldr	r0, [r7, #4]
 8015280:	f7ff ff80 	bl	8015184 <etharp_free_entry>
 8015284:	e04a      	b.n	801531c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015286:	492b      	ldr	r1, [pc, #172]	; (8015334 <etharp_tmr+0x14c>)
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	4613      	mov	r3, r2
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	4413      	add	r3, r2
 8015290:	00db      	lsls	r3, r3, #3
 8015292:	440b      	add	r3, r1
 8015294:	3314      	adds	r3, #20
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b03      	cmp	r3, #3
 801529a:	d10a      	bne.n	80152b2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801529c:	4925      	ldr	r1, [pc, #148]	; (8015334 <etharp_tmr+0x14c>)
 801529e:	687a      	ldr	r2, [r7, #4]
 80152a0:	4613      	mov	r3, r2
 80152a2:	005b      	lsls	r3, r3, #1
 80152a4:	4413      	add	r3, r2
 80152a6:	00db      	lsls	r3, r3, #3
 80152a8:	440b      	add	r3, r1
 80152aa:	3314      	adds	r3, #20
 80152ac:	2204      	movs	r2, #4
 80152ae:	701a      	strb	r2, [r3, #0]
 80152b0:	e034      	b.n	801531c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80152b2:	4920      	ldr	r1, [pc, #128]	; (8015334 <etharp_tmr+0x14c>)
 80152b4:	687a      	ldr	r2, [r7, #4]
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	00db      	lsls	r3, r3, #3
 80152be:	440b      	add	r3, r1
 80152c0:	3314      	adds	r3, #20
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	2b04      	cmp	r3, #4
 80152c6:	d10a      	bne.n	80152de <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80152c8:	491a      	ldr	r1, [pc, #104]	; (8015334 <etharp_tmr+0x14c>)
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	4613      	mov	r3, r2
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	4413      	add	r3, r2
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	440b      	add	r3, r1
 80152d6:	3314      	adds	r3, #20
 80152d8:	2202      	movs	r2, #2
 80152da:	701a      	strb	r2, [r3, #0]
 80152dc:	e01e      	b.n	801531c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80152de:	4915      	ldr	r1, [pc, #84]	; (8015334 <etharp_tmr+0x14c>)
 80152e0:	687a      	ldr	r2, [r7, #4]
 80152e2:	4613      	mov	r3, r2
 80152e4:	005b      	lsls	r3, r3, #1
 80152e6:	4413      	add	r3, r2
 80152e8:	00db      	lsls	r3, r3, #3
 80152ea:	440b      	add	r3, r1
 80152ec:	3314      	adds	r3, #20
 80152ee:	781b      	ldrb	r3, [r3, #0]
 80152f0:	2b01      	cmp	r3, #1
 80152f2:	d113      	bne.n	801531c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80152f4:	490f      	ldr	r1, [pc, #60]	; (8015334 <etharp_tmr+0x14c>)
 80152f6:	687a      	ldr	r2, [r7, #4]
 80152f8:	4613      	mov	r3, r2
 80152fa:	005b      	lsls	r3, r3, #1
 80152fc:	4413      	add	r3, r2
 80152fe:	00db      	lsls	r3, r3, #3
 8015300:	440b      	add	r3, r1
 8015302:	3308      	adds	r3, #8
 8015304:	6818      	ldr	r0, [r3, #0]
 8015306:	687a      	ldr	r2, [r7, #4]
 8015308:	4613      	mov	r3, r2
 801530a:	005b      	lsls	r3, r3, #1
 801530c:	4413      	add	r3, r2
 801530e:	00db      	lsls	r3, r3, #3
 8015310:	4a08      	ldr	r2, [pc, #32]	; (8015334 <etharp_tmr+0x14c>)
 8015312:	4413      	add	r3, r2
 8015314:	3304      	adds	r3, #4
 8015316:	4619      	mov	r1, r3
 8015318:	f000 fe72 	bl	8016000 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	3301      	adds	r3, #1
 8015320:	607b      	str	r3, [r7, #4]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	2b09      	cmp	r3, #9
 8015326:	f77f af65 	ble.w	80151f4 <etharp_tmr+0xc>
      }
    }
  }
}
 801532a:	bf00      	nop
 801532c:	bf00      	nop
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}
 8015334:	24009dfc 	.word	0x24009dfc

08015338 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b08a      	sub	sp, #40	; 0x28
 801533c:	af00      	add	r7, sp, #0
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	460b      	mov	r3, r1
 8015342:	607a      	str	r2, [r7, #4]
 8015344:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015346:	230a      	movs	r3, #10
 8015348:	84fb      	strh	r3, [r7, #38]	; 0x26
 801534a:	230a      	movs	r3, #10
 801534c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801534e:	230a      	movs	r3, #10
 8015350:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015352:	2300      	movs	r3, #0
 8015354:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015356:	230a      	movs	r3, #10
 8015358:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801535a:	2300      	movs	r3, #0
 801535c:	83bb      	strh	r3, [r7, #28]
 801535e:	2300      	movs	r3, #0
 8015360:	837b      	strh	r3, [r7, #26]
 8015362:	2300      	movs	r3, #0
 8015364:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015366:	2300      	movs	r3, #0
 8015368:	843b      	strh	r3, [r7, #32]
 801536a:	e0ae      	b.n	80154ca <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801536c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015370:	49a6      	ldr	r1, [pc, #664]	; (801560c <etharp_find_entry+0x2d4>)
 8015372:	4613      	mov	r3, r2
 8015374:	005b      	lsls	r3, r3, #1
 8015376:	4413      	add	r3, r2
 8015378:	00db      	lsls	r3, r3, #3
 801537a:	440b      	add	r3, r1
 801537c:	3314      	adds	r3, #20
 801537e:	781b      	ldrb	r3, [r3, #0]
 8015380:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015382:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015386:	2b0a      	cmp	r3, #10
 8015388:	d105      	bne.n	8015396 <etharp_find_entry+0x5e>
 801538a:	7dfb      	ldrb	r3, [r7, #23]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d102      	bne.n	8015396 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015390:	8c3b      	ldrh	r3, [r7, #32]
 8015392:	847b      	strh	r3, [r7, #34]	; 0x22
 8015394:	e095      	b.n	80154c2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015396:	7dfb      	ldrb	r3, [r7, #23]
 8015398:	2b00      	cmp	r3, #0
 801539a:	f000 8092 	beq.w	80154c2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801539e:	7dfb      	ldrb	r3, [r7, #23]
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d009      	beq.n	80153b8 <etharp_find_entry+0x80>
 80153a4:	7dfb      	ldrb	r3, [r7, #23]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	d806      	bhi.n	80153b8 <etharp_find_entry+0x80>
 80153aa:	4b99      	ldr	r3, [pc, #612]	; (8015610 <etharp_find_entry+0x2d8>)
 80153ac:	f240 1223 	movw	r2, #291	; 0x123
 80153b0:	4998      	ldr	r1, [pc, #608]	; (8015614 <etharp_find_entry+0x2dc>)
 80153b2:	4899      	ldr	r0, [pc, #612]	; (8015618 <etharp_find_entry+0x2e0>)
 80153b4:	f002 fca0 	bl	8017cf8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d020      	beq.n	8015400 <etharp_find_entry+0xc8>
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	6819      	ldr	r1, [r3, #0]
 80153c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153c6:	4891      	ldr	r0, [pc, #580]	; (801560c <etharp_find_entry+0x2d4>)
 80153c8:	4613      	mov	r3, r2
 80153ca:	005b      	lsls	r3, r3, #1
 80153cc:	4413      	add	r3, r2
 80153ce:	00db      	lsls	r3, r3, #3
 80153d0:	4403      	add	r3, r0
 80153d2:	3304      	adds	r3, #4
 80153d4:	681b      	ldr	r3, [r3, #0]
 80153d6:	4299      	cmp	r1, r3
 80153d8:	d112      	bne.n	8015400 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00c      	beq.n	80153fa <etharp_find_entry+0xc2>
 80153e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80153e4:	4989      	ldr	r1, [pc, #548]	; (801560c <etharp_find_entry+0x2d4>)
 80153e6:	4613      	mov	r3, r2
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	4413      	add	r3, r2
 80153ec:	00db      	lsls	r3, r3, #3
 80153ee:	440b      	add	r3, r1
 80153f0:	3308      	adds	r3, #8
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	687a      	ldr	r2, [r7, #4]
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d102      	bne.n	8015400 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80153fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80153fe:	e100      	b.n	8015602 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015400:	7dfb      	ldrb	r3, [r7, #23]
 8015402:	2b01      	cmp	r3, #1
 8015404:	d140      	bne.n	8015488 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015406:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801540a:	4980      	ldr	r1, [pc, #512]	; (801560c <etharp_find_entry+0x2d4>)
 801540c:	4613      	mov	r3, r2
 801540e:	005b      	lsls	r3, r3, #1
 8015410:	4413      	add	r3, r2
 8015412:	00db      	lsls	r3, r3, #3
 8015414:	440b      	add	r3, r1
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d01a      	beq.n	8015452 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801541c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015420:	497a      	ldr	r1, [pc, #488]	; (801560c <etharp_find_entry+0x2d4>)
 8015422:	4613      	mov	r3, r2
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	4413      	add	r3, r2
 8015428:	00db      	lsls	r3, r3, #3
 801542a:	440b      	add	r3, r1
 801542c:	3312      	adds	r3, #18
 801542e:	881b      	ldrh	r3, [r3, #0]
 8015430:	8bba      	ldrh	r2, [r7, #28]
 8015432:	429a      	cmp	r2, r3
 8015434:	d845      	bhi.n	80154c2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015436:	8c3b      	ldrh	r3, [r7, #32]
 8015438:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801543a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801543e:	4973      	ldr	r1, [pc, #460]	; (801560c <etharp_find_entry+0x2d4>)
 8015440:	4613      	mov	r3, r2
 8015442:	005b      	lsls	r3, r3, #1
 8015444:	4413      	add	r3, r2
 8015446:	00db      	lsls	r3, r3, #3
 8015448:	440b      	add	r3, r1
 801544a:	3312      	adds	r3, #18
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	83bb      	strh	r3, [r7, #28]
 8015450:	e037      	b.n	80154c2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015456:	496d      	ldr	r1, [pc, #436]	; (801560c <etharp_find_entry+0x2d4>)
 8015458:	4613      	mov	r3, r2
 801545a:	005b      	lsls	r3, r3, #1
 801545c:	4413      	add	r3, r2
 801545e:	00db      	lsls	r3, r3, #3
 8015460:	440b      	add	r3, r1
 8015462:	3312      	adds	r3, #18
 8015464:	881b      	ldrh	r3, [r3, #0]
 8015466:	8b7a      	ldrh	r2, [r7, #26]
 8015468:	429a      	cmp	r2, r3
 801546a:	d82a      	bhi.n	80154c2 <etharp_find_entry+0x18a>
            old_pending = i;
 801546c:	8c3b      	ldrh	r3, [r7, #32]
 801546e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015474:	4965      	ldr	r1, [pc, #404]	; (801560c <etharp_find_entry+0x2d4>)
 8015476:	4613      	mov	r3, r2
 8015478:	005b      	lsls	r3, r3, #1
 801547a:	4413      	add	r3, r2
 801547c:	00db      	lsls	r3, r3, #3
 801547e:	440b      	add	r3, r1
 8015480:	3312      	adds	r3, #18
 8015482:	881b      	ldrh	r3, [r3, #0]
 8015484:	837b      	strh	r3, [r7, #26]
 8015486:	e01c      	b.n	80154c2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015488:	7dfb      	ldrb	r3, [r7, #23]
 801548a:	2b01      	cmp	r3, #1
 801548c:	d919      	bls.n	80154c2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801548e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015492:	495e      	ldr	r1, [pc, #376]	; (801560c <etharp_find_entry+0x2d4>)
 8015494:	4613      	mov	r3, r2
 8015496:	005b      	lsls	r3, r3, #1
 8015498:	4413      	add	r3, r2
 801549a:	00db      	lsls	r3, r3, #3
 801549c:	440b      	add	r3, r1
 801549e:	3312      	adds	r3, #18
 80154a0:	881b      	ldrh	r3, [r3, #0]
 80154a2:	8b3a      	ldrh	r2, [r7, #24]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d80c      	bhi.n	80154c2 <etharp_find_entry+0x18a>
            old_stable = i;
 80154a8:	8c3b      	ldrh	r3, [r7, #32]
 80154aa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80154ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154b0:	4956      	ldr	r1, [pc, #344]	; (801560c <etharp_find_entry+0x2d4>)
 80154b2:	4613      	mov	r3, r2
 80154b4:	005b      	lsls	r3, r3, #1
 80154b6:	4413      	add	r3, r2
 80154b8:	00db      	lsls	r3, r3, #3
 80154ba:	440b      	add	r3, r1
 80154bc:	3312      	adds	r3, #18
 80154be:	881b      	ldrh	r3, [r3, #0]
 80154c0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80154c2:	8c3b      	ldrh	r3, [r7, #32]
 80154c4:	3301      	adds	r3, #1
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	843b      	strh	r3, [r7, #32]
 80154ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154ce:	2b09      	cmp	r3, #9
 80154d0:	f77f af4c 	ble.w	801536c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80154d4:	7afb      	ldrb	r3, [r7, #11]
 80154d6:	f003 0302 	and.w	r3, r3, #2
 80154da:	2b00      	cmp	r3, #0
 80154dc:	d108      	bne.n	80154f0 <etharp_find_entry+0x1b8>
 80154de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154e2:	2b0a      	cmp	r3, #10
 80154e4:	d107      	bne.n	80154f6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80154e6:	7afb      	ldrb	r3, [r7, #11]
 80154e8:	f003 0301 	and.w	r3, r3, #1
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d102      	bne.n	80154f6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80154f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154f4:	e085      	b.n	8015602 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80154f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154fa:	2b09      	cmp	r3, #9
 80154fc:	dc02      	bgt.n	8015504 <etharp_find_entry+0x1cc>
    i = empty;
 80154fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015500:	843b      	strh	r3, [r7, #32]
 8015502:	e039      	b.n	8015578 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015504:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015508:	2b09      	cmp	r3, #9
 801550a:	dc14      	bgt.n	8015536 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801550c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801550e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015514:	493d      	ldr	r1, [pc, #244]	; (801560c <etharp_find_entry+0x2d4>)
 8015516:	4613      	mov	r3, r2
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4413      	add	r3, r2
 801551c:	00db      	lsls	r3, r3, #3
 801551e:	440b      	add	r3, r1
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d018      	beq.n	8015558 <etharp_find_entry+0x220>
 8015526:	4b3a      	ldr	r3, [pc, #232]	; (8015610 <etharp_find_entry+0x2d8>)
 8015528:	f240 126d 	movw	r2, #365	; 0x16d
 801552c:	493b      	ldr	r1, [pc, #236]	; (801561c <etharp_find_entry+0x2e4>)
 801552e:	483a      	ldr	r0, [pc, #232]	; (8015618 <etharp_find_entry+0x2e0>)
 8015530:	f002 fbe2 	bl	8017cf8 <iprintf>
 8015534:	e010      	b.n	8015558 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015536:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801553a:	2b09      	cmp	r3, #9
 801553c:	dc02      	bgt.n	8015544 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801553e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015540:	843b      	strh	r3, [r7, #32]
 8015542:	e009      	b.n	8015558 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015544:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015548:	2b09      	cmp	r3, #9
 801554a:	dc02      	bgt.n	8015552 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801554c:	8bfb      	ldrh	r3, [r7, #30]
 801554e:	843b      	strh	r3, [r7, #32]
 8015550:	e002      	b.n	8015558 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015556:	e054      	b.n	8015602 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015558:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801555c:	2b09      	cmp	r3, #9
 801555e:	dd06      	ble.n	801556e <etharp_find_entry+0x236>
 8015560:	4b2b      	ldr	r3, [pc, #172]	; (8015610 <etharp_find_entry+0x2d8>)
 8015562:	f240 127f 	movw	r2, #383	; 0x17f
 8015566:	492e      	ldr	r1, [pc, #184]	; (8015620 <etharp_find_entry+0x2e8>)
 8015568:	482b      	ldr	r0, [pc, #172]	; (8015618 <etharp_find_entry+0x2e0>)
 801556a:	f002 fbc5 	bl	8017cf8 <iprintf>
    etharp_free_entry(i);
 801556e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015572:	4618      	mov	r0, r3
 8015574:	f7ff fe06 	bl	8015184 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801557c:	2b09      	cmp	r3, #9
 801557e:	dd06      	ble.n	801558e <etharp_find_entry+0x256>
 8015580:	4b23      	ldr	r3, [pc, #140]	; (8015610 <etharp_find_entry+0x2d8>)
 8015582:	f240 1283 	movw	r2, #387	; 0x183
 8015586:	4926      	ldr	r1, [pc, #152]	; (8015620 <etharp_find_entry+0x2e8>)
 8015588:	4823      	ldr	r0, [pc, #140]	; (8015618 <etharp_find_entry+0x2e0>)
 801558a:	f002 fbb5 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801558e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015592:	491e      	ldr	r1, [pc, #120]	; (801560c <etharp_find_entry+0x2d4>)
 8015594:	4613      	mov	r3, r2
 8015596:	005b      	lsls	r3, r3, #1
 8015598:	4413      	add	r3, r2
 801559a:	00db      	lsls	r3, r3, #3
 801559c:	440b      	add	r3, r1
 801559e:	3314      	adds	r3, #20
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d006      	beq.n	80155b4 <etharp_find_entry+0x27c>
 80155a6:	4b1a      	ldr	r3, [pc, #104]	; (8015610 <etharp_find_entry+0x2d8>)
 80155a8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80155ac:	491d      	ldr	r1, [pc, #116]	; (8015624 <etharp_find_entry+0x2ec>)
 80155ae:	481a      	ldr	r0, [pc, #104]	; (8015618 <etharp_find_entry+0x2e0>)
 80155b0:	f002 fba2 	bl	8017cf8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d00b      	beq.n	80155d2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80155ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	6819      	ldr	r1, [r3, #0]
 80155c2:	4812      	ldr	r0, [pc, #72]	; (801560c <etharp_find_entry+0x2d4>)
 80155c4:	4613      	mov	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	4413      	add	r3, r2
 80155ca:	00db      	lsls	r3, r3, #3
 80155cc:	4403      	add	r3, r0
 80155ce:	3304      	adds	r3, #4
 80155d0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80155d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155d6:	490d      	ldr	r1, [pc, #52]	; (801560c <etharp_find_entry+0x2d4>)
 80155d8:	4613      	mov	r3, r2
 80155da:	005b      	lsls	r3, r3, #1
 80155dc:	4413      	add	r3, r2
 80155de:	00db      	lsls	r3, r3, #3
 80155e0:	440b      	add	r3, r1
 80155e2:	3312      	adds	r3, #18
 80155e4:	2200      	movs	r2, #0
 80155e6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80155e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155ec:	4907      	ldr	r1, [pc, #28]	; (801560c <etharp_find_entry+0x2d4>)
 80155ee:	4613      	mov	r3, r2
 80155f0:	005b      	lsls	r3, r3, #1
 80155f2:	4413      	add	r3, r2
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	440b      	add	r3, r1
 80155f8:	3308      	adds	r3, #8
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80155fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015602:	4618      	mov	r0, r3
 8015604:	3728      	adds	r7, #40	; 0x28
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}
 801560a:	bf00      	nop
 801560c:	24009dfc 	.word	0x24009dfc
 8015610:	0801b3a4 	.word	0x0801b3a4
 8015614:	0801b3dc 	.word	0x0801b3dc
 8015618:	0801b41c 	.word	0x0801b41c
 801561c:	0801b444 	.word	0x0801b444
 8015620:	0801b45c 	.word	0x0801b45c
 8015624:	0801b470 	.word	0x0801b470

08015628 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b088      	sub	sp, #32
 801562c:	af02      	add	r7, sp, #8
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801563c:	2b06      	cmp	r3, #6
 801563e:	d006      	beq.n	801564e <etharp_update_arp_entry+0x26>
 8015640:	4b48      	ldr	r3, [pc, #288]	; (8015764 <etharp_update_arp_entry+0x13c>)
 8015642:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015646:	4948      	ldr	r1, [pc, #288]	; (8015768 <etharp_update_arp_entry+0x140>)
 8015648:	4848      	ldr	r0, [pc, #288]	; (801576c <etharp_update_arp_entry+0x144>)
 801564a:	f002 fb55 	bl	8017cf8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801564e:	68bb      	ldr	r3, [r7, #8]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d012      	beq.n	801567a <etharp_update_arp_entry+0x52>
 8015654:	68bb      	ldr	r3, [r7, #8]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d00e      	beq.n	801567a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	68f9      	ldr	r1, [r7, #12]
 8015662:	4618      	mov	r0, r3
 8015664:	f001 f946 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 8015668:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801566a:	2b00      	cmp	r3, #0
 801566c:	d105      	bne.n	801567a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015676:	2be0      	cmp	r3, #224	; 0xe0
 8015678:	d102      	bne.n	8015680 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801567a:	f06f 030f 	mvn.w	r3, #15
 801567e:	e06c      	b.n	801575a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015680:	78fb      	ldrb	r3, [r7, #3]
 8015682:	68fa      	ldr	r2, [r7, #12]
 8015684:	4619      	mov	r1, r3
 8015686:	68b8      	ldr	r0, [r7, #8]
 8015688:	f7ff fe56 	bl	8015338 <etharp_find_entry>
 801568c:	4603      	mov	r3, r0
 801568e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015690:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015694:	2b00      	cmp	r3, #0
 8015696:	da02      	bge.n	801569e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015698:	8afb      	ldrh	r3, [r7, #22]
 801569a:	b25b      	sxtb	r3, r3
 801569c:	e05d      	b.n	801575a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801569e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156a2:	4933      	ldr	r1, [pc, #204]	; (8015770 <etharp_update_arp_entry+0x148>)
 80156a4:	4613      	mov	r3, r2
 80156a6:	005b      	lsls	r3, r3, #1
 80156a8:	4413      	add	r3, r2
 80156aa:	00db      	lsls	r3, r3, #3
 80156ac:	440b      	add	r3, r1
 80156ae:	3314      	adds	r3, #20
 80156b0:	2202      	movs	r2, #2
 80156b2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80156b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156b8:	492d      	ldr	r1, [pc, #180]	; (8015770 <etharp_update_arp_entry+0x148>)
 80156ba:	4613      	mov	r3, r2
 80156bc:	005b      	lsls	r3, r3, #1
 80156be:	4413      	add	r3, r2
 80156c0:	00db      	lsls	r3, r3, #3
 80156c2:	440b      	add	r3, r1
 80156c4:	3308      	adds	r3, #8
 80156c6:	68fa      	ldr	r2, [r7, #12]
 80156c8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80156ca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156ce:	4613      	mov	r3, r2
 80156d0:	005b      	lsls	r3, r3, #1
 80156d2:	4413      	add	r3, r2
 80156d4:	00db      	lsls	r3, r3, #3
 80156d6:	3308      	adds	r3, #8
 80156d8:	4a25      	ldr	r2, [pc, #148]	; (8015770 <etharp_update_arp_entry+0x148>)
 80156da:	4413      	add	r3, r2
 80156dc:	3304      	adds	r3, #4
 80156de:	2206      	movs	r2, #6
 80156e0:	6879      	ldr	r1, [r7, #4]
 80156e2:	4618      	mov	r0, r3
 80156e4:	f002 fa97 	bl	8017c16 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80156e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80156ec:	4920      	ldr	r1, [pc, #128]	; (8015770 <etharp_update_arp_entry+0x148>)
 80156ee:	4613      	mov	r3, r2
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	4413      	add	r3, r2
 80156f4:	00db      	lsls	r3, r3, #3
 80156f6:	440b      	add	r3, r1
 80156f8:	3312      	adds	r3, #18
 80156fa:	2200      	movs	r2, #0
 80156fc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80156fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015702:	491b      	ldr	r1, [pc, #108]	; (8015770 <etharp_update_arp_entry+0x148>)
 8015704:	4613      	mov	r3, r2
 8015706:	005b      	lsls	r3, r3, #1
 8015708:	4413      	add	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	440b      	add	r3, r1
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d021      	beq.n	8015758 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015714:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015718:	4915      	ldr	r1, [pc, #84]	; (8015770 <etharp_update_arp_entry+0x148>)
 801571a:	4613      	mov	r3, r2
 801571c:	005b      	lsls	r3, r3, #1
 801571e:	4413      	add	r3, r2
 8015720:	00db      	lsls	r3, r3, #3
 8015722:	440b      	add	r3, r1
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015728:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801572c:	4910      	ldr	r1, [pc, #64]	; (8015770 <etharp_update_arp_entry+0x148>)
 801572e:	4613      	mov	r3, r2
 8015730:	005b      	lsls	r3, r3, #1
 8015732:	4413      	add	r3, r2
 8015734:	00db      	lsls	r3, r3, #3
 8015736:	440b      	add	r3, r1
 8015738:	2200      	movs	r2, #0
 801573a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015746:	9300      	str	r3, [sp, #0]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	6939      	ldr	r1, [r7, #16]
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f001 ffd9 	bl	8017704 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015752:	6938      	ldr	r0, [r7, #16]
 8015754:	f7f7 fc4a 	bl	800cfec <pbuf_free>
  }
  return ERR_OK;
 8015758:	2300      	movs	r3, #0
}
 801575a:	4618      	mov	r0, r3
 801575c:	3718      	adds	r7, #24
 801575e:	46bd      	mov	sp, r7
 8015760:	bd80      	pop	{r7, pc}
 8015762:	bf00      	nop
 8015764:	0801b3a4 	.word	0x0801b3a4
 8015768:	0801b49c 	.word	0x0801b49c
 801576c:	0801b41c 	.word	0x0801b41c
 8015770:	24009dfc 	.word	0x24009dfc

08015774 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801577c:	2300      	movs	r3, #0
 801577e:	60fb      	str	r3, [r7, #12]
 8015780:	e01e      	b.n	80157c0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015782:	4913      	ldr	r1, [pc, #76]	; (80157d0 <etharp_cleanup_netif+0x5c>)
 8015784:	68fa      	ldr	r2, [r7, #12]
 8015786:	4613      	mov	r3, r2
 8015788:	005b      	lsls	r3, r3, #1
 801578a:	4413      	add	r3, r2
 801578c:	00db      	lsls	r3, r3, #3
 801578e:	440b      	add	r3, r1
 8015790:	3314      	adds	r3, #20
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015796:	7afb      	ldrb	r3, [r7, #11]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d00e      	beq.n	80157ba <etharp_cleanup_netif+0x46>
 801579c:	490c      	ldr	r1, [pc, #48]	; (80157d0 <etharp_cleanup_netif+0x5c>)
 801579e:	68fa      	ldr	r2, [r7, #12]
 80157a0:	4613      	mov	r3, r2
 80157a2:	005b      	lsls	r3, r3, #1
 80157a4:	4413      	add	r3, r2
 80157a6:	00db      	lsls	r3, r3, #3
 80157a8:	440b      	add	r3, r1
 80157aa:	3308      	adds	r3, #8
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	687a      	ldr	r2, [r7, #4]
 80157b0:	429a      	cmp	r2, r3
 80157b2:	d102      	bne.n	80157ba <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80157b4:	68f8      	ldr	r0, [r7, #12]
 80157b6:	f7ff fce5 	bl	8015184 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	3301      	adds	r3, #1
 80157be:	60fb      	str	r3, [r7, #12]
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	2b09      	cmp	r3, #9
 80157c4:	dddd      	ble.n	8015782 <etharp_cleanup_netif+0xe>
    }
  }
}
 80157c6:	bf00      	nop
 80157c8:	bf00      	nop
 80157ca:	3710      	adds	r7, #16
 80157cc:	46bd      	mov	sp, r7
 80157ce:	bd80      	pop	{r7, pc}
 80157d0:	24009dfc 	.word	0x24009dfc

080157d4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80157d4:	b5b0      	push	{r4, r5, r7, lr}
 80157d6:	b08a      	sub	sp, #40	; 0x28
 80157d8:	af04      	add	r7, sp, #16
 80157da:	6078      	str	r0, [r7, #4]
 80157dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80157de:	683b      	ldr	r3, [r7, #0]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d107      	bne.n	80157f4 <etharp_input+0x20>
 80157e4:	4b3f      	ldr	r3, [pc, #252]	; (80158e4 <etharp_input+0x110>)
 80157e6:	f240 228a 	movw	r2, #650	; 0x28a
 80157ea:	493f      	ldr	r1, [pc, #252]	; (80158e8 <etharp_input+0x114>)
 80157ec:	483f      	ldr	r0, [pc, #252]	; (80158ec <etharp_input+0x118>)
 80157ee:	f002 fa83 	bl	8017cf8 <iprintf>
 80157f2:	e074      	b.n	80158de <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	685b      	ldr	r3, [r3, #4]
 80157f8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80157fa:	693b      	ldr	r3, [r7, #16]
 80157fc:	881b      	ldrh	r3, [r3, #0]
 80157fe:	b29b      	uxth	r3, r3
 8015800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015804:	d10c      	bne.n	8015820 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015806:	693b      	ldr	r3, [r7, #16]
 8015808:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801580a:	2b06      	cmp	r3, #6
 801580c:	d108      	bne.n	8015820 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015812:	2b04      	cmp	r3, #4
 8015814:	d104      	bne.n	8015820 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015816:	693b      	ldr	r3, [r7, #16]
 8015818:	885b      	ldrh	r3, [r3, #2]
 801581a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801581c:	2b08      	cmp	r3, #8
 801581e:	d003      	beq.n	8015828 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f7f7 fbe3 	bl	800cfec <pbuf_free>
    return;
 8015826:	e05a      	b.n	80158de <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015828:	693b      	ldr	r3, [r7, #16]
 801582a:	330e      	adds	r3, #14
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	3318      	adds	r3, #24
 8015834:	681b      	ldr	r3, [r3, #0]
 8015836:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	3304      	adds	r3, #4
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d102      	bne.n	8015848 <etharp_input+0x74>
    for_us = 0;
 8015842:	2300      	movs	r3, #0
 8015844:	75fb      	strb	r3, [r7, #23]
 8015846:	e009      	b.n	801585c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015848:	68ba      	ldr	r2, [r7, #8]
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	3304      	adds	r3, #4
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	429a      	cmp	r2, r3
 8015852:	bf0c      	ite	eq
 8015854:	2301      	moveq	r3, #1
 8015856:	2300      	movne	r3, #0
 8015858:	b2db      	uxtb	r3, r3
 801585a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801585c:	693b      	ldr	r3, [r7, #16]
 801585e:	f103 0208 	add.w	r2, r3, #8
 8015862:	7dfb      	ldrb	r3, [r7, #23]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d001      	beq.n	801586c <etharp_input+0x98>
 8015868:	2301      	movs	r3, #1
 801586a:	e000      	b.n	801586e <etharp_input+0x9a>
 801586c:	2302      	movs	r3, #2
 801586e:	f107 010c 	add.w	r1, r7, #12
 8015872:	6838      	ldr	r0, [r7, #0]
 8015874:	f7ff fed8 	bl	8015628 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	88db      	ldrh	r3, [r3, #6]
 801587c:	b29b      	uxth	r3, r3
 801587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015882:	d003      	beq.n	801588c <etharp_input+0xb8>
 8015884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015888:	d01e      	beq.n	80158c8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801588a:	e025      	b.n	80158d8 <etharp_input+0x104>
      if (for_us) {
 801588c:	7dfb      	ldrb	r3, [r7, #23]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d021      	beq.n	80158d6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015898:	693b      	ldr	r3, [r7, #16]
 801589a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80158a8:	693a      	ldr	r2, [r7, #16]
 80158aa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80158ac:	2102      	movs	r1, #2
 80158ae:	9103      	str	r1, [sp, #12]
 80158b0:	f107 010c 	add.w	r1, r7, #12
 80158b4:	9102      	str	r1, [sp, #8]
 80158b6:	9201      	str	r2, [sp, #4]
 80158b8:	9300      	str	r3, [sp, #0]
 80158ba:	462b      	mov	r3, r5
 80158bc:	4622      	mov	r2, r4
 80158be:	4601      	mov	r1, r0
 80158c0:	6838      	ldr	r0, [r7, #0]
 80158c2:	f000 faef 	bl	8015ea4 <etharp_raw>
      break;
 80158c6:	e006      	b.n	80158d6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80158c8:	f107 030c 	add.w	r3, r7, #12
 80158cc:	4619      	mov	r1, r3
 80158ce:	6838      	ldr	r0, [r7, #0]
 80158d0:	f7fe f9fc 	bl	8013ccc <dhcp_arp_reply>
      break;
 80158d4:	e000      	b.n	80158d8 <etharp_input+0x104>
      break;
 80158d6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80158d8:	6878      	ldr	r0, [r7, #4]
 80158da:	f7f7 fb87 	bl	800cfec <pbuf_free>
}
 80158de:	3718      	adds	r7, #24
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bdb0      	pop	{r4, r5, r7, pc}
 80158e4:	0801b3a4 	.word	0x0801b3a4
 80158e8:	0801b4f4 	.word	0x0801b4f4
 80158ec:	0801b41c 	.word	0x0801b41c

080158f0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b086      	sub	sp, #24
 80158f4:	af02      	add	r7, sp, #8
 80158f6:	60f8      	str	r0, [r7, #12]
 80158f8:	60b9      	str	r1, [r7, #8]
 80158fa:	4613      	mov	r3, r2
 80158fc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80158fe:	79fa      	ldrb	r2, [r7, #7]
 8015900:	4944      	ldr	r1, [pc, #272]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 8015902:	4613      	mov	r3, r2
 8015904:	005b      	lsls	r3, r3, #1
 8015906:	4413      	add	r3, r2
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	440b      	add	r3, r1
 801590c:	3314      	adds	r3, #20
 801590e:	781b      	ldrb	r3, [r3, #0]
 8015910:	2b01      	cmp	r3, #1
 8015912:	d806      	bhi.n	8015922 <etharp_output_to_arp_index+0x32>
 8015914:	4b40      	ldr	r3, [pc, #256]	; (8015a18 <etharp_output_to_arp_index+0x128>)
 8015916:	f240 22ee 	movw	r2, #750	; 0x2ee
 801591a:	4940      	ldr	r1, [pc, #256]	; (8015a1c <etharp_output_to_arp_index+0x12c>)
 801591c:	4840      	ldr	r0, [pc, #256]	; (8015a20 <etharp_output_to_arp_index+0x130>)
 801591e:	f002 f9eb 	bl	8017cf8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015922:	79fa      	ldrb	r2, [r7, #7]
 8015924:	493b      	ldr	r1, [pc, #236]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 8015926:	4613      	mov	r3, r2
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	4413      	add	r3, r2
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	440b      	add	r3, r1
 8015930:	3314      	adds	r3, #20
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	2b02      	cmp	r3, #2
 8015936:	d153      	bne.n	80159e0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015938:	79fa      	ldrb	r2, [r7, #7]
 801593a:	4936      	ldr	r1, [pc, #216]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 801593c:	4613      	mov	r3, r2
 801593e:	005b      	lsls	r3, r3, #1
 8015940:	4413      	add	r3, r2
 8015942:	00db      	lsls	r3, r3, #3
 8015944:	440b      	add	r3, r1
 8015946:	3312      	adds	r3, #18
 8015948:	881b      	ldrh	r3, [r3, #0]
 801594a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801594e:	d919      	bls.n	8015984 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015950:	79fa      	ldrb	r2, [r7, #7]
 8015952:	4613      	mov	r3, r2
 8015954:	005b      	lsls	r3, r3, #1
 8015956:	4413      	add	r3, r2
 8015958:	00db      	lsls	r3, r3, #3
 801595a:	4a2e      	ldr	r2, [pc, #184]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 801595c:	4413      	add	r3, r2
 801595e:	3304      	adds	r3, #4
 8015960:	4619      	mov	r1, r3
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f000 fb4c 	bl	8016000 <etharp_request>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	d138      	bne.n	80159e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801596e:	79fa      	ldrb	r2, [r7, #7]
 8015970:	4928      	ldr	r1, [pc, #160]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 8015972:	4613      	mov	r3, r2
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	4413      	add	r3, r2
 8015978:	00db      	lsls	r3, r3, #3
 801597a:	440b      	add	r3, r1
 801597c:	3314      	adds	r3, #20
 801597e:	2203      	movs	r2, #3
 8015980:	701a      	strb	r2, [r3, #0]
 8015982:	e02d      	b.n	80159e0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015984:	79fa      	ldrb	r2, [r7, #7]
 8015986:	4923      	ldr	r1, [pc, #140]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 8015988:	4613      	mov	r3, r2
 801598a:	005b      	lsls	r3, r3, #1
 801598c:	4413      	add	r3, r2
 801598e:	00db      	lsls	r3, r3, #3
 8015990:	440b      	add	r3, r1
 8015992:	3312      	adds	r3, #18
 8015994:	881b      	ldrh	r3, [r3, #0]
 8015996:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801599a:	d321      	bcc.n	80159e0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801599c:	79fa      	ldrb	r2, [r7, #7]
 801599e:	4613      	mov	r3, r2
 80159a0:	005b      	lsls	r3, r3, #1
 80159a2:	4413      	add	r3, r2
 80159a4:	00db      	lsls	r3, r3, #3
 80159a6:	4a1b      	ldr	r2, [pc, #108]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 80159a8:	4413      	add	r3, r2
 80159aa:	1d19      	adds	r1, r3, #4
 80159ac:	79fa      	ldrb	r2, [r7, #7]
 80159ae:	4613      	mov	r3, r2
 80159b0:	005b      	lsls	r3, r3, #1
 80159b2:	4413      	add	r3, r2
 80159b4:	00db      	lsls	r3, r3, #3
 80159b6:	3308      	adds	r3, #8
 80159b8:	4a16      	ldr	r2, [pc, #88]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 80159ba:	4413      	add	r3, r2
 80159bc:	3304      	adds	r3, #4
 80159be:	461a      	mov	r2, r3
 80159c0:	68f8      	ldr	r0, [r7, #12]
 80159c2:	f000 fafb 	bl	8015fbc <etharp_request_dst>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d109      	bne.n	80159e0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80159cc:	79fa      	ldrb	r2, [r7, #7]
 80159ce:	4911      	ldr	r1, [pc, #68]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 80159d0:	4613      	mov	r3, r2
 80159d2:	005b      	lsls	r3, r3, #1
 80159d4:	4413      	add	r3, r2
 80159d6:	00db      	lsls	r3, r3, #3
 80159d8:	440b      	add	r3, r1
 80159da:	3314      	adds	r3, #20
 80159dc:	2203      	movs	r2, #3
 80159de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80159e6:	79fa      	ldrb	r2, [r7, #7]
 80159e8:	4613      	mov	r3, r2
 80159ea:	005b      	lsls	r3, r3, #1
 80159ec:	4413      	add	r3, r2
 80159ee:	00db      	lsls	r3, r3, #3
 80159f0:	3308      	adds	r3, #8
 80159f2:	4a08      	ldr	r2, [pc, #32]	; (8015a14 <etharp_output_to_arp_index+0x124>)
 80159f4:	4413      	add	r3, r2
 80159f6:	3304      	adds	r3, #4
 80159f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80159fc:	9200      	str	r2, [sp, #0]
 80159fe:	460a      	mov	r2, r1
 8015a00:	68b9      	ldr	r1, [r7, #8]
 8015a02:	68f8      	ldr	r0, [r7, #12]
 8015a04:	f001 fe7e 	bl	8017704 <ethernet_output>
 8015a08:	4603      	mov	r3, r0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3710      	adds	r7, #16
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	24009dfc 	.word	0x24009dfc
 8015a18:	0801b3a4 	.word	0x0801b3a4
 8015a1c:	0801b514 	.word	0x0801b514
 8015a20:	0801b41c 	.word	0x0801b41c

08015a24 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b08a      	sub	sp, #40	; 0x28
 8015a28:	af02      	add	r7, sp, #8
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d106      	bne.n	8015a48 <etharp_output+0x24>
 8015a3a:	4b73      	ldr	r3, [pc, #460]	; (8015c08 <etharp_output+0x1e4>)
 8015a3c:	f240 321e 	movw	r2, #798	; 0x31e
 8015a40:	4972      	ldr	r1, [pc, #456]	; (8015c0c <etharp_output+0x1e8>)
 8015a42:	4873      	ldr	r0, [pc, #460]	; (8015c10 <etharp_output+0x1ec>)
 8015a44:	f002 f958 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015a48:	68bb      	ldr	r3, [r7, #8]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d106      	bne.n	8015a5c <etharp_output+0x38>
 8015a4e:	4b6e      	ldr	r3, [pc, #440]	; (8015c08 <etharp_output+0x1e4>)
 8015a50:	f240 321f 	movw	r2, #799	; 0x31f
 8015a54:	496f      	ldr	r1, [pc, #444]	; (8015c14 <etharp_output+0x1f0>)
 8015a56:	486e      	ldr	r0, [pc, #440]	; (8015c10 <etharp_output+0x1ec>)
 8015a58:	f002 f94e 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d106      	bne.n	8015a70 <etharp_output+0x4c>
 8015a62:	4b69      	ldr	r3, [pc, #420]	; (8015c08 <etharp_output+0x1e4>)
 8015a64:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015a68:	496b      	ldr	r1, [pc, #428]	; (8015c18 <etharp_output+0x1f4>)
 8015a6a:	4869      	ldr	r0, [pc, #420]	; (8015c10 <etharp_output+0x1ec>)
 8015a6c:	f002 f944 	bl	8017cf8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	68f9      	ldr	r1, [r7, #12]
 8015a76:	4618      	mov	r0, r3
 8015a78:	f000 ff3c 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 8015a7c:	4603      	mov	r3, r0
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d002      	beq.n	8015a88 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015a82:	4b66      	ldr	r3, [pc, #408]	; (8015c1c <etharp_output+0x1f8>)
 8015a84:	61fb      	str	r3, [r7, #28]
 8015a86:	e0af      	b.n	8015be8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015a90:	2be0      	cmp	r3, #224	; 0xe0
 8015a92:	d118      	bne.n	8015ac6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015a94:	2301      	movs	r3, #1
 8015a96:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015a98:	2300      	movs	r3, #0
 8015a9a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015a9c:	235e      	movs	r3, #94	; 0x5e
 8015a9e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	3302      	adds	r3, #2
 8015ab2:	781b      	ldrb	r3, [r3, #0]
 8015ab4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	3303      	adds	r3, #3
 8015aba:	781b      	ldrb	r3, [r3, #0]
 8015abc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015abe:	f107 0310 	add.w	r3, r7, #16
 8015ac2:	61fb      	str	r3, [r7, #28]
 8015ac4:	e090      	b.n	8015be8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	3304      	adds	r3, #4
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	405a      	eors	r2, r3
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	3308      	adds	r3, #8
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	4013      	ands	r3, r2
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d012      	beq.n	8015b04 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015ae4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015ae8:	4293      	cmp	r3, r2
 8015aea:	d00b      	beq.n	8015b04 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015aec:	68fb      	ldr	r3, [r7, #12]
 8015aee:	330c      	adds	r3, #12
 8015af0:	681b      	ldr	r3, [r3, #0]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d003      	beq.n	8015afe <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	330c      	adds	r3, #12
 8015afa:	61bb      	str	r3, [r7, #24]
 8015afc:	e002      	b.n	8015b04 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015afe:	f06f 0303 	mvn.w	r3, #3
 8015b02:	e07d      	b.n	8015c00 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015b04:	4b46      	ldr	r3, [pc, #280]	; (8015c20 <etharp_output+0x1fc>)
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	4619      	mov	r1, r3
 8015b0a:	4a46      	ldr	r2, [pc, #280]	; (8015c24 <etharp_output+0x200>)
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	005b      	lsls	r3, r3, #1
 8015b10:	440b      	add	r3, r1
 8015b12:	00db      	lsls	r3, r3, #3
 8015b14:	4413      	add	r3, r2
 8015b16:	3314      	adds	r3, #20
 8015b18:	781b      	ldrb	r3, [r3, #0]
 8015b1a:	2b01      	cmp	r3, #1
 8015b1c:	d925      	bls.n	8015b6a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015b1e:	4b40      	ldr	r3, [pc, #256]	; (8015c20 <etharp_output+0x1fc>)
 8015b20:	781b      	ldrb	r3, [r3, #0]
 8015b22:	4619      	mov	r1, r3
 8015b24:	4a3f      	ldr	r2, [pc, #252]	; (8015c24 <etharp_output+0x200>)
 8015b26:	460b      	mov	r3, r1
 8015b28:	005b      	lsls	r3, r3, #1
 8015b2a:	440b      	add	r3, r1
 8015b2c:	00db      	lsls	r3, r3, #3
 8015b2e:	4413      	add	r3, r2
 8015b30:	3308      	adds	r3, #8
 8015b32:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015b34:	68fa      	ldr	r2, [r7, #12]
 8015b36:	429a      	cmp	r2, r3
 8015b38:	d117      	bne.n	8015b6a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	681a      	ldr	r2, [r3, #0]
 8015b3e:	4b38      	ldr	r3, [pc, #224]	; (8015c20 <etharp_output+0x1fc>)
 8015b40:	781b      	ldrb	r3, [r3, #0]
 8015b42:	4618      	mov	r0, r3
 8015b44:	4937      	ldr	r1, [pc, #220]	; (8015c24 <etharp_output+0x200>)
 8015b46:	4603      	mov	r3, r0
 8015b48:	005b      	lsls	r3, r3, #1
 8015b4a:	4403      	add	r3, r0
 8015b4c:	00db      	lsls	r3, r3, #3
 8015b4e:	440b      	add	r3, r1
 8015b50:	3304      	adds	r3, #4
 8015b52:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015b54:	429a      	cmp	r2, r3
 8015b56:	d108      	bne.n	8015b6a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015b58:	4b31      	ldr	r3, [pc, #196]	; (8015c20 <etharp_output+0x1fc>)
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	461a      	mov	r2, r3
 8015b5e:	68b9      	ldr	r1, [r7, #8]
 8015b60:	68f8      	ldr	r0, [r7, #12]
 8015b62:	f7ff fec5 	bl	80158f0 <etharp_output_to_arp_index>
 8015b66:	4603      	mov	r3, r0
 8015b68:	e04a      	b.n	8015c00 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015b6a:	2300      	movs	r3, #0
 8015b6c:	75fb      	strb	r3, [r7, #23]
 8015b6e:	e031      	b.n	8015bd4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b70:	7dfa      	ldrb	r2, [r7, #23]
 8015b72:	492c      	ldr	r1, [pc, #176]	; (8015c24 <etharp_output+0x200>)
 8015b74:	4613      	mov	r3, r2
 8015b76:	005b      	lsls	r3, r3, #1
 8015b78:	4413      	add	r3, r2
 8015b7a:	00db      	lsls	r3, r3, #3
 8015b7c:	440b      	add	r3, r1
 8015b7e:	3314      	adds	r3, #20
 8015b80:	781b      	ldrb	r3, [r3, #0]
 8015b82:	2b01      	cmp	r3, #1
 8015b84:	d923      	bls.n	8015bce <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015b86:	7dfa      	ldrb	r2, [r7, #23]
 8015b88:	4926      	ldr	r1, [pc, #152]	; (8015c24 <etharp_output+0x200>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	3308      	adds	r3, #8
 8015b96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015b98:	68fa      	ldr	r2, [r7, #12]
 8015b9a:	429a      	cmp	r2, r3
 8015b9c:	d117      	bne.n	8015bce <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015b9e:	69bb      	ldr	r3, [r7, #24]
 8015ba0:	6819      	ldr	r1, [r3, #0]
 8015ba2:	7dfa      	ldrb	r2, [r7, #23]
 8015ba4:	481f      	ldr	r0, [pc, #124]	; (8015c24 <etharp_output+0x200>)
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	005b      	lsls	r3, r3, #1
 8015baa:	4413      	add	r3, r2
 8015bac:	00db      	lsls	r3, r3, #3
 8015bae:	4403      	add	r3, r0
 8015bb0:	3304      	adds	r3, #4
 8015bb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015bb4:	4299      	cmp	r1, r3
 8015bb6:	d10a      	bne.n	8015bce <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015bb8:	4a19      	ldr	r2, [pc, #100]	; (8015c20 <etharp_output+0x1fc>)
 8015bba:	7dfb      	ldrb	r3, [r7, #23]
 8015bbc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015bbe:	7dfb      	ldrb	r3, [r7, #23]
 8015bc0:	461a      	mov	r2, r3
 8015bc2:	68b9      	ldr	r1, [r7, #8]
 8015bc4:	68f8      	ldr	r0, [r7, #12]
 8015bc6:	f7ff fe93 	bl	80158f0 <etharp_output_to_arp_index>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	e018      	b.n	8015c00 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015bce:	7dfb      	ldrb	r3, [r7, #23]
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	75fb      	strb	r3, [r7, #23]
 8015bd4:	7dfb      	ldrb	r3, [r7, #23]
 8015bd6:	2b09      	cmp	r3, #9
 8015bd8:	d9ca      	bls.n	8015b70 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015bda:	68ba      	ldr	r2, [r7, #8]
 8015bdc:	69b9      	ldr	r1, [r7, #24]
 8015bde:	68f8      	ldr	r0, [r7, #12]
 8015be0:	f000 f822 	bl	8015c28 <etharp_query>
 8015be4:	4603      	mov	r3, r0
 8015be6:	e00b      	b.n	8015c00 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015bf2:	9300      	str	r3, [sp, #0]
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	68b9      	ldr	r1, [r7, #8]
 8015bf8:	68f8      	ldr	r0, [r7, #12]
 8015bfa:	f001 fd83 	bl	8017704 <ethernet_output>
 8015bfe:	4603      	mov	r3, r0
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3720      	adds	r7, #32
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	0801b3a4 	.word	0x0801b3a4
 8015c0c:	0801b4f4 	.word	0x0801b4f4
 8015c10:	0801b41c 	.word	0x0801b41c
 8015c14:	0801b544 	.word	0x0801b544
 8015c18:	0801b4e4 	.word	0x0801b4e4
 8015c1c:	0801bbd4 	.word	0x0801bbd4
 8015c20:	24009eec 	.word	0x24009eec
 8015c24:	24009dfc 	.word	0x24009dfc

08015c28 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b08c      	sub	sp, #48	; 0x30
 8015c2c:	af02      	add	r7, sp, #8
 8015c2e:	60f8      	str	r0, [r7, #12]
 8015c30:	60b9      	str	r1, [r7, #8]
 8015c32:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	332a      	adds	r3, #42	; 0x2a
 8015c38:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015c3a:	23ff      	movs	r3, #255	; 0xff
 8015c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015c40:	2300      	movs	r3, #0
 8015c42:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c44:	68bb      	ldr	r3, [r7, #8]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	68f9      	ldr	r1, [r7, #12]
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	f000 fe52 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d10c      	bne.n	8015c70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015c5e:	2be0      	cmp	r3, #224	; 0xe0
 8015c60:	d006      	beq.n	8015c70 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d003      	beq.n	8015c70 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015c68:	68bb      	ldr	r3, [r7, #8]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d102      	bne.n	8015c76 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015c70:	f06f 030f 	mvn.w	r3, #15
 8015c74:	e101      	b.n	8015e7a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015c76:	68fa      	ldr	r2, [r7, #12]
 8015c78:	2101      	movs	r1, #1
 8015c7a:	68b8      	ldr	r0, [r7, #8]
 8015c7c:	f7ff fb5c 	bl	8015338 <etharp_find_entry>
 8015c80:	4603      	mov	r3, r0
 8015c82:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015c84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	da02      	bge.n	8015c92 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015c8c:	8a7b      	ldrh	r3, [r7, #18]
 8015c8e:	b25b      	sxtb	r3, r3
 8015c90:	e0f3      	b.n	8015e7a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015c92:	8a7b      	ldrh	r3, [r7, #18]
 8015c94:	2b7e      	cmp	r3, #126	; 0x7e
 8015c96:	d906      	bls.n	8015ca6 <etharp_query+0x7e>
 8015c98:	4b7a      	ldr	r3, [pc, #488]	; (8015e84 <etharp_query+0x25c>)
 8015c9a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015c9e:	497a      	ldr	r1, [pc, #488]	; (8015e88 <etharp_query+0x260>)
 8015ca0:	487a      	ldr	r0, [pc, #488]	; (8015e8c <etharp_query+0x264>)
 8015ca2:	f002 f829 	bl	8017cf8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015ca6:	8a7b      	ldrh	r3, [r7, #18]
 8015ca8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015caa:	7c7a      	ldrb	r2, [r7, #17]
 8015cac:	4978      	ldr	r1, [pc, #480]	; (8015e90 <etharp_query+0x268>)
 8015cae:	4613      	mov	r3, r2
 8015cb0:	005b      	lsls	r3, r3, #1
 8015cb2:	4413      	add	r3, r2
 8015cb4:	00db      	lsls	r3, r3, #3
 8015cb6:	440b      	add	r3, r1
 8015cb8:	3314      	adds	r3, #20
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d115      	bne.n	8015cec <etharp_query+0xc4>
    is_new_entry = 1;
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015cc4:	7c7a      	ldrb	r2, [r7, #17]
 8015cc6:	4972      	ldr	r1, [pc, #456]	; (8015e90 <etharp_query+0x268>)
 8015cc8:	4613      	mov	r3, r2
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	4413      	add	r3, r2
 8015cce:	00db      	lsls	r3, r3, #3
 8015cd0:	440b      	add	r3, r1
 8015cd2:	3314      	adds	r3, #20
 8015cd4:	2201      	movs	r2, #1
 8015cd6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015cd8:	7c7a      	ldrb	r2, [r7, #17]
 8015cda:	496d      	ldr	r1, [pc, #436]	; (8015e90 <etharp_query+0x268>)
 8015cdc:	4613      	mov	r3, r2
 8015cde:	005b      	lsls	r3, r3, #1
 8015ce0:	4413      	add	r3, r2
 8015ce2:	00db      	lsls	r3, r3, #3
 8015ce4:	440b      	add	r3, r1
 8015ce6:	3308      	adds	r3, #8
 8015ce8:	68fa      	ldr	r2, [r7, #12]
 8015cea:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015cec:	7c7a      	ldrb	r2, [r7, #17]
 8015cee:	4968      	ldr	r1, [pc, #416]	; (8015e90 <etharp_query+0x268>)
 8015cf0:	4613      	mov	r3, r2
 8015cf2:	005b      	lsls	r3, r3, #1
 8015cf4:	4413      	add	r3, r2
 8015cf6:	00db      	lsls	r3, r3, #3
 8015cf8:	440b      	add	r3, r1
 8015cfa:	3314      	adds	r3, #20
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	2b01      	cmp	r3, #1
 8015d00:	d011      	beq.n	8015d26 <etharp_query+0xfe>
 8015d02:	7c7a      	ldrb	r2, [r7, #17]
 8015d04:	4962      	ldr	r1, [pc, #392]	; (8015e90 <etharp_query+0x268>)
 8015d06:	4613      	mov	r3, r2
 8015d08:	005b      	lsls	r3, r3, #1
 8015d0a:	4413      	add	r3, r2
 8015d0c:	00db      	lsls	r3, r3, #3
 8015d0e:	440b      	add	r3, r1
 8015d10:	3314      	adds	r3, #20
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	2b01      	cmp	r3, #1
 8015d16:	d806      	bhi.n	8015d26 <etharp_query+0xfe>
 8015d18:	4b5a      	ldr	r3, [pc, #360]	; (8015e84 <etharp_query+0x25c>)
 8015d1a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015d1e:	495d      	ldr	r1, [pc, #372]	; (8015e94 <etharp_query+0x26c>)
 8015d20:	485a      	ldr	r0, [pc, #360]	; (8015e8c <etharp_query+0x264>)
 8015d22:	f001 ffe9 	bl	8017cf8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015d26:	6a3b      	ldr	r3, [r7, #32]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d102      	bne.n	8015d32 <etharp_query+0x10a>
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d10c      	bne.n	8015d4c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015d32:	68b9      	ldr	r1, [r7, #8]
 8015d34:	68f8      	ldr	r0, [r7, #12]
 8015d36:	f000 f963 	bl	8016000 <etharp_request>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d102      	bne.n	8015d4c <etharp_query+0x124>
      return result;
 8015d46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015d4a:	e096      	b.n	8015e7a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d106      	bne.n	8015d60 <etharp_query+0x138>
 8015d52:	4b4c      	ldr	r3, [pc, #304]	; (8015e84 <etharp_query+0x25c>)
 8015d54:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015d58:	494f      	ldr	r1, [pc, #316]	; (8015e98 <etharp_query+0x270>)
 8015d5a:	484c      	ldr	r0, [pc, #304]	; (8015e8c <etharp_query+0x264>)
 8015d5c:	f001 ffcc 	bl	8017cf8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015d60:	7c7a      	ldrb	r2, [r7, #17]
 8015d62:	494b      	ldr	r1, [pc, #300]	; (8015e90 <etharp_query+0x268>)
 8015d64:	4613      	mov	r3, r2
 8015d66:	005b      	lsls	r3, r3, #1
 8015d68:	4413      	add	r3, r2
 8015d6a:	00db      	lsls	r3, r3, #3
 8015d6c:	440b      	add	r3, r1
 8015d6e:	3314      	adds	r3, #20
 8015d70:	781b      	ldrb	r3, [r3, #0]
 8015d72:	2b01      	cmp	r3, #1
 8015d74:	d917      	bls.n	8015da6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015d76:	4a49      	ldr	r2, [pc, #292]	; (8015e9c <etharp_query+0x274>)
 8015d78:	7c7b      	ldrb	r3, [r7, #17]
 8015d7a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015d7c:	7c7a      	ldrb	r2, [r7, #17]
 8015d7e:	4613      	mov	r3, r2
 8015d80:	005b      	lsls	r3, r3, #1
 8015d82:	4413      	add	r3, r2
 8015d84:	00db      	lsls	r3, r3, #3
 8015d86:	3308      	adds	r3, #8
 8015d88:	4a41      	ldr	r2, [pc, #260]	; (8015e90 <etharp_query+0x268>)
 8015d8a:	4413      	add	r3, r2
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015d92:	9200      	str	r2, [sp, #0]
 8015d94:	697a      	ldr	r2, [r7, #20]
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	68f8      	ldr	r0, [r7, #12]
 8015d9a:	f001 fcb3 	bl	8017704 <ethernet_output>
 8015d9e:	4603      	mov	r3, r0
 8015da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015da4:	e067      	b.n	8015e76 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015da6:	7c7a      	ldrb	r2, [r7, #17]
 8015da8:	4939      	ldr	r1, [pc, #228]	; (8015e90 <etharp_query+0x268>)
 8015daa:	4613      	mov	r3, r2
 8015dac:	005b      	lsls	r3, r3, #1
 8015dae:	4413      	add	r3, r2
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	440b      	add	r3, r1
 8015db4:	3314      	adds	r3, #20
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	2b01      	cmp	r3, #1
 8015dba:	d15c      	bne.n	8015e76 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015dc4:	e01c      	b.n	8015e00 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015dc6:	69fb      	ldr	r3, [r7, #28]
 8015dc8:	895a      	ldrh	r2, [r3, #10]
 8015dca:	69fb      	ldr	r3, [r7, #28]
 8015dcc:	891b      	ldrh	r3, [r3, #8]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d10a      	bne.n	8015de8 <etharp_query+0x1c0>
 8015dd2:	69fb      	ldr	r3, [r7, #28]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d006      	beq.n	8015de8 <etharp_query+0x1c0>
 8015dda:	4b2a      	ldr	r3, [pc, #168]	; (8015e84 <etharp_query+0x25c>)
 8015ddc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015de0:	492f      	ldr	r1, [pc, #188]	; (8015ea0 <etharp_query+0x278>)
 8015de2:	482a      	ldr	r0, [pc, #168]	; (8015e8c <etharp_query+0x264>)
 8015de4:	f001 ff88 	bl	8017cf8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	7b1b      	ldrb	r3, [r3, #12]
 8015dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d002      	beq.n	8015dfa <etharp_query+0x1d2>
        copy_needed = 1;
 8015df4:	2301      	movs	r3, #1
 8015df6:	61bb      	str	r3, [r7, #24]
        break;
 8015df8:	e005      	b.n	8015e06 <etharp_query+0x1de>
      }
      p = p->next;
 8015dfa:	69fb      	ldr	r3, [r7, #28]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e00:	69fb      	ldr	r3, [r7, #28]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d1df      	bne.n	8015dc6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015e06:	69bb      	ldr	r3, [r7, #24]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d007      	beq.n	8015e1c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015e12:	200e      	movs	r0, #14
 8015e14:	f7f7 fb62 	bl	800d4dc <pbuf_clone>
 8015e18:	61f8      	str	r0, [r7, #28]
 8015e1a:	e004      	b.n	8015e26 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015e20:	69f8      	ldr	r0, [r7, #28]
 8015e22:	f7f7 f989 	bl	800d138 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015e26:	69fb      	ldr	r3, [r7, #28]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d021      	beq.n	8015e70 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015e2c:	7c7a      	ldrb	r2, [r7, #17]
 8015e2e:	4918      	ldr	r1, [pc, #96]	; (8015e90 <etharp_query+0x268>)
 8015e30:	4613      	mov	r3, r2
 8015e32:	005b      	lsls	r3, r3, #1
 8015e34:	4413      	add	r3, r2
 8015e36:	00db      	lsls	r3, r3, #3
 8015e38:	440b      	add	r3, r1
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d00a      	beq.n	8015e56 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015e40:	7c7a      	ldrb	r2, [r7, #17]
 8015e42:	4913      	ldr	r1, [pc, #76]	; (8015e90 <etharp_query+0x268>)
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	440b      	add	r3, r1
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7f7 f8cb 	bl	800cfec <pbuf_free>
      }
      arp_table[i].q = p;
 8015e56:	7c7a      	ldrb	r2, [r7, #17]
 8015e58:	490d      	ldr	r1, [pc, #52]	; (8015e90 <etharp_query+0x268>)
 8015e5a:	4613      	mov	r3, r2
 8015e5c:	005b      	lsls	r3, r3, #1
 8015e5e:	4413      	add	r3, r2
 8015e60:	00db      	lsls	r3, r3, #3
 8015e62:	440b      	add	r3, r1
 8015e64:	69fa      	ldr	r2, [r7, #28]
 8015e66:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015e68:	2300      	movs	r3, #0
 8015e6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e6e:	e002      	b.n	8015e76 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015e70:	23ff      	movs	r3, #255	; 0xff
 8015e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015e76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3728      	adds	r7, #40	; 0x28
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	0801b3a4 	.word	0x0801b3a4
 8015e88:	0801b550 	.word	0x0801b550
 8015e8c:	0801b41c 	.word	0x0801b41c
 8015e90:	24009dfc 	.word	0x24009dfc
 8015e94:	0801b560 	.word	0x0801b560
 8015e98:	0801b544 	.word	0x0801b544
 8015e9c:	24009eec 	.word	0x24009eec
 8015ea0:	0801b588 	.word	0x0801b588

08015ea4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b08a      	sub	sp, #40	; 0x28
 8015ea8:	af02      	add	r7, sp, #8
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	60b9      	str	r1, [r7, #8]
 8015eae:	607a      	str	r2, [r7, #4]
 8015eb0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d106      	bne.n	8015eca <etharp_raw+0x26>
 8015ebc:	4b3a      	ldr	r3, [pc, #232]	; (8015fa8 <etharp_raw+0x104>)
 8015ebe:	f240 4257 	movw	r2, #1111	; 0x457
 8015ec2:	493a      	ldr	r1, [pc, #232]	; (8015fac <etharp_raw+0x108>)
 8015ec4:	483a      	ldr	r0, [pc, #232]	; (8015fb0 <etharp_raw+0x10c>)
 8015ec6:	f001 ff17 	bl	8017cf8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015eca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ece:	211c      	movs	r1, #28
 8015ed0:	200e      	movs	r0, #14
 8015ed2:	f7f6 fda7 	bl	800ca24 <pbuf_alloc>
 8015ed6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015ed8:	69bb      	ldr	r3, [r7, #24]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d102      	bne.n	8015ee4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ee2:	e05d      	b.n	8015fa0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015ee4:	69bb      	ldr	r3, [r7, #24]
 8015ee6:	895b      	ldrh	r3, [r3, #10]
 8015ee8:	2b1b      	cmp	r3, #27
 8015eea:	d806      	bhi.n	8015efa <etharp_raw+0x56>
 8015eec:	4b2e      	ldr	r3, [pc, #184]	; (8015fa8 <etharp_raw+0x104>)
 8015eee:	f240 4262 	movw	r2, #1122	; 0x462
 8015ef2:	4930      	ldr	r1, [pc, #192]	; (8015fb4 <etharp_raw+0x110>)
 8015ef4:	482e      	ldr	r0, [pc, #184]	; (8015fb0 <etharp_raw+0x10c>)
 8015ef6:	f001 feff 	bl	8017cf8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015efa:	69bb      	ldr	r3, [r7, #24]
 8015efc:	685b      	ldr	r3, [r3, #4]
 8015efe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015f00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015f02:	4618      	mov	r0, r3
 8015f04:	f7f5 fbbc 	bl	800b680 <lwip_htons>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015f16:	2b06      	cmp	r3, #6
 8015f18:	d006      	beq.n	8015f28 <etharp_raw+0x84>
 8015f1a:	4b23      	ldr	r3, [pc, #140]	; (8015fa8 <etharp_raw+0x104>)
 8015f1c:	f240 4269 	movw	r2, #1129	; 0x469
 8015f20:	4925      	ldr	r1, [pc, #148]	; (8015fb8 <etharp_raw+0x114>)
 8015f22:	4823      	ldr	r0, [pc, #140]	; (8015fb0 <etharp_raw+0x10c>)
 8015f24:	f001 fee8 	bl	8017cf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015f28:	697b      	ldr	r3, [r7, #20]
 8015f2a:	3308      	adds	r3, #8
 8015f2c:	2206      	movs	r2, #6
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	4618      	mov	r0, r3
 8015f32:	f001 fe70 	bl	8017c16 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015f36:	697b      	ldr	r3, [r7, #20]
 8015f38:	3312      	adds	r3, #18
 8015f3a:	2206      	movs	r2, #6
 8015f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f001 fe69 	bl	8017c16 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015f44:	697b      	ldr	r3, [r7, #20]
 8015f46:	330e      	adds	r3, #14
 8015f48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015f4a:	6812      	ldr	r2, [r2, #0]
 8015f4c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8015f4e:	697b      	ldr	r3, [r7, #20]
 8015f50:	3318      	adds	r3, #24
 8015f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f54:	6812      	ldr	r2, [r2, #0]
 8015f56:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015f58:	697b      	ldr	r3, [r7, #20]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	701a      	strb	r2, [r3, #0]
 8015f5e:	2200      	movs	r2, #0
 8015f60:	f042 0201 	orr.w	r2, r2, #1
 8015f64:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	f042 0208 	orr.w	r2, r2, #8
 8015f6e:	709a      	strb	r2, [r3, #2]
 8015f70:	2200      	movs	r2, #0
 8015f72:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015f74:	697b      	ldr	r3, [r7, #20]
 8015f76:	2206      	movs	r2, #6
 8015f78:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015f7a:	697b      	ldr	r3, [r7, #20]
 8015f7c:	2204      	movs	r2, #4
 8015f7e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015f80:	f640 0306 	movw	r3, #2054	; 0x806
 8015f84:	9300      	str	r3, [sp, #0]
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	68ba      	ldr	r2, [r7, #8]
 8015f8a:	69b9      	ldr	r1, [r7, #24]
 8015f8c:	68f8      	ldr	r0, [r7, #12]
 8015f8e:	f001 fbb9 	bl	8017704 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015f92:	69b8      	ldr	r0, [r7, #24]
 8015f94:	f7f7 f82a 	bl	800cfec <pbuf_free>
  p = NULL;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015f9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3720      	adds	r7, #32
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	0801b3a4 	.word	0x0801b3a4
 8015fac:	0801b4f4 	.word	0x0801b4f4
 8015fb0:	0801b41c 	.word	0x0801b41c
 8015fb4:	0801b5a4 	.word	0x0801b5a4
 8015fb8:	0801b5d8 	.word	0x0801b5d8

08015fbc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b088      	sub	sp, #32
 8015fc0:	af04      	add	r7, sp, #16
 8015fc2:	60f8      	str	r0, [r7, #12]
 8015fc4:	60b9      	str	r1, [r7, #8]
 8015fc6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015fd8:	2201      	movs	r2, #1
 8015fda:	9203      	str	r2, [sp, #12]
 8015fdc:	68ba      	ldr	r2, [r7, #8]
 8015fde:	9202      	str	r2, [sp, #8]
 8015fe0:	4a06      	ldr	r2, [pc, #24]	; (8015ffc <etharp_request_dst+0x40>)
 8015fe2:	9201      	str	r2, [sp, #4]
 8015fe4:	9300      	str	r3, [sp, #0]
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	687a      	ldr	r2, [r7, #4]
 8015fea:	68f8      	ldr	r0, [r7, #12]
 8015fec:	f7ff ff5a 	bl	8015ea4 <etharp_raw>
 8015ff0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	3710      	adds	r7, #16
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}
 8015ffa:	bf00      	nop
 8015ffc:	0801bbdc 	.word	0x0801bbdc

08016000 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b082      	sub	sp, #8
 8016004:	af00      	add	r7, sp, #0
 8016006:	6078      	str	r0, [r7, #4]
 8016008:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801600a:	4a05      	ldr	r2, [pc, #20]	; (8016020 <etharp_request+0x20>)
 801600c:	6839      	ldr	r1, [r7, #0]
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff ffd4 	bl	8015fbc <etharp_request_dst>
 8016014:	4603      	mov	r3, r0
}
 8016016:	4618      	mov	r0, r3
 8016018:	3708      	adds	r7, #8
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}
 801601e:	bf00      	nop
 8016020:	0801bbd4 	.word	0x0801bbd4

08016024 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b08e      	sub	sp, #56	; 0x38
 8016028:	af04      	add	r7, sp, #16
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801602e:	4b87      	ldr	r3, [pc, #540]	; (801624c <icmp_input+0x228>)
 8016030:	689b      	ldr	r3, [r3, #8]
 8016032:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	f003 030f 	and.w	r3, r3, #15
 801603c:	b2db      	uxtb	r3, r3
 801603e:	009b      	lsls	r3, r3, #2
 8016040:	b2db      	uxtb	r3, r3
 8016042:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016046:	2b13      	cmp	r3, #19
 8016048:	f240 80e8 	bls.w	801621c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	895b      	ldrh	r3, [r3, #10]
 8016050:	2b03      	cmp	r3, #3
 8016052:	f240 80e5 	bls.w	8016220 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	685b      	ldr	r3, [r3, #4]
 801605a:	781b      	ldrb	r3, [r3, #0]
 801605c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016060:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016064:	2b00      	cmp	r3, #0
 8016066:	f000 80d2 	beq.w	801620e <icmp_input+0x1ea>
 801606a:	2b08      	cmp	r3, #8
 801606c:	f040 80d2 	bne.w	8016214 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016070:	4b77      	ldr	r3, [pc, #476]	; (8016250 <icmp_input+0x22c>)
 8016072:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016074:	4b75      	ldr	r3, [pc, #468]	; (801624c <icmp_input+0x228>)
 8016076:	695b      	ldr	r3, [r3, #20]
 8016078:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801607c:	2be0      	cmp	r3, #224	; 0xe0
 801607e:	f000 80d6 	beq.w	801622e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016082:	4b72      	ldr	r3, [pc, #456]	; (801624c <icmp_input+0x228>)
 8016084:	695b      	ldr	r3, [r3, #20]
 8016086:	4a71      	ldr	r2, [pc, #452]	; (801624c <icmp_input+0x228>)
 8016088:	6812      	ldr	r2, [r2, #0]
 801608a:	4611      	mov	r1, r2
 801608c:	4618      	mov	r0, r3
 801608e:	f000 fc31 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 8016092:	4603      	mov	r3, r0
 8016094:	2b00      	cmp	r3, #0
 8016096:	f040 80cc 	bne.w	8016232 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	891b      	ldrh	r3, [r3, #8]
 801609e:	2b07      	cmp	r3, #7
 80160a0:	f240 80c0 	bls.w	8016224 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f7f5 fb88 	bl	800b7ba <inet_chksum_pbuf>
 80160aa:	4603      	mov	r3, r0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d003      	beq.n	80160b8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f7f6 ff9b 	bl	800cfec <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80160b6:	e0c5      	b.n	8016244 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80160b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160ba:	330e      	adds	r3, #14
 80160bc:	4619      	mov	r1, r3
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f7f6 fefe 	bl	800cec0 <pbuf_add_header>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d04b      	beq.n	8016162 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	891a      	ldrh	r2, [r3, #8]
 80160ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80160d0:	4413      	add	r3, r2
 80160d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	891b      	ldrh	r3, [r3, #8]
 80160d8:	8b7a      	ldrh	r2, [r7, #26]
 80160da:	429a      	cmp	r2, r3
 80160dc:	f0c0 80ab 	bcc.w	8016236 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80160e0:	8b7b      	ldrh	r3, [r7, #26]
 80160e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80160e6:	4619      	mov	r1, r3
 80160e8:	200e      	movs	r0, #14
 80160ea:	f7f6 fc9b 	bl	800ca24 <pbuf_alloc>
 80160ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	f000 80a1 	beq.w	801623a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80160f8:	697b      	ldr	r3, [r7, #20]
 80160fa:	895b      	ldrh	r3, [r3, #10]
 80160fc:	461a      	mov	r2, r3
 80160fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016100:	3308      	adds	r3, #8
 8016102:	429a      	cmp	r2, r3
 8016104:	d203      	bcs.n	801610e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016106:	6978      	ldr	r0, [r7, #20]
 8016108:	f7f6 ff70 	bl	800cfec <pbuf_free>
          goto icmperr;
 801610c:	e096      	b.n	801623c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801610e:	697b      	ldr	r3, [r7, #20]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016116:	4618      	mov	r0, r3
 8016118:	f001 fd7d 	bl	8017c16 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801611c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801611e:	4619      	mov	r1, r3
 8016120:	6978      	ldr	r0, [r7, #20]
 8016122:	f7f6 fedd 	bl	800cee0 <pbuf_remove_header>
 8016126:	4603      	mov	r3, r0
 8016128:	2b00      	cmp	r3, #0
 801612a:	d009      	beq.n	8016140 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801612c:	4b49      	ldr	r3, [pc, #292]	; (8016254 <icmp_input+0x230>)
 801612e:	22b6      	movs	r2, #182	; 0xb6
 8016130:	4949      	ldr	r1, [pc, #292]	; (8016258 <icmp_input+0x234>)
 8016132:	484a      	ldr	r0, [pc, #296]	; (801625c <icmp_input+0x238>)
 8016134:	f001 fde0 	bl	8017cf8 <iprintf>
          pbuf_free(r);
 8016138:	6978      	ldr	r0, [r7, #20]
 801613a:	f7f6 ff57 	bl	800cfec <pbuf_free>
          goto icmperr;
 801613e:	e07d      	b.n	801623c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016140:	6879      	ldr	r1, [r7, #4]
 8016142:	6978      	ldr	r0, [r7, #20]
 8016144:	f7f7 f886 	bl	800d254 <pbuf_copy>
 8016148:	4603      	mov	r3, r0
 801614a:	2b00      	cmp	r3, #0
 801614c:	d003      	beq.n	8016156 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801614e:	6978      	ldr	r0, [r7, #20]
 8016150:	f7f6 ff4c 	bl	800cfec <pbuf_free>
          goto icmperr;
 8016154:	e072      	b.n	801623c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f7f6 ff48 	bl	800cfec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	607b      	str	r3, [r7, #4]
 8016160:	e00f      	b.n	8016182 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016164:	330e      	adds	r3, #14
 8016166:	4619      	mov	r1, r3
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f7f6 feb9 	bl	800cee0 <pbuf_remove_header>
 801616e:	4603      	mov	r3, r0
 8016170:	2b00      	cmp	r3, #0
 8016172:	d006      	beq.n	8016182 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016174:	4b37      	ldr	r3, [pc, #220]	; (8016254 <icmp_input+0x230>)
 8016176:	22c7      	movs	r2, #199	; 0xc7
 8016178:	4939      	ldr	r1, [pc, #228]	; (8016260 <icmp_input+0x23c>)
 801617a:	4838      	ldr	r0, [pc, #224]	; (801625c <icmp_input+0x238>)
 801617c:	f001 fdbc 	bl	8017cf8 <iprintf>
          goto icmperr;
 8016180:	e05c      	b.n	801623c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801618a:	4619      	mov	r1, r3
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f7f6 fe97 	bl	800cec0 <pbuf_add_header>
 8016192:	4603      	mov	r3, r0
 8016194:	2b00      	cmp	r3, #0
 8016196:	d13c      	bne.n	8016212 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	685b      	ldr	r3, [r3, #4]
 801619c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	681a      	ldr	r2, [r3, #0]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80161a6:	4b29      	ldr	r3, [pc, #164]	; (801624c <icmp_input+0x228>)
 80161a8:	691a      	ldr	r2, [r3, #16]
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80161ae:	693b      	ldr	r3, [r7, #16]
 80161b0:	2200      	movs	r2, #0
 80161b2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80161b4:	693b      	ldr	r3, [r7, #16]
 80161b6:	885b      	ldrh	r3, [r3, #2]
 80161b8:	b29b      	uxth	r3, r3
 80161ba:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80161be:	4293      	cmp	r3, r2
 80161c0:	d907      	bls.n	80161d2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	885b      	ldrh	r3, [r3, #2]
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	3309      	adds	r3, #9
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	693b      	ldr	r3, [r7, #16]
 80161ce:	805a      	strh	r2, [r3, #2]
 80161d0:	e006      	b.n	80161e0 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80161d2:	693b      	ldr	r3, [r7, #16]
 80161d4:	885b      	ldrh	r3, [r3, #2]
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	3308      	adds	r3, #8
 80161da:	b29a      	uxth	r2, r3
 80161dc:	693b      	ldr	r3, [r7, #16]
 80161de:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	22ff      	movs	r2, #255	; 0xff
 80161e4:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	2200      	movs	r2, #0
 80161ea:	729a      	strb	r2, [r3, #10]
 80161ec:	2200      	movs	r2, #0
 80161ee:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80161f0:	683b      	ldr	r3, [r7, #0]
 80161f2:	9302      	str	r3, [sp, #8]
 80161f4:	2301      	movs	r3, #1
 80161f6:	9301      	str	r3, [sp, #4]
 80161f8:	2300      	movs	r3, #0
 80161fa:	9300      	str	r3, [sp, #0]
 80161fc:	23ff      	movs	r3, #255	; 0xff
 80161fe:	2200      	movs	r2, #0
 8016200:	69f9      	ldr	r1, [r7, #28]
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 fa9e 	bl	8016744 <ip4_output_if>
 8016208:	4603      	mov	r3, r0
 801620a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801620c:	e001      	b.n	8016212 <icmp_input+0x1ee>
      break;
 801620e:	bf00      	nop
 8016210:	e000      	b.n	8016214 <icmp_input+0x1f0>
      break;
 8016212:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f7f6 fee9 	bl	800cfec <pbuf_free>
  return;
 801621a:	e013      	b.n	8016244 <icmp_input+0x220>
    goto lenerr;
 801621c:	bf00      	nop
 801621e:	e002      	b.n	8016226 <icmp_input+0x202>
    goto lenerr;
 8016220:	bf00      	nop
 8016222:	e000      	b.n	8016226 <icmp_input+0x202>
        goto lenerr;
 8016224:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016226:	6878      	ldr	r0, [r7, #4]
 8016228:	f7f6 fee0 	bl	800cfec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801622c:	e00a      	b.n	8016244 <icmp_input+0x220>
        goto icmperr;
 801622e:	bf00      	nop
 8016230:	e004      	b.n	801623c <icmp_input+0x218>
        goto icmperr;
 8016232:	bf00      	nop
 8016234:	e002      	b.n	801623c <icmp_input+0x218>
          goto icmperr;
 8016236:	bf00      	nop
 8016238:	e000      	b.n	801623c <icmp_input+0x218>
          goto icmperr;
 801623a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f7f6 fed5 	bl	800cfec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016242:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016244:	3728      	adds	r7, #40	; 0x28
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	2400a5dc 	.word	0x2400a5dc
 8016250:	2400a5f0 	.word	0x2400a5f0
 8016254:	0801b61c 	.word	0x0801b61c
 8016258:	0801b654 	.word	0x0801b654
 801625c:	0801b68c 	.word	0x0801b68c
 8016260:	0801b6b4 	.word	0x0801b6b4

08016264 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	460b      	mov	r3, r1
 801626e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016270:	78fb      	ldrb	r3, [r7, #3]
 8016272:	461a      	mov	r2, r3
 8016274:	2103      	movs	r1, #3
 8016276:	6878      	ldr	r0, [r7, #4]
 8016278:	f000 f814 	bl	80162a4 <icmp_send_response>
}
 801627c:	bf00      	nop
 801627e:	3708      	adds	r7, #8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
 801628a:	6078      	str	r0, [r7, #4]
 801628c:	460b      	mov	r3, r1
 801628e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016290:	78fb      	ldrb	r3, [r7, #3]
 8016292:	461a      	mov	r2, r3
 8016294:	210b      	movs	r1, #11
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 f804 	bl	80162a4 <icmp_send_response>
}
 801629c:	bf00      	nop
 801629e:	3708      	adds	r7, #8
 80162a0:	46bd      	mov	sp, r7
 80162a2:	bd80      	pop	{r7, pc}

080162a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b08c      	sub	sp, #48	; 0x30
 80162a8:	af04      	add	r7, sp, #16
 80162aa:	6078      	str	r0, [r7, #4]
 80162ac:	460b      	mov	r3, r1
 80162ae:	70fb      	strb	r3, [r7, #3]
 80162b0:	4613      	mov	r3, r2
 80162b2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80162b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162b8:	2124      	movs	r1, #36	; 0x24
 80162ba:	2022      	movs	r0, #34	; 0x22
 80162bc:	f7f6 fbb2 	bl	800ca24 <pbuf_alloc>
 80162c0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d056      	beq.n	8016376 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	895b      	ldrh	r3, [r3, #10]
 80162cc:	2b23      	cmp	r3, #35	; 0x23
 80162ce:	d806      	bhi.n	80162de <icmp_send_response+0x3a>
 80162d0:	4b2b      	ldr	r3, [pc, #172]	; (8016380 <icmp_send_response+0xdc>)
 80162d2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80162d6:	492b      	ldr	r1, [pc, #172]	; (8016384 <icmp_send_response+0xe0>)
 80162d8:	482b      	ldr	r0, [pc, #172]	; (8016388 <icmp_send_response+0xe4>)
 80162da:	f001 fd0d 	bl	8017cf8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80162e4:	69fb      	ldr	r3, [r7, #28]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	78fa      	ldrb	r2, [r7, #3]
 80162ee:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	78ba      	ldrb	r2, [r7, #2]
 80162f4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	2200      	movs	r2, #0
 80162fa:	711a      	strb	r2, [r3, #4]
 80162fc:	2200      	movs	r2, #0
 80162fe:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	2200      	movs	r2, #0
 8016304:	719a      	strb	r2, [r3, #6]
 8016306:	2200      	movs	r2, #0
 8016308:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801630a:	69fb      	ldr	r3, [r7, #28]
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	f103 0008 	add.w	r0, r3, #8
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	221c      	movs	r2, #28
 8016318:	4619      	mov	r1, r3
 801631a:	f001 fc7c 	bl	8017c16 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801631e:	69bb      	ldr	r3, [r7, #24]
 8016320:	68db      	ldr	r3, [r3, #12]
 8016322:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016324:	f107 030c 	add.w	r3, r7, #12
 8016328:	4618      	mov	r0, r3
 801632a:	f000 f82f 	bl	801638c <ip4_route>
 801632e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016330:	693b      	ldr	r3, [r7, #16]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d01b      	beq.n	801636e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	2200      	movs	r2, #0
 801633a:	709a      	strb	r2, [r3, #2]
 801633c:	2200      	movs	r2, #0
 801633e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016340:	69fb      	ldr	r3, [r7, #28]
 8016342:	895b      	ldrh	r3, [r3, #10]
 8016344:	4619      	mov	r1, r3
 8016346:	6978      	ldr	r0, [r7, #20]
 8016348:	f7f5 fa25 	bl	800b796 <inet_chksum>
 801634c:	4603      	mov	r3, r0
 801634e:	461a      	mov	r2, r3
 8016350:	697b      	ldr	r3, [r7, #20]
 8016352:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016354:	f107 020c 	add.w	r2, r7, #12
 8016358:	693b      	ldr	r3, [r7, #16]
 801635a:	9302      	str	r3, [sp, #8]
 801635c:	2301      	movs	r3, #1
 801635e:	9301      	str	r3, [sp, #4]
 8016360:	2300      	movs	r3, #0
 8016362:	9300      	str	r3, [sp, #0]
 8016364:	23ff      	movs	r3, #255	; 0xff
 8016366:	2100      	movs	r1, #0
 8016368:	69f8      	ldr	r0, [r7, #28]
 801636a:	f000 f9eb 	bl	8016744 <ip4_output_if>
  }
  pbuf_free(q);
 801636e:	69f8      	ldr	r0, [r7, #28]
 8016370:	f7f6 fe3c 	bl	800cfec <pbuf_free>
 8016374:	e000      	b.n	8016378 <icmp_send_response+0xd4>
    return;
 8016376:	bf00      	nop
}
 8016378:	3720      	adds	r7, #32
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	0801b61c 	.word	0x0801b61c
 8016384:	0801b6e8 	.word	0x0801b6e8
 8016388:	0801b68c 	.word	0x0801b68c

0801638c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801638c:	b480      	push	{r7}
 801638e:	b085      	sub	sp, #20
 8016390:	af00      	add	r7, sp, #0
 8016392:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016394:	4b33      	ldr	r3, [pc, #204]	; (8016464 <ip4_route+0xd8>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	60fb      	str	r3, [r7, #12]
 801639a:	e036      	b.n	801640a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163a2:	f003 0301 	and.w	r3, r3, #1
 80163a6:	b2db      	uxtb	r3, r3
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d02b      	beq.n	8016404 <ip4_route+0x78>
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163b2:	089b      	lsrs	r3, r3, #2
 80163b4:	f003 0301 	and.w	r3, r3, #1
 80163b8:	b2db      	uxtb	r3, r3
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d022      	beq.n	8016404 <ip4_route+0x78>
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	3304      	adds	r3, #4
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d01d      	beq.n	8016404 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681a      	ldr	r2, [r3, #0]
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	3304      	adds	r3, #4
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	405a      	eors	r2, r3
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	3308      	adds	r3, #8
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4013      	ands	r3, r2
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d101      	bne.n	80163e4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	e038      	b.n	8016456 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80163ea:	f003 0302 	and.w	r3, r3, #2
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d108      	bne.n	8016404 <ip4_route+0x78>
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681a      	ldr	r2, [r3, #0]
 80163f6:	68fb      	ldr	r3, [r7, #12]
 80163f8:	330c      	adds	r3, #12
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d101      	bne.n	8016404 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	e028      	b.n	8016456 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	681b      	ldr	r3, [r3, #0]
 8016408:	60fb      	str	r3, [r7, #12]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	2b00      	cmp	r3, #0
 801640e:	d1c5      	bne.n	801639c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016410:	4b15      	ldr	r3, [pc, #84]	; (8016468 <ip4_route+0xdc>)
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d01a      	beq.n	801644e <ip4_route+0xc2>
 8016418:	4b13      	ldr	r3, [pc, #76]	; (8016468 <ip4_route+0xdc>)
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016420:	f003 0301 	and.w	r3, r3, #1
 8016424:	2b00      	cmp	r3, #0
 8016426:	d012      	beq.n	801644e <ip4_route+0xc2>
 8016428:	4b0f      	ldr	r3, [pc, #60]	; (8016468 <ip4_route+0xdc>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016430:	f003 0304 	and.w	r3, r3, #4
 8016434:	2b00      	cmp	r3, #0
 8016436:	d00a      	beq.n	801644e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016438:	4b0b      	ldr	r3, [pc, #44]	; (8016468 <ip4_route+0xdc>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	3304      	adds	r3, #4
 801643e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016440:	2b00      	cmp	r3, #0
 8016442:	d004      	beq.n	801644e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	b2db      	uxtb	r3, r3
 801644a:	2b7f      	cmp	r3, #127	; 0x7f
 801644c:	d101      	bne.n	8016452 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801644e:	2300      	movs	r3, #0
 8016450:	e001      	b.n	8016456 <ip4_route+0xca>
  }

  return netif_default;
 8016452:	4b05      	ldr	r3, [pc, #20]	; (8016468 <ip4_route+0xdc>)
 8016454:	681b      	ldr	r3, [r3, #0]
}
 8016456:	4618      	mov	r0, r3
 8016458:	3714      	adds	r7, #20
 801645a:	46bd      	mov	sp, r7
 801645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	2400d6ac 	.word	0x2400d6ac
 8016468:	2400d6b0 	.word	0x2400d6b0

0801646c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b082      	sub	sp, #8
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801647a:	f003 0301 	and.w	r3, r3, #1
 801647e:	b2db      	uxtb	r3, r3
 8016480:	2b00      	cmp	r3, #0
 8016482:	d016      	beq.n	80164b2 <ip4_input_accept+0x46>
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	3304      	adds	r3, #4
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d011      	beq.n	80164b2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801648e:	4b0b      	ldr	r3, [pc, #44]	; (80164bc <ip4_input_accept+0x50>)
 8016490:	695a      	ldr	r2, [r3, #20]
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	3304      	adds	r3, #4
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	429a      	cmp	r2, r3
 801649a:	d008      	beq.n	80164ae <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801649c:	4b07      	ldr	r3, [pc, #28]	; (80164bc <ip4_input_accept+0x50>)
 801649e:	695b      	ldr	r3, [r3, #20]
 80164a0:	6879      	ldr	r1, [r7, #4]
 80164a2:	4618      	mov	r0, r3
 80164a4:	f000 fa26 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 80164a8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d001      	beq.n	80164b2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80164ae:	2301      	movs	r3, #1
 80164b0:	e000      	b.n	80164b4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80164b2:	2300      	movs	r3, #0
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3708      	adds	r7, #8
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	2400a5dc 	.word	0x2400a5dc

080164c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80164c0:	b580      	push	{r7, lr}
 80164c2:	b088      	sub	sp, #32
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	6078      	str	r0, [r7, #4]
 80164c8:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80164ca:	2301      	movs	r3, #1
 80164cc:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80164d4:	69fb      	ldr	r3, [r7, #28]
 80164d6:	781b      	ldrb	r3, [r3, #0]
 80164d8:	091b      	lsrs	r3, r3, #4
 80164da:	b2db      	uxtb	r3, r3
 80164dc:	2b04      	cmp	r3, #4
 80164de:	d004      	beq.n	80164ea <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80164e0:	6878      	ldr	r0, [r7, #4]
 80164e2:	f7f6 fd83 	bl	800cfec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80164e6:	2300      	movs	r3, #0
 80164e8:	e123      	b.n	8016732 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80164ea:	69fb      	ldr	r3, [r7, #28]
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	f003 030f 	and.w	r3, r3, #15
 80164f2:	b2db      	uxtb	r3, r3
 80164f4:	009b      	lsls	r3, r3, #2
 80164f6:	b2db      	uxtb	r3, r3
 80164f8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80164fa:	69fb      	ldr	r3, [r7, #28]
 80164fc:	885b      	ldrh	r3, [r3, #2]
 80164fe:	b29b      	uxth	r3, r3
 8016500:	4618      	mov	r0, r3
 8016502:	f7f5 f8bd 	bl	800b680 <lwip_htons>
 8016506:	4603      	mov	r3, r0
 8016508:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	891b      	ldrh	r3, [r3, #8]
 801650e:	8a3a      	ldrh	r2, [r7, #16]
 8016510:	429a      	cmp	r2, r3
 8016512:	d204      	bcs.n	801651e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016514:	8a3b      	ldrh	r3, [r7, #16]
 8016516:	4619      	mov	r1, r3
 8016518:	6878      	ldr	r0, [r7, #4]
 801651a:	f7f6 fbe1 	bl	800cce0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	895b      	ldrh	r3, [r3, #10]
 8016522:	8a7a      	ldrh	r2, [r7, #18]
 8016524:	429a      	cmp	r2, r3
 8016526:	d807      	bhi.n	8016538 <ip4_input+0x78>
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	891b      	ldrh	r3, [r3, #8]
 801652c:	8a3a      	ldrh	r2, [r7, #16]
 801652e:	429a      	cmp	r2, r3
 8016530:	d802      	bhi.n	8016538 <ip4_input+0x78>
 8016532:	8a7b      	ldrh	r3, [r7, #18]
 8016534:	2b13      	cmp	r3, #19
 8016536:	d804      	bhi.n	8016542 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016538:	6878      	ldr	r0, [r7, #4]
 801653a:	f7f6 fd57 	bl	800cfec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801653e:	2300      	movs	r3, #0
 8016540:	e0f7      	b.n	8016732 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016542:	69fb      	ldr	r3, [r7, #28]
 8016544:	691b      	ldr	r3, [r3, #16]
 8016546:	4a7d      	ldr	r2, [pc, #500]	; (801673c <ip4_input+0x27c>)
 8016548:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801654a:	69fb      	ldr	r3, [r7, #28]
 801654c:	68db      	ldr	r3, [r3, #12]
 801654e:	4a7b      	ldr	r2, [pc, #492]	; (801673c <ip4_input+0x27c>)
 8016550:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016552:	4b7a      	ldr	r3, [pc, #488]	; (801673c <ip4_input+0x27c>)
 8016554:	695b      	ldr	r3, [r3, #20]
 8016556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801655a:	2be0      	cmp	r3, #224	; 0xe0
 801655c:	d112      	bne.n	8016584 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016564:	f003 0301 	and.w	r3, r3, #1
 8016568:	b2db      	uxtb	r3, r3
 801656a:	2b00      	cmp	r3, #0
 801656c:	d007      	beq.n	801657e <ip4_input+0xbe>
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	3304      	adds	r3, #4
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d002      	beq.n	801657e <ip4_input+0xbe>
      netif = inp;
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	61bb      	str	r3, [r7, #24]
 801657c:	e02a      	b.n	80165d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801657e:	2300      	movs	r3, #0
 8016580:	61bb      	str	r3, [r7, #24]
 8016582:	e027      	b.n	80165d4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016584:	6838      	ldr	r0, [r7, #0]
 8016586:	f7ff ff71 	bl	801646c <ip4_input_accept>
 801658a:	4603      	mov	r3, r0
 801658c:	2b00      	cmp	r3, #0
 801658e:	d002      	beq.n	8016596 <ip4_input+0xd6>
      netif = inp;
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	61bb      	str	r3, [r7, #24]
 8016594:	e01e      	b.n	80165d4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016596:	2300      	movs	r3, #0
 8016598:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801659a:	4b68      	ldr	r3, [pc, #416]	; (801673c <ip4_input+0x27c>)
 801659c:	695b      	ldr	r3, [r3, #20]
 801659e:	b2db      	uxtb	r3, r3
 80165a0:	2b7f      	cmp	r3, #127	; 0x7f
 80165a2:	d017      	beq.n	80165d4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80165a4:	4b66      	ldr	r3, [pc, #408]	; (8016740 <ip4_input+0x280>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	61bb      	str	r3, [r7, #24]
 80165aa:	e00e      	b.n	80165ca <ip4_input+0x10a>
          if (netif == inp) {
 80165ac:	69ba      	ldr	r2, [r7, #24]
 80165ae:	683b      	ldr	r3, [r7, #0]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d006      	beq.n	80165c2 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80165b4:	69b8      	ldr	r0, [r7, #24]
 80165b6:	f7ff ff59 	bl	801646c <ip4_input_accept>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d108      	bne.n	80165d2 <ip4_input+0x112>
 80165c0:	e000      	b.n	80165c4 <ip4_input+0x104>
            continue;
 80165c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80165c4:	69bb      	ldr	r3, [r7, #24]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	61bb      	str	r3, [r7, #24]
 80165ca:	69bb      	ldr	r3, [r7, #24]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d1ed      	bne.n	80165ac <ip4_input+0xec>
 80165d0:	e000      	b.n	80165d4 <ip4_input+0x114>
            break;
 80165d2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80165d4:	69bb      	ldr	r3, [r7, #24]
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d111      	bne.n	80165fe <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80165da:	69fb      	ldr	r3, [r7, #28]
 80165dc:	7a5b      	ldrb	r3, [r3, #9]
 80165de:	2b11      	cmp	r3, #17
 80165e0:	d10d      	bne.n	80165fe <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80165e2:	8a7b      	ldrh	r3, [r7, #18]
 80165e4:	69fa      	ldr	r2, [r7, #28]
 80165e6:	4413      	add	r3, r2
 80165e8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	885b      	ldrh	r3, [r3, #2]
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80165f4:	d103      	bne.n	80165fe <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80165fa:	2300      	movs	r3, #0
 80165fc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80165fe:	697b      	ldr	r3, [r7, #20]
 8016600:	2b00      	cmp	r3, #0
 8016602:	d017      	beq.n	8016634 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016604:	4b4d      	ldr	r3, [pc, #308]	; (801673c <ip4_input+0x27c>)
 8016606:	691b      	ldr	r3, [r3, #16]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d013      	beq.n	8016634 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801660c:	4b4b      	ldr	r3, [pc, #300]	; (801673c <ip4_input+0x27c>)
 801660e:	691b      	ldr	r3, [r3, #16]
 8016610:	6839      	ldr	r1, [r7, #0]
 8016612:	4618      	mov	r0, r3
 8016614:	f000 f96e 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 8016618:	4603      	mov	r3, r0
 801661a:	2b00      	cmp	r3, #0
 801661c:	d105      	bne.n	801662a <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801661e:	4b47      	ldr	r3, [pc, #284]	; (801673c <ip4_input+0x27c>)
 8016620:	691b      	ldr	r3, [r3, #16]
 8016622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016626:	2be0      	cmp	r3, #224	; 0xe0
 8016628:	d104      	bne.n	8016634 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801662a:	6878      	ldr	r0, [r7, #4]
 801662c:	f7f6 fcde 	bl	800cfec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016630:	2300      	movs	r3, #0
 8016632:	e07e      	b.n	8016732 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016634:	69bb      	ldr	r3, [r7, #24]
 8016636:	2b00      	cmp	r3, #0
 8016638:	d104      	bne.n	8016644 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801663a:	6878      	ldr	r0, [r7, #4]
 801663c:	f7f6 fcd6 	bl	800cfec <pbuf_free>
    return ERR_OK;
 8016640:	2300      	movs	r3, #0
 8016642:	e076      	b.n	8016732 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016644:	69fb      	ldr	r3, [r7, #28]
 8016646:	88db      	ldrh	r3, [r3, #6]
 8016648:	b29b      	uxth	r3, r3
 801664a:	461a      	mov	r2, r3
 801664c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016650:	4013      	ands	r3, r2
 8016652:	2b00      	cmp	r3, #0
 8016654:	d00b      	beq.n	801666e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f000 fc92 	bl	8016f80 <ip4_reass>
 801665c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d101      	bne.n	8016668 <ip4_input+0x1a8>
      return ERR_OK;
 8016664:	2300      	movs	r3, #0
 8016666:	e064      	b.n	8016732 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	685b      	ldr	r3, [r3, #4]
 801666c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801666e:	4a33      	ldr	r2, [pc, #204]	; (801673c <ip4_input+0x27c>)
 8016670:	69bb      	ldr	r3, [r7, #24]
 8016672:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016674:	4a31      	ldr	r2, [pc, #196]	; (801673c <ip4_input+0x27c>)
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801667a:	4a30      	ldr	r2, [pc, #192]	; (801673c <ip4_input+0x27c>)
 801667c:	69fb      	ldr	r3, [r7, #28]
 801667e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	781b      	ldrb	r3, [r3, #0]
 8016684:	f003 030f 	and.w	r3, r3, #15
 8016688:	b2db      	uxtb	r3, r3
 801668a:	009b      	lsls	r3, r3, #2
 801668c:	b2db      	uxtb	r3, r3
 801668e:	b29a      	uxth	r2, r3
 8016690:	4b2a      	ldr	r3, [pc, #168]	; (801673c <ip4_input+0x27c>)
 8016692:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016694:	8a7b      	ldrh	r3, [r7, #18]
 8016696:	4619      	mov	r1, r3
 8016698:	6878      	ldr	r0, [r7, #4]
 801669a:	f7f6 fc21 	bl	800cee0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801669e:	69fb      	ldr	r3, [r7, #28]
 80166a0:	7a5b      	ldrb	r3, [r3, #9]
 80166a2:	2b11      	cmp	r3, #17
 80166a4:	d006      	beq.n	80166b4 <ip4_input+0x1f4>
 80166a6:	2b11      	cmp	r3, #17
 80166a8:	dc13      	bgt.n	80166d2 <ip4_input+0x212>
 80166aa:	2b01      	cmp	r3, #1
 80166ac:	d00c      	beq.n	80166c8 <ip4_input+0x208>
 80166ae:	2b06      	cmp	r3, #6
 80166b0:	d005      	beq.n	80166be <ip4_input+0x1fe>
 80166b2:	e00e      	b.n	80166d2 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80166b4:	6839      	ldr	r1, [r7, #0]
 80166b6:	6878      	ldr	r0, [r7, #4]
 80166b8:	f7fc fac2 	bl	8012c40 <udp_input>
        break;
 80166bc:	e026      	b.n	801670c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80166be:	6839      	ldr	r1, [r7, #0]
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f7f8 fad7 	bl	800ec74 <tcp_input>
        break;
 80166c6:	e021      	b.n	801670c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80166c8:	6839      	ldr	r1, [r7, #0]
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f7ff fcaa 	bl	8016024 <icmp_input>
        break;
 80166d0:	e01c      	b.n	801670c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166d2:	4b1a      	ldr	r3, [pc, #104]	; (801673c <ip4_input+0x27c>)
 80166d4:	695b      	ldr	r3, [r3, #20]
 80166d6:	69b9      	ldr	r1, [r7, #24]
 80166d8:	4618      	mov	r0, r3
 80166da:	f000 f90b 	bl	80168f4 <ip4_addr_isbroadcast_u32>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d10f      	bne.n	8016704 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166e4:	4b15      	ldr	r3, [pc, #84]	; (801673c <ip4_input+0x27c>)
 80166e6:	695b      	ldr	r3, [r3, #20]
 80166e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80166ec:	2be0      	cmp	r3, #224	; 0xe0
 80166ee:	d009      	beq.n	8016704 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80166f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80166f4:	4619      	mov	r1, r3
 80166f6:	6878      	ldr	r0, [r7, #4]
 80166f8:	f7f6 fc65 	bl	800cfc6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80166fc:	2102      	movs	r1, #2
 80166fe:	6878      	ldr	r0, [r7, #4]
 8016700:	f7ff fdb0 	bl	8016264 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016704:	6878      	ldr	r0, [r7, #4]
 8016706:	f7f6 fc71 	bl	800cfec <pbuf_free>
        break;
 801670a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801670c:	4b0b      	ldr	r3, [pc, #44]	; (801673c <ip4_input+0x27c>)
 801670e:	2200      	movs	r2, #0
 8016710:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016712:	4b0a      	ldr	r3, [pc, #40]	; (801673c <ip4_input+0x27c>)
 8016714:	2200      	movs	r2, #0
 8016716:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016718:	4b08      	ldr	r3, [pc, #32]	; (801673c <ip4_input+0x27c>)
 801671a:	2200      	movs	r2, #0
 801671c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801671e:	4b07      	ldr	r3, [pc, #28]	; (801673c <ip4_input+0x27c>)
 8016720:	2200      	movs	r2, #0
 8016722:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016724:	4b05      	ldr	r3, [pc, #20]	; (801673c <ip4_input+0x27c>)
 8016726:	2200      	movs	r2, #0
 8016728:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801672a:	4b04      	ldr	r3, [pc, #16]	; (801673c <ip4_input+0x27c>)
 801672c:	2200      	movs	r2, #0
 801672e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016730:	2300      	movs	r3, #0
}
 8016732:	4618      	mov	r0, r3
 8016734:	3720      	adds	r7, #32
 8016736:	46bd      	mov	sp, r7
 8016738:	bd80      	pop	{r7, pc}
 801673a:	bf00      	nop
 801673c:	2400a5dc 	.word	0x2400a5dc
 8016740:	2400d6ac 	.word	0x2400d6ac

08016744 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016744:	b580      	push	{r7, lr}
 8016746:	b08a      	sub	sp, #40	; 0x28
 8016748:	af04      	add	r7, sp, #16
 801674a:	60f8      	str	r0, [r7, #12]
 801674c:	60b9      	str	r1, [r7, #8]
 801674e:	607a      	str	r2, [r7, #4]
 8016750:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d009      	beq.n	8016770 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801675c:	68bb      	ldr	r3, [r7, #8]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d003      	beq.n	801676a <ip4_output_if+0x26>
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	2b00      	cmp	r3, #0
 8016768:	d102      	bne.n	8016770 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801676c:	3304      	adds	r3, #4
 801676e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016770:	78fa      	ldrb	r2, [r7, #3]
 8016772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016774:	9302      	str	r3, [sp, #8]
 8016776:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016780:	9300      	str	r3, [sp, #0]
 8016782:	4613      	mov	r3, r2
 8016784:	687a      	ldr	r2, [r7, #4]
 8016786:	6979      	ldr	r1, [r7, #20]
 8016788:	68f8      	ldr	r0, [r7, #12]
 801678a:	f000 f805 	bl	8016798 <ip4_output_if_src>
 801678e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016790:	4618      	mov	r0, r3
 8016792:	3718      	adds	r7, #24
 8016794:	46bd      	mov	sp, r7
 8016796:	bd80      	pop	{r7, pc}

08016798 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016798:	b580      	push	{r7, lr}
 801679a:	b088      	sub	sp, #32
 801679c:	af00      	add	r7, sp, #0
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	60b9      	str	r1, [r7, #8]
 80167a2:	607a      	str	r2, [r7, #4]
 80167a4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	7b9b      	ldrb	r3, [r3, #14]
 80167aa:	2b01      	cmp	r3, #1
 80167ac:	d006      	beq.n	80167bc <ip4_output_if_src+0x24>
 80167ae:	4b4b      	ldr	r3, [pc, #300]	; (80168dc <ip4_output_if_src+0x144>)
 80167b0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80167b4:	494a      	ldr	r1, [pc, #296]	; (80168e0 <ip4_output_if_src+0x148>)
 80167b6:	484b      	ldr	r0, [pc, #300]	; (80168e4 <ip4_output_if_src+0x14c>)
 80167b8:	f001 fa9e 	bl	8017cf8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d060      	beq.n	8016884 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80167c2:	2314      	movs	r3, #20
 80167c4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80167c6:	2114      	movs	r1, #20
 80167c8:	68f8      	ldr	r0, [r7, #12]
 80167ca:	f7f6 fb79 	bl	800cec0 <pbuf_add_header>
 80167ce:	4603      	mov	r3, r0
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d002      	beq.n	80167da <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80167d4:	f06f 0301 	mvn.w	r3, #1
 80167d8:	e07c      	b.n	80168d4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	685b      	ldr	r3, [r3, #4]
 80167de:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80167e0:	68fb      	ldr	r3, [r7, #12]
 80167e2:	895b      	ldrh	r3, [r3, #10]
 80167e4:	2b13      	cmp	r3, #19
 80167e6:	d806      	bhi.n	80167f6 <ip4_output_if_src+0x5e>
 80167e8:	4b3c      	ldr	r3, [pc, #240]	; (80168dc <ip4_output_if_src+0x144>)
 80167ea:	f44f 7262 	mov.w	r2, #904	; 0x388
 80167ee:	493e      	ldr	r1, [pc, #248]	; (80168e8 <ip4_output_if_src+0x150>)
 80167f0:	483c      	ldr	r0, [pc, #240]	; (80168e4 <ip4_output_if_src+0x14c>)
 80167f2:	f001 fa81 	bl	8017cf8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	78fa      	ldrb	r2, [r7, #3]
 80167fa:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016802:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	681a      	ldr	r2, [r3, #0]
 8016808:	69fb      	ldr	r3, [r7, #28]
 801680a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801680c:	8b7b      	ldrh	r3, [r7, #26]
 801680e:	089b      	lsrs	r3, r3, #2
 8016810:	b29b      	uxth	r3, r3
 8016812:	b2db      	uxtb	r3, r3
 8016814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016818:	b2da      	uxtb	r2, r3
 801681a:	69fb      	ldr	r3, [r7, #28]
 801681c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016824:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	891b      	ldrh	r3, [r3, #8]
 801682a:	4618      	mov	r0, r3
 801682c:	f7f4 ff28 	bl	800b680 <lwip_htons>
 8016830:	4603      	mov	r3, r0
 8016832:	461a      	mov	r2, r3
 8016834:	69fb      	ldr	r3, [r7, #28]
 8016836:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016838:	69fb      	ldr	r3, [r7, #28]
 801683a:	2200      	movs	r2, #0
 801683c:	719a      	strb	r2, [r3, #6]
 801683e:	2200      	movs	r2, #0
 8016840:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016842:	4b2a      	ldr	r3, [pc, #168]	; (80168ec <ip4_output_if_src+0x154>)
 8016844:	881b      	ldrh	r3, [r3, #0]
 8016846:	4618      	mov	r0, r3
 8016848:	f7f4 ff1a 	bl	800b680 <lwip_htons>
 801684c:	4603      	mov	r3, r0
 801684e:	461a      	mov	r2, r3
 8016850:	69fb      	ldr	r3, [r7, #28]
 8016852:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016854:	4b25      	ldr	r3, [pc, #148]	; (80168ec <ip4_output_if_src+0x154>)
 8016856:	881b      	ldrh	r3, [r3, #0]
 8016858:	3301      	adds	r3, #1
 801685a:	b29a      	uxth	r2, r3
 801685c:	4b23      	ldr	r3, [pc, #140]	; (80168ec <ip4_output_if_src+0x154>)
 801685e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d104      	bne.n	8016870 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016866:	4b22      	ldr	r3, [pc, #136]	; (80168f0 <ip4_output_if_src+0x158>)
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	69fb      	ldr	r3, [r7, #28]
 801686c:	60da      	str	r2, [r3, #12]
 801686e:	e003      	b.n	8016878 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016870:	68bb      	ldr	r3, [r7, #8]
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	69fb      	ldr	r3, [r7, #28]
 8016876:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016878:	69fb      	ldr	r3, [r7, #28]
 801687a:	2200      	movs	r2, #0
 801687c:	729a      	strb	r2, [r3, #10]
 801687e:	2200      	movs	r2, #0
 8016880:	72da      	strb	r2, [r3, #11]
 8016882:	e00f      	b.n	80168a4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	895b      	ldrh	r3, [r3, #10]
 8016888:	2b13      	cmp	r3, #19
 801688a:	d802      	bhi.n	8016892 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801688c:	f06f 0301 	mvn.w	r3, #1
 8016890:	e020      	b.n	80168d4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	685b      	ldr	r3, [r3, #4]
 8016896:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	691b      	ldr	r3, [r3, #16]
 801689c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801689e:	f107 0314 	add.w	r3, r7, #20
 80168a2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80168a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00c      	beq.n	80168c6 <ip4_output_if_src+0x12e>
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	891a      	ldrh	r2, [r3, #8]
 80168b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d906      	bls.n	80168c6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80168b8:	687a      	ldr	r2, [r7, #4]
 80168ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80168bc:	68f8      	ldr	r0, [r7, #12]
 80168be:	f000 fd4d 	bl	801735c <ip4_frag>
 80168c2:	4603      	mov	r3, r0
 80168c4:	e006      	b.n	80168d4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80168c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c8:	695b      	ldr	r3, [r3, #20]
 80168ca:	687a      	ldr	r2, [r7, #4]
 80168cc:	68f9      	ldr	r1, [r7, #12]
 80168ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168d0:	4798      	blx	r3
 80168d2:	4603      	mov	r3, r0
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3720      	adds	r7, #32
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}
 80168dc:	0801b714 	.word	0x0801b714
 80168e0:	0801b748 	.word	0x0801b748
 80168e4:	0801b754 	.word	0x0801b754
 80168e8:	0801b77c 	.word	0x0801b77c
 80168ec:	24009eee 	.word	0x24009eee
 80168f0:	0801bbcc 	.word	0x0801bbcc

080168f4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80168f4:	b480      	push	{r7}
 80168f6:	b085      	sub	sp, #20
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016908:	d002      	beq.n	8016910 <ip4_addr_isbroadcast_u32+0x1c>
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	2b00      	cmp	r3, #0
 801690e:	d101      	bne.n	8016914 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016910:	2301      	movs	r3, #1
 8016912:	e02a      	b.n	801696a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801691a:	f003 0302 	and.w	r3, r3, #2
 801691e:	2b00      	cmp	r3, #0
 8016920:	d101      	bne.n	8016926 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016922:	2300      	movs	r3, #0
 8016924:	e021      	b.n	801696a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016926:	683b      	ldr	r3, [r7, #0]
 8016928:	3304      	adds	r3, #4
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	687a      	ldr	r2, [r7, #4]
 801692e:	429a      	cmp	r2, r3
 8016930:	d101      	bne.n	8016936 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016932:	2300      	movs	r3, #0
 8016934:	e019      	b.n	801696a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016936:	68fa      	ldr	r2, [r7, #12]
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	3304      	adds	r3, #4
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	405a      	eors	r2, r3
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	3308      	adds	r3, #8
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	4013      	ands	r3, r2
 8016948:	2b00      	cmp	r3, #0
 801694a:	d10d      	bne.n	8016968 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801694c:	683b      	ldr	r3, [r7, #0]
 801694e:	3308      	adds	r3, #8
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	43da      	mvns	r2, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	3308      	adds	r3, #8
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016960:	429a      	cmp	r2, r3
 8016962:	d101      	bne.n	8016968 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016964:	2301      	movs	r3, #1
 8016966:	e000      	b.n	801696a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016968:	2300      	movs	r3, #0
  }
}
 801696a:	4618      	mov	r0, r3
 801696c:	3714      	adds	r7, #20
 801696e:	46bd      	mov	sp, r7
 8016970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016974:	4770      	bx	lr
	...

08016978 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016978:	b580      	push	{r7, lr}
 801697a:	b084      	sub	sp, #16
 801697c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801697e:	2300      	movs	r3, #0
 8016980:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016982:	4b12      	ldr	r3, [pc, #72]	; (80169cc <ip_reass_tmr+0x54>)
 8016984:	681b      	ldr	r3, [r3, #0]
 8016986:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016988:	e018      	b.n	80169bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	7fdb      	ldrb	r3, [r3, #31]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d00b      	beq.n	80169aa <ip_reass_tmr+0x32>
      r->timer--;
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	7fdb      	ldrb	r3, [r3, #31]
 8016996:	3b01      	subs	r3, #1
 8016998:	b2da      	uxtb	r2, r3
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801699e:	68fb      	ldr	r3, [r7, #12]
 80169a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	60fb      	str	r3, [r7, #12]
 80169a8:	e008      	b.n	80169bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80169ae:	68fb      	ldr	r3, [r7, #12]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80169b4:	68b9      	ldr	r1, [r7, #8]
 80169b6:	6878      	ldr	r0, [r7, #4]
 80169b8:	f000 f80a 	bl	80169d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1e3      	bne.n	801698a <ip_reass_tmr+0x12>
    }
  }
}
 80169c2:	bf00      	nop
 80169c4:	bf00      	nop
 80169c6:	3710      	adds	r7, #16
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	24009ef0 	.word	0x24009ef0

080169d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b088      	sub	sp, #32
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
 80169d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80169da:	2300      	movs	r3, #0
 80169dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80169de:	683a      	ldr	r2, [r7, #0]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	429a      	cmp	r2, r3
 80169e4:	d105      	bne.n	80169f2 <ip_reass_free_complete_datagram+0x22>
 80169e6:	4b45      	ldr	r3, [pc, #276]	; (8016afc <ip_reass_free_complete_datagram+0x12c>)
 80169e8:	22ab      	movs	r2, #171	; 0xab
 80169ea:	4945      	ldr	r1, [pc, #276]	; (8016b00 <ip_reass_free_complete_datagram+0x130>)
 80169ec:	4845      	ldr	r0, [pc, #276]	; (8016b04 <ip_reass_free_complete_datagram+0x134>)
 80169ee:	f001 f983 	bl	8017cf8 <iprintf>
  if (prev != NULL) {
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d00a      	beq.n	8016a0e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	687a      	ldr	r2, [r7, #4]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d005      	beq.n	8016a0e <ip_reass_free_complete_datagram+0x3e>
 8016a02:	4b3e      	ldr	r3, [pc, #248]	; (8016afc <ip_reass_free_complete_datagram+0x12c>)
 8016a04:	22ad      	movs	r2, #173	; 0xad
 8016a06:	4940      	ldr	r1, [pc, #256]	; (8016b08 <ip_reass_free_complete_datagram+0x138>)
 8016a08:	483e      	ldr	r0, [pc, #248]	; (8016b04 <ip_reass_free_complete_datagram+0x134>)
 8016a0a:	f001 f975 	bl	8017cf8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	685b      	ldr	r3, [r3, #4]
 8016a12:	685b      	ldr	r3, [r3, #4]
 8016a14:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	889b      	ldrh	r3, [r3, #4]
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d12a      	bne.n	8016a76 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	685b      	ldr	r3, [r3, #4]
 8016a24:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	681a      	ldr	r2, [r3, #0]
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016a2e:	69bb      	ldr	r3, [r7, #24]
 8016a30:	6858      	ldr	r0, [r3, #4]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	3308      	adds	r3, #8
 8016a36:	2214      	movs	r2, #20
 8016a38:	4619      	mov	r1, r3
 8016a3a:	f001 f8ec 	bl	8017c16 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016a3e:	2101      	movs	r1, #1
 8016a40:	69b8      	ldr	r0, [r7, #24]
 8016a42:	f7ff fc1f 	bl	8016284 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016a46:	69b8      	ldr	r0, [r7, #24]
 8016a48:	f7f6 fb5e 	bl	800d108 <pbuf_clen>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a50:	8bfa      	ldrh	r2, [r7, #30]
 8016a52:	8a7b      	ldrh	r3, [r7, #18]
 8016a54:	4413      	add	r3, r2
 8016a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016a5a:	db05      	blt.n	8016a68 <ip_reass_free_complete_datagram+0x98>
 8016a5c:	4b27      	ldr	r3, [pc, #156]	; (8016afc <ip_reass_free_complete_datagram+0x12c>)
 8016a5e:	22bc      	movs	r2, #188	; 0xbc
 8016a60:	492a      	ldr	r1, [pc, #168]	; (8016b0c <ip_reass_free_complete_datagram+0x13c>)
 8016a62:	4828      	ldr	r0, [pc, #160]	; (8016b04 <ip_reass_free_complete_datagram+0x134>)
 8016a64:	f001 f948 	bl	8017cf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016a68:	8bfa      	ldrh	r2, [r7, #30]
 8016a6a:	8a7b      	ldrh	r3, [r7, #18]
 8016a6c:	4413      	add	r3, r2
 8016a6e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016a70:	69b8      	ldr	r0, [r7, #24]
 8016a72:	f7f6 fabb 	bl	800cfec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016a7c:	e01f      	b.n	8016abe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016a7e:	69bb      	ldr	r3, [r7, #24]
 8016a80:	685b      	ldr	r3, [r3, #4]
 8016a82:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016a88:	697b      	ldr	r3, [r7, #20]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016a8e:	68f8      	ldr	r0, [r7, #12]
 8016a90:	f7f6 fb3a 	bl	800d108 <pbuf_clen>
 8016a94:	4603      	mov	r3, r0
 8016a96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a98:	8bfa      	ldrh	r2, [r7, #30]
 8016a9a:	8a7b      	ldrh	r3, [r7, #18]
 8016a9c:	4413      	add	r3, r2
 8016a9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aa2:	db05      	blt.n	8016ab0 <ip_reass_free_complete_datagram+0xe0>
 8016aa4:	4b15      	ldr	r3, [pc, #84]	; (8016afc <ip_reass_free_complete_datagram+0x12c>)
 8016aa6:	22cc      	movs	r2, #204	; 0xcc
 8016aa8:	4918      	ldr	r1, [pc, #96]	; (8016b0c <ip_reass_free_complete_datagram+0x13c>)
 8016aaa:	4816      	ldr	r0, [pc, #88]	; (8016b04 <ip_reass_free_complete_datagram+0x134>)
 8016aac:	f001 f924 	bl	8017cf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ab0:	8bfa      	ldrh	r2, [r7, #30]
 8016ab2:	8a7b      	ldrh	r3, [r7, #18]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016ab8:	68f8      	ldr	r0, [r7, #12]
 8016aba:	f7f6 fa97 	bl	800cfec <pbuf_free>
  while (p != NULL) {
 8016abe:	69bb      	ldr	r3, [r7, #24]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d1dc      	bne.n	8016a7e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016ac4:	6839      	ldr	r1, [r7, #0]
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f000 f8c2 	bl	8016c50 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016acc:	4b10      	ldr	r3, [pc, #64]	; (8016b10 <ip_reass_free_complete_datagram+0x140>)
 8016ace:	881b      	ldrh	r3, [r3, #0]
 8016ad0:	8bfa      	ldrh	r2, [r7, #30]
 8016ad2:	429a      	cmp	r2, r3
 8016ad4:	d905      	bls.n	8016ae2 <ip_reass_free_complete_datagram+0x112>
 8016ad6:	4b09      	ldr	r3, [pc, #36]	; (8016afc <ip_reass_free_complete_datagram+0x12c>)
 8016ad8:	22d2      	movs	r2, #210	; 0xd2
 8016ada:	490e      	ldr	r1, [pc, #56]	; (8016b14 <ip_reass_free_complete_datagram+0x144>)
 8016adc:	4809      	ldr	r0, [pc, #36]	; (8016b04 <ip_reass_free_complete_datagram+0x134>)
 8016ade:	f001 f90b 	bl	8017cf8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016ae2:	4b0b      	ldr	r3, [pc, #44]	; (8016b10 <ip_reass_free_complete_datagram+0x140>)
 8016ae4:	881a      	ldrh	r2, [r3, #0]
 8016ae6:	8bfb      	ldrh	r3, [r7, #30]
 8016ae8:	1ad3      	subs	r3, r2, r3
 8016aea:	b29a      	uxth	r2, r3
 8016aec:	4b08      	ldr	r3, [pc, #32]	; (8016b10 <ip_reass_free_complete_datagram+0x140>)
 8016aee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016af0:	8bfb      	ldrh	r3, [r7, #30]
}
 8016af2:	4618      	mov	r0, r3
 8016af4:	3720      	adds	r7, #32
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bd80      	pop	{r7, pc}
 8016afa:	bf00      	nop
 8016afc:	0801b7ac 	.word	0x0801b7ac
 8016b00:	0801b7e8 	.word	0x0801b7e8
 8016b04:	0801b7f4 	.word	0x0801b7f4
 8016b08:	0801b81c 	.word	0x0801b81c
 8016b0c:	0801b830 	.word	0x0801b830
 8016b10:	24009ef4 	.word	0x24009ef4
 8016b14:	0801b850 	.word	0x0801b850

08016b18 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b08a      	sub	sp, #40	; 0x28
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016b22:	2300      	movs	r3, #0
 8016b24:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016b26:	2300      	movs	r3, #0
 8016b28:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016b2e:	2300      	movs	r3, #0
 8016b30:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016b32:	2300      	movs	r3, #0
 8016b34:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016b36:	4b28      	ldr	r3, [pc, #160]	; (8016bd8 <ip_reass_remove_oldest_datagram+0xc0>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b3c:	e030      	b.n	8016ba0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b40:	695a      	ldr	r2, [r3, #20]
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	68db      	ldr	r3, [r3, #12]
 8016b46:	429a      	cmp	r2, r3
 8016b48:	d10c      	bne.n	8016b64 <ip_reass_remove_oldest_datagram+0x4c>
 8016b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b4c:	699a      	ldr	r2, [r3, #24]
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	691b      	ldr	r3, [r3, #16]
 8016b52:	429a      	cmp	r2, r3
 8016b54:	d106      	bne.n	8016b64 <ip_reass_remove_oldest_datagram+0x4c>
 8016b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b58:	899a      	ldrh	r2, [r3, #12]
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	889b      	ldrh	r3, [r3, #4]
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	429a      	cmp	r2, r3
 8016b62:	d014      	beq.n	8016b8e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	3301      	adds	r3, #1
 8016b68:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016b6a:	6a3b      	ldr	r3, [r7, #32]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d104      	bne.n	8016b7a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b72:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b74:	69fb      	ldr	r3, [r7, #28]
 8016b76:	61bb      	str	r3, [r7, #24]
 8016b78:	e009      	b.n	8016b8e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b7c:	7fda      	ldrb	r2, [r3, #31]
 8016b7e:	6a3b      	ldr	r3, [r7, #32]
 8016b80:	7fdb      	ldrb	r3, [r3, #31]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d803      	bhi.n	8016b8e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b88:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016b8a:	69fb      	ldr	r3, [r7, #28]
 8016b8c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d001      	beq.n	8016b9a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d1cb      	bne.n	8016b3e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016ba6:	6a3b      	ldr	r3, [r7, #32]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d008      	beq.n	8016bbe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016bac:	69b9      	ldr	r1, [r7, #24]
 8016bae:	6a38      	ldr	r0, [r7, #32]
 8016bb0:	f7ff ff0e 	bl	80169d0 <ip_reass_free_complete_datagram>
 8016bb4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016bb6:	697a      	ldr	r2, [r7, #20]
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	4413      	add	r3, r2
 8016bbc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016bbe:	697a      	ldr	r2, [r7, #20]
 8016bc0:	683b      	ldr	r3, [r7, #0]
 8016bc2:	429a      	cmp	r2, r3
 8016bc4:	da02      	bge.n	8016bcc <ip_reass_remove_oldest_datagram+0xb4>
 8016bc6:	693b      	ldr	r3, [r7, #16]
 8016bc8:	2b01      	cmp	r3, #1
 8016bca:	dcac      	bgt.n	8016b26 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016bcc:	697b      	ldr	r3, [r7, #20]
}
 8016bce:	4618      	mov	r0, r3
 8016bd0:	3728      	adds	r7, #40	; 0x28
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}
 8016bd6:	bf00      	nop
 8016bd8:	24009ef0 	.word	0x24009ef0

08016bdc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016bdc:	b580      	push	{r7, lr}
 8016bde:	b084      	sub	sp, #16
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	6078      	str	r0, [r7, #4]
 8016be4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016be6:	2004      	movs	r0, #4
 8016be8:	f7f5 fada 	bl	800c1a0 <memp_malloc>
 8016bec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d110      	bne.n	8016c16 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016bf4:	6839      	ldr	r1, [r7, #0]
 8016bf6:	6878      	ldr	r0, [r7, #4]
 8016bf8:	f7ff ff8e 	bl	8016b18 <ip_reass_remove_oldest_datagram>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	683b      	ldr	r3, [r7, #0]
 8016c00:	4293      	cmp	r3, r2
 8016c02:	dc03      	bgt.n	8016c0c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c04:	2004      	movs	r0, #4
 8016c06:	f7f5 facb 	bl	800c1a0 <memp_malloc>
 8016c0a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d101      	bne.n	8016c16 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016c12:	2300      	movs	r3, #0
 8016c14:	e016      	b.n	8016c44 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016c16:	2220      	movs	r2, #32
 8016c18:	2100      	movs	r1, #0
 8016c1a:	68f8      	ldr	r0, [r7, #12]
 8016c1c:	f001 f809 	bl	8017c32 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	220f      	movs	r2, #15
 8016c24:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016c26:	4b09      	ldr	r3, [pc, #36]	; (8016c4c <ip_reass_enqueue_new_datagram+0x70>)
 8016c28:	681a      	ldr	r2, [r3, #0]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016c2e:	4a07      	ldr	r2, [pc, #28]	; (8016c4c <ip_reass_enqueue_new_datagram+0x70>)
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	3308      	adds	r3, #8
 8016c38:	2214      	movs	r2, #20
 8016c3a:	6879      	ldr	r1, [r7, #4]
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f000 ffea 	bl	8017c16 <memcpy>
  return ipr;
 8016c42:	68fb      	ldr	r3, [r7, #12]
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3710      	adds	r7, #16
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bd80      	pop	{r7, pc}
 8016c4c:	24009ef0 	.word	0x24009ef0

08016c50 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016c5a:	4b10      	ldr	r3, [pc, #64]	; (8016c9c <ip_reass_dequeue_datagram+0x4c>)
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	687a      	ldr	r2, [r7, #4]
 8016c60:	429a      	cmp	r2, r3
 8016c62:	d104      	bne.n	8016c6e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	4a0c      	ldr	r2, [pc, #48]	; (8016c9c <ip_reass_dequeue_datagram+0x4c>)
 8016c6a:	6013      	str	r3, [r2, #0]
 8016c6c:	e00d      	b.n	8016c8a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d106      	bne.n	8016c82 <ip_reass_dequeue_datagram+0x32>
 8016c74:	4b0a      	ldr	r3, [pc, #40]	; (8016ca0 <ip_reass_dequeue_datagram+0x50>)
 8016c76:	f240 1245 	movw	r2, #325	; 0x145
 8016c7a:	490a      	ldr	r1, [pc, #40]	; (8016ca4 <ip_reass_dequeue_datagram+0x54>)
 8016c7c:	480a      	ldr	r0, [pc, #40]	; (8016ca8 <ip_reass_dequeue_datagram+0x58>)
 8016c7e:	f001 f83b 	bl	8017cf8 <iprintf>
    prev->next = ipr->next;
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681a      	ldr	r2, [r3, #0]
 8016c86:	683b      	ldr	r3, [r7, #0]
 8016c88:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016c8a:	6879      	ldr	r1, [r7, #4]
 8016c8c:	2004      	movs	r0, #4
 8016c8e:	f7f5 fafd 	bl	800c28c <memp_free>
}
 8016c92:	bf00      	nop
 8016c94:	3708      	adds	r7, #8
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	24009ef0 	.word	0x24009ef0
 8016ca0:	0801b7ac 	.word	0x0801b7ac
 8016ca4:	0801b874 	.word	0x0801b874
 8016ca8:	0801b7f4 	.word	0x0801b7f4

08016cac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b08c      	sub	sp, #48	; 0x30
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	60f8      	str	r0, [r7, #12]
 8016cb4:	60b9      	str	r1, [r7, #8]
 8016cb6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016cb8:	2300      	movs	r3, #0
 8016cba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016cbc:	2301      	movs	r3, #1
 8016cbe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016cc0:	68bb      	ldr	r3, [r7, #8]
 8016cc2:	685b      	ldr	r3, [r3, #4]
 8016cc4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016cc6:	69fb      	ldr	r3, [r7, #28]
 8016cc8:	885b      	ldrh	r3, [r3, #2]
 8016cca:	b29b      	uxth	r3, r3
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f4 fcd7 	bl	800b680 <lwip_htons>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016cd6:	69fb      	ldr	r3, [r7, #28]
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	f003 030f 	and.w	r3, r3, #15
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	009b      	lsls	r3, r3, #2
 8016ce2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016ce4:	7e7b      	ldrb	r3, [r7, #25]
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	8b7a      	ldrh	r2, [r7, #26]
 8016cea:	429a      	cmp	r2, r3
 8016cec:	d202      	bcs.n	8016cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cf2:	e135      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016cf4:	7e7b      	ldrb	r3, [r7, #25]
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	8b7a      	ldrh	r2, [r7, #26]
 8016cfa:	1ad3      	subs	r3, r2, r3
 8016cfc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016cfe:	69fb      	ldr	r3, [r7, #28]
 8016d00:	88db      	ldrh	r3, [r3, #6]
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	4618      	mov	r0, r3
 8016d06:	f7f4 fcbb 	bl	800b680 <lwip_htons>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d10:	b29b      	uxth	r3, r3
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016d16:	68bb      	ldr	r3, [r7, #8]
 8016d18:	685b      	ldr	r3, [r3, #4]
 8016d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1e:	2200      	movs	r2, #0
 8016d20:	701a      	strb	r2, [r3, #0]
 8016d22:	2200      	movs	r2, #0
 8016d24:	705a      	strb	r2, [r3, #1]
 8016d26:	2200      	movs	r2, #0
 8016d28:	709a      	strb	r2, [r3, #2]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d30:	8afa      	ldrh	r2, [r7, #22]
 8016d32:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016d34:	8afa      	ldrh	r2, [r7, #22]
 8016d36:	8b7b      	ldrh	r3, [r7, #26]
 8016d38:	4413      	add	r3, r2
 8016d3a:	b29a      	uxth	r2, r3
 8016d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d3e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d42:	88db      	ldrh	r3, [r3, #6]
 8016d44:	b29b      	uxth	r3, r3
 8016d46:	8afa      	ldrh	r2, [r7, #22]
 8016d48:	429a      	cmp	r2, r3
 8016d4a:	d902      	bls.n	8016d52 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d50:	e106      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	685b      	ldr	r3, [r3, #4]
 8016d56:	627b      	str	r3, [r7, #36]	; 0x24
 8016d58:	e068      	b.n	8016e2c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5c:	685b      	ldr	r3, [r3, #4]
 8016d5e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d62:	889b      	ldrh	r3, [r3, #4]
 8016d64:	b29a      	uxth	r2, r3
 8016d66:	693b      	ldr	r3, [r7, #16]
 8016d68:	889b      	ldrh	r3, [r3, #4]
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	429a      	cmp	r2, r3
 8016d6e:	d235      	bcs.n	8016ddc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d74:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d020      	beq.n	8016dbe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7e:	889b      	ldrh	r3, [r3, #4]
 8016d80:	b29a      	uxth	r2, r3
 8016d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d84:	88db      	ldrh	r3, [r3, #6]
 8016d86:	b29b      	uxth	r3, r3
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d307      	bcc.n	8016d9c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8e:	88db      	ldrh	r3, [r3, #6]
 8016d90:	b29a      	uxth	r2, r3
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	889b      	ldrh	r3, [r3, #4]
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	d902      	bls.n	8016da2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016da0:	e0de      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da4:	68ba      	ldr	r2, [r7, #8]
 8016da6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016daa:	88db      	ldrh	r3, [r3, #6]
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016db0:	889b      	ldrh	r3, [r3, #4]
 8016db2:	b29b      	uxth	r3, r3
 8016db4:	429a      	cmp	r2, r3
 8016db6:	d03d      	beq.n	8016e34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016db8:	2300      	movs	r3, #0
 8016dba:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016dbc:	e03a      	b.n	8016e34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dc0:	88db      	ldrh	r3, [r3, #6]
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	693b      	ldr	r3, [r7, #16]
 8016dc6:	889b      	ldrh	r3, [r3, #4]
 8016dc8:	b29b      	uxth	r3, r3
 8016dca:	429a      	cmp	r2, r3
 8016dcc:	d902      	bls.n	8016dd4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dd2:	e0c5      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	68ba      	ldr	r2, [r7, #8]
 8016dd8:	605a      	str	r2, [r3, #4]
      break;
 8016dda:	e02b      	b.n	8016e34 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dde:	889b      	ldrh	r3, [r3, #4]
 8016de0:	b29a      	uxth	r2, r3
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	889b      	ldrh	r3, [r3, #4]
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	429a      	cmp	r2, r3
 8016dea:	d102      	bne.n	8016df2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016df0:	e0b6      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016df4:	889b      	ldrh	r3, [r3, #4]
 8016df6:	b29a      	uxth	r2, r3
 8016df8:	693b      	ldr	r3, [r7, #16]
 8016dfa:	88db      	ldrh	r3, [r3, #6]
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	429a      	cmp	r2, r3
 8016e00:	d202      	bcs.n	8016e08 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e06:	e0ab      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d009      	beq.n	8016e22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e10:	88db      	ldrh	r3, [r3, #6]
 8016e12:	b29a      	uxth	r2, r3
 8016e14:	693b      	ldr	r3, [r7, #16]
 8016e16:	889b      	ldrh	r3, [r3, #4]
 8016e18:	b29b      	uxth	r3, r3
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d001      	beq.n	8016e22 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e1e:	2300      	movs	r3, #0
 8016e20:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016e22:	693b      	ldr	r3, [r7, #16]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016e28:	693b      	ldr	r3, [r7, #16]
 8016e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d193      	bne.n	8016d5a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016e32:	e000      	b.n	8016e36 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016e34:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d12d      	bne.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d01c      	beq.n	8016e7c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e44:	88db      	ldrh	r3, [r3, #6]
 8016e46:	b29a      	uxth	r2, r3
 8016e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4a:	889b      	ldrh	r3, [r3, #4]
 8016e4c:	b29b      	uxth	r3, r3
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d906      	bls.n	8016e60 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016e52:	4b45      	ldr	r3, [pc, #276]	; (8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e54:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016e58:	4944      	ldr	r1, [pc, #272]	; (8016f6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016e5a:	4845      	ldr	r0, [pc, #276]	; (8016f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e5c:	f000 ff4c 	bl	8017cf8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e62:	68ba      	ldr	r2, [r7, #8]
 8016e64:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e68:	88db      	ldrh	r3, [r3, #6]
 8016e6a:	b29a      	uxth	r2, r3
 8016e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e6e:	889b      	ldrh	r3, [r3, #4]
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	429a      	cmp	r2, r3
 8016e74:	d010      	beq.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016e76:	2300      	movs	r3, #0
 8016e78:	623b      	str	r3, [r7, #32]
 8016e7a:	e00d      	b.n	8016e98 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d006      	beq.n	8016e92 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016e84:	4b38      	ldr	r3, [pc, #224]	; (8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016e86:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016e8a:	493a      	ldr	r1, [pc, #232]	; (8016f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016e8c:	4838      	ldr	r0, [pc, #224]	; (8016f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016e8e:	f000 ff33 	bl	8017cf8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	68ba      	ldr	r2, [r7, #8]
 8016e96:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d105      	bne.n	8016eaa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	7f9b      	ldrb	r3, [r3, #30]
 8016ea2:	f003 0301 	and.w	r3, r3, #1
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d059      	beq.n	8016f5e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016eaa:	6a3b      	ldr	r3, [r7, #32]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d04f      	beq.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d006      	beq.n	8016ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	685b      	ldr	r3, [r3, #4]
 8016ebc:	685b      	ldr	r3, [r3, #4]
 8016ebe:	889b      	ldrh	r3, [r3, #4]
 8016ec0:	b29b      	uxth	r3, r3
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d002      	beq.n	8016ecc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	623b      	str	r3, [r7, #32]
 8016eca:	e041      	b.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ece:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016ed6:	e012      	b.n	8016efe <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee0:	88db      	ldrh	r3, [r3, #6]
 8016ee2:	b29a      	uxth	r2, r3
 8016ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee6:	889b      	ldrh	r3, [r3, #4]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d002      	beq.n	8016ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016eee:	2300      	movs	r3, #0
 8016ef0:	623b      	str	r3, [r7, #32]
            break;
 8016ef2:	e007      	b.n	8016f04 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ef6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d1e9      	bne.n	8016ed8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016f04:	6a3b      	ldr	r3, [r7, #32]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d022      	beq.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	685b      	ldr	r3, [r3, #4]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d106      	bne.n	8016f20 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016f12:	4b15      	ldr	r3, [pc, #84]	; (8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f14:	f240 12df 	movw	r2, #479	; 0x1df
 8016f18:	4917      	ldr	r1, [pc, #92]	; (8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f1a:	4815      	ldr	r0, [pc, #84]	; (8016f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f1c:	f000 feec 	bl	8017cf8 <iprintf>
          LWIP_ASSERT("sanity check",
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	685b      	ldr	r3, [r3, #4]
 8016f24:	685b      	ldr	r3, [r3, #4]
 8016f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f28:	429a      	cmp	r2, r3
 8016f2a:	d106      	bne.n	8016f3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016f2c:	4b0e      	ldr	r3, [pc, #56]	; (8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f2e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016f32:	4911      	ldr	r1, [pc, #68]	; (8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f34:	480e      	ldr	r0, [pc, #56]	; (8016f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f36:	f000 fedf 	bl	8017cf8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d006      	beq.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016f42:	4b09      	ldr	r3, [pc, #36]	; (8016f68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f44:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016f48:	490c      	ldr	r1, [pc, #48]	; (8016f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016f4a:	4809      	ldr	r0, [pc, #36]	; (8016f70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f4c:	f000 fed4 	bl	8017cf8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016f50:	6a3b      	ldr	r3, [r7, #32]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	bf14      	ite	ne
 8016f56:	2301      	movne	r3, #1
 8016f58:	2300      	moveq	r3, #0
 8016f5a:	b2db      	uxtb	r3, r3
 8016f5c:	e000      	b.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016f5e:	2300      	movs	r3, #0
}
 8016f60:	4618      	mov	r0, r3
 8016f62:	3730      	adds	r7, #48	; 0x30
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}
 8016f68:	0801b7ac 	.word	0x0801b7ac
 8016f6c:	0801b890 	.word	0x0801b890
 8016f70:	0801b7f4 	.word	0x0801b7f4
 8016f74:	0801b8b0 	.word	0x0801b8b0
 8016f78:	0801b8e8 	.word	0x0801b8e8
 8016f7c:	0801b8f8 	.word	0x0801b8f8

08016f80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b08e      	sub	sp, #56	; 0x38
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	685b      	ldr	r3, [r3, #4]
 8016f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f90:	781b      	ldrb	r3, [r3, #0]
 8016f92:	f003 030f 	and.w	r3, r3, #15
 8016f96:	b2db      	uxtb	r3, r3
 8016f98:	009b      	lsls	r3, r3, #2
 8016f9a:	b2db      	uxtb	r3, r3
 8016f9c:	2b14      	cmp	r3, #20
 8016f9e:	f040 8167 	bne.w	8017270 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa4:	88db      	ldrh	r3, [r3, #6]
 8016fa6:	b29b      	uxth	r3, r3
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7f4 fb69 	bl	800b680 <lwip_htons>
 8016fae:	4603      	mov	r3, r0
 8016fb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	00db      	lsls	r3, r3, #3
 8016fb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbc:	885b      	ldrh	r3, [r3, #2]
 8016fbe:	b29b      	uxth	r3, r3
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	f7f4 fb5d 	bl	800b680 <lwip_htons>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fcc:	781b      	ldrb	r3, [r3, #0]
 8016fce:	f003 030f 	and.w	r3, r3, #15
 8016fd2:	b2db      	uxtb	r3, r3
 8016fd4:	009b      	lsls	r3, r3, #2
 8016fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016fde:	b29b      	uxth	r3, r3
 8016fe0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016fe2:	429a      	cmp	r2, r3
 8016fe4:	f0c0 8146 	bcc.w	8017274 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016fec:	b29b      	uxth	r3, r3
 8016fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016ff0:	1ad3      	subs	r3, r2, r3
 8016ff2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f7f6 f887 	bl	800d108 <pbuf_clen>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016ffe:	4b9f      	ldr	r3, [pc, #636]	; (801727c <ip4_reass+0x2fc>)
 8017000:	881b      	ldrh	r3, [r3, #0]
 8017002:	461a      	mov	r2, r3
 8017004:	8c3b      	ldrh	r3, [r7, #32]
 8017006:	4413      	add	r3, r2
 8017008:	2b0a      	cmp	r3, #10
 801700a:	dd10      	ble.n	801702e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801700c:	8c3b      	ldrh	r3, [r7, #32]
 801700e:	4619      	mov	r1, r3
 8017010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017012:	f7ff fd81 	bl	8016b18 <ip_reass_remove_oldest_datagram>
 8017016:	4603      	mov	r3, r0
 8017018:	2b00      	cmp	r3, #0
 801701a:	f000 812d 	beq.w	8017278 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801701e:	4b97      	ldr	r3, [pc, #604]	; (801727c <ip4_reass+0x2fc>)
 8017020:	881b      	ldrh	r3, [r3, #0]
 8017022:	461a      	mov	r2, r3
 8017024:	8c3b      	ldrh	r3, [r7, #32]
 8017026:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017028:	2b0a      	cmp	r3, #10
 801702a:	f300 8125 	bgt.w	8017278 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801702e:	4b94      	ldr	r3, [pc, #592]	; (8017280 <ip4_reass+0x300>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	633b      	str	r3, [r7, #48]	; 0x30
 8017034:	e015      	b.n	8017062 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017038:	695a      	ldr	r2, [r3, #20]
 801703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703c:	68db      	ldr	r3, [r3, #12]
 801703e:	429a      	cmp	r2, r3
 8017040:	d10c      	bne.n	801705c <ip4_reass+0xdc>
 8017042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017044:	699a      	ldr	r2, [r3, #24]
 8017046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017048:	691b      	ldr	r3, [r3, #16]
 801704a:	429a      	cmp	r2, r3
 801704c:	d106      	bne.n	801705c <ip4_reass+0xdc>
 801704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017050:	899a      	ldrh	r2, [r3, #12]
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	889b      	ldrh	r3, [r3, #4]
 8017056:	b29b      	uxth	r3, r3
 8017058:	429a      	cmp	r2, r3
 801705a:	d006      	beq.n	801706a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801705c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	633b      	str	r3, [r7, #48]	; 0x30
 8017062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017064:	2b00      	cmp	r3, #0
 8017066:	d1e6      	bne.n	8017036 <ip4_reass+0xb6>
 8017068:	e000      	b.n	801706c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801706a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801706c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801706e:	2b00      	cmp	r3, #0
 8017070:	d109      	bne.n	8017086 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017072:	8c3b      	ldrh	r3, [r7, #32]
 8017074:	4619      	mov	r1, r3
 8017076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017078:	f7ff fdb0 	bl	8016bdc <ip_reass_enqueue_new_datagram>
 801707c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801707e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017080:	2b00      	cmp	r3, #0
 8017082:	d11c      	bne.n	80170be <ip4_reass+0x13e>
      goto nullreturn;
 8017084:	e109      	b.n	801729a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017088:	88db      	ldrh	r3, [r3, #6]
 801708a:	b29b      	uxth	r3, r3
 801708c:	4618      	mov	r0, r3
 801708e:	f7f4 faf7 	bl	800b680 <lwip_htons>
 8017092:	4603      	mov	r3, r0
 8017094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017098:	2b00      	cmp	r3, #0
 801709a:	d110      	bne.n	80170be <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801709c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709e:	89db      	ldrh	r3, [r3, #14]
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7f4 faed 	bl	800b680 <lwip_htons>
 80170a6:	4603      	mov	r3, r0
 80170a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d006      	beq.n	80170be <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	3308      	adds	r3, #8
 80170b4:	2214      	movs	r2, #20
 80170b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80170b8:	4618      	mov	r0, r3
 80170ba:	f000 fdac 	bl	8017c16 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80170be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170c0:	88db      	ldrh	r3, [r3, #6]
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	f003 0320 	and.w	r3, r3, #32
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	bf0c      	ite	eq
 80170cc:	2301      	moveq	r3, #1
 80170ce:	2300      	movne	r3, #0
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d00e      	beq.n	80170f8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80170da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80170dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80170de:	4413      	add	r3, r2
 80170e0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80170e2:	8b7a      	ldrh	r2, [r7, #26]
 80170e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80170e6:	429a      	cmp	r2, r3
 80170e8:	f0c0 80a0 	bcc.w	801722c <ip4_reass+0x2ac>
 80170ec:	8b7b      	ldrh	r3, [r7, #26]
 80170ee:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80170f2:	4293      	cmp	r3, r2
 80170f4:	f200 809a 	bhi.w	801722c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80170f8:	69fa      	ldr	r2, [r7, #28]
 80170fa:	6879      	ldr	r1, [r7, #4]
 80170fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170fe:	f7ff fdd5 	bl	8016cac <ip_reass_chain_frag_into_datagram_and_validate>
 8017102:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801710a:	f000 8091 	beq.w	8017230 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801710e:	4b5b      	ldr	r3, [pc, #364]	; (801727c <ip4_reass+0x2fc>)
 8017110:	881a      	ldrh	r2, [r3, #0]
 8017112:	8c3b      	ldrh	r3, [r7, #32]
 8017114:	4413      	add	r3, r2
 8017116:	b29a      	uxth	r2, r3
 8017118:	4b58      	ldr	r3, [pc, #352]	; (801727c <ip4_reass+0x2fc>)
 801711a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801711c:	69fb      	ldr	r3, [r7, #28]
 801711e:	2b00      	cmp	r3, #0
 8017120:	d00d      	beq.n	801713e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017122:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017124:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017126:	4413      	add	r3, r2
 8017128:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801712c:	8a7a      	ldrh	r2, [r7, #18]
 801712e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017132:	7f9b      	ldrb	r3, [r3, #30]
 8017134:	f043 0301 	orr.w	r3, r3, #1
 8017138:	b2da      	uxtb	r2, r3
 801713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801713e:	697b      	ldr	r3, [r7, #20]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d171      	bne.n	8017228 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017146:	8b9b      	ldrh	r3, [r3, #28]
 8017148:	3314      	adds	r3, #20
 801714a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	685b      	ldr	r3, [r3, #4]
 801715c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017160:	3308      	adds	r3, #8
 8017162:	2214      	movs	r2, #20
 8017164:	4619      	mov	r1, r3
 8017166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017168:	f000 fd55 	bl	8017c16 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801716c:	8a3b      	ldrh	r3, [r7, #16]
 801716e:	4618      	mov	r0, r3
 8017170:	f7f4 fa86 	bl	800b680 <lwip_htons>
 8017174:	4603      	mov	r3, r0
 8017176:	461a      	mov	r2, r3
 8017178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717e:	2200      	movs	r2, #0
 8017180:	719a      	strb	r2, [r3, #6]
 8017182:	2200      	movs	r2, #0
 8017184:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017188:	2200      	movs	r2, #0
 801718a:	729a      	strb	r2, [r3, #10]
 801718c:	2200      	movs	r2, #0
 801718e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017192:	685b      	ldr	r3, [r3, #4]
 8017194:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017196:	e00d      	b.n	80171b4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801719e:	2114      	movs	r1, #20
 80171a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80171a2:	f7f5 fe9d 	bl	800cee0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80171a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f7f5 ffed 	bl	800d188 <pbuf_cat>
      r = iprh->next_pbuf;
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80171b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d1ee      	bne.n	8017198 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80171ba:	4b31      	ldr	r3, [pc, #196]	; (8017280 <ip4_reass+0x300>)
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171c0:	429a      	cmp	r2, r3
 80171c2:	d102      	bne.n	80171ca <ip4_reass+0x24a>
      ipr_prev = NULL;
 80171c4:	2300      	movs	r3, #0
 80171c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171c8:	e010      	b.n	80171ec <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171ca:	4b2d      	ldr	r3, [pc, #180]	; (8017280 <ip4_reass+0x300>)
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171d0:	e007      	b.n	80171e2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80171d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171d8:	429a      	cmp	r2, r3
 80171da:	d006      	beq.n	80171ea <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80171dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171e4:	2b00      	cmp	r3, #0
 80171e6:	d1f4      	bne.n	80171d2 <ip4_reass+0x252>
 80171e8:	e000      	b.n	80171ec <ip4_reass+0x26c>
          break;
 80171ea:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80171ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80171ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171f0:	f7ff fd2e 	bl	8016c50 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f7f5 ff87 	bl	800d108 <pbuf_clen>
 80171fa:	4603      	mov	r3, r0
 80171fc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80171fe:	4b1f      	ldr	r3, [pc, #124]	; (801727c <ip4_reass+0x2fc>)
 8017200:	881b      	ldrh	r3, [r3, #0]
 8017202:	8c3a      	ldrh	r2, [r7, #32]
 8017204:	429a      	cmp	r2, r3
 8017206:	d906      	bls.n	8017216 <ip4_reass+0x296>
 8017208:	4b1e      	ldr	r3, [pc, #120]	; (8017284 <ip4_reass+0x304>)
 801720a:	f240 229b 	movw	r2, #667	; 0x29b
 801720e:	491e      	ldr	r1, [pc, #120]	; (8017288 <ip4_reass+0x308>)
 8017210:	481e      	ldr	r0, [pc, #120]	; (801728c <ip4_reass+0x30c>)
 8017212:	f000 fd71 	bl	8017cf8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017216:	4b19      	ldr	r3, [pc, #100]	; (801727c <ip4_reass+0x2fc>)
 8017218:	881a      	ldrh	r2, [r3, #0]
 801721a:	8c3b      	ldrh	r3, [r7, #32]
 801721c:	1ad3      	subs	r3, r2, r3
 801721e:	b29a      	uxth	r2, r3
 8017220:	4b16      	ldr	r3, [pc, #88]	; (801727c <ip4_reass+0x2fc>)
 8017222:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	e03c      	b.n	80172a2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017228:	2300      	movs	r3, #0
 801722a:	e03a      	b.n	80172a2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801722c:	bf00      	nop
 801722e:	e000      	b.n	8017232 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017230:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017234:	2b00      	cmp	r3, #0
 8017236:	d106      	bne.n	8017246 <ip4_reass+0x2c6>
 8017238:	4b12      	ldr	r3, [pc, #72]	; (8017284 <ip4_reass+0x304>)
 801723a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801723e:	4914      	ldr	r1, [pc, #80]	; (8017290 <ip4_reass+0x310>)
 8017240:	4812      	ldr	r0, [pc, #72]	; (801728c <ip4_reass+0x30c>)
 8017242:	f000 fd59 	bl	8017cf8 <iprintf>
  if (ipr->p == NULL) {
 8017246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d124      	bne.n	8017298 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801724e:	4b0c      	ldr	r3, [pc, #48]	; (8017280 <ip4_reass+0x300>)
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017254:	429a      	cmp	r2, r3
 8017256:	d006      	beq.n	8017266 <ip4_reass+0x2e6>
 8017258:	4b0a      	ldr	r3, [pc, #40]	; (8017284 <ip4_reass+0x304>)
 801725a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801725e:	490d      	ldr	r1, [pc, #52]	; (8017294 <ip4_reass+0x314>)
 8017260:	480a      	ldr	r0, [pc, #40]	; (801728c <ip4_reass+0x30c>)
 8017262:	f000 fd49 	bl	8017cf8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017266:	2100      	movs	r1, #0
 8017268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801726a:	f7ff fcf1 	bl	8016c50 <ip_reass_dequeue_datagram>
 801726e:	e014      	b.n	801729a <ip4_reass+0x31a>
    goto nullreturn;
 8017270:	bf00      	nop
 8017272:	e012      	b.n	801729a <ip4_reass+0x31a>
    goto nullreturn;
 8017274:	bf00      	nop
 8017276:	e010      	b.n	801729a <ip4_reass+0x31a>
      goto nullreturn;
 8017278:	bf00      	nop
 801727a:	e00e      	b.n	801729a <ip4_reass+0x31a>
 801727c:	24009ef4 	.word	0x24009ef4
 8017280:	24009ef0 	.word	0x24009ef0
 8017284:	0801b7ac 	.word	0x0801b7ac
 8017288:	0801b91c 	.word	0x0801b91c
 801728c:	0801b7f4 	.word	0x0801b7f4
 8017290:	0801b938 	.word	0x0801b938
 8017294:	0801b944 	.word	0x0801b944
  }

nullreturn:
 8017298:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7f5 fea6 	bl	800cfec <pbuf_free>
  return NULL;
 80172a0:	2300      	movs	r3, #0
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3738      	adds	r7, #56	; 0x38
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}
 80172aa:	bf00      	nop

080172ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80172b0:	2005      	movs	r0, #5
 80172b2:	f7f4 ff75 	bl	800c1a0 <memp_malloc>
 80172b6:	4603      	mov	r3, r0
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	bd80      	pop	{r7, pc}

080172bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b082      	sub	sp, #8
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d106      	bne.n	80172d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80172ca:	4b07      	ldr	r3, [pc, #28]	; (80172e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80172cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80172d0:	4906      	ldr	r1, [pc, #24]	; (80172ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80172d2:	4807      	ldr	r0, [pc, #28]	; (80172f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80172d4:	f000 fd10 	bl	8017cf8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80172d8:	6879      	ldr	r1, [r7, #4]
 80172da:	2005      	movs	r0, #5
 80172dc:	f7f4 ffd6 	bl	800c28c <memp_free>
}
 80172e0:	bf00      	nop
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	0801b7ac 	.word	0x0801b7ac
 80172ec:	0801b964 	.word	0x0801b964
 80172f0:	0801b7f4 	.word	0x0801b7f4

080172f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d106      	bne.n	8017314 <ipfrag_free_pbuf_custom+0x20>
 8017306:	4b11      	ldr	r3, [pc, #68]	; (801734c <ipfrag_free_pbuf_custom+0x58>)
 8017308:	f240 22ce 	movw	r2, #718	; 0x2ce
 801730c:	4910      	ldr	r1, [pc, #64]	; (8017350 <ipfrag_free_pbuf_custom+0x5c>)
 801730e:	4811      	ldr	r0, [pc, #68]	; (8017354 <ipfrag_free_pbuf_custom+0x60>)
 8017310:	f000 fcf2 	bl	8017cf8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017314:	68fa      	ldr	r2, [r7, #12]
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	429a      	cmp	r2, r3
 801731a:	d006      	beq.n	801732a <ipfrag_free_pbuf_custom+0x36>
 801731c:	4b0b      	ldr	r3, [pc, #44]	; (801734c <ipfrag_free_pbuf_custom+0x58>)
 801731e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017322:	490d      	ldr	r1, [pc, #52]	; (8017358 <ipfrag_free_pbuf_custom+0x64>)
 8017324:	480b      	ldr	r0, [pc, #44]	; (8017354 <ipfrag_free_pbuf_custom+0x60>)
 8017326:	f000 fce7 	bl	8017cf8 <iprintf>
  if (pcr->original != NULL) {
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	695b      	ldr	r3, [r3, #20]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d004      	beq.n	801733c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	695b      	ldr	r3, [r3, #20]
 8017336:	4618      	mov	r0, r3
 8017338:	f7f5 fe58 	bl	800cfec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	f7ff ffbd 	bl	80172bc <ip_frag_free_pbuf_custom_ref>
}
 8017342:	bf00      	nop
 8017344:	3710      	adds	r7, #16
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}
 801734a:	bf00      	nop
 801734c:	0801b7ac 	.word	0x0801b7ac
 8017350:	0801b970 	.word	0x0801b970
 8017354:	0801b7f4 	.word	0x0801b7f4
 8017358:	0801b97c 	.word	0x0801b97c

0801735c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b094      	sub	sp, #80	; 0x50
 8017360:	af02      	add	r7, sp, #8
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017368:	2300      	movs	r3, #0
 801736a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801736e:	68bb      	ldr	r3, [r7, #8]
 8017370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017372:	3b14      	subs	r3, #20
 8017374:	2b00      	cmp	r3, #0
 8017376:	da00      	bge.n	801737a <ip4_frag+0x1e>
 8017378:	3307      	adds	r3, #7
 801737a:	10db      	asrs	r3, r3, #3
 801737c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801737e:	2314      	movs	r3, #20
 8017380:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	685b      	ldr	r3, [r3, #4]
 8017386:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801738a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801738e:	781b      	ldrb	r3, [r3, #0]
 8017390:	f003 030f 	and.w	r3, r3, #15
 8017394:	b2db      	uxtb	r3, r3
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	b2db      	uxtb	r3, r3
 801739a:	2b14      	cmp	r3, #20
 801739c:	d002      	beq.n	80173a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801739e:	f06f 0305 	mvn.w	r3, #5
 80173a2:	e110      	b.n	80175c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	895b      	ldrh	r3, [r3, #10]
 80173a8:	2b13      	cmp	r3, #19
 80173aa:	d809      	bhi.n	80173c0 <ip4_frag+0x64>
 80173ac:	4b88      	ldr	r3, [pc, #544]	; (80175d0 <ip4_frag+0x274>)
 80173ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80173b2:	4988      	ldr	r1, [pc, #544]	; (80175d4 <ip4_frag+0x278>)
 80173b4:	4888      	ldr	r0, [pc, #544]	; (80175d8 <ip4_frag+0x27c>)
 80173b6:	f000 fc9f 	bl	8017cf8 <iprintf>
 80173ba:	f06f 0305 	mvn.w	r3, #5
 80173be:	e102      	b.n	80175c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80173c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173c2:	88db      	ldrh	r3, [r3, #6]
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	4618      	mov	r0, r3
 80173c8:	f7f4 f95a 	bl	800b680 <lwip_htons>
 80173cc:	4603      	mov	r3, r0
 80173ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80173d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80173da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80173dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80173e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	891b      	ldrh	r3, [r3, #8]
 80173e6:	3b14      	subs	r3, #20
 80173e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80173ec:	e0e1      	b.n	80175b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80173ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80173f0:	00db      	lsls	r3, r3, #3
 80173f2:	b29b      	uxth	r3, r3
 80173f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80173f8:	4293      	cmp	r3, r2
 80173fa:	bf28      	it	cs
 80173fc:	4613      	movcs	r3, r2
 80173fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017400:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017404:	2114      	movs	r1, #20
 8017406:	200e      	movs	r0, #14
 8017408:	f7f5 fb0c 	bl	800ca24 <pbuf_alloc>
 801740c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801740e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017410:	2b00      	cmp	r3, #0
 8017412:	f000 80d5 	beq.w	80175c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017418:	895b      	ldrh	r3, [r3, #10]
 801741a:	2b13      	cmp	r3, #19
 801741c:	d806      	bhi.n	801742c <ip4_frag+0xd0>
 801741e:	4b6c      	ldr	r3, [pc, #432]	; (80175d0 <ip4_frag+0x274>)
 8017420:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017424:	496d      	ldr	r1, [pc, #436]	; (80175dc <ip4_frag+0x280>)
 8017426:	486c      	ldr	r0, [pc, #432]	; (80175d8 <ip4_frag+0x27c>)
 8017428:	f000 fc66 	bl	8017cf8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801742e:	685b      	ldr	r3, [r3, #4]
 8017430:	2214      	movs	r2, #20
 8017432:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017434:	4618      	mov	r0, r3
 8017436:	f000 fbee 	bl	8017c16 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017442:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017446:	e064      	b.n	8017512 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	895a      	ldrh	r2, [r3, #10]
 801744c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801744e:	1ad3      	subs	r3, r2, r3
 8017450:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017452:	68fb      	ldr	r3, [r7, #12]
 8017454:	895b      	ldrh	r3, [r3, #10]
 8017456:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017458:	429a      	cmp	r2, r3
 801745a:	d906      	bls.n	801746a <ip4_frag+0x10e>
 801745c:	4b5c      	ldr	r3, [pc, #368]	; (80175d0 <ip4_frag+0x274>)
 801745e:	f240 322d 	movw	r2, #813	; 0x32d
 8017462:	495f      	ldr	r1, [pc, #380]	; (80175e0 <ip4_frag+0x284>)
 8017464:	485c      	ldr	r0, [pc, #368]	; (80175d8 <ip4_frag+0x27c>)
 8017466:	f000 fc47 	bl	8017cf8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801746a:	8bfa      	ldrh	r2, [r7, #30]
 801746c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017470:	4293      	cmp	r3, r2
 8017472:	bf28      	it	cs
 8017474:	4613      	movcs	r3, r2
 8017476:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801747a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801747e:	2b00      	cmp	r3, #0
 8017480:	d105      	bne.n	801748e <ip4_frag+0x132>
        poff = 0;
 8017482:	2300      	movs	r3, #0
 8017484:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	60fb      	str	r3, [r7, #12]
        continue;
 801748c:	e041      	b.n	8017512 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801748e:	f7ff ff0d 	bl	80172ac <ip_frag_alloc_pbuf_custom_ref>
 8017492:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017494:	69bb      	ldr	r3, [r7, #24]
 8017496:	2b00      	cmp	r3, #0
 8017498:	d103      	bne.n	80174a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801749a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801749c:	f7f5 fda6 	bl	800cfec <pbuf_free>
        goto memerr;
 80174a0:	e08f      	b.n	80175c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80174aa:	4413      	add	r3, r2
 80174ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80174b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80174b4:	9201      	str	r2, [sp, #4]
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	4603      	mov	r3, r0
 80174ba:	2241      	movs	r2, #65	; 0x41
 80174bc:	2000      	movs	r0, #0
 80174be:	f7f5 fbdb 	bl	800cc78 <pbuf_alloced_custom>
 80174c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80174c4:	697b      	ldr	r3, [r7, #20]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d106      	bne.n	80174d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80174ca:	69b8      	ldr	r0, [r7, #24]
 80174cc:	f7ff fef6 	bl	80172bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80174d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174d2:	f7f5 fd8b 	bl	800cfec <pbuf_free>
        goto memerr;
 80174d6:	e074      	b.n	80175c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80174d8:	68f8      	ldr	r0, [r7, #12]
 80174da:	f7f5 fe2d 	bl	800d138 <pbuf_ref>
      pcr->original = p;
 80174de:	69bb      	ldr	r3, [r7, #24]
 80174e0:	68fa      	ldr	r2, [r7, #12]
 80174e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80174e4:	69bb      	ldr	r3, [r7, #24]
 80174e6:	4a3f      	ldr	r2, [pc, #252]	; (80175e4 <ip4_frag+0x288>)
 80174e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80174ea:	6979      	ldr	r1, [r7, #20]
 80174ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174ee:	f7f5 fe4b 	bl	800d188 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80174f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80174f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80174fa:	1ad3      	subs	r3, r2, r3
 80174fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017500:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017504:	2b00      	cmp	r3, #0
 8017506:	d004      	beq.n	8017512 <ip4_frag+0x1b6>
        poff = 0;
 8017508:	2300      	movs	r3, #0
 801750a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017512:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017516:	2b00      	cmp	r3, #0
 8017518:	d196      	bne.n	8017448 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801751a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801751c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017520:	4413      	add	r3, r2
 8017522:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017524:	68bb      	ldr	r3, [r7, #8]
 8017526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017528:	f1a3 0213 	sub.w	r2, r3, #19
 801752c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017530:	429a      	cmp	r2, r3
 8017532:	bfcc      	ite	gt
 8017534:	2301      	movgt	r3, #1
 8017536:	2300      	movle	r3, #0
 8017538:	b2db      	uxtb	r3, r3
 801753a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801753c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017544:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017546:	6a3b      	ldr	r3, [r7, #32]
 8017548:	2b00      	cmp	r3, #0
 801754a:	d002      	beq.n	8017552 <ip4_frag+0x1f6>
 801754c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801754e:	2b00      	cmp	r3, #0
 8017550:	d003      	beq.n	801755a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017552:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017558:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801755a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801755c:	4618      	mov	r0, r3
 801755e:	f7f4 f88f 	bl	800b680 <lwip_htons>
 8017562:	4603      	mov	r3, r0
 8017564:	461a      	mov	r2, r3
 8017566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017568:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801756a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801756c:	3314      	adds	r3, #20
 801756e:	b29b      	uxth	r3, r3
 8017570:	4618      	mov	r0, r3
 8017572:	f7f4 f885 	bl	800b680 <lwip_htons>
 8017576:	4603      	mov	r3, r0
 8017578:	461a      	mov	r2, r3
 801757a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801757c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801757e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017580:	2200      	movs	r2, #0
 8017582:	729a      	strb	r2, [r3, #10]
 8017584:	2200      	movs	r2, #0
 8017586:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	695b      	ldr	r3, [r3, #20]
 801758c:	687a      	ldr	r2, [r7, #4]
 801758e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017590:	68b8      	ldr	r0, [r7, #8]
 8017592:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017596:	f7f5 fd29 	bl	800cfec <pbuf_free>
    left = (u16_t)(left - fragsize);
 801759a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801759e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175a0:	1ad3      	subs	r3, r2, r3
 80175a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80175a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80175aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80175ac:	4413      	add	r3, r2
 80175ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80175b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	f47f af19 	bne.w	80173ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80175bc:	2300      	movs	r3, #0
 80175be:	e002      	b.n	80175c6 <ip4_frag+0x26a>
      goto memerr;
 80175c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80175c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80175c6:	4618      	mov	r0, r3
 80175c8:	3748      	adds	r7, #72	; 0x48
 80175ca:	46bd      	mov	sp, r7
 80175cc:	bd80      	pop	{r7, pc}
 80175ce:	bf00      	nop
 80175d0:	0801b7ac 	.word	0x0801b7ac
 80175d4:	0801b988 	.word	0x0801b988
 80175d8:	0801b7f4 	.word	0x0801b7f4
 80175dc:	0801b9a4 	.word	0x0801b9a4
 80175e0:	0801b9c4 	.word	0x0801b9c4
 80175e4:	080172f5 	.word	0x080172f5

080175e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b086      	sub	sp, #24
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80175f2:	230e      	movs	r3, #14
 80175f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	895b      	ldrh	r3, [r3, #10]
 80175fa:	2b0e      	cmp	r3, #14
 80175fc:	d96e      	bls.n	80176dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	7bdb      	ldrb	r3, [r3, #15]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d106      	bne.n	8017614 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801760c:	3301      	adds	r3, #1
 801760e:	b2da      	uxtb	r2, r3
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	685b      	ldr	r3, [r3, #4]
 8017618:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801761a:	693b      	ldr	r3, [r7, #16]
 801761c:	7b1a      	ldrb	r2, [r3, #12]
 801761e:	7b5b      	ldrb	r3, [r3, #13]
 8017620:	021b      	lsls	r3, r3, #8
 8017622:	4313      	orrs	r3, r2
 8017624:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017626:	693b      	ldr	r3, [r7, #16]
 8017628:	781b      	ldrb	r3, [r3, #0]
 801762a:	f003 0301 	and.w	r3, r3, #1
 801762e:	2b00      	cmp	r3, #0
 8017630:	d023      	beq.n	801767a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017632:	693b      	ldr	r3, [r7, #16]
 8017634:	781b      	ldrb	r3, [r3, #0]
 8017636:	2b01      	cmp	r3, #1
 8017638:	d10f      	bne.n	801765a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801763a:	693b      	ldr	r3, [r7, #16]
 801763c:	785b      	ldrb	r3, [r3, #1]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d11b      	bne.n	801767a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017642:	693b      	ldr	r3, [r7, #16]
 8017644:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017646:	2b5e      	cmp	r3, #94	; 0x5e
 8017648:	d117      	bne.n	801767a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	7b5b      	ldrb	r3, [r3, #13]
 801764e:	f043 0310 	orr.w	r3, r3, #16
 8017652:	b2da      	uxtb	r2, r3
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	735a      	strb	r2, [r3, #13]
 8017658:	e00f      	b.n	801767a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801765a:	693b      	ldr	r3, [r7, #16]
 801765c:	2206      	movs	r2, #6
 801765e:	4928      	ldr	r1, [pc, #160]	; (8017700 <ethernet_input+0x118>)
 8017660:	4618      	mov	r0, r3
 8017662:	f000 faca 	bl	8017bfa <memcmp>
 8017666:	4603      	mov	r3, r0
 8017668:	2b00      	cmp	r3, #0
 801766a:	d106      	bne.n	801767a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	7b5b      	ldrb	r3, [r3, #13]
 8017670:	f043 0308 	orr.w	r3, r3, #8
 8017674:	b2da      	uxtb	r2, r3
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801767a:	89fb      	ldrh	r3, [r7, #14]
 801767c:	2b08      	cmp	r3, #8
 801767e:	d003      	beq.n	8017688 <ethernet_input+0xa0>
 8017680:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017684:	d014      	beq.n	80176b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017686:	e032      	b.n	80176ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801768e:	f003 0308 	and.w	r3, r3, #8
 8017692:	2b00      	cmp	r3, #0
 8017694:	d024      	beq.n	80176e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017696:	8afb      	ldrh	r3, [r7, #22]
 8017698:	4619      	mov	r1, r3
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	f7f5 fc20 	bl	800cee0 <pbuf_remove_header>
 80176a0:	4603      	mov	r3, r0
 80176a2:	2b00      	cmp	r3, #0
 80176a4:	d11e      	bne.n	80176e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80176a6:	6839      	ldr	r1, [r7, #0]
 80176a8:	6878      	ldr	r0, [r7, #4]
 80176aa:	f7fe ff09 	bl	80164c0 <ip4_input>
      break;
 80176ae:	e013      	b.n	80176d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176b6:	f003 0308 	and.w	r3, r3, #8
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d014      	beq.n	80176e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80176be:	8afb      	ldrh	r3, [r7, #22]
 80176c0:	4619      	mov	r1, r3
 80176c2:	6878      	ldr	r0, [r7, #4]
 80176c4:	f7f5 fc0c 	bl	800cee0 <pbuf_remove_header>
 80176c8:	4603      	mov	r3, r0
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d10e      	bne.n	80176ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80176ce:	6839      	ldr	r1, [r7, #0]
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	f7fe f87f 	bl	80157d4 <etharp_input>
      break;
 80176d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80176d8:	2300      	movs	r3, #0
 80176da:	e00c      	b.n	80176f6 <ethernet_input+0x10e>
    goto free_and_return;
 80176dc:	bf00      	nop
 80176de:	e006      	b.n	80176ee <ethernet_input+0x106>
        goto free_and_return;
 80176e0:	bf00      	nop
 80176e2:	e004      	b.n	80176ee <ethernet_input+0x106>
        goto free_and_return;
 80176e4:	bf00      	nop
 80176e6:	e002      	b.n	80176ee <ethernet_input+0x106>
        goto free_and_return;
 80176e8:	bf00      	nop
 80176ea:	e000      	b.n	80176ee <ethernet_input+0x106>
        goto free_and_return;
 80176ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80176ee:	6878      	ldr	r0, [r7, #4]
 80176f0:	f7f5 fc7c 	bl	800cfec <pbuf_free>
  return ERR_OK;
 80176f4:	2300      	movs	r3, #0
}
 80176f6:	4618      	mov	r0, r3
 80176f8:	3718      	adds	r7, #24
 80176fa:	46bd      	mov	sp, r7
 80176fc:	bd80      	pop	{r7, pc}
 80176fe:	bf00      	nop
 8017700:	0801bbd4 	.word	0x0801bbd4

08017704 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017704:	b580      	push	{r7, lr}
 8017706:	b086      	sub	sp, #24
 8017708:	af00      	add	r7, sp, #0
 801770a:	60f8      	str	r0, [r7, #12]
 801770c:	60b9      	str	r1, [r7, #8]
 801770e:	607a      	str	r2, [r7, #4]
 8017710:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017712:	8c3b      	ldrh	r3, [r7, #32]
 8017714:	4618      	mov	r0, r3
 8017716:	f7f3 ffb3 	bl	800b680 <lwip_htons>
 801771a:	4603      	mov	r3, r0
 801771c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801771e:	210e      	movs	r1, #14
 8017720:	68b8      	ldr	r0, [r7, #8]
 8017722:	f7f5 fbcd 	bl	800cec0 <pbuf_add_header>
 8017726:	4603      	mov	r3, r0
 8017728:	2b00      	cmp	r3, #0
 801772a:	d125      	bne.n	8017778 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	685b      	ldr	r3, [r3, #4]
 8017730:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	8afa      	ldrh	r2, [r7, #22]
 8017736:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	2206      	movs	r2, #6
 801773c:	6839      	ldr	r1, [r7, #0]
 801773e:	4618      	mov	r0, r3
 8017740:	f000 fa69 	bl	8017c16 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017744:	693b      	ldr	r3, [r7, #16]
 8017746:	3306      	adds	r3, #6
 8017748:	2206      	movs	r2, #6
 801774a:	6879      	ldr	r1, [r7, #4]
 801774c:	4618      	mov	r0, r3
 801774e:	f000 fa62 	bl	8017c16 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017758:	2b06      	cmp	r3, #6
 801775a:	d006      	beq.n	801776a <ethernet_output+0x66>
 801775c:	4b0a      	ldr	r3, [pc, #40]	; (8017788 <ethernet_output+0x84>)
 801775e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017762:	490a      	ldr	r1, [pc, #40]	; (801778c <ethernet_output+0x88>)
 8017764:	480a      	ldr	r0, [pc, #40]	; (8017790 <ethernet_output+0x8c>)
 8017766:	f000 fac7 	bl	8017cf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	699b      	ldr	r3, [r3, #24]
 801776e:	68b9      	ldr	r1, [r7, #8]
 8017770:	68f8      	ldr	r0, [r7, #12]
 8017772:	4798      	blx	r3
 8017774:	4603      	mov	r3, r0
 8017776:	e002      	b.n	801777e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017778:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801777a:	f06f 0301 	mvn.w	r3, #1
}
 801777e:	4618      	mov	r0, r3
 8017780:	3718      	adds	r7, #24
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}
 8017786:	bf00      	nop
 8017788:	0801b9d4 	.word	0x0801b9d4
 801778c:	0801ba0c 	.word	0x0801ba0c
 8017790:	0801ba40 	.word	0x0801ba40

08017794 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b086      	sub	sp, #24
 8017798:	af00      	add	r7, sp, #0
 801779a:	6078      	str	r0, [r7, #4]
 801779c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801779e:	683b      	ldr	r3, [r7, #0]
 80177a0:	60bb      	str	r3, [r7, #8]
 80177a2:	2304      	movs	r3, #4
 80177a4:	60fb      	str	r3, [r7, #12]
 80177a6:	2300      	movs	r3, #0
 80177a8:	613b      	str	r3, [r7, #16]
 80177aa:	2300      	movs	r3, #0
 80177ac:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80177ae:	f107 0308 	add.w	r3, r7, #8
 80177b2:	2100      	movs	r1, #0
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7f1 f885 	bl	80088c4 <osMessageCreate>
 80177ba:	4602      	mov	r2, r0
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d102      	bne.n	80177ce <sys_mbox_new+0x3a>
    return ERR_MEM;
 80177c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80177cc:	e000      	b.n	80177d0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80177ce:	2300      	movs	r3, #0
}
 80177d0:	4618      	mov	r0, r3
 80177d2:	3718      	adds	r7, #24
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80177d8:	b580      	push	{r7, lr}
 80177da:	b084      	sub	sp, #16
 80177dc:	af00      	add	r7, sp, #0
 80177de:	6078      	str	r0, [r7, #4]
 80177e0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	6839      	ldr	r1, [r7, #0]
 80177e8:	2200      	movs	r2, #0
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7f1 f892 	bl	8008914 <osMessagePut>
 80177f0:	4603      	mov	r3, r0
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d102      	bne.n	80177fc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80177f6:	2300      	movs	r3, #0
 80177f8:	73fb      	strb	r3, [r7, #15]
 80177fa:	e001      	b.n	8017800 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80177fc:	23ff      	movs	r3, #255	; 0xff
 80177fe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017804:	4618      	mov	r0, r3
 8017806:	3710      	adds	r7, #16
 8017808:	46bd      	mov	sp, r7
 801780a:	bd80      	pop	{r7, pc}

0801780c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801780c:	b580      	push	{r7, lr}
 801780e:	b08c      	sub	sp, #48	; 0x30
 8017810:	af00      	add	r7, sp, #0
 8017812:	61f8      	str	r0, [r7, #28]
 8017814:	61b9      	str	r1, [r7, #24]
 8017816:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017818:	f7f0 fec7 	bl	80085aa <osKernelSysTick>
 801781c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d017      	beq.n	8017854 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017824:	69fb      	ldr	r3, [r7, #28]
 8017826:	6819      	ldr	r1, [r3, #0]
 8017828:	f107 0320 	add.w	r3, r7, #32
 801782c:	697a      	ldr	r2, [r7, #20]
 801782e:	4618      	mov	r0, r3
 8017830:	f7f1 f8b0 	bl	8008994 <osMessageGet>

    if(event.status == osEventMessage)
 8017834:	6a3b      	ldr	r3, [r7, #32]
 8017836:	2b10      	cmp	r3, #16
 8017838:	d109      	bne.n	801784e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801783a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783c:	461a      	mov	r2, r3
 801783e:	69bb      	ldr	r3, [r7, #24]
 8017840:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017842:	f7f0 feb2 	bl	80085aa <osKernelSysTick>
 8017846:	4602      	mov	r2, r0
 8017848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	e019      	b.n	8017882 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801784e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017852:	e016      	b.n	8017882 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017854:	69fb      	ldr	r3, [r7, #28]
 8017856:	6819      	ldr	r1, [r3, #0]
 8017858:	463b      	mov	r3, r7
 801785a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801785e:	4618      	mov	r0, r3
 8017860:	f7f1 f898 	bl	8008994 <osMessageGet>
 8017864:	f107 0320 	add.w	r3, r7, #32
 8017868:	463a      	mov	r2, r7
 801786a:	ca07      	ldmia	r2, {r0, r1, r2}
 801786c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017872:	461a      	mov	r2, r3
 8017874:	69bb      	ldr	r3, [r7, #24]
 8017876:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017878:	f7f0 fe97 	bl	80085aa <osKernelSysTick>
 801787c:	4602      	mov	r2, r0
 801787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017880:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017882:	4618      	mov	r0, r3
 8017884:	3730      	adds	r7, #48	; 0x30
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}

0801788a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801788a:	b480      	push	{r7}
 801788c:	b083      	sub	sp, #12
 801788e:	af00      	add	r7, sp, #0
 8017890:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d101      	bne.n	801789e <sys_mbox_valid+0x14>
    return 0;
 801789a:	2300      	movs	r3, #0
 801789c:	e000      	b.n	80178a0 <sys_mbox_valid+0x16>
  else
    return 1;
 801789e:	2301      	movs	r3, #1
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	370c      	adds	r7, #12
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr

080178ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80178b0:	4803      	ldr	r0, [pc, #12]	; (80178c0 <sys_init+0x14>)
 80178b2:	f7f0 feea 	bl	800868a <osMutexCreate>
 80178b6:	4603      	mov	r3, r0
 80178b8:	4a02      	ldr	r2, [pc, #8]	; (80178c4 <sys_init+0x18>)
 80178ba:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80178bc:	bf00      	nop
 80178be:	bd80      	pop	{r7, pc}
 80178c0:	0801bbe4 	.word	0x0801bbe4
 80178c4:	2400d704 	.word	0x2400d704

080178c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80178d0:	2300      	movs	r3, #0
 80178d2:	60bb      	str	r3, [r7, #8]
 80178d4:	2300      	movs	r3, #0
 80178d6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80178d8:	f107 0308 	add.w	r3, r7, #8
 80178dc:	4618      	mov	r0, r3
 80178de:	f7f0 fed4 	bl	800868a <osMutexCreate>
 80178e2:	4602      	mov	r2, r0
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	681b      	ldr	r3, [r3, #0]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d102      	bne.n	80178f6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80178f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80178f4:	e000      	b.n	80178f8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80178f6:	2300      	movs	r3, #0
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3710      	adds	r7, #16
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}

08017900 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017900:	b580      	push	{r7, lr}
 8017902:	b082      	sub	sp, #8
 8017904:	af00      	add	r7, sp, #0
 8017906:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017910:	4618      	mov	r0, r3
 8017912:	f7f0 fed3 	bl	80086bc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017916:	bf00      	nop
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}

0801791e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801791e:	b580      	push	{r7, lr}
 8017920:	b082      	sub	sp, #8
 8017922:	af00      	add	r7, sp, #0
 8017924:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	4618      	mov	r0, r3
 801792c:	f7f0 ff14 	bl	8008758 <osMutexRelease>
}
 8017930:	bf00      	nop
 8017932:	3708      	adds	r7, #8
 8017934:	46bd      	mov	sp, r7
 8017936:	bd80      	pop	{r7, pc}

08017938 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b08c      	sub	sp, #48	; 0x30
 801793c:	af00      	add	r7, sp, #0
 801793e:	60f8      	str	r0, [r7, #12]
 8017940:	60b9      	str	r1, [r7, #8]
 8017942:	607a      	str	r2, [r7, #4]
 8017944:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017946:	f107 0314 	add.w	r3, r7, #20
 801794a:	2200      	movs	r2, #0
 801794c:	601a      	str	r2, [r3, #0]
 801794e:	605a      	str	r2, [r3, #4]
 8017950:	609a      	str	r2, [r3, #8]
 8017952:	60da      	str	r2, [r3, #12]
 8017954:	611a      	str	r2, [r3, #16]
 8017956:	615a      	str	r2, [r3, #20]
 8017958:	619a      	str	r2, [r3, #24]
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	617b      	str	r3, [r7, #20]
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	61bb      	str	r3, [r7, #24]
 8017962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017964:	b21b      	sxth	r3, r3
 8017966:	83bb      	strh	r3, [r7, #28]
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801796c:	f107 0314 	add.w	r3, r7, #20
 8017970:	6879      	ldr	r1, [r7, #4]
 8017972:	4618      	mov	r0, r3
 8017974:	f7f0 fe29 	bl	80085ca <osThreadCreate>
 8017978:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801797a:	4618      	mov	r0, r3
 801797c:	3730      	adds	r7, #48	; 0x30
 801797e:	46bd      	mov	sp, r7
 8017980:	bd80      	pop	{r7, pc}
	...

08017984 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017988:	4b04      	ldr	r3, [pc, #16]	; (801799c <sys_arch_protect+0x18>)
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017990:	4618      	mov	r0, r3
 8017992:	f7f0 fe93 	bl	80086bc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017996:	2301      	movs	r3, #1
}
 8017998:	4618      	mov	r0, r3
 801799a:	bd80      	pop	{r7, pc}
 801799c:	2400d704 	.word	0x2400d704

080179a0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b082      	sub	sp, #8
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80179a8:	4b04      	ldr	r3, [pc, #16]	; (80179bc <sys_arch_unprotect+0x1c>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	4618      	mov	r0, r3
 80179ae:	f7f0 fed3 	bl	8008758 <osMutexRelease>
}
 80179b2:	bf00      	nop
 80179b4:	3708      	adds	r7, #8
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop
 80179bc:	2400d704 	.word	0x2400d704

080179c0 <std>:
 80179c0:	2300      	movs	r3, #0
 80179c2:	b510      	push	{r4, lr}
 80179c4:	4604      	mov	r4, r0
 80179c6:	e9c0 3300 	strd	r3, r3, [r0]
 80179ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80179ce:	6083      	str	r3, [r0, #8]
 80179d0:	8181      	strh	r1, [r0, #12]
 80179d2:	6643      	str	r3, [r0, #100]	; 0x64
 80179d4:	81c2      	strh	r2, [r0, #14]
 80179d6:	6183      	str	r3, [r0, #24]
 80179d8:	4619      	mov	r1, r3
 80179da:	2208      	movs	r2, #8
 80179dc:	305c      	adds	r0, #92	; 0x5c
 80179de:	f000 f928 	bl	8017c32 <memset>
 80179e2:	4b05      	ldr	r3, [pc, #20]	; (80179f8 <std+0x38>)
 80179e4:	6263      	str	r3, [r4, #36]	; 0x24
 80179e6:	4b05      	ldr	r3, [pc, #20]	; (80179fc <std+0x3c>)
 80179e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80179ea:	4b05      	ldr	r3, [pc, #20]	; (8017a00 <std+0x40>)
 80179ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80179ee:	4b05      	ldr	r3, [pc, #20]	; (8017a04 <std+0x44>)
 80179f0:	6224      	str	r4, [r4, #32]
 80179f2:	6323      	str	r3, [r4, #48]	; 0x30
 80179f4:	bd10      	pop	{r4, pc}
 80179f6:	bf00      	nop
 80179f8:	08017e9d 	.word	0x08017e9d
 80179fc:	08017ebf 	.word	0x08017ebf
 8017a00:	08017ef7 	.word	0x08017ef7
 8017a04:	08017f1b 	.word	0x08017f1b

08017a08 <_cleanup_r>:
 8017a08:	4901      	ldr	r1, [pc, #4]	; (8017a10 <_cleanup_r+0x8>)
 8017a0a:	f000 b8af 	b.w	8017b6c <_fwalk_reent>
 8017a0e:	bf00      	nop
 8017a10:	080180b1 	.word	0x080180b1

08017a14 <__sfmoreglue>:
 8017a14:	b570      	push	{r4, r5, r6, lr}
 8017a16:	1e4a      	subs	r2, r1, #1
 8017a18:	2568      	movs	r5, #104	; 0x68
 8017a1a:	4355      	muls	r5, r2
 8017a1c:	460e      	mov	r6, r1
 8017a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a22:	f000 f90f 	bl	8017c44 <_malloc_r>
 8017a26:	4604      	mov	r4, r0
 8017a28:	b140      	cbz	r0, 8017a3c <__sfmoreglue+0x28>
 8017a2a:	2100      	movs	r1, #0
 8017a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8017a30:	300c      	adds	r0, #12
 8017a32:	60a0      	str	r0, [r4, #8]
 8017a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a38:	f000 f8fb 	bl	8017c32 <memset>
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	bd70      	pop	{r4, r5, r6, pc}

08017a40 <__sfp_lock_acquire>:
 8017a40:	4801      	ldr	r0, [pc, #4]	; (8017a48 <__sfp_lock_acquire+0x8>)
 8017a42:	f000 b8d8 	b.w	8017bf6 <__retarget_lock_acquire_recursive>
 8017a46:	bf00      	nop
 8017a48:	2400d710 	.word	0x2400d710

08017a4c <__sfp_lock_release>:
 8017a4c:	4801      	ldr	r0, [pc, #4]	; (8017a54 <__sfp_lock_release+0x8>)
 8017a4e:	f000 b8d3 	b.w	8017bf8 <__retarget_lock_release_recursive>
 8017a52:	bf00      	nop
 8017a54:	2400d710 	.word	0x2400d710

08017a58 <__sinit_lock_acquire>:
 8017a58:	4801      	ldr	r0, [pc, #4]	; (8017a60 <__sinit_lock_acquire+0x8>)
 8017a5a:	f000 b8cc 	b.w	8017bf6 <__retarget_lock_acquire_recursive>
 8017a5e:	bf00      	nop
 8017a60:	2400d70b 	.word	0x2400d70b

08017a64 <__sinit_lock_release>:
 8017a64:	4801      	ldr	r0, [pc, #4]	; (8017a6c <__sinit_lock_release+0x8>)
 8017a66:	f000 b8c7 	b.w	8017bf8 <__retarget_lock_release_recursive>
 8017a6a:	bf00      	nop
 8017a6c:	2400d70b 	.word	0x2400d70b

08017a70 <__sinit>:
 8017a70:	b510      	push	{r4, lr}
 8017a72:	4604      	mov	r4, r0
 8017a74:	f7ff fff0 	bl	8017a58 <__sinit_lock_acquire>
 8017a78:	69a3      	ldr	r3, [r4, #24]
 8017a7a:	b11b      	cbz	r3, 8017a84 <__sinit+0x14>
 8017a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a80:	f7ff bff0 	b.w	8017a64 <__sinit_lock_release>
 8017a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017a88:	6523      	str	r3, [r4, #80]	; 0x50
 8017a8a:	4b13      	ldr	r3, [pc, #76]	; (8017ad8 <__sinit+0x68>)
 8017a8c:	4a13      	ldr	r2, [pc, #76]	; (8017adc <__sinit+0x6c>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8017a92:	42a3      	cmp	r3, r4
 8017a94:	bf04      	itt	eq
 8017a96:	2301      	moveq	r3, #1
 8017a98:	61a3      	streq	r3, [r4, #24]
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	f000 f820 	bl	8017ae0 <__sfp>
 8017aa0:	6060      	str	r0, [r4, #4]
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f000 f81c 	bl	8017ae0 <__sfp>
 8017aa8:	60a0      	str	r0, [r4, #8]
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f000 f818 	bl	8017ae0 <__sfp>
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	60e0      	str	r0, [r4, #12]
 8017ab4:	2104      	movs	r1, #4
 8017ab6:	6860      	ldr	r0, [r4, #4]
 8017ab8:	f7ff ff82 	bl	80179c0 <std>
 8017abc:	68a0      	ldr	r0, [r4, #8]
 8017abe:	2201      	movs	r2, #1
 8017ac0:	2109      	movs	r1, #9
 8017ac2:	f7ff ff7d 	bl	80179c0 <std>
 8017ac6:	68e0      	ldr	r0, [r4, #12]
 8017ac8:	2202      	movs	r2, #2
 8017aca:	2112      	movs	r1, #18
 8017acc:	f7ff ff78 	bl	80179c0 <std>
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	61a3      	str	r3, [r4, #24]
 8017ad4:	e7d2      	b.n	8017a7c <__sinit+0xc>
 8017ad6:	bf00      	nop
 8017ad8:	0801bc4c 	.word	0x0801bc4c
 8017adc:	08017a09 	.word	0x08017a09

08017ae0 <__sfp>:
 8017ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ae2:	4607      	mov	r7, r0
 8017ae4:	f7ff ffac 	bl	8017a40 <__sfp_lock_acquire>
 8017ae8:	4b1e      	ldr	r3, [pc, #120]	; (8017b64 <__sfp+0x84>)
 8017aea:	681e      	ldr	r6, [r3, #0]
 8017aec:	69b3      	ldr	r3, [r6, #24]
 8017aee:	b913      	cbnz	r3, 8017af6 <__sfp+0x16>
 8017af0:	4630      	mov	r0, r6
 8017af2:	f7ff ffbd 	bl	8017a70 <__sinit>
 8017af6:	3648      	adds	r6, #72	; 0x48
 8017af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017afc:	3b01      	subs	r3, #1
 8017afe:	d503      	bpl.n	8017b08 <__sfp+0x28>
 8017b00:	6833      	ldr	r3, [r6, #0]
 8017b02:	b30b      	cbz	r3, 8017b48 <__sfp+0x68>
 8017b04:	6836      	ldr	r6, [r6, #0]
 8017b06:	e7f7      	b.n	8017af8 <__sfp+0x18>
 8017b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b0c:	b9d5      	cbnz	r5, 8017b44 <__sfp+0x64>
 8017b0e:	4b16      	ldr	r3, [pc, #88]	; (8017b68 <__sfp+0x88>)
 8017b10:	60e3      	str	r3, [r4, #12]
 8017b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b16:	6665      	str	r5, [r4, #100]	; 0x64
 8017b18:	f000 f86c 	bl	8017bf4 <__retarget_lock_init_recursive>
 8017b1c:	f7ff ff96 	bl	8017a4c <__sfp_lock_release>
 8017b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017b28:	6025      	str	r5, [r4, #0]
 8017b2a:	61a5      	str	r5, [r4, #24]
 8017b2c:	2208      	movs	r2, #8
 8017b2e:	4629      	mov	r1, r5
 8017b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b34:	f000 f87d 	bl	8017c32 <memset>
 8017b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b40:	4620      	mov	r0, r4
 8017b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b44:	3468      	adds	r4, #104	; 0x68
 8017b46:	e7d9      	b.n	8017afc <__sfp+0x1c>
 8017b48:	2104      	movs	r1, #4
 8017b4a:	4638      	mov	r0, r7
 8017b4c:	f7ff ff62 	bl	8017a14 <__sfmoreglue>
 8017b50:	4604      	mov	r4, r0
 8017b52:	6030      	str	r0, [r6, #0]
 8017b54:	2800      	cmp	r0, #0
 8017b56:	d1d5      	bne.n	8017b04 <__sfp+0x24>
 8017b58:	f7ff ff78 	bl	8017a4c <__sfp_lock_release>
 8017b5c:	230c      	movs	r3, #12
 8017b5e:	603b      	str	r3, [r7, #0]
 8017b60:	e7ee      	b.n	8017b40 <__sfp+0x60>
 8017b62:	bf00      	nop
 8017b64:	0801bc4c 	.word	0x0801bc4c
 8017b68:	ffff0001 	.word	0xffff0001

08017b6c <_fwalk_reent>:
 8017b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b70:	4606      	mov	r6, r0
 8017b72:	4688      	mov	r8, r1
 8017b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017b78:	2700      	movs	r7, #0
 8017b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8017b82:	d505      	bpl.n	8017b90 <_fwalk_reent+0x24>
 8017b84:	6824      	ldr	r4, [r4, #0]
 8017b86:	2c00      	cmp	r4, #0
 8017b88:	d1f7      	bne.n	8017b7a <_fwalk_reent+0xe>
 8017b8a:	4638      	mov	r0, r7
 8017b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b90:	89ab      	ldrh	r3, [r5, #12]
 8017b92:	2b01      	cmp	r3, #1
 8017b94:	d907      	bls.n	8017ba6 <_fwalk_reent+0x3a>
 8017b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	d003      	beq.n	8017ba6 <_fwalk_reent+0x3a>
 8017b9e:	4629      	mov	r1, r5
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	47c0      	blx	r8
 8017ba4:	4307      	orrs	r7, r0
 8017ba6:	3568      	adds	r5, #104	; 0x68
 8017ba8:	e7e9      	b.n	8017b7e <_fwalk_reent+0x12>
	...

08017bac <__libc_init_array>:
 8017bac:	b570      	push	{r4, r5, r6, lr}
 8017bae:	4d0d      	ldr	r5, [pc, #52]	; (8017be4 <__libc_init_array+0x38>)
 8017bb0:	4c0d      	ldr	r4, [pc, #52]	; (8017be8 <__libc_init_array+0x3c>)
 8017bb2:	1b64      	subs	r4, r4, r5
 8017bb4:	10a4      	asrs	r4, r4, #2
 8017bb6:	2600      	movs	r6, #0
 8017bb8:	42a6      	cmp	r6, r4
 8017bba:	d109      	bne.n	8017bd0 <__libc_init_array+0x24>
 8017bbc:	4d0b      	ldr	r5, [pc, #44]	; (8017bec <__libc_init_array+0x40>)
 8017bbe:	4c0c      	ldr	r4, [pc, #48]	; (8017bf0 <__libc_init_array+0x44>)
 8017bc0:	f000 ffcc 	bl	8018b5c <_init>
 8017bc4:	1b64      	subs	r4, r4, r5
 8017bc6:	10a4      	asrs	r4, r4, #2
 8017bc8:	2600      	movs	r6, #0
 8017bca:	42a6      	cmp	r6, r4
 8017bcc:	d105      	bne.n	8017bda <__libc_init_array+0x2e>
 8017bce:	bd70      	pop	{r4, r5, r6, pc}
 8017bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bd4:	4798      	blx	r3
 8017bd6:	3601      	adds	r6, #1
 8017bd8:	e7ee      	b.n	8017bb8 <__libc_init_array+0xc>
 8017bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bde:	4798      	blx	r3
 8017be0:	3601      	adds	r6, #1
 8017be2:	e7f2      	b.n	8017bca <__libc_init_array+0x1e>
 8017be4:	0801bd40 	.word	0x0801bd40
 8017be8:	0801bd40 	.word	0x0801bd40
 8017bec:	0801bd40 	.word	0x0801bd40
 8017bf0:	0801bd44 	.word	0x0801bd44

08017bf4 <__retarget_lock_init_recursive>:
 8017bf4:	4770      	bx	lr

08017bf6 <__retarget_lock_acquire_recursive>:
 8017bf6:	4770      	bx	lr

08017bf8 <__retarget_lock_release_recursive>:
 8017bf8:	4770      	bx	lr

08017bfa <memcmp>:
 8017bfa:	b530      	push	{r4, r5, lr}
 8017bfc:	3901      	subs	r1, #1
 8017bfe:	2400      	movs	r4, #0
 8017c00:	42a2      	cmp	r2, r4
 8017c02:	d101      	bne.n	8017c08 <memcmp+0xe>
 8017c04:	2000      	movs	r0, #0
 8017c06:	e005      	b.n	8017c14 <memcmp+0x1a>
 8017c08:	5d03      	ldrb	r3, [r0, r4]
 8017c0a:	3401      	adds	r4, #1
 8017c0c:	5d0d      	ldrb	r5, [r1, r4]
 8017c0e:	42ab      	cmp	r3, r5
 8017c10:	d0f6      	beq.n	8017c00 <memcmp+0x6>
 8017c12:	1b58      	subs	r0, r3, r5
 8017c14:	bd30      	pop	{r4, r5, pc}

08017c16 <memcpy>:
 8017c16:	440a      	add	r2, r1
 8017c18:	4291      	cmp	r1, r2
 8017c1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017c1e:	d100      	bne.n	8017c22 <memcpy+0xc>
 8017c20:	4770      	bx	lr
 8017c22:	b510      	push	{r4, lr}
 8017c24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c2c:	4291      	cmp	r1, r2
 8017c2e:	d1f9      	bne.n	8017c24 <memcpy+0xe>
 8017c30:	bd10      	pop	{r4, pc}

08017c32 <memset>:
 8017c32:	4402      	add	r2, r0
 8017c34:	4603      	mov	r3, r0
 8017c36:	4293      	cmp	r3, r2
 8017c38:	d100      	bne.n	8017c3c <memset+0xa>
 8017c3a:	4770      	bx	lr
 8017c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8017c40:	e7f9      	b.n	8017c36 <memset+0x4>
	...

08017c44 <_malloc_r>:
 8017c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c46:	1ccd      	adds	r5, r1, #3
 8017c48:	f025 0503 	bic.w	r5, r5, #3
 8017c4c:	3508      	adds	r5, #8
 8017c4e:	2d0c      	cmp	r5, #12
 8017c50:	bf38      	it	cc
 8017c52:	250c      	movcc	r5, #12
 8017c54:	2d00      	cmp	r5, #0
 8017c56:	4606      	mov	r6, r0
 8017c58:	db01      	blt.n	8017c5e <_malloc_r+0x1a>
 8017c5a:	42a9      	cmp	r1, r5
 8017c5c:	d903      	bls.n	8017c66 <_malloc_r+0x22>
 8017c5e:	230c      	movs	r3, #12
 8017c60:	6033      	str	r3, [r6, #0]
 8017c62:	2000      	movs	r0, #0
 8017c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c66:	f000 fa8b 	bl	8018180 <__malloc_lock>
 8017c6a:	4921      	ldr	r1, [pc, #132]	; (8017cf0 <_malloc_r+0xac>)
 8017c6c:	680a      	ldr	r2, [r1, #0]
 8017c6e:	4614      	mov	r4, r2
 8017c70:	b99c      	cbnz	r4, 8017c9a <_malloc_r+0x56>
 8017c72:	4f20      	ldr	r7, [pc, #128]	; (8017cf4 <_malloc_r+0xb0>)
 8017c74:	683b      	ldr	r3, [r7, #0]
 8017c76:	b923      	cbnz	r3, 8017c82 <_malloc_r+0x3e>
 8017c78:	4621      	mov	r1, r4
 8017c7a:	4630      	mov	r0, r6
 8017c7c:	f000 f8fe 	bl	8017e7c <_sbrk_r>
 8017c80:	6038      	str	r0, [r7, #0]
 8017c82:	4629      	mov	r1, r5
 8017c84:	4630      	mov	r0, r6
 8017c86:	f000 f8f9 	bl	8017e7c <_sbrk_r>
 8017c8a:	1c43      	adds	r3, r0, #1
 8017c8c:	d123      	bne.n	8017cd6 <_malloc_r+0x92>
 8017c8e:	230c      	movs	r3, #12
 8017c90:	6033      	str	r3, [r6, #0]
 8017c92:	4630      	mov	r0, r6
 8017c94:	f000 fa7a 	bl	801818c <__malloc_unlock>
 8017c98:	e7e3      	b.n	8017c62 <_malloc_r+0x1e>
 8017c9a:	6823      	ldr	r3, [r4, #0]
 8017c9c:	1b5b      	subs	r3, r3, r5
 8017c9e:	d417      	bmi.n	8017cd0 <_malloc_r+0x8c>
 8017ca0:	2b0b      	cmp	r3, #11
 8017ca2:	d903      	bls.n	8017cac <_malloc_r+0x68>
 8017ca4:	6023      	str	r3, [r4, #0]
 8017ca6:	441c      	add	r4, r3
 8017ca8:	6025      	str	r5, [r4, #0]
 8017caa:	e004      	b.n	8017cb6 <_malloc_r+0x72>
 8017cac:	6863      	ldr	r3, [r4, #4]
 8017cae:	42a2      	cmp	r2, r4
 8017cb0:	bf0c      	ite	eq
 8017cb2:	600b      	streq	r3, [r1, #0]
 8017cb4:	6053      	strne	r3, [r2, #4]
 8017cb6:	4630      	mov	r0, r6
 8017cb8:	f000 fa68 	bl	801818c <__malloc_unlock>
 8017cbc:	f104 000b 	add.w	r0, r4, #11
 8017cc0:	1d23      	adds	r3, r4, #4
 8017cc2:	f020 0007 	bic.w	r0, r0, #7
 8017cc6:	1ac2      	subs	r2, r0, r3
 8017cc8:	d0cc      	beq.n	8017c64 <_malloc_r+0x20>
 8017cca:	1a1b      	subs	r3, r3, r0
 8017ccc:	50a3      	str	r3, [r4, r2]
 8017cce:	e7c9      	b.n	8017c64 <_malloc_r+0x20>
 8017cd0:	4622      	mov	r2, r4
 8017cd2:	6864      	ldr	r4, [r4, #4]
 8017cd4:	e7cc      	b.n	8017c70 <_malloc_r+0x2c>
 8017cd6:	1cc4      	adds	r4, r0, #3
 8017cd8:	f024 0403 	bic.w	r4, r4, #3
 8017cdc:	42a0      	cmp	r0, r4
 8017cde:	d0e3      	beq.n	8017ca8 <_malloc_r+0x64>
 8017ce0:	1a21      	subs	r1, r4, r0
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f000 f8ca 	bl	8017e7c <_sbrk_r>
 8017ce8:	3001      	adds	r0, #1
 8017cea:	d1dd      	bne.n	8017ca8 <_malloc_r+0x64>
 8017cec:	e7cf      	b.n	8017c8e <_malloc_r+0x4a>
 8017cee:	bf00      	nop
 8017cf0:	24009ef8 	.word	0x24009ef8
 8017cf4:	24009efc 	.word	0x24009efc

08017cf8 <iprintf>:
 8017cf8:	b40f      	push	{r0, r1, r2, r3}
 8017cfa:	4b0a      	ldr	r3, [pc, #40]	; (8017d24 <iprintf+0x2c>)
 8017cfc:	b513      	push	{r0, r1, r4, lr}
 8017cfe:	681c      	ldr	r4, [r3, #0]
 8017d00:	b124      	cbz	r4, 8017d0c <iprintf+0x14>
 8017d02:	69a3      	ldr	r3, [r4, #24]
 8017d04:	b913      	cbnz	r3, 8017d0c <iprintf+0x14>
 8017d06:	4620      	mov	r0, r4
 8017d08:	f7ff feb2 	bl	8017a70 <__sinit>
 8017d0c:	ab05      	add	r3, sp, #20
 8017d0e:	9a04      	ldr	r2, [sp, #16]
 8017d10:	68a1      	ldr	r1, [r4, #8]
 8017d12:	9301      	str	r3, [sp, #4]
 8017d14:	4620      	mov	r0, r4
 8017d16:	f000 fab9 	bl	801828c <_vfiprintf_r>
 8017d1a:	b002      	add	sp, #8
 8017d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d20:	b004      	add	sp, #16
 8017d22:	4770      	bx	lr
 8017d24:	24000038 	.word	0x24000038

08017d28 <rand>:
 8017d28:	4b17      	ldr	r3, [pc, #92]	; (8017d88 <rand+0x60>)
 8017d2a:	b510      	push	{r4, lr}
 8017d2c:	681c      	ldr	r4, [r3, #0]
 8017d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017d30:	b9b3      	cbnz	r3, 8017d60 <rand+0x38>
 8017d32:	2018      	movs	r0, #24
 8017d34:	f000 fa1c 	bl	8018170 <malloc>
 8017d38:	63a0      	str	r0, [r4, #56]	; 0x38
 8017d3a:	b928      	cbnz	r0, 8017d48 <rand+0x20>
 8017d3c:	4602      	mov	r2, r0
 8017d3e:	4b13      	ldr	r3, [pc, #76]	; (8017d8c <rand+0x64>)
 8017d40:	4813      	ldr	r0, [pc, #76]	; (8017d90 <rand+0x68>)
 8017d42:	214e      	movs	r1, #78	; 0x4e
 8017d44:	f000 f900 	bl	8017f48 <__assert_func>
 8017d48:	4a12      	ldr	r2, [pc, #72]	; (8017d94 <rand+0x6c>)
 8017d4a:	4b13      	ldr	r3, [pc, #76]	; (8017d98 <rand+0x70>)
 8017d4c:	e9c0 2300 	strd	r2, r3, [r0]
 8017d50:	4b12      	ldr	r3, [pc, #72]	; (8017d9c <rand+0x74>)
 8017d52:	6083      	str	r3, [r0, #8]
 8017d54:	230b      	movs	r3, #11
 8017d56:	8183      	strh	r3, [r0, #12]
 8017d58:	2201      	movs	r2, #1
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017d60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017d62:	480f      	ldr	r0, [pc, #60]	; (8017da0 <rand+0x78>)
 8017d64:	690a      	ldr	r2, [r1, #16]
 8017d66:	694b      	ldr	r3, [r1, #20]
 8017d68:	4c0e      	ldr	r4, [pc, #56]	; (8017da4 <rand+0x7c>)
 8017d6a:	4350      	muls	r0, r2
 8017d6c:	fb04 0003 	mla	r0, r4, r3, r0
 8017d70:	fba2 3404 	umull	r3, r4, r2, r4
 8017d74:	1c5a      	adds	r2, r3, #1
 8017d76:	4404      	add	r4, r0
 8017d78:	f144 0000 	adc.w	r0, r4, #0
 8017d7c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017d80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017d84:	bd10      	pop	{r4, pc}
 8017d86:	bf00      	nop
 8017d88:	24000038 	.word	0x24000038
 8017d8c:	0801bc50 	.word	0x0801bc50
 8017d90:	0801bc67 	.word	0x0801bc67
 8017d94:	abcd330e 	.word	0xabcd330e
 8017d98:	e66d1234 	.word	0xe66d1234
 8017d9c:	0005deec 	.word	0x0005deec
 8017da0:	5851f42d 	.word	0x5851f42d
 8017da4:	4c957f2d 	.word	0x4c957f2d

08017da8 <cleanup_glue>:
 8017da8:	b538      	push	{r3, r4, r5, lr}
 8017daa:	460c      	mov	r4, r1
 8017dac:	6809      	ldr	r1, [r1, #0]
 8017dae:	4605      	mov	r5, r0
 8017db0:	b109      	cbz	r1, 8017db6 <cleanup_glue+0xe>
 8017db2:	f7ff fff9 	bl	8017da8 <cleanup_glue>
 8017db6:	4621      	mov	r1, r4
 8017db8:	4628      	mov	r0, r5
 8017dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dbe:	f000 b9eb 	b.w	8018198 <_free_r>
	...

08017dc4 <_reclaim_reent>:
 8017dc4:	4b2c      	ldr	r3, [pc, #176]	; (8017e78 <_reclaim_reent+0xb4>)
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	4283      	cmp	r3, r0
 8017dca:	b570      	push	{r4, r5, r6, lr}
 8017dcc:	4604      	mov	r4, r0
 8017dce:	d051      	beq.n	8017e74 <_reclaim_reent+0xb0>
 8017dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017dd2:	b143      	cbz	r3, 8017de6 <_reclaim_reent+0x22>
 8017dd4:	68db      	ldr	r3, [r3, #12]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d14a      	bne.n	8017e70 <_reclaim_reent+0xac>
 8017dda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ddc:	6819      	ldr	r1, [r3, #0]
 8017dde:	b111      	cbz	r1, 8017de6 <_reclaim_reent+0x22>
 8017de0:	4620      	mov	r0, r4
 8017de2:	f000 f9d9 	bl	8018198 <_free_r>
 8017de6:	6961      	ldr	r1, [r4, #20]
 8017de8:	b111      	cbz	r1, 8017df0 <_reclaim_reent+0x2c>
 8017dea:	4620      	mov	r0, r4
 8017dec:	f000 f9d4 	bl	8018198 <_free_r>
 8017df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017df2:	b111      	cbz	r1, 8017dfa <_reclaim_reent+0x36>
 8017df4:	4620      	mov	r0, r4
 8017df6:	f000 f9cf 	bl	8018198 <_free_r>
 8017dfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017dfc:	b111      	cbz	r1, 8017e04 <_reclaim_reent+0x40>
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f000 f9ca 	bl	8018198 <_free_r>
 8017e04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017e06:	b111      	cbz	r1, 8017e0e <_reclaim_reent+0x4a>
 8017e08:	4620      	mov	r0, r4
 8017e0a:	f000 f9c5 	bl	8018198 <_free_r>
 8017e0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017e10:	b111      	cbz	r1, 8017e18 <_reclaim_reent+0x54>
 8017e12:	4620      	mov	r0, r4
 8017e14:	f000 f9c0 	bl	8018198 <_free_r>
 8017e18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017e1a:	b111      	cbz	r1, 8017e22 <_reclaim_reent+0x5e>
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	f000 f9bb 	bl	8018198 <_free_r>
 8017e22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017e24:	b111      	cbz	r1, 8017e2c <_reclaim_reent+0x68>
 8017e26:	4620      	mov	r0, r4
 8017e28:	f000 f9b6 	bl	8018198 <_free_r>
 8017e2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e2e:	b111      	cbz	r1, 8017e36 <_reclaim_reent+0x72>
 8017e30:	4620      	mov	r0, r4
 8017e32:	f000 f9b1 	bl	8018198 <_free_r>
 8017e36:	69a3      	ldr	r3, [r4, #24]
 8017e38:	b1e3      	cbz	r3, 8017e74 <_reclaim_reent+0xb0>
 8017e3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017e3c:	4620      	mov	r0, r4
 8017e3e:	4798      	blx	r3
 8017e40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017e42:	b1b9      	cbz	r1, 8017e74 <_reclaim_reent+0xb0>
 8017e44:	4620      	mov	r0, r4
 8017e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e4a:	f7ff bfad 	b.w	8017da8 <cleanup_glue>
 8017e4e:	5949      	ldr	r1, [r1, r5]
 8017e50:	b941      	cbnz	r1, 8017e64 <_reclaim_reent+0xa0>
 8017e52:	3504      	adds	r5, #4
 8017e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e56:	2d80      	cmp	r5, #128	; 0x80
 8017e58:	68d9      	ldr	r1, [r3, #12]
 8017e5a:	d1f8      	bne.n	8017e4e <_reclaim_reent+0x8a>
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	f000 f99b 	bl	8018198 <_free_r>
 8017e62:	e7ba      	b.n	8017dda <_reclaim_reent+0x16>
 8017e64:	680e      	ldr	r6, [r1, #0]
 8017e66:	4620      	mov	r0, r4
 8017e68:	f000 f996 	bl	8018198 <_free_r>
 8017e6c:	4631      	mov	r1, r6
 8017e6e:	e7ef      	b.n	8017e50 <_reclaim_reent+0x8c>
 8017e70:	2500      	movs	r5, #0
 8017e72:	e7ef      	b.n	8017e54 <_reclaim_reent+0x90>
 8017e74:	bd70      	pop	{r4, r5, r6, pc}
 8017e76:	bf00      	nop
 8017e78:	24000038 	.word	0x24000038

08017e7c <_sbrk_r>:
 8017e7c:	b538      	push	{r3, r4, r5, lr}
 8017e7e:	4d06      	ldr	r5, [pc, #24]	; (8017e98 <_sbrk_r+0x1c>)
 8017e80:	2300      	movs	r3, #0
 8017e82:	4604      	mov	r4, r0
 8017e84:	4608      	mov	r0, r1
 8017e86:	602b      	str	r3, [r5, #0]
 8017e88:	f7e9 f858 	bl	8000f3c <_sbrk>
 8017e8c:	1c43      	adds	r3, r0, #1
 8017e8e:	d102      	bne.n	8017e96 <_sbrk_r+0x1a>
 8017e90:	682b      	ldr	r3, [r5, #0]
 8017e92:	b103      	cbz	r3, 8017e96 <_sbrk_r+0x1a>
 8017e94:	6023      	str	r3, [r4, #0]
 8017e96:	bd38      	pop	{r3, r4, r5, pc}
 8017e98:	2400d700 	.word	0x2400d700

08017e9c <__sread>:
 8017e9c:	b510      	push	{r4, lr}
 8017e9e:	460c      	mov	r4, r1
 8017ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ea4:	f000 fcb6 	bl	8018814 <_read_r>
 8017ea8:	2800      	cmp	r0, #0
 8017eaa:	bfab      	itete	ge
 8017eac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017eae:	89a3      	ldrhlt	r3, [r4, #12]
 8017eb0:	181b      	addge	r3, r3, r0
 8017eb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017eb6:	bfac      	ite	ge
 8017eb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017eba:	81a3      	strhlt	r3, [r4, #12]
 8017ebc:	bd10      	pop	{r4, pc}

08017ebe <__swrite>:
 8017ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ec2:	461f      	mov	r7, r3
 8017ec4:	898b      	ldrh	r3, [r1, #12]
 8017ec6:	05db      	lsls	r3, r3, #23
 8017ec8:	4605      	mov	r5, r0
 8017eca:	460c      	mov	r4, r1
 8017ecc:	4616      	mov	r6, r2
 8017ece:	d505      	bpl.n	8017edc <__swrite+0x1e>
 8017ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ed4:	2302      	movs	r3, #2
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	f000 f938 	bl	801814c <_lseek_r>
 8017edc:	89a3      	ldrh	r3, [r4, #12]
 8017ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ee2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ee6:	81a3      	strh	r3, [r4, #12]
 8017ee8:	4632      	mov	r2, r6
 8017eea:	463b      	mov	r3, r7
 8017eec:	4628      	mov	r0, r5
 8017eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef2:	f000 b817 	b.w	8017f24 <_write_r>

08017ef6 <__sseek>:
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	460c      	mov	r4, r1
 8017efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017efe:	f000 f925 	bl	801814c <_lseek_r>
 8017f02:	1c43      	adds	r3, r0, #1
 8017f04:	89a3      	ldrh	r3, [r4, #12]
 8017f06:	bf15      	itete	ne
 8017f08:	6560      	strne	r0, [r4, #84]	; 0x54
 8017f0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017f0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017f12:	81a3      	strheq	r3, [r4, #12]
 8017f14:	bf18      	it	ne
 8017f16:	81a3      	strhne	r3, [r4, #12]
 8017f18:	bd10      	pop	{r4, pc}

08017f1a <__sclose>:
 8017f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017f1e:	f000 b831 	b.w	8017f84 <_close_r>
	...

08017f24 <_write_r>:
 8017f24:	b538      	push	{r3, r4, r5, lr}
 8017f26:	4d07      	ldr	r5, [pc, #28]	; (8017f44 <_write_r+0x20>)
 8017f28:	4604      	mov	r4, r0
 8017f2a:	4608      	mov	r0, r1
 8017f2c:	4611      	mov	r1, r2
 8017f2e:	2200      	movs	r2, #0
 8017f30:	602a      	str	r2, [r5, #0]
 8017f32:	461a      	mov	r2, r3
 8017f34:	f7e8 ffb1 	bl	8000e9a <_write>
 8017f38:	1c43      	adds	r3, r0, #1
 8017f3a:	d102      	bne.n	8017f42 <_write_r+0x1e>
 8017f3c:	682b      	ldr	r3, [r5, #0]
 8017f3e:	b103      	cbz	r3, 8017f42 <_write_r+0x1e>
 8017f40:	6023      	str	r3, [r4, #0]
 8017f42:	bd38      	pop	{r3, r4, r5, pc}
 8017f44:	2400d700 	.word	0x2400d700

08017f48 <__assert_func>:
 8017f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f4a:	4614      	mov	r4, r2
 8017f4c:	461a      	mov	r2, r3
 8017f4e:	4b09      	ldr	r3, [pc, #36]	; (8017f74 <__assert_func+0x2c>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	4605      	mov	r5, r0
 8017f54:	68d8      	ldr	r0, [r3, #12]
 8017f56:	b14c      	cbz	r4, 8017f6c <__assert_func+0x24>
 8017f58:	4b07      	ldr	r3, [pc, #28]	; (8017f78 <__assert_func+0x30>)
 8017f5a:	9100      	str	r1, [sp, #0]
 8017f5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f60:	4906      	ldr	r1, [pc, #24]	; (8017f7c <__assert_func+0x34>)
 8017f62:	462b      	mov	r3, r5
 8017f64:	f000 f8e0 	bl	8018128 <fiprintf>
 8017f68:	f000 fd26 	bl	80189b8 <abort>
 8017f6c:	4b04      	ldr	r3, [pc, #16]	; (8017f80 <__assert_func+0x38>)
 8017f6e:	461c      	mov	r4, r3
 8017f70:	e7f3      	b.n	8017f5a <__assert_func+0x12>
 8017f72:	bf00      	nop
 8017f74:	24000038 	.word	0x24000038
 8017f78:	0801bcc6 	.word	0x0801bcc6
 8017f7c:	0801bcd3 	.word	0x0801bcd3
 8017f80:	0801bd01 	.word	0x0801bd01

08017f84 <_close_r>:
 8017f84:	b538      	push	{r3, r4, r5, lr}
 8017f86:	4d06      	ldr	r5, [pc, #24]	; (8017fa0 <_close_r+0x1c>)
 8017f88:	2300      	movs	r3, #0
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	4608      	mov	r0, r1
 8017f8e:	602b      	str	r3, [r5, #0]
 8017f90:	f7e8 ff9f 	bl	8000ed2 <_close>
 8017f94:	1c43      	adds	r3, r0, #1
 8017f96:	d102      	bne.n	8017f9e <_close_r+0x1a>
 8017f98:	682b      	ldr	r3, [r5, #0]
 8017f9a:	b103      	cbz	r3, 8017f9e <_close_r+0x1a>
 8017f9c:	6023      	str	r3, [r4, #0]
 8017f9e:	bd38      	pop	{r3, r4, r5, pc}
 8017fa0:	2400d700 	.word	0x2400d700

08017fa4 <__sflush_r>:
 8017fa4:	898a      	ldrh	r2, [r1, #12]
 8017fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017faa:	4605      	mov	r5, r0
 8017fac:	0710      	lsls	r0, r2, #28
 8017fae:	460c      	mov	r4, r1
 8017fb0:	d458      	bmi.n	8018064 <__sflush_r+0xc0>
 8017fb2:	684b      	ldr	r3, [r1, #4]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	dc05      	bgt.n	8017fc4 <__sflush_r+0x20>
 8017fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	dc02      	bgt.n	8017fc4 <__sflush_r+0x20>
 8017fbe:	2000      	movs	r0, #0
 8017fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017fc6:	2e00      	cmp	r6, #0
 8017fc8:	d0f9      	beq.n	8017fbe <__sflush_r+0x1a>
 8017fca:	2300      	movs	r3, #0
 8017fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017fd0:	682f      	ldr	r7, [r5, #0]
 8017fd2:	602b      	str	r3, [r5, #0]
 8017fd4:	d032      	beq.n	801803c <__sflush_r+0x98>
 8017fd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017fd8:	89a3      	ldrh	r3, [r4, #12]
 8017fda:	075a      	lsls	r2, r3, #29
 8017fdc:	d505      	bpl.n	8017fea <__sflush_r+0x46>
 8017fde:	6863      	ldr	r3, [r4, #4]
 8017fe0:	1ac0      	subs	r0, r0, r3
 8017fe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017fe4:	b10b      	cbz	r3, 8017fea <__sflush_r+0x46>
 8017fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017fe8:	1ac0      	subs	r0, r0, r3
 8017fea:	2300      	movs	r3, #0
 8017fec:	4602      	mov	r2, r0
 8017fee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ff0:	6a21      	ldr	r1, [r4, #32]
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	47b0      	blx	r6
 8017ff6:	1c43      	adds	r3, r0, #1
 8017ff8:	89a3      	ldrh	r3, [r4, #12]
 8017ffa:	d106      	bne.n	801800a <__sflush_r+0x66>
 8017ffc:	6829      	ldr	r1, [r5, #0]
 8017ffe:	291d      	cmp	r1, #29
 8018000:	d82c      	bhi.n	801805c <__sflush_r+0xb8>
 8018002:	4a2a      	ldr	r2, [pc, #168]	; (80180ac <__sflush_r+0x108>)
 8018004:	40ca      	lsrs	r2, r1
 8018006:	07d6      	lsls	r6, r2, #31
 8018008:	d528      	bpl.n	801805c <__sflush_r+0xb8>
 801800a:	2200      	movs	r2, #0
 801800c:	6062      	str	r2, [r4, #4]
 801800e:	04d9      	lsls	r1, r3, #19
 8018010:	6922      	ldr	r2, [r4, #16]
 8018012:	6022      	str	r2, [r4, #0]
 8018014:	d504      	bpl.n	8018020 <__sflush_r+0x7c>
 8018016:	1c42      	adds	r2, r0, #1
 8018018:	d101      	bne.n	801801e <__sflush_r+0x7a>
 801801a:	682b      	ldr	r3, [r5, #0]
 801801c:	b903      	cbnz	r3, 8018020 <__sflush_r+0x7c>
 801801e:	6560      	str	r0, [r4, #84]	; 0x54
 8018020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018022:	602f      	str	r7, [r5, #0]
 8018024:	2900      	cmp	r1, #0
 8018026:	d0ca      	beq.n	8017fbe <__sflush_r+0x1a>
 8018028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801802c:	4299      	cmp	r1, r3
 801802e:	d002      	beq.n	8018036 <__sflush_r+0x92>
 8018030:	4628      	mov	r0, r5
 8018032:	f000 f8b1 	bl	8018198 <_free_r>
 8018036:	2000      	movs	r0, #0
 8018038:	6360      	str	r0, [r4, #52]	; 0x34
 801803a:	e7c1      	b.n	8017fc0 <__sflush_r+0x1c>
 801803c:	6a21      	ldr	r1, [r4, #32]
 801803e:	2301      	movs	r3, #1
 8018040:	4628      	mov	r0, r5
 8018042:	47b0      	blx	r6
 8018044:	1c41      	adds	r1, r0, #1
 8018046:	d1c7      	bne.n	8017fd8 <__sflush_r+0x34>
 8018048:	682b      	ldr	r3, [r5, #0]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d0c4      	beq.n	8017fd8 <__sflush_r+0x34>
 801804e:	2b1d      	cmp	r3, #29
 8018050:	d001      	beq.n	8018056 <__sflush_r+0xb2>
 8018052:	2b16      	cmp	r3, #22
 8018054:	d101      	bne.n	801805a <__sflush_r+0xb6>
 8018056:	602f      	str	r7, [r5, #0]
 8018058:	e7b1      	b.n	8017fbe <__sflush_r+0x1a>
 801805a:	89a3      	ldrh	r3, [r4, #12]
 801805c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018060:	81a3      	strh	r3, [r4, #12]
 8018062:	e7ad      	b.n	8017fc0 <__sflush_r+0x1c>
 8018064:	690f      	ldr	r7, [r1, #16]
 8018066:	2f00      	cmp	r7, #0
 8018068:	d0a9      	beq.n	8017fbe <__sflush_r+0x1a>
 801806a:	0793      	lsls	r3, r2, #30
 801806c:	680e      	ldr	r6, [r1, #0]
 801806e:	bf08      	it	eq
 8018070:	694b      	ldreq	r3, [r1, #20]
 8018072:	600f      	str	r7, [r1, #0]
 8018074:	bf18      	it	ne
 8018076:	2300      	movne	r3, #0
 8018078:	eba6 0807 	sub.w	r8, r6, r7
 801807c:	608b      	str	r3, [r1, #8]
 801807e:	f1b8 0f00 	cmp.w	r8, #0
 8018082:	dd9c      	ble.n	8017fbe <__sflush_r+0x1a>
 8018084:	6a21      	ldr	r1, [r4, #32]
 8018086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018088:	4643      	mov	r3, r8
 801808a:	463a      	mov	r2, r7
 801808c:	4628      	mov	r0, r5
 801808e:	47b0      	blx	r6
 8018090:	2800      	cmp	r0, #0
 8018092:	dc06      	bgt.n	80180a2 <__sflush_r+0xfe>
 8018094:	89a3      	ldrh	r3, [r4, #12]
 8018096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801809a:	81a3      	strh	r3, [r4, #12]
 801809c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180a0:	e78e      	b.n	8017fc0 <__sflush_r+0x1c>
 80180a2:	4407      	add	r7, r0
 80180a4:	eba8 0800 	sub.w	r8, r8, r0
 80180a8:	e7e9      	b.n	801807e <__sflush_r+0xda>
 80180aa:	bf00      	nop
 80180ac:	20400001 	.word	0x20400001

080180b0 <_fflush_r>:
 80180b0:	b538      	push	{r3, r4, r5, lr}
 80180b2:	690b      	ldr	r3, [r1, #16]
 80180b4:	4605      	mov	r5, r0
 80180b6:	460c      	mov	r4, r1
 80180b8:	b913      	cbnz	r3, 80180c0 <_fflush_r+0x10>
 80180ba:	2500      	movs	r5, #0
 80180bc:	4628      	mov	r0, r5
 80180be:	bd38      	pop	{r3, r4, r5, pc}
 80180c0:	b118      	cbz	r0, 80180ca <_fflush_r+0x1a>
 80180c2:	6983      	ldr	r3, [r0, #24]
 80180c4:	b90b      	cbnz	r3, 80180ca <_fflush_r+0x1a>
 80180c6:	f7ff fcd3 	bl	8017a70 <__sinit>
 80180ca:	4b14      	ldr	r3, [pc, #80]	; (801811c <_fflush_r+0x6c>)
 80180cc:	429c      	cmp	r4, r3
 80180ce:	d11b      	bne.n	8018108 <_fflush_r+0x58>
 80180d0:	686c      	ldr	r4, [r5, #4]
 80180d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d0ef      	beq.n	80180ba <_fflush_r+0xa>
 80180da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80180dc:	07d0      	lsls	r0, r2, #31
 80180de:	d404      	bmi.n	80180ea <_fflush_r+0x3a>
 80180e0:	0599      	lsls	r1, r3, #22
 80180e2:	d402      	bmi.n	80180ea <_fflush_r+0x3a>
 80180e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80180e6:	f7ff fd86 	bl	8017bf6 <__retarget_lock_acquire_recursive>
 80180ea:	4628      	mov	r0, r5
 80180ec:	4621      	mov	r1, r4
 80180ee:	f7ff ff59 	bl	8017fa4 <__sflush_r>
 80180f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80180f4:	07da      	lsls	r2, r3, #31
 80180f6:	4605      	mov	r5, r0
 80180f8:	d4e0      	bmi.n	80180bc <_fflush_r+0xc>
 80180fa:	89a3      	ldrh	r3, [r4, #12]
 80180fc:	059b      	lsls	r3, r3, #22
 80180fe:	d4dd      	bmi.n	80180bc <_fflush_r+0xc>
 8018100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018102:	f7ff fd79 	bl	8017bf8 <__retarget_lock_release_recursive>
 8018106:	e7d9      	b.n	80180bc <_fflush_r+0xc>
 8018108:	4b05      	ldr	r3, [pc, #20]	; (8018120 <_fflush_r+0x70>)
 801810a:	429c      	cmp	r4, r3
 801810c:	d101      	bne.n	8018112 <_fflush_r+0x62>
 801810e:	68ac      	ldr	r4, [r5, #8]
 8018110:	e7df      	b.n	80180d2 <_fflush_r+0x22>
 8018112:	4b04      	ldr	r3, [pc, #16]	; (8018124 <_fflush_r+0x74>)
 8018114:	429c      	cmp	r4, r3
 8018116:	bf08      	it	eq
 8018118:	68ec      	ldreq	r4, [r5, #12]
 801811a:	e7da      	b.n	80180d2 <_fflush_r+0x22>
 801811c:	0801bc0c 	.word	0x0801bc0c
 8018120:	0801bc2c 	.word	0x0801bc2c
 8018124:	0801bbec 	.word	0x0801bbec

08018128 <fiprintf>:
 8018128:	b40e      	push	{r1, r2, r3}
 801812a:	b503      	push	{r0, r1, lr}
 801812c:	4601      	mov	r1, r0
 801812e:	ab03      	add	r3, sp, #12
 8018130:	4805      	ldr	r0, [pc, #20]	; (8018148 <fiprintf+0x20>)
 8018132:	f853 2b04 	ldr.w	r2, [r3], #4
 8018136:	6800      	ldr	r0, [r0, #0]
 8018138:	9301      	str	r3, [sp, #4]
 801813a:	f000 f8a7 	bl	801828c <_vfiprintf_r>
 801813e:	b002      	add	sp, #8
 8018140:	f85d eb04 	ldr.w	lr, [sp], #4
 8018144:	b003      	add	sp, #12
 8018146:	4770      	bx	lr
 8018148:	24000038 	.word	0x24000038

0801814c <_lseek_r>:
 801814c:	b538      	push	{r3, r4, r5, lr}
 801814e:	4d07      	ldr	r5, [pc, #28]	; (801816c <_lseek_r+0x20>)
 8018150:	4604      	mov	r4, r0
 8018152:	4608      	mov	r0, r1
 8018154:	4611      	mov	r1, r2
 8018156:	2200      	movs	r2, #0
 8018158:	602a      	str	r2, [r5, #0]
 801815a:	461a      	mov	r2, r3
 801815c:	f7e8 fee0 	bl	8000f20 <_lseek>
 8018160:	1c43      	adds	r3, r0, #1
 8018162:	d102      	bne.n	801816a <_lseek_r+0x1e>
 8018164:	682b      	ldr	r3, [r5, #0]
 8018166:	b103      	cbz	r3, 801816a <_lseek_r+0x1e>
 8018168:	6023      	str	r3, [r4, #0]
 801816a:	bd38      	pop	{r3, r4, r5, pc}
 801816c:	2400d700 	.word	0x2400d700

08018170 <malloc>:
 8018170:	4b02      	ldr	r3, [pc, #8]	; (801817c <malloc+0xc>)
 8018172:	4601      	mov	r1, r0
 8018174:	6818      	ldr	r0, [r3, #0]
 8018176:	f7ff bd65 	b.w	8017c44 <_malloc_r>
 801817a:	bf00      	nop
 801817c:	24000038 	.word	0x24000038

08018180 <__malloc_lock>:
 8018180:	4801      	ldr	r0, [pc, #4]	; (8018188 <__malloc_lock+0x8>)
 8018182:	f7ff bd38 	b.w	8017bf6 <__retarget_lock_acquire_recursive>
 8018186:	bf00      	nop
 8018188:	2400d70c 	.word	0x2400d70c

0801818c <__malloc_unlock>:
 801818c:	4801      	ldr	r0, [pc, #4]	; (8018194 <__malloc_unlock+0x8>)
 801818e:	f7ff bd33 	b.w	8017bf8 <__retarget_lock_release_recursive>
 8018192:	bf00      	nop
 8018194:	2400d70c 	.word	0x2400d70c

08018198 <_free_r>:
 8018198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801819a:	2900      	cmp	r1, #0
 801819c:	d048      	beq.n	8018230 <_free_r+0x98>
 801819e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181a2:	9001      	str	r0, [sp, #4]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	f1a1 0404 	sub.w	r4, r1, #4
 80181aa:	bfb8      	it	lt
 80181ac:	18e4      	addlt	r4, r4, r3
 80181ae:	f7ff ffe7 	bl	8018180 <__malloc_lock>
 80181b2:	4a20      	ldr	r2, [pc, #128]	; (8018234 <_free_r+0x9c>)
 80181b4:	9801      	ldr	r0, [sp, #4]
 80181b6:	6813      	ldr	r3, [r2, #0]
 80181b8:	4615      	mov	r5, r2
 80181ba:	b933      	cbnz	r3, 80181ca <_free_r+0x32>
 80181bc:	6063      	str	r3, [r4, #4]
 80181be:	6014      	str	r4, [r2, #0]
 80181c0:	b003      	add	sp, #12
 80181c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80181c6:	f7ff bfe1 	b.w	801818c <__malloc_unlock>
 80181ca:	42a3      	cmp	r3, r4
 80181cc:	d90b      	bls.n	80181e6 <_free_r+0x4e>
 80181ce:	6821      	ldr	r1, [r4, #0]
 80181d0:	1862      	adds	r2, r4, r1
 80181d2:	4293      	cmp	r3, r2
 80181d4:	bf04      	itt	eq
 80181d6:	681a      	ldreq	r2, [r3, #0]
 80181d8:	685b      	ldreq	r3, [r3, #4]
 80181da:	6063      	str	r3, [r4, #4]
 80181dc:	bf04      	itt	eq
 80181de:	1852      	addeq	r2, r2, r1
 80181e0:	6022      	streq	r2, [r4, #0]
 80181e2:	602c      	str	r4, [r5, #0]
 80181e4:	e7ec      	b.n	80181c0 <_free_r+0x28>
 80181e6:	461a      	mov	r2, r3
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	b10b      	cbz	r3, 80181f0 <_free_r+0x58>
 80181ec:	42a3      	cmp	r3, r4
 80181ee:	d9fa      	bls.n	80181e6 <_free_r+0x4e>
 80181f0:	6811      	ldr	r1, [r2, #0]
 80181f2:	1855      	adds	r5, r2, r1
 80181f4:	42a5      	cmp	r5, r4
 80181f6:	d10b      	bne.n	8018210 <_free_r+0x78>
 80181f8:	6824      	ldr	r4, [r4, #0]
 80181fa:	4421      	add	r1, r4
 80181fc:	1854      	adds	r4, r2, r1
 80181fe:	42a3      	cmp	r3, r4
 8018200:	6011      	str	r1, [r2, #0]
 8018202:	d1dd      	bne.n	80181c0 <_free_r+0x28>
 8018204:	681c      	ldr	r4, [r3, #0]
 8018206:	685b      	ldr	r3, [r3, #4]
 8018208:	6053      	str	r3, [r2, #4]
 801820a:	4421      	add	r1, r4
 801820c:	6011      	str	r1, [r2, #0]
 801820e:	e7d7      	b.n	80181c0 <_free_r+0x28>
 8018210:	d902      	bls.n	8018218 <_free_r+0x80>
 8018212:	230c      	movs	r3, #12
 8018214:	6003      	str	r3, [r0, #0]
 8018216:	e7d3      	b.n	80181c0 <_free_r+0x28>
 8018218:	6825      	ldr	r5, [r4, #0]
 801821a:	1961      	adds	r1, r4, r5
 801821c:	428b      	cmp	r3, r1
 801821e:	bf04      	itt	eq
 8018220:	6819      	ldreq	r1, [r3, #0]
 8018222:	685b      	ldreq	r3, [r3, #4]
 8018224:	6063      	str	r3, [r4, #4]
 8018226:	bf04      	itt	eq
 8018228:	1949      	addeq	r1, r1, r5
 801822a:	6021      	streq	r1, [r4, #0]
 801822c:	6054      	str	r4, [r2, #4]
 801822e:	e7c7      	b.n	80181c0 <_free_r+0x28>
 8018230:	b003      	add	sp, #12
 8018232:	bd30      	pop	{r4, r5, pc}
 8018234:	24009ef8 	.word	0x24009ef8

08018238 <__sfputc_r>:
 8018238:	6893      	ldr	r3, [r2, #8]
 801823a:	3b01      	subs	r3, #1
 801823c:	2b00      	cmp	r3, #0
 801823e:	b410      	push	{r4}
 8018240:	6093      	str	r3, [r2, #8]
 8018242:	da08      	bge.n	8018256 <__sfputc_r+0x1e>
 8018244:	6994      	ldr	r4, [r2, #24]
 8018246:	42a3      	cmp	r3, r4
 8018248:	db01      	blt.n	801824e <__sfputc_r+0x16>
 801824a:	290a      	cmp	r1, #10
 801824c:	d103      	bne.n	8018256 <__sfputc_r+0x1e>
 801824e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018252:	f000 baf1 	b.w	8018838 <__swbuf_r>
 8018256:	6813      	ldr	r3, [r2, #0]
 8018258:	1c58      	adds	r0, r3, #1
 801825a:	6010      	str	r0, [r2, #0]
 801825c:	7019      	strb	r1, [r3, #0]
 801825e:	4608      	mov	r0, r1
 8018260:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018264:	4770      	bx	lr

08018266 <__sfputs_r>:
 8018266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018268:	4606      	mov	r6, r0
 801826a:	460f      	mov	r7, r1
 801826c:	4614      	mov	r4, r2
 801826e:	18d5      	adds	r5, r2, r3
 8018270:	42ac      	cmp	r4, r5
 8018272:	d101      	bne.n	8018278 <__sfputs_r+0x12>
 8018274:	2000      	movs	r0, #0
 8018276:	e007      	b.n	8018288 <__sfputs_r+0x22>
 8018278:	f814 1b01 	ldrb.w	r1, [r4], #1
 801827c:	463a      	mov	r2, r7
 801827e:	4630      	mov	r0, r6
 8018280:	f7ff ffda 	bl	8018238 <__sfputc_r>
 8018284:	1c43      	adds	r3, r0, #1
 8018286:	d1f3      	bne.n	8018270 <__sfputs_r+0xa>
 8018288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801828c <_vfiprintf_r>:
 801828c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018290:	460d      	mov	r5, r1
 8018292:	b09d      	sub	sp, #116	; 0x74
 8018294:	4614      	mov	r4, r2
 8018296:	4698      	mov	r8, r3
 8018298:	4606      	mov	r6, r0
 801829a:	b118      	cbz	r0, 80182a4 <_vfiprintf_r+0x18>
 801829c:	6983      	ldr	r3, [r0, #24]
 801829e:	b90b      	cbnz	r3, 80182a4 <_vfiprintf_r+0x18>
 80182a0:	f7ff fbe6 	bl	8017a70 <__sinit>
 80182a4:	4b89      	ldr	r3, [pc, #548]	; (80184cc <_vfiprintf_r+0x240>)
 80182a6:	429d      	cmp	r5, r3
 80182a8:	d11b      	bne.n	80182e2 <_vfiprintf_r+0x56>
 80182aa:	6875      	ldr	r5, [r6, #4]
 80182ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182ae:	07d9      	lsls	r1, r3, #31
 80182b0:	d405      	bmi.n	80182be <_vfiprintf_r+0x32>
 80182b2:	89ab      	ldrh	r3, [r5, #12]
 80182b4:	059a      	lsls	r2, r3, #22
 80182b6:	d402      	bmi.n	80182be <_vfiprintf_r+0x32>
 80182b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182ba:	f7ff fc9c 	bl	8017bf6 <__retarget_lock_acquire_recursive>
 80182be:	89ab      	ldrh	r3, [r5, #12]
 80182c0:	071b      	lsls	r3, r3, #28
 80182c2:	d501      	bpl.n	80182c8 <_vfiprintf_r+0x3c>
 80182c4:	692b      	ldr	r3, [r5, #16]
 80182c6:	b9eb      	cbnz	r3, 8018304 <_vfiprintf_r+0x78>
 80182c8:	4629      	mov	r1, r5
 80182ca:	4630      	mov	r0, r6
 80182cc:	f000 fb06 	bl	80188dc <__swsetup_r>
 80182d0:	b1c0      	cbz	r0, 8018304 <_vfiprintf_r+0x78>
 80182d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80182d4:	07dc      	lsls	r4, r3, #31
 80182d6:	d50e      	bpl.n	80182f6 <_vfiprintf_r+0x6a>
 80182d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182dc:	b01d      	add	sp, #116	; 0x74
 80182de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e2:	4b7b      	ldr	r3, [pc, #492]	; (80184d0 <_vfiprintf_r+0x244>)
 80182e4:	429d      	cmp	r5, r3
 80182e6:	d101      	bne.n	80182ec <_vfiprintf_r+0x60>
 80182e8:	68b5      	ldr	r5, [r6, #8]
 80182ea:	e7df      	b.n	80182ac <_vfiprintf_r+0x20>
 80182ec:	4b79      	ldr	r3, [pc, #484]	; (80184d4 <_vfiprintf_r+0x248>)
 80182ee:	429d      	cmp	r5, r3
 80182f0:	bf08      	it	eq
 80182f2:	68f5      	ldreq	r5, [r6, #12]
 80182f4:	e7da      	b.n	80182ac <_vfiprintf_r+0x20>
 80182f6:	89ab      	ldrh	r3, [r5, #12]
 80182f8:	0598      	lsls	r0, r3, #22
 80182fa:	d4ed      	bmi.n	80182d8 <_vfiprintf_r+0x4c>
 80182fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80182fe:	f7ff fc7b 	bl	8017bf8 <__retarget_lock_release_recursive>
 8018302:	e7e9      	b.n	80182d8 <_vfiprintf_r+0x4c>
 8018304:	2300      	movs	r3, #0
 8018306:	9309      	str	r3, [sp, #36]	; 0x24
 8018308:	2320      	movs	r3, #32
 801830a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801830e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018312:	2330      	movs	r3, #48	; 0x30
 8018314:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80184d8 <_vfiprintf_r+0x24c>
 8018318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801831c:	f04f 0901 	mov.w	r9, #1
 8018320:	4623      	mov	r3, r4
 8018322:	469a      	mov	sl, r3
 8018324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018328:	b10a      	cbz	r2, 801832e <_vfiprintf_r+0xa2>
 801832a:	2a25      	cmp	r2, #37	; 0x25
 801832c:	d1f9      	bne.n	8018322 <_vfiprintf_r+0x96>
 801832e:	ebba 0b04 	subs.w	fp, sl, r4
 8018332:	d00b      	beq.n	801834c <_vfiprintf_r+0xc0>
 8018334:	465b      	mov	r3, fp
 8018336:	4622      	mov	r2, r4
 8018338:	4629      	mov	r1, r5
 801833a:	4630      	mov	r0, r6
 801833c:	f7ff ff93 	bl	8018266 <__sfputs_r>
 8018340:	3001      	adds	r0, #1
 8018342:	f000 80aa 	beq.w	801849a <_vfiprintf_r+0x20e>
 8018346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018348:	445a      	add	r2, fp
 801834a:	9209      	str	r2, [sp, #36]	; 0x24
 801834c:	f89a 3000 	ldrb.w	r3, [sl]
 8018350:	2b00      	cmp	r3, #0
 8018352:	f000 80a2 	beq.w	801849a <_vfiprintf_r+0x20e>
 8018356:	2300      	movs	r3, #0
 8018358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801835c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018360:	f10a 0a01 	add.w	sl, sl, #1
 8018364:	9304      	str	r3, [sp, #16]
 8018366:	9307      	str	r3, [sp, #28]
 8018368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801836c:	931a      	str	r3, [sp, #104]	; 0x68
 801836e:	4654      	mov	r4, sl
 8018370:	2205      	movs	r2, #5
 8018372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018376:	4858      	ldr	r0, [pc, #352]	; (80184d8 <_vfiprintf_r+0x24c>)
 8018378:	f7e7 ffb2 	bl	80002e0 <memchr>
 801837c:	9a04      	ldr	r2, [sp, #16]
 801837e:	b9d8      	cbnz	r0, 80183b8 <_vfiprintf_r+0x12c>
 8018380:	06d1      	lsls	r1, r2, #27
 8018382:	bf44      	itt	mi
 8018384:	2320      	movmi	r3, #32
 8018386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801838a:	0713      	lsls	r3, r2, #28
 801838c:	bf44      	itt	mi
 801838e:	232b      	movmi	r3, #43	; 0x2b
 8018390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018394:	f89a 3000 	ldrb.w	r3, [sl]
 8018398:	2b2a      	cmp	r3, #42	; 0x2a
 801839a:	d015      	beq.n	80183c8 <_vfiprintf_r+0x13c>
 801839c:	9a07      	ldr	r2, [sp, #28]
 801839e:	4654      	mov	r4, sl
 80183a0:	2000      	movs	r0, #0
 80183a2:	f04f 0c0a 	mov.w	ip, #10
 80183a6:	4621      	mov	r1, r4
 80183a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80183ac:	3b30      	subs	r3, #48	; 0x30
 80183ae:	2b09      	cmp	r3, #9
 80183b0:	d94e      	bls.n	8018450 <_vfiprintf_r+0x1c4>
 80183b2:	b1b0      	cbz	r0, 80183e2 <_vfiprintf_r+0x156>
 80183b4:	9207      	str	r2, [sp, #28]
 80183b6:	e014      	b.n	80183e2 <_vfiprintf_r+0x156>
 80183b8:	eba0 0308 	sub.w	r3, r0, r8
 80183bc:	fa09 f303 	lsl.w	r3, r9, r3
 80183c0:	4313      	orrs	r3, r2
 80183c2:	9304      	str	r3, [sp, #16]
 80183c4:	46a2      	mov	sl, r4
 80183c6:	e7d2      	b.n	801836e <_vfiprintf_r+0xe2>
 80183c8:	9b03      	ldr	r3, [sp, #12]
 80183ca:	1d19      	adds	r1, r3, #4
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	9103      	str	r1, [sp, #12]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	bfbb      	ittet	lt
 80183d4:	425b      	neglt	r3, r3
 80183d6:	f042 0202 	orrlt.w	r2, r2, #2
 80183da:	9307      	strge	r3, [sp, #28]
 80183dc:	9307      	strlt	r3, [sp, #28]
 80183de:	bfb8      	it	lt
 80183e0:	9204      	strlt	r2, [sp, #16]
 80183e2:	7823      	ldrb	r3, [r4, #0]
 80183e4:	2b2e      	cmp	r3, #46	; 0x2e
 80183e6:	d10c      	bne.n	8018402 <_vfiprintf_r+0x176>
 80183e8:	7863      	ldrb	r3, [r4, #1]
 80183ea:	2b2a      	cmp	r3, #42	; 0x2a
 80183ec:	d135      	bne.n	801845a <_vfiprintf_r+0x1ce>
 80183ee:	9b03      	ldr	r3, [sp, #12]
 80183f0:	1d1a      	adds	r2, r3, #4
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	9203      	str	r2, [sp, #12]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	bfb8      	it	lt
 80183fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80183fe:	3402      	adds	r4, #2
 8018400:	9305      	str	r3, [sp, #20]
 8018402:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80184e8 <_vfiprintf_r+0x25c>
 8018406:	7821      	ldrb	r1, [r4, #0]
 8018408:	2203      	movs	r2, #3
 801840a:	4650      	mov	r0, sl
 801840c:	f7e7 ff68 	bl	80002e0 <memchr>
 8018410:	b140      	cbz	r0, 8018424 <_vfiprintf_r+0x198>
 8018412:	2340      	movs	r3, #64	; 0x40
 8018414:	eba0 000a 	sub.w	r0, r0, sl
 8018418:	fa03 f000 	lsl.w	r0, r3, r0
 801841c:	9b04      	ldr	r3, [sp, #16]
 801841e:	4303      	orrs	r3, r0
 8018420:	3401      	adds	r4, #1
 8018422:	9304      	str	r3, [sp, #16]
 8018424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018428:	482c      	ldr	r0, [pc, #176]	; (80184dc <_vfiprintf_r+0x250>)
 801842a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801842e:	2206      	movs	r2, #6
 8018430:	f7e7 ff56 	bl	80002e0 <memchr>
 8018434:	2800      	cmp	r0, #0
 8018436:	d03f      	beq.n	80184b8 <_vfiprintf_r+0x22c>
 8018438:	4b29      	ldr	r3, [pc, #164]	; (80184e0 <_vfiprintf_r+0x254>)
 801843a:	bb1b      	cbnz	r3, 8018484 <_vfiprintf_r+0x1f8>
 801843c:	9b03      	ldr	r3, [sp, #12]
 801843e:	3307      	adds	r3, #7
 8018440:	f023 0307 	bic.w	r3, r3, #7
 8018444:	3308      	adds	r3, #8
 8018446:	9303      	str	r3, [sp, #12]
 8018448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801844a:	443b      	add	r3, r7
 801844c:	9309      	str	r3, [sp, #36]	; 0x24
 801844e:	e767      	b.n	8018320 <_vfiprintf_r+0x94>
 8018450:	fb0c 3202 	mla	r2, ip, r2, r3
 8018454:	460c      	mov	r4, r1
 8018456:	2001      	movs	r0, #1
 8018458:	e7a5      	b.n	80183a6 <_vfiprintf_r+0x11a>
 801845a:	2300      	movs	r3, #0
 801845c:	3401      	adds	r4, #1
 801845e:	9305      	str	r3, [sp, #20]
 8018460:	4619      	mov	r1, r3
 8018462:	f04f 0c0a 	mov.w	ip, #10
 8018466:	4620      	mov	r0, r4
 8018468:	f810 2b01 	ldrb.w	r2, [r0], #1
 801846c:	3a30      	subs	r2, #48	; 0x30
 801846e:	2a09      	cmp	r2, #9
 8018470:	d903      	bls.n	801847a <_vfiprintf_r+0x1ee>
 8018472:	2b00      	cmp	r3, #0
 8018474:	d0c5      	beq.n	8018402 <_vfiprintf_r+0x176>
 8018476:	9105      	str	r1, [sp, #20]
 8018478:	e7c3      	b.n	8018402 <_vfiprintf_r+0x176>
 801847a:	fb0c 2101 	mla	r1, ip, r1, r2
 801847e:	4604      	mov	r4, r0
 8018480:	2301      	movs	r3, #1
 8018482:	e7f0      	b.n	8018466 <_vfiprintf_r+0x1da>
 8018484:	ab03      	add	r3, sp, #12
 8018486:	9300      	str	r3, [sp, #0]
 8018488:	462a      	mov	r2, r5
 801848a:	4b16      	ldr	r3, [pc, #88]	; (80184e4 <_vfiprintf_r+0x258>)
 801848c:	a904      	add	r1, sp, #16
 801848e:	4630      	mov	r0, r6
 8018490:	f3af 8000 	nop.w
 8018494:	4607      	mov	r7, r0
 8018496:	1c78      	adds	r0, r7, #1
 8018498:	d1d6      	bne.n	8018448 <_vfiprintf_r+0x1bc>
 801849a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801849c:	07d9      	lsls	r1, r3, #31
 801849e:	d405      	bmi.n	80184ac <_vfiprintf_r+0x220>
 80184a0:	89ab      	ldrh	r3, [r5, #12]
 80184a2:	059a      	lsls	r2, r3, #22
 80184a4:	d402      	bmi.n	80184ac <_vfiprintf_r+0x220>
 80184a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184a8:	f7ff fba6 	bl	8017bf8 <__retarget_lock_release_recursive>
 80184ac:	89ab      	ldrh	r3, [r5, #12]
 80184ae:	065b      	lsls	r3, r3, #25
 80184b0:	f53f af12 	bmi.w	80182d8 <_vfiprintf_r+0x4c>
 80184b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80184b6:	e711      	b.n	80182dc <_vfiprintf_r+0x50>
 80184b8:	ab03      	add	r3, sp, #12
 80184ba:	9300      	str	r3, [sp, #0]
 80184bc:	462a      	mov	r2, r5
 80184be:	4b09      	ldr	r3, [pc, #36]	; (80184e4 <_vfiprintf_r+0x258>)
 80184c0:	a904      	add	r1, sp, #16
 80184c2:	4630      	mov	r0, r6
 80184c4:	f000 f880 	bl	80185c8 <_printf_i>
 80184c8:	e7e4      	b.n	8018494 <_vfiprintf_r+0x208>
 80184ca:	bf00      	nop
 80184cc:	0801bc0c 	.word	0x0801bc0c
 80184d0:	0801bc2c 	.word	0x0801bc2c
 80184d4:	0801bbec 	.word	0x0801bbec
 80184d8:	0801bd02 	.word	0x0801bd02
 80184dc:	0801bd0c 	.word	0x0801bd0c
 80184e0:	00000000 	.word	0x00000000
 80184e4:	08018267 	.word	0x08018267
 80184e8:	0801bd08 	.word	0x0801bd08

080184ec <_printf_common>:
 80184ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184f0:	4616      	mov	r6, r2
 80184f2:	4699      	mov	r9, r3
 80184f4:	688a      	ldr	r2, [r1, #8]
 80184f6:	690b      	ldr	r3, [r1, #16]
 80184f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80184fc:	4293      	cmp	r3, r2
 80184fe:	bfb8      	it	lt
 8018500:	4613      	movlt	r3, r2
 8018502:	6033      	str	r3, [r6, #0]
 8018504:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018508:	4607      	mov	r7, r0
 801850a:	460c      	mov	r4, r1
 801850c:	b10a      	cbz	r2, 8018512 <_printf_common+0x26>
 801850e:	3301      	adds	r3, #1
 8018510:	6033      	str	r3, [r6, #0]
 8018512:	6823      	ldr	r3, [r4, #0]
 8018514:	0699      	lsls	r1, r3, #26
 8018516:	bf42      	ittt	mi
 8018518:	6833      	ldrmi	r3, [r6, #0]
 801851a:	3302      	addmi	r3, #2
 801851c:	6033      	strmi	r3, [r6, #0]
 801851e:	6825      	ldr	r5, [r4, #0]
 8018520:	f015 0506 	ands.w	r5, r5, #6
 8018524:	d106      	bne.n	8018534 <_printf_common+0x48>
 8018526:	f104 0a19 	add.w	sl, r4, #25
 801852a:	68e3      	ldr	r3, [r4, #12]
 801852c:	6832      	ldr	r2, [r6, #0]
 801852e:	1a9b      	subs	r3, r3, r2
 8018530:	42ab      	cmp	r3, r5
 8018532:	dc26      	bgt.n	8018582 <_printf_common+0x96>
 8018534:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018538:	1e13      	subs	r3, r2, #0
 801853a:	6822      	ldr	r2, [r4, #0]
 801853c:	bf18      	it	ne
 801853e:	2301      	movne	r3, #1
 8018540:	0692      	lsls	r2, r2, #26
 8018542:	d42b      	bmi.n	801859c <_printf_common+0xb0>
 8018544:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018548:	4649      	mov	r1, r9
 801854a:	4638      	mov	r0, r7
 801854c:	47c0      	blx	r8
 801854e:	3001      	adds	r0, #1
 8018550:	d01e      	beq.n	8018590 <_printf_common+0xa4>
 8018552:	6823      	ldr	r3, [r4, #0]
 8018554:	68e5      	ldr	r5, [r4, #12]
 8018556:	6832      	ldr	r2, [r6, #0]
 8018558:	f003 0306 	and.w	r3, r3, #6
 801855c:	2b04      	cmp	r3, #4
 801855e:	bf08      	it	eq
 8018560:	1aad      	subeq	r5, r5, r2
 8018562:	68a3      	ldr	r3, [r4, #8]
 8018564:	6922      	ldr	r2, [r4, #16]
 8018566:	bf0c      	ite	eq
 8018568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801856c:	2500      	movne	r5, #0
 801856e:	4293      	cmp	r3, r2
 8018570:	bfc4      	itt	gt
 8018572:	1a9b      	subgt	r3, r3, r2
 8018574:	18ed      	addgt	r5, r5, r3
 8018576:	2600      	movs	r6, #0
 8018578:	341a      	adds	r4, #26
 801857a:	42b5      	cmp	r5, r6
 801857c:	d11a      	bne.n	80185b4 <_printf_common+0xc8>
 801857e:	2000      	movs	r0, #0
 8018580:	e008      	b.n	8018594 <_printf_common+0xa8>
 8018582:	2301      	movs	r3, #1
 8018584:	4652      	mov	r2, sl
 8018586:	4649      	mov	r1, r9
 8018588:	4638      	mov	r0, r7
 801858a:	47c0      	blx	r8
 801858c:	3001      	adds	r0, #1
 801858e:	d103      	bne.n	8018598 <_printf_common+0xac>
 8018590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018598:	3501      	adds	r5, #1
 801859a:	e7c6      	b.n	801852a <_printf_common+0x3e>
 801859c:	18e1      	adds	r1, r4, r3
 801859e:	1c5a      	adds	r2, r3, #1
 80185a0:	2030      	movs	r0, #48	; 0x30
 80185a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80185a6:	4422      	add	r2, r4
 80185a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80185ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80185b0:	3302      	adds	r3, #2
 80185b2:	e7c7      	b.n	8018544 <_printf_common+0x58>
 80185b4:	2301      	movs	r3, #1
 80185b6:	4622      	mov	r2, r4
 80185b8:	4649      	mov	r1, r9
 80185ba:	4638      	mov	r0, r7
 80185bc:	47c0      	blx	r8
 80185be:	3001      	adds	r0, #1
 80185c0:	d0e6      	beq.n	8018590 <_printf_common+0xa4>
 80185c2:	3601      	adds	r6, #1
 80185c4:	e7d9      	b.n	801857a <_printf_common+0x8e>
	...

080185c8 <_printf_i>:
 80185c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80185cc:	460c      	mov	r4, r1
 80185ce:	4691      	mov	r9, r2
 80185d0:	7e27      	ldrb	r7, [r4, #24]
 80185d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80185d4:	2f78      	cmp	r7, #120	; 0x78
 80185d6:	4680      	mov	r8, r0
 80185d8:	469a      	mov	sl, r3
 80185da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80185de:	d807      	bhi.n	80185f0 <_printf_i+0x28>
 80185e0:	2f62      	cmp	r7, #98	; 0x62
 80185e2:	d80a      	bhi.n	80185fa <_printf_i+0x32>
 80185e4:	2f00      	cmp	r7, #0
 80185e6:	f000 80d8 	beq.w	801879a <_printf_i+0x1d2>
 80185ea:	2f58      	cmp	r7, #88	; 0x58
 80185ec:	f000 80a3 	beq.w	8018736 <_printf_i+0x16e>
 80185f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80185f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80185f8:	e03a      	b.n	8018670 <_printf_i+0xa8>
 80185fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80185fe:	2b15      	cmp	r3, #21
 8018600:	d8f6      	bhi.n	80185f0 <_printf_i+0x28>
 8018602:	a001      	add	r0, pc, #4	; (adr r0, 8018608 <_printf_i+0x40>)
 8018604:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018608:	08018661 	.word	0x08018661
 801860c:	08018675 	.word	0x08018675
 8018610:	080185f1 	.word	0x080185f1
 8018614:	080185f1 	.word	0x080185f1
 8018618:	080185f1 	.word	0x080185f1
 801861c:	080185f1 	.word	0x080185f1
 8018620:	08018675 	.word	0x08018675
 8018624:	080185f1 	.word	0x080185f1
 8018628:	080185f1 	.word	0x080185f1
 801862c:	080185f1 	.word	0x080185f1
 8018630:	080185f1 	.word	0x080185f1
 8018634:	08018781 	.word	0x08018781
 8018638:	080186a5 	.word	0x080186a5
 801863c:	08018763 	.word	0x08018763
 8018640:	080185f1 	.word	0x080185f1
 8018644:	080185f1 	.word	0x080185f1
 8018648:	080187a3 	.word	0x080187a3
 801864c:	080185f1 	.word	0x080185f1
 8018650:	080186a5 	.word	0x080186a5
 8018654:	080185f1 	.word	0x080185f1
 8018658:	080185f1 	.word	0x080185f1
 801865c:	0801876b 	.word	0x0801876b
 8018660:	680b      	ldr	r3, [r1, #0]
 8018662:	1d1a      	adds	r2, r3, #4
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	600a      	str	r2, [r1, #0]
 8018668:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801866c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018670:	2301      	movs	r3, #1
 8018672:	e0a3      	b.n	80187bc <_printf_i+0x1f4>
 8018674:	6825      	ldr	r5, [r4, #0]
 8018676:	6808      	ldr	r0, [r1, #0]
 8018678:	062e      	lsls	r6, r5, #24
 801867a:	f100 0304 	add.w	r3, r0, #4
 801867e:	d50a      	bpl.n	8018696 <_printf_i+0xce>
 8018680:	6805      	ldr	r5, [r0, #0]
 8018682:	600b      	str	r3, [r1, #0]
 8018684:	2d00      	cmp	r5, #0
 8018686:	da03      	bge.n	8018690 <_printf_i+0xc8>
 8018688:	232d      	movs	r3, #45	; 0x2d
 801868a:	426d      	negs	r5, r5
 801868c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018690:	485e      	ldr	r0, [pc, #376]	; (801880c <_printf_i+0x244>)
 8018692:	230a      	movs	r3, #10
 8018694:	e019      	b.n	80186ca <_printf_i+0x102>
 8018696:	f015 0f40 	tst.w	r5, #64	; 0x40
 801869a:	6805      	ldr	r5, [r0, #0]
 801869c:	600b      	str	r3, [r1, #0]
 801869e:	bf18      	it	ne
 80186a0:	b22d      	sxthne	r5, r5
 80186a2:	e7ef      	b.n	8018684 <_printf_i+0xbc>
 80186a4:	680b      	ldr	r3, [r1, #0]
 80186a6:	6825      	ldr	r5, [r4, #0]
 80186a8:	1d18      	adds	r0, r3, #4
 80186aa:	6008      	str	r0, [r1, #0]
 80186ac:	0628      	lsls	r0, r5, #24
 80186ae:	d501      	bpl.n	80186b4 <_printf_i+0xec>
 80186b0:	681d      	ldr	r5, [r3, #0]
 80186b2:	e002      	b.n	80186ba <_printf_i+0xf2>
 80186b4:	0669      	lsls	r1, r5, #25
 80186b6:	d5fb      	bpl.n	80186b0 <_printf_i+0xe8>
 80186b8:	881d      	ldrh	r5, [r3, #0]
 80186ba:	4854      	ldr	r0, [pc, #336]	; (801880c <_printf_i+0x244>)
 80186bc:	2f6f      	cmp	r7, #111	; 0x6f
 80186be:	bf0c      	ite	eq
 80186c0:	2308      	moveq	r3, #8
 80186c2:	230a      	movne	r3, #10
 80186c4:	2100      	movs	r1, #0
 80186c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80186ca:	6866      	ldr	r6, [r4, #4]
 80186cc:	60a6      	str	r6, [r4, #8]
 80186ce:	2e00      	cmp	r6, #0
 80186d0:	bfa2      	ittt	ge
 80186d2:	6821      	ldrge	r1, [r4, #0]
 80186d4:	f021 0104 	bicge.w	r1, r1, #4
 80186d8:	6021      	strge	r1, [r4, #0]
 80186da:	b90d      	cbnz	r5, 80186e0 <_printf_i+0x118>
 80186dc:	2e00      	cmp	r6, #0
 80186de:	d04d      	beq.n	801877c <_printf_i+0x1b4>
 80186e0:	4616      	mov	r6, r2
 80186e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80186e6:	fb03 5711 	mls	r7, r3, r1, r5
 80186ea:	5dc7      	ldrb	r7, [r0, r7]
 80186ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80186f0:	462f      	mov	r7, r5
 80186f2:	42bb      	cmp	r3, r7
 80186f4:	460d      	mov	r5, r1
 80186f6:	d9f4      	bls.n	80186e2 <_printf_i+0x11a>
 80186f8:	2b08      	cmp	r3, #8
 80186fa:	d10b      	bne.n	8018714 <_printf_i+0x14c>
 80186fc:	6823      	ldr	r3, [r4, #0]
 80186fe:	07df      	lsls	r7, r3, #31
 8018700:	d508      	bpl.n	8018714 <_printf_i+0x14c>
 8018702:	6923      	ldr	r3, [r4, #16]
 8018704:	6861      	ldr	r1, [r4, #4]
 8018706:	4299      	cmp	r1, r3
 8018708:	bfde      	ittt	le
 801870a:	2330      	movle	r3, #48	; 0x30
 801870c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018710:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8018714:	1b92      	subs	r2, r2, r6
 8018716:	6122      	str	r2, [r4, #16]
 8018718:	f8cd a000 	str.w	sl, [sp]
 801871c:	464b      	mov	r3, r9
 801871e:	aa03      	add	r2, sp, #12
 8018720:	4621      	mov	r1, r4
 8018722:	4640      	mov	r0, r8
 8018724:	f7ff fee2 	bl	80184ec <_printf_common>
 8018728:	3001      	adds	r0, #1
 801872a:	d14c      	bne.n	80187c6 <_printf_i+0x1fe>
 801872c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018730:	b004      	add	sp, #16
 8018732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018736:	4835      	ldr	r0, [pc, #212]	; (801880c <_printf_i+0x244>)
 8018738:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801873c:	6823      	ldr	r3, [r4, #0]
 801873e:	680e      	ldr	r6, [r1, #0]
 8018740:	061f      	lsls	r7, r3, #24
 8018742:	f856 5b04 	ldr.w	r5, [r6], #4
 8018746:	600e      	str	r6, [r1, #0]
 8018748:	d514      	bpl.n	8018774 <_printf_i+0x1ac>
 801874a:	07d9      	lsls	r1, r3, #31
 801874c:	bf44      	itt	mi
 801874e:	f043 0320 	orrmi.w	r3, r3, #32
 8018752:	6023      	strmi	r3, [r4, #0]
 8018754:	b91d      	cbnz	r5, 801875e <_printf_i+0x196>
 8018756:	6823      	ldr	r3, [r4, #0]
 8018758:	f023 0320 	bic.w	r3, r3, #32
 801875c:	6023      	str	r3, [r4, #0]
 801875e:	2310      	movs	r3, #16
 8018760:	e7b0      	b.n	80186c4 <_printf_i+0xfc>
 8018762:	6823      	ldr	r3, [r4, #0]
 8018764:	f043 0320 	orr.w	r3, r3, #32
 8018768:	6023      	str	r3, [r4, #0]
 801876a:	2378      	movs	r3, #120	; 0x78
 801876c:	4828      	ldr	r0, [pc, #160]	; (8018810 <_printf_i+0x248>)
 801876e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018772:	e7e3      	b.n	801873c <_printf_i+0x174>
 8018774:	065e      	lsls	r6, r3, #25
 8018776:	bf48      	it	mi
 8018778:	b2ad      	uxthmi	r5, r5
 801877a:	e7e6      	b.n	801874a <_printf_i+0x182>
 801877c:	4616      	mov	r6, r2
 801877e:	e7bb      	b.n	80186f8 <_printf_i+0x130>
 8018780:	680b      	ldr	r3, [r1, #0]
 8018782:	6826      	ldr	r6, [r4, #0]
 8018784:	6960      	ldr	r0, [r4, #20]
 8018786:	1d1d      	adds	r5, r3, #4
 8018788:	600d      	str	r5, [r1, #0]
 801878a:	0635      	lsls	r5, r6, #24
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	d501      	bpl.n	8018794 <_printf_i+0x1cc>
 8018790:	6018      	str	r0, [r3, #0]
 8018792:	e002      	b.n	801879a <_printf_i+0x1d2>
 8018794:	0671      	lsls	r1, r6, #25
 8018796:	d5fb      	bpl.n	8018790 <_printf_i+0x1c8>
 8018798:	8018      	strh	r0, [r3, #0]
 801879a:	2300      	movs	r3, #0
 801879c:	6123      	str	r3, [r4, #16]
 801879e:	4616      	mov	r6, r2
 80187a0:	e7ba      	b.n	8018718 <_printf_i+0x150>
 80187a2:	680b      	ldr	r3, [r1, #0]
 80187a4:	1d1a      	adds	r2, r3, #4
 80187a6:	600a      	str	r2, [r1, #0]
 80187a8:	681e      	ldr	r6, [r3, #0]
 80187aa:	6862      	ldr	r2, [r4, #4]
 80187ac:	2100      	movs	r1, #0
 80187ae:	4630      	mov	r0, r6
 80187b0:	f7e7 fd96 	bl	80002e0 <memchr>
 80187b4:	b108      	cbz	r0, 80187ba <_printf_i+0x1f2>
 80187b6:	1b80      	subs	r0, r0, r6
 80187b8:	6060      	str	r0, [r4, #4]
 80187ba:	6863      	ldr	r3, [r4, #4]
 80187bc:	6123      	str	r3, [r4, #16]
 80187be:	2300      	movs	r3, #0
 80187c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187c4:	e7a8      	b.n	8018718 <_printf_i+0x150>
 80187c6:	6923      	ldr	r3, [r4, #16]
 80187c8:	4632      	mov	r2, r6
 80187ca:	4649      	mov	r1, r9
 80187cc:	4640      	mov	r0, r8
 80187ce:	47d0      	blx	sl
 80187d0:	3001      	adds	r0, #1
 80187d2:	d0ab      	beq.n	801872c <_printf_i+0x164>
 80187d4:	6823      	ldr	r3, [r4, #0]
 80187d6:	079b      	lsls	r3, r3, #30
 80187d8:	d413      	bmi.n	8018802 <_printf_i+0x23a>
 80187da:	68e0      	ldr	r0, [r4, #12]
 80187dc:	9b03      	ldr	r3, [sp, #12]
 80187de:	4298      	cmp	r0, r3
 80187e0:	bfb8      	it	lt
 80187e2:	4618      	movlt	r0, r3
 80187e4:	e7a4      	b.n	8018730 <_printf_i+0x168>
 80187e6:	2301      	movs	r3, #1
 80187e8:	4632      	mov	r2, r6
 80187ea:	4649      	mov	r1, r9
 80187ec:	4640      	mov	r0, r8
 80187ee:	47d0      	blx	sl
 80187f0:	3001      	adds	r0, #1
 80187f2:	d09b      	beq.n	801872c <_printf_i+0x164>
 80187f4:	3501      	adds	r5, #1
 80187f6:	68e3      	ldr	r3, [r4, #12]
 80187f8:	9903      	ldr	r1, [sp, #12]
 80187fa:	1a5b      	subs	r3, r3, r1
 80187fc:	42ab      	cmp	r3, r5
 80187fe:	dcf2      	bgt.n	80187e6 <_printf_i+0x21e>
 8018800:	e7eb      	b.n	80187da <_printf_i+0x212>
 8018802:	2500      	movs	r5, #0
 8018804:	f104 0619 	add.w	r6, r4, #25
 8018808:	e7f5      	b.n	80187f6 <_printf_i+0x22e>
 801880a:	bf00      	nop
 801880c:	0801bd13 	.word	0x0801bd13
 8018810:	0801bd24 	.word	0x0801bd24

08018814 <_read_r>:
 8018814:	b538      	push	{r3, r4, r5, lr}
 8018816:	4d07      	ldr	r5, [pc, #28]	; (8018834 <_read_r+0x20>)
 8018818:	4604      	mov	r4, r0
 801881a:	4608      	mov	r0, r1
 801881c:	4611      	mov	r1, r2
 801881e:	2200      	movs	r2, #0
 8018820:	602a      	str	r2, [r5, #0]
 8018822:	461a      	mov	r2, r3
 8018824:	f7e8 fb1c 	bl	8000e60 <_read>
 8018828:	1c43      	adds	r3, r0, #1
 801882a:	d102      	bne.n	8018832 <_read_r+0x1e>
 801882c:	682b      	ldr	r3, [r5, #0]
 801882e:	b103      	cbz	r3, 8018832 <_read_r+0x1e>
 8018830:	6023      	str	r3, [r4, #0]
 8018832:	bd38      	pop	{r3, r4, r5, pc}
 8018834:	2400d700 	.word	0x2400d700

08018838 <__swbuf_r>:
 8018838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801883a:	460e      	mov	r6, r1
 801883c:	4614      	mov	r4, r2
 801883e:	4605      	mov	r5, r0
 8018840:	b118      	cbz	r0, 801884a <__swbuf_r+0x12>
 8018842:	6983      	ldr	r3, [r0, #24]
 8018844:	b90b      	cbnz	r3, 801884a <__swbuf_r+0x12>
 8018846:	f7ff f913 	bl	8017a70 <__sinit>
 801884a:	4b21      	ldr	r3, [pc, #132]	; (80188d0 <__swbuf_r+0x98>)
 801884c:	429c      	cmp	r4, r3
 801884e:	d12b      	bne.n	80188a8 <__swbuf_r+0x70>
 8018850:	686c      	ldr	r4, [r5, #4]
 8018852:	69a3      	ldr	r3, [r4, #24]
 8018854:	60a3      	str	r3, [r4, #8]
 8018856:	89a3      	ldrh	r3, [r4, #12]
 8018858:	071a      	lsls	r2, r3, #28
 801885a:	d52f      	bpl.n	80188bc <__swbuf_r+0x84>
 801885c:	6923      	ldr	r3, [r4, #16]
 801885e:	b36b      	cbz	r3, 80188bc <__swbuf_r+0x84>
 8018860:	6923      	ldr	r3, [r4, #16]
 8018862:	6820      	ldr	r0, [r4, #0]
 8018864:	1ac0      	subs	r0, r0, r3
 8018866:	6963      	ldr	r3, [r4, #20]
 8018868:	b2f6      	uxtb	r6, r6
 801886a:	4283      	cmp	r3, r0
 801886c:	4637      	mov	r7, r6
 801886e:	dc04      	bgt.n	801887a <__swbuf_r+0x42>
 8018870:	4621      	mov	r1, r4
 8018872:	4628      	mov	r0, r5
 8018874:	f7ff fc1c 	bl	80180b0 <_fflush_r>
 8018878:	bb30      	cbnz	r0, 80188c8 <__swbuf_r+0x90>
 801887a:	68a3      	ldr	r3, [r4, #8]
 801887c:	3b01      	subs	r3, #1
 801887e:	60a3      	str	r3, [r4, #8]
 8018880:	6823      	ldr	r3, [r4, #0]
 8018882:	1c5a      	adds	r2, r3, #1
 8018884:	6022      	str	r2, [r4, #0]
 8018886:	701e      	strb	r6, [r3, #0]
 8018888:	6963      	ldr	r3, [r4, #20]
 801888a:	3001      	adds	r0, #1
 801888c:	4283      	cmp	r3, r0
 801888e:	d004      	beq.n	801889a <__swbuf_r+0x62>
 8018890:	89a3      	ldrh	r3, [r4, #12]
 8018892:	07db      	lsls	r3, r3, #31
 8018894:	d506      	bpl.n	80188a4 <__swbuf_r+0x6c>
 8018896:	2e0a      	cmp	r6, #10
 8018898:	d104      	bne.n	80188a4 <__swbuf_r+0x6c>
 801889a:	4621      	mov	r1, r4
 801889c:	4628      	mov	r0, r5
 801889e:	f7ff fc07 	bl	80180b0 <_fflush_r>
 80188a2:	b988      	cbnz	r0, 80188c8 <__swbuf_r+0x90>
 80188a4:	4638      	mov	r0, r7
 80188a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188a8:	4b0a      	ldr	r3, [pc, #40]	; (80188d4 <__swbuf_r+0x9c>)
 80188aa:	429c      	cmp	r4, r3
 80188ac:	d101      	bne.n	80188b2 <__swbuf_r+0x7a>
 80188ae:	68ac      	ldr	r4, [r5, #8]
 80188b0:	e7cf      	b.n	8018852 <__swbuf_r+0x1a>
 80188b2:	4b09      	ldr	r3, [pc, #36]	; (80188d8 <__swbuf_r+0xa0>)
 80188b4:	429c      	cmp	r4, r3
 80188b6:	bf08      	it	eq
 80188b8:	68ec      	ldreq	r4, [r5, #12]
 80188ba:	e7ca      	b.n	8018852 <__swbuf_r+0x1a>
 80188bc:	4621      	mov	r1, r4
 80188be:	4628      	mov	r0, r5
 80188c0:	f000 f80c 	bl	80188dc <__swsetup_r>
 80188c4:	2800      	cmp	r0, #0
 80188c6:	d0cb      	beq.n	8018860 <__swbuf_r+0x28>
 80188c8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80188cc:	e7ea      	b.n	80188a4 <__swbuf_r+0x6c>
 80188ce:	bf00      	nop
 80188d0:	0801bc0c 	.word	0x0801bc0c
 80188d4:	0801bc2c 	.word	0x0801bc2c
 80188d8:	0801bbec 	.word	0x0801bbec

080188dc <__swsetup_r>:
 80188dc:	4b32      	ldr	r3, [pc, #200]	; (80189a8 <__swsetup_r+0xcc>)
 80188de:	b570      	push	{r4, r5, r6, lr}
 80188e0:	681d      	ldr	r5, [r3, #0]
 80188e2:	4606      	mov	r6, r0
 80188e4:	460c      	mov	r4, r1
 80188e6:	b125      	cbz	r5, 80188f2 <__swsetup_r+0x16>
 80188e8:	69ab      	ldr	r3, [r5, #24]
 80188ea:	b913      	cbnz	r3, 80188f2 <__swsetup_r+0x16>
 80188ec:	4628      	mov	r0, r5
 80188ee:	f7ff f8bf 	bl	8017a70 <__sinit>
 80188f2:	4b2e      	ldr	r3, [pc, #184]	; (80189ac <__swsetup_r+0xd0>)
 80188f4:	429c      	cmp	r4, r3
 80188f6:	d10f      	bne.n	8018918 <__swsetup_r+0x3c>
 80188f8:	686c      	ldr	r4, [r5, #4]
 80188fa:	89a3      	ldrh	r3, [r4, #12]
 80188fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018900:	0719      	lsls	r1, r3, #28
 8018902:	d42c      	bmi.n	801895e <__swsetup_r+0x82>
 8018904:	06dd      	lsls	r5, r3, #27
 8018906:	d411      	bmi.n	801892c <__swsetup_r+0x50>
 8018908:	2309      	movs	r3, #9
 801890a:	6033      	str	r3, [r6, #0]
 801890c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018910:	81a3      	strh	r3, [r4, #12]
 8018912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018916:	e03e      	b.n	8018996 <__swsetup_r+0xba>
 8018918:	4b25      	ldr	r3, [pc, #148]	; (80189b0 <__swsetup_r+0xd4>)
 801891a:	429c      	cmp	r4, r3
 801891c:	d101      	bne.n	8018922 <__swsetup_r+0x46>
 801891e:	68ac      	ldr	r4, [r5, #8]
 8018920:	e7eb      	b.n	80188fa <__swsetup_r+0x1e>
 8018922:	4b24      	ldr	r3, [pc, #144]	; (80189b4 <__swsetup_r+0xd8>)
 8018924:	429c      	cmp	r4, r3
 8018926:	bf08      	it	eq
 8018928:	68ec      	ldreq	r4, [r5, #12]
 801892a:	e7e6      	b.n	80188fa <__swsetup_r+0x1e>
 801892c:	0758      	lsls	r0, r3, #29
 801892e:	d512      	bpl.n	8018956 <__swsetup_r+0x7a>
 8018930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018932:	b141      	cbz	r1, 8018946 <__swsetup_r+0x6a>
 8018934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018938:	4299      	cmp	r1, r3
 801893a:	d002      	beq.n	8018942 <__swsetup_r+0x66>
 801893c:	4630      	mov	r0, r6
 801893e:	f7ff fc2b 	bl	8018198 <_free_r>
 8018942:	2300      	movs	r3, #0
 8018944:	6363      	str	r3, [r4, #52]	; 0x34
 8018946:	89a3      	ldrh	r3, [r4, #12]
 8018948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801894c:	81a3      	strh	r3, [r4, #12]
 801894e:	2300      	movs	r3, #0
 8018950:	6063      	str	r3, [r4, #4]
 8018952:	6923      	ldr	r3, [r4, #16]
 8018954:	6023      	str	r3, [r4, #0]
 8018956:	89a3      	ldrh	r3, [r4, #12]
 8018958:	f043 0308 	orr.w	r3, r3, #8
 801895c:	81a3      	strh	r3, [r4, #12]
 801895e:	6923      	ldr	r3, [r4, #16]
 8018960:	b94b      	cbnz	r3, 8018976 <__swsetup_r+0x9a>
 8018962:	89a3      	ldrh	r3, [r4, #12]
 8018964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801896c:	d003      	beq.n	8018976 <__swsetup_r+0x9a>
 801896e:	4621      	mov	r1, r4
 8018970:	4630      	mov	r0, r6
 8018972:	f000 f84d 	bl	8018a10 <__smakebuf_r>
 8018976:	89a0      	ldrh	r0, [r4, #12]
 8018978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801897c:	f010 0301 	ands.w	r3, r0, #1
 8018980:	d00a      	beq.n	8018998 <__swsetup_r+0xbc>
 8018982:	2300      	movs	r3, #0
 8018984:	60a3      	str	r3, [r4, #8]
 8018986:	6963      	ldr	r3, [r4, #20]
 8018988:	425b      	negs	r3, r3
 801898a:	61a3      	str	r3, [r4, #24]
 801898c:	6923      	ldr	r3, [r4, #16]
 801898e:	b943      	cbnz	r3, 80189a2 <__swsetup_r+0xc6>
 8018990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018994:	d1ba      	bne.n	801890c <__swsetup_r+0x30>
 8018996:	bd70      	pop	{r4, r5, r6, pc}
 8018998:	0781      	lsls	r1, r0, #30
 801899a:	bf58      	it	pl
 801899c:	6963      	ldrpl	r3, [r4, #20]
 801899e:	60a3      	str	r3, [r4, #8]
 80189a0:	e7f4      	b.n	801898c <__swsetup_r+0xb0>
 80189a2:	2000      	movs	r0, #0
 80189a4:	e7f7      	b.n	8018996 <__swsetup_r+0xba>
 80189a6:	bf00      	nop
 80189a8:	24000038 	.word	0x24000038
 80189ac:	0801bc0c 	.word	0x0801bc0c
 80189b0:	0801bc2c 	.word	0x0801bc2c
 80189b4:	0801bbec 	.word	0x0801bbec

080189b8 <abort>:
 80189b8:	b508      	push	{r3, lr}
 80189ba:	2006      	movs	r0, #6
 80189bc:	f000 f890 	bl	8018ae0 <raise>
 80189c0:	2001      	movs	r0, #1
 80189c2:	f7e8 fa43 	bl	8000e4c <_exit>

080189c6 <__swhatbuf_r>:
 80189c6:	b570      	push	{r4, r5, r6, lr}
 80189c8:	460e      	mov	r6, r1
 80189ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80189ce:	2900      	cmp	r1, #0
 80189d0:	b096      	sub	sp, #88	; 0x58
 80189d2:	4614      	mov	r4, r2
 80189d4:	461d      	mov	r5, r3
 80189d6:	da07      	bge.n	80189e8 <__swhatbuf_r+0x22>
 80189d8:	2300      	movs	r3, #0
 80189da:	602b      	str	r3, [r5, #0]
 80189dc:	89b3      	ldrh	r3, [r6, #12]
 80189de:	061a      	lsls	r2, r3, #24
 80189e0:	d410      	bmi.n	8018a04 <__swhatbuf_r+0x3e>
 80189e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80189e6:	e00e      	b.n	8018a06 <__swhatbuf_r+0x40>
 80189e8:	466a      	mov	r2, sp
 80189ea:	f000 f895 	bl	8018b18 <_fstat_r>
 80189ee:	2800      	cmp	r0, #0
 80189f0:	dbf2      	blt.n	80189d8 <__swhatbuf_r+0x12>
 80189f2:	9a01      	ldr	r2, [sp, #4]
 80189f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80189f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80189fc:	425a      	negs	r2, r3
 80189fe:	415a      	adcs	r2, r3
 8018a00:	602a      	str	r2, [r5, #0]
 8018a02:	e7ee      	b.n	80189e2 <__swhatbuf_r+0x1c>
 8018a04:	2340      	movs	r3, #64	; 0x40
 8018a06:	2000      	movs	r0, #0
 8018a08:	6023      	str	r3, [r4, #0]
 8018a0a:	b016      	add	sp, #88	; 0x58
 8018a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018a10 <__smakebuf_r>:
 8018a10:	898b      	ldrh	r3, [r1, #12]
 8018a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018a14:	079d      	lsls	r5, r3, #30
 8018a16:	4606      	mov	r6, r0
 8018a18:	460c      	mov	r4, r1
 8018a1a:	d507      	bpl.n	8018a2c <__smakebuf_r+0x1c>
 8018a1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018a20:	6023      	str	r3, [r4, #0]
 8018a22:	6123      	str	r3, [r4, #16]
 8018a24:	2301      	movs	r3, #1
 8018a26:	6163      	str	r3, [r4, #20]
 8018a28:	b002      	add	sp, #8
 8018a2a:	bd70      	pop	{r4, r5, r6, pc}
 8018a2c:	ab01      	add	r3, sp, #4
 8018a2e:	466a      	mov	r2, sp
 8018a30:	f7ff ffc9 	bl	80189c6 <__swhatbuf_r>
 8018a34:	9900      	ldr	r1, [sp, #0]
 8018a36:	4605      	mov	r5, r0
 8018a38:	4630      	mov	r0, r6
 8018a3a:	f7ff f903 	bl	8017c44 <_malloc_r>
 8018a3e:	b948      	cbnz	r0, 8018a54 <__smakebuf_r+0x44>
 8018a40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018a44:	059a      	lsls	r2, r3, #22
 8018a46:	d4ef      	bmi.n	8018a28 <__smakebuf_r+0x18>
 8018a48:	f023 0303 	bic.w	r3, r3, #3
 8018a4c:	f043 0302 	orr.w	r3, r3, #2
 8018a50:	81a3      	strh	r3, [r4, #12]
 8018a52:	e7e3      	b.n	8018a1c <__smakebuf_r+0xc>
 8018a54:	4b0d      	ldr	r3, [pc, #52]	; (8018a8c <__smakebuf_r+0x7c>)
 8018a56:	62b3      	str	r3, [r6, #40]	; 0x28
 8018a58:	89a3      	ldrh	r3, [r4, #12]
 8018a5a:	6020      	str	r0, [r4, #0]
 8018a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a60:	81a3      	strh	r3, [r4, #12]
 8018a62:	9b00      	ldr	r3, [sp, #0]
 8018a64:	6163      	str	r3, [r4, #20]
 8018a66:	9b01      	ldr	r3, [sp, #4]
 8018a68:	6120      	str	r0, [r4, #16]
 8018a6a:	b15b      	cbz	r3, 8018a84 <__smakebuf_r+0x74>
 8018a6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018a70:	4630      	mov	r0, r6
 8018a72:	f000 f863 	bl	8018b3c <_isatty_r>
 8018a76:	b128      	cbz	r0, 8018a84 <__smakebuf_r+0x74>
 8018a78:	89a3      	ldrh	r3, [r4, #12]
 8018a7a:	f023 0303 	bic.w	r3, r3, #3
 8018a7e:	f043 0301 	orr.w	r3, r3, #1
 8018a82:	81a3      	strh	r3, [r4, #12]
 8018a84:	89a0      	ldrh	r0, [r4, #12]
 8018a86:	4305      	orrs	r5, r0
 8018a88:	81a5      	strh	r5, [r4, #12]
 8018a8a:	e7cd      	b.n	8018a28 <__smakebuf_r+0x18>
 8018a8c:	08017a09 	.word	0x08017a09

08018a90 <_raise_r>:
 8018a90:	291f      	cmp	r1, #31
 8018a92:	b538      	push	{r3, r4, r5, lr}
 8018a94:	4604      	mov	r4, r0
 8018a96:	460d      	mov	r5, r1
 8018a98:	d904      	bls.n	8018aa4 <_raise_r+0x14>
 8018a9a:	2316      	movs	r3, #22
 8018a9c:	6003      	str	r3, [r0, #0]
 8018a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018aa2:	bd38      	pop	{r3, r4, r5, pc}
 8018aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018aa6:	b112      	cbz	r2, 8018aae <_raise_r+0x1e>
 8018aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018aac:	b94b      	cbnz	r3, 8018ac2 <_raise_r+0x32>
 8018aae:	4620      	mov	r0, r4
 8018ab0:	f000 f830 	bl	8018b14 <_getpid_r>
 8018ab4:	462a      	mov	r2, r5
 8018ab6:	4601      	mov	r1, r0
 8018ab8:	4620      	mov	r0, r4
 8018aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018abe:	f000 b817 	b.w	8018af0 <_kill_r>
 8018ac2:	2b01      	cmp	r3, #1
 8018ac4:	d00a      	beq.n	8018adc <_raise_r+0x4c>
 8018ac6:	1c59      	adds	r1, r3, #1
 8018ac8:	d103      	bne.n	8018ad2 <_raise_r+0x42>
 8018aca:	2316      	movs	r3, #22
 8018acc:	6003      	str	r3, [r0, #0]
 8018ace:	2001      	movs	r0, #1
 8018ad0:	e7e7      	b.n	8018aa2 <_raise_r+0x12>
 8018ad2:	2400      	movs	r4, #0
 8018ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018ad8:	4628      	mov	r0, r5
 8018ada:	4798      	blx	r3
 8018adc:	2000      	movs	r0, #0
 8018ade:	e7e0      	b.n	8018aa2 <_raise_r+0x12>

08018ae0 <raise>:
 8018ae0:	4b02      	ldr	r3, [pc, #8]	; (8018aec <raise+0xc>)
 8018ae2:	4601      	mov	r1, r0
 8018ae4:	6818      	ldr	r0, [r3, #0]
 8018ae6:	f7ff bfd3 	b.w	8018a90 <_raise_r>
 8018aea:	bf00      	nop
 8018aec:	24000038 	.word	0x24000038

08018af0 <_kill_r>:
 8018af0:	b538      	push	{r3, r4, r5, lr}
 8018af2:	4d07      	ldr	r5, [pc, #28]	; (8018b10 <_kill_r+0x20>)
 8018af4:	2300      	movs	r3, #0
 8018af6:	4604      	mov	r4, r0
 8018af8:	4608      	mov	r0, r1
 8018afa:	4611      	mov	r1, r2
 8018afc:	602b      	str	r3, [r5, #0]
 8018afe:	f7e8 f993 	bl	8000e28 <_kill>
 8018b02:	1c43      	adds	r3, r0, #1
 8018b04:	d102      	bne.n	8018b0c <_kill_r+0x1c>
 8018b06:	682b      	ldr	r3, [r5, #0]
 8018b08:	b103      	cbz	r3, 8018b0c <_kill_r+0x1c>
 8018b0a:	6023      	str	r3, [r4, #0]
 8018b0c:	bd38      	pop	{r3, r4, r5, pc}
 8018b0e:	bf00      	nop
 8018b10:	2400d700 	.word	0x2400d700

08018b14 <_getpid_r>:
 8018b14:	f7e8 b980 	b.w	8000e18 <_getpid>

08018b18 <_fstat_r>:
 8018b18:	b538      	push	{r3, r4, r5, lr}
 8018b1a:	4d07      	ldr	r5, [pc, #28]	; (8018b38 <_fstat_r+0x20>)
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	4604      	mov	r4, r0
 8018b20:	4608      	mov	r0, r1
 8018b22:	4611      	mov	r1, r2
 8018b24:	602b      	str	r3, [r5, #0]
 8018b26:	f7e8 f9e0 	bl	8000eea <_fstat>
 8018b2a:	1c43      	adds	r3, r0, #1
 8018b2c:	d102      	bne.n	8018b34 <_fstat_r+0x1c>
 8018b2e:	682b      	ldr	r3, [r5, #0]
 8018b30:	b103      	cbz	r3, 8018b34 <_fstat_r+0x1c>
 8018b32:	6023      	str	r3, [r4, #0]
 8018b34:	bd38      	pop	{r3, r4, r5, pc}
 8018b36:	bf00      	nop
 8018b38:	2400d700 	.word	0x2400d700

08018b3c <_isatty_r>:
 8018b3c:	b538      	push	{r3, r4, r5, lr}
 8018b3e:	4d06      	ldr	r5, [pc, #24]	; (8018b58 <_isatty_r+0x1c>)
 8018b40:	2300      	movs	r3, #0
 8018b42:	4604      	mov	r4, r0
 8018b44:	4608      	mov	r0, r1
 8018b46:	602b      	str	r3, [r5, #0]
 8018b48:	f7e8 f9df 	bl	8000f0a <_isatty>
 8018b4c:	1c43      	adds	r3, r0, #1
 8018b4e:	d102      	bne.n	8018b56 <_isatty_r+0x1a>
 8018b50:	682b      	ldr	r3, [r5, #0]
 8018b52:	b103      	cbz	r3, 8018b56 <_isatty_r+0x1a>
 8018b54:	6023      	str	r3, [r4, #0]
 8018b56:	bd38      	pop	{r3, r4, r5, pc}
 8018b58:	2400d700 	.word	0x2400d700

08018b5c <_init>:
 8018b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b5e:	bf00      	nop
 8018b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b62:	bc08      	pop	{r3}
 8018b64:	469e      	mov	lr, r3
 8018b66:	4770      	bx	lr

08018b68 <_fini>:
 8018b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b6a:	bf00      	nop
 8018b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018b6e:	bc08      	pop	{r3}
 8018b70:	469e      	mov	lr, r3
 8018b72:	4770      	bx	lr
