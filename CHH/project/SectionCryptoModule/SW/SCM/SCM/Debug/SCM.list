
SCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d8c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800802c  0800802c  0001802c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008154  08008154  00018154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  08008164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  080081dc  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800823c  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000089fc  24000138  0800829c  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24008b34  0800829c  00028b34  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034111  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fda  00000000  00000000  00054277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  00059258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018a8  00000000  00000000  0005ac88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ab1b  00000000  00000000  0005c530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020057  00000000  00000000  0009704b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00173db1  00000000  00000000  000b70a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022ae53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007240  00000000  00000000  0022aea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000138 	.word	0x24000138
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008014 	.word	0x08008014

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400013c 	.word	0x2400013c
 80002dc:	08008014 	.word	0x08008014

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	24000154 	.word	0x24000154
 8000608:	24000208 	.word	0x24000208

0800060c <Unit_Side_Data_Task>:
 *      Author: Hyun-Ho Cha
 */
#include "cmsis_os.h"

void Unit_Side_Data_Task(void const * argument)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  for(;;)
  {
    osDelay(1);
 8000614:	2001      	movs	r0, #1
 8000616:	f006 f9fe 	bl	8006a16 <osDelay>
 800061a:	e7fb      	b.n	8000614 <Unit_Side_Data_Task+0x8>

0800061c <SCM_Side_Data_Task>:
  }

}

void SCM_Side_Data_Task(void const * argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  for(;;)
  {
    osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f006 f9f6 	bl	8006a16 <osDelay>
 800062a:	e7fb      	b.n	8000624 <SCM_Side_Data_Task+0x8>

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b5b0      	push	{r4, r5, r7, lr}
 800062e:	b098      	sub	sp, #96	; 0x60
 8000630:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000632:	4b44      	ldr	r3, [pc, #272]	; (8000744 <main+0x118>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800063a:	2b00      	cmp	r3, #0
 800063c:	d138      	bne.n	80006b0 <main+0x84>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <main+0x118>)
 8000640:	2200      	movs	r2, #0
 8000642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000646:	f3bf 8f4f 	dsb	sy
}
 800064a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800064c:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <main+0x118>)
 800064e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000652:	65fb      	str	r3, [r7, #92]	; 0x5c

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000656:	0b5b      	lsrs	r3, r3, #13
 8000658:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800065c:	65bb      	str	r3, [r7, #88]	; 0x58
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800065e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000660:	08db      	lsrs	r3, r3, #3
 8000662:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000666:	657b      	str	r3, [r7, #84]	; 0x54
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000668:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800066a:	015a      	lsls	r2, r3, #5
 800066c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000670:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000672:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000674:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000676:	4933      	ldr	r1, [pc, #204]	; (8000744 <main+0x118>)
 8000678:	4313      	orrs	r3, r2
 800067a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800067e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	657a      	str	r2, [r7, #84]	; 0x54
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1ef      	bne.n	8000668 <main+0x3c>
    } while(sets-- != 0U);
 8000688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800068a:	1e5a      	subs	r2, r3, #1
 800068c:	65ba      	str	r2, [r7, #88]	; 0x58
 800068e:	2b00      	cmp	r3, #0
 8000690:	d1e5      	bne.n	800065e <main+0x32>
  __ASM volatile ("dsb 0xF":::"memory");
 8000692:	f3bf 8f4f 	dsb	sy
}
 8000696:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000698:	4b2a      	ldr	r3, [pc, #168]	; (8000744 <main+0x118>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	4a29      	ldr	r2, [pc, #164]	; (8000744 <main+0x118>)
 800069e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006a2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006a4:	f3bf 8f4f 	dsb	sy
}
 80006a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006aa:	f3bf 8f6f 	isb	sy
}
 80006ae:	e000      	b.n	80006b2 <main+0x86>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006b0:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fdcd 	bl	8001250 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f851 	bl	800075c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f9ab 	bl	8000a14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80006be:	f000 f92b 	bl	8000918 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c2:	f000 f975 	bl	80009b0 <MX_USB_OTG_FS_PCD_Init>
  MX_RNG_Init();
 80006c6:	f000 f911 	bl	80008ec <MX_RNG_Init>
  MX_ETH_Init();
 80006ca:	f000 f8c3 	bl	8000854 <MX_ETH_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <main+0x11c>)
 80006d0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006d4:	461d      	mov	r5, r3
 80006d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f006 f948 	bl	800697e <osThreadCreate>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <main+0x120>)
 80006f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(unit_side_data_task, Unit_Side_Data_Task, osPriorityHigh, 0, 4096);
 80006f4:	4b16      	ldr	r3, [pc, #88]	; (8000750 <main+0x124>)
 80006f6:	f107 041c 	add.w	r4, r7, #28
 80006fa:	461d      	mov	r5, r3
 80006fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UnitiSideDataTaskHandle = osThreadCreate(osThread(unit_side_data_task), NULL);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 f935 	bl	800697e <osThreadCreate>
 8000714:	4603      	mov	r3, r0
 8000716:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <main+0x128>)
 8000718:	6013      	str	r3, [r2, #0]

  osThreadDef(scm_side_data_task, SCM_Side_Data_Task, osPriorityHigh, 0, 4096);
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <main+0x12c>)
 800071c:	463c      	mov	r4, r7
 800071e:	461d      	mov	r5, r3
 8000720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UnitiSideDataTaskHandle = osThreadCreate(osThread(scm_side_data_task), NULL);
 800072c:	463b      	mov	r3, r7
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f006 f924 	bl	800697e <osThreadCreate>
 8000736:	4603      	mov	r3, r0
 8000738:	4a06      	ldr	r2, [pc, #24]	; (8000754 <main+0x128>)
 800073a:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800073c:	f006 f918 	bl	8006970 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000740:	e7fe      	b.n	8000740 <main+0x114>
 8000742:	bf00      	nop
 8000744:	e000ed00 	.word	0xe000ed00
 8000748:	08008060 	.word	0x08008060
 800074c:	24008568 	.word	0x24008568
 8000750:	0800807c 	.word	0x0800807c
 8000754:	24008a18 	.word	0x24008a18
 8000758:	08008098 	.word	0x08008098

0800075c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09c      	sub	sp, #112	; 0x70
 8000760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000766:	224c      	movs	r2, #76	; 0x4c
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f007 fb84 	bl	8007e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2220      	movs	r2, #32
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f007 fb7e 	bl	8007e78 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800077c:	2002      	movs	r0, #2
 800077e:	f001 fe0f 	bl	80023a0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000782:	2300      	movs	r3, #0
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <SystemClock_Config+0xf0>)
 8000788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800078a:	4a30      	ldr	r2, [pc, #192]	; (800084c <SystemClock_Config+0xf0>)
 800078c:	f023 0301 	bic.w	r3, r3, #1
 8000790:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000792:	4b2e      	ldr	r3, [pc, #184]	; (800084c <SystemClock_Config+0xf0>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	603b      	str	r3, [r7, #0]
 800079c:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <SystemClock_Config+0xf4>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <SystemClock_Config+0xf4>)
 80007a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <SystemClock_Config+0xf4>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007b0:	603b      	str	r3, [r7, #0]
 80007b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007b4:	bf00      	nop
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <SystemClock_Config+0xf4>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007c2:	d1f8      	bne.n	80007b6 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80007c4:	2321      	movs	r3, #33	; 0x21
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80007ce:	2301      	movs	r3, #1
 80007d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007da:	2301      	movs	r3, #1
 80007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007de:	233c      	movs	r3, #60	; 0x3c
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007e2:	2302      	movs	r3, #2
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80007e6:	2308      	movs	r3, #8
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ea:	2302      	movs	r3, #2
 80007ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007ee:	230c      	movs	r3, #12
 80007f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 fe18 	bl	8002434 <HAL_RCC_OscConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800080a:	f000 f9d1 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800080e:	233f      	movs	r3, #63	; 0x3f
 8000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000812:	2303      	movs	r3, #3
 8000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800081e:	2340      	movs	r3, #64	; 0x40
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8000822:	2350      	movs	r3, #80	; 0x50
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2100      	movs	r1, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f002 fa29 	bl	8002c8c <HAL_RCC_ClockConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000840:	f000 f9b6 	bl	8000bb0 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3770      	adds	r7, #112	; 0x70
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	58000400 	.word	0x58000400
 8000850:	58024800 	.word	0x58024800

08000854 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_ETH_Init+0x80>)
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <MX_ETH_Init+0x84>)
 800085c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_ETH_Init+0x88>)
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000864:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_ETH_Init+0x88>)
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_ETH_Init+0x88>)
 800086c:	22e1      	movs	r2, #225	; 0xe1
 800086e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_ETH_Init+0x88>)
 8000872:	2200      	movs	r2, #0
 8000874:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x20;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_ETH_Init+0x88>)
 8000878:	2220      	movs	r2, #32
 800087a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x10;
 800087c:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_ETH_Init+0x88>)
 800087e:	2210      	movs	r2, #16
 8000880:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_ETH_Init+0x80>)
 8000884:	4a15      	ldr	r2, [pc, #84]	; (80008dc <MX_ETH_Init+0x88>)
 8000886:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_ETH_Init+0x80>)
 800088a:	2201      	movs	r2, #1
 800088c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_ETH_Init+0x80>)
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_ETH_Init+0x8c>)
 8000892:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_ETH_Init+0x80>)
 8000896:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <MX_ETH_Init+0x90>)
 8000898:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <MX_ETH_Init+0x80>)
 800089c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008a0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008a2:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_ETH_Init+0x80>)
 80008a4:	f000 fe54 	bl	8001550 <HAL_ETH_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008ae:	f000 f97f 	bl	8000bb0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008b2:	2234      	movs	r2, #52	; 0x34
 80008b4:	2100      	movs	r1, #0
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <MX_ETH_Init+0x94>)
 80008b8:	f007 fade 	bl	8007e78 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_ETH_Init+0x94>)
 80008be:	2221      	movs	r2, #33	; 0x21
 80008c0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_ETH_Init+0x94>)
 80008c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008c8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008ca:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_ETH_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24008a1c 	.word	0x24008a1c
 80008d8:	40028000 	.word	0x40028000
 80008dc:	24000408 	.word	0x24000408
 80008e0:	240000d8 	.word	0x240000d8
 80008e4:	24000078 	.word	0x24000078
 80008e8:	24008aa4 	.word	0x24008aa4

080008ec <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_RNG_Init+0x24>)
 80008f2:	4a08      	ldr	r2, [pc, #32]	; (8000914 <MX_RNG_Init+0x28>)
 80008f4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_RNG_Init+0x24>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_RNG_Init+0x24>)
 80008fe:	f004 f8f5 	bl	8004aec <HAL_RNG_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000908:	f000 f952 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	24008a04 	.word	0x24008a04
 8000914:	48021800 	.word	0x48021800

08000918 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800091c:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800091e:	4a23      	ldr	r2, [pc, #140]	; (80009ac <MX_USART3_UART_Init+0x94>)
 8000920:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 800095c:	2200      	movs	r2, #0
 800095e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000960:	4811      	ldr	r0, [pc, #68]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000962:	f004 fc81 	bl	8005268 <HAL_UART_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800096c:	f000 f920 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000970:	2100      	movs	r1, #0
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000974:	f005 fc16 	bl	80061a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800097e:	f000 f917 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000986:	f005 fc4b 	bl	8006220 <HAL_UARTEx_SetRxFifoThreshold>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000990:	f000 f90e 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_USART3_UART_Init+0x90>)
 8000996:	f005 fbcc 	bl	8006132 <HAL_UARTEx_DisableFifoMode>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a0:	f000 f906 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2400856c 	.word	0x2400856c
 80009ac:	40004800 	.word	0x40004800

080009b0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009b4:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009bc:	2209      	movs	r2, #9
 80009be:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c2:	2202      	movs	r2, #2
 80009c4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ce:	2202      	movs	r2, #2
 80009d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f8:	f001 fb89 	bl	800210e <HAL_PCD_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a02:	f000 f8d5 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	240085fc 	.word	0x240085fc
 8000a10:	40080000 	.word	0x40080000

08000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
 8000a28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	4b50      	ldr	r3, [pc, #320]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a30:	4a4e      	ldr	r2, [pc, #312]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a3a:	4b4c      	ldr	r3, [pc, #304]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	61bb      	str	r3, [r7, #24]
 8000a46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4e:	4a47      	ldr	r2, [pc, #284]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6c:	4a3f      	ldr	r2, [pc, #252]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a76:	4b3d      	ldr	r3, [pc, #244]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b39      	ldr	r3, [pc, #228]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a8c:	f043 0302 	orr.w	r3, r3, #2
 8000a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a94:	4b35      	ldr	r3, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	f003 0302 	and.w	r3, r3, #2
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	4b32      	ldr	r3, [pc, #200]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa8:	4a30      	ldr	r2, [pc, #192]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac0:	4b2a      	ldr	r3, [pc, #168]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac6:	4a29      	ldr	r2, [pc, #164]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad0:	4b26      	ldr	r3, [pc, #152]	; (8000b6c <MX_GPIO_Init+0x158>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000ae4:	4822      	ldr	r0, [pc, #136]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000ae6:	f001 faf9 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2140      	movs	r1, #64	; 0x40
 8000aee:	4821      	ldr	r0, [pc, #132]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000af0:	f001 faf4 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000afa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <MX_GPIO_Init+0x164>)
 8000b0c:	f001 f936 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000b10:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b16:	2301      	movs	r3, #1
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4811      	ldr	r0, [pc, #68]	; (8000b70 <MX_GPIO_Init+0x15c>)
 8000b2a:	f001 f927 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b2e:	2340      	movs	r3, #64	; 0x40
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	2301      	movs	r3, #1
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000b46:	f001 f919 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 031c 	add.w	r3, r7, #28
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_GPIO_Init+0x160>)
 8000b5e:	f001 f90d 	bl	8001d7c <HAL_GPIO_Init>

}
 8000b62:	bf00      	nop
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	58020400 	.word	0x58020400
 8000b74:	58021800 	.word	0x58021800
 8000b78:	58020800 	.word	0x58020800

08000b7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f005 ff46 	bl	8006a16 <osDelay>
 8000b8a:	e7fb      	b.n	8000b84 <StartDefaultTask+0x8>

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 fb93 	bl	80012c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40010000 	.word	0x40010000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x38>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	210f      	movs	r1, #15
 8000be4:	f06f 0001 	mvn.w	r0, #1
 8000be8:	f000 fc8a 	bl	8001500 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a59      	ldr	r2, [pc, #356]	; (8000d7c <HAL_ETH_MspInit+0x184>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	f040 80ab 	bne.w	8000d72 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c1c:	4b58      	ldr	r3, [pc, #352]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c1e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c22:	4a57      	ldr	r2, [pc, #348]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c28:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c2c:	4b54      	ldr	r3, [pc, #336]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c36:	623b      	str	r3, [r7, #32]
 8000c38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c3a:	4b51      	ldr	r3, [pc, #324]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c40:	4a4f      	ldr	r2, [pc, #316]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c46:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c4a:	4b4d      	ldr	r3, [pc, #308]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c54:	61fb      	str	r3, [r7, #28]
 8000c56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c58:	4b49      	ldr	r3, [pc, #292]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5e:	4a48      	ldr	r2, [pc, #288]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c68:	4b45      	ldr	r3, [pc, #276]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	4b42      	ldr	r3, [pc, #264]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a40      	ldr	r2, [pc, #256]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f043 0304 	orr.w	r3, r3, #4
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b3a      	ldr	r3, [pc, #232]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a39      	ldr	r2, [pc, #228]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb2:	4b33      	ldr	r3, [pc, #204]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a31      	ldr	r2, [pc, #196]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cba:	f043 0302 	orr.w	r3, r3, #2
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0302 	and.w	r3, r3, #2
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd6:	4a2a      	ldr	r2, [pc, #168]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce0:	4b27      	ldr	r3, [pc, #156]	; (8000d80 <HAL_ETH_MspInit+0x188>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cee:	2332      	movs	r3, #50	; 0x32
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cfe:	230b      	movs	r3, #11
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	481e      	ldr	r0, [pc, #120]	; (8000d84 <HAL_ETH_MspInit+0x18c>)
 8000d0a:	f001 f837 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d0e:	2386      	movs	r3, #134	; 0x86
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d1e:	230b      	movs	r3, #11
 8000d20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d26:	4619      	mov	r1, r3
 8000d28:	4817      	ldr	r0, [pc, #92]	; (8000d88 <HAL_ETH_MspInit+0x190>)
 8000d2a:	f001 f827 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d40:	230b      	movs	r3, #11
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4810      	ldr	r0, [pc, #64]	; (8000d8c <HAL_ETH_MspInit+0x194>)
 8000d4c:	f001 f816 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d62:	230b      	movs	r3, #11
 8000d64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4808      	ldr	r0, [pc, #32]	; (8000d90 <HAL_ETH_MspInit+0x198>)
 8000d6e:	f001 f805 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d72:	bf00      	nop
 8000d74:	3738      	adds	r7, #56	; 0x38
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40028000 	.word	0x40028000
 8000d80:	58024400 	.word	0x58024400
 8000d84:	58020800 	.word	0x58020800
 8000d88:	58020000 	.word	0x58020000
 8000d8c:	58020400 	.word	0x58020400
 8000d90:	58021800 	.word	0x58021800

08000d94 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0b2      	sub	sp, #200	; 0xc8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	22bc      	movs	r2, #188	; 0xbc
 8000da2:	2100      	movs	r1, #0
 8000da4:	4618      	mov	r0, r3
 8000da6:	f007 f867 	bl	8007e78 <memset>
  if(hrng->Instance==RNG)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <HAL_RNG_MspInit+0x78>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d126      	bne.n	8000e02 <HAL_RNG_MspInit+0x6e>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc0:	f107 030c 	add.w	r3, r7, #12
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f002 fb2f 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8000dd0:	f7ff feee 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_RNG_MspInit+0x7c>)
 8000dd6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <HAL_RNG_MspInit+0x7c>)
 8000ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000de0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8000de4:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_RNG_MspInit+0x7c>)
 8000de6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2105      	movs	r1, #5
 8000df6:	2050      	movs	r0, #80	; 0x50
 8000df8:	f000 fb82 	bl	8001500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8000dfc:	2050      	movs	r0, #80	; 0x50
 8000dfe:	f000 fb99 	bl	8001534 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	37c8      	adds	r7, #200	; 0xc8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	48021800 	.word	0x48021800
 8000e10:	58024400 	.word	0x58024400

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0b8      	sub	sp, #224	; 0xe0
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	22bc      	movs	r2, #188	; 0xbc
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f007 f81f 	bl	8007e78 <memset>
  if(huart->Instance==USART3)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a25      	ldr	r2, [pc, #148]	; (8000ed4 <HAL_UART_MspInit+0xc0>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d142      	bne.n	8000eca <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e44:	2302      	movs	r3, #2
 8000e46:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e4e:	f107 0310 	add.w	r3, r7, #16
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fae8 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e5e:	f7ff fea7 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_UART_MspInit+0xc4>)
 8000e64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <HAL_UART_MspInit+0xc4>)
 8000e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_UART_MspInit+0xc4>)
 8000e74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_UART_MspInit+0xc4>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0xc4>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e90:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_MspInit+0xc4>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e96:	f003 0308 	and.w	r3, r3, #8
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e9e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb8:	2307      	movs	r3, #7
 8000eba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_UART_MspInit+0xc8>)
 8000ec6:	f000 ff59 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	37e0      	adds	r7, #224	; 0xe0
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40004800 	.word	0x40004800
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020c00 	.word	0x58020c00

08000ee0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0b8      	sub	sp, #224	; 0xe0
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	22bc      	movs	r2, #188	; 0xbc
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 ffb9 	bl	8007e78 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a2f      	ldr	r2, [pc, #188]	; (8000fc8 <HAL_PCD_MspInit+0xe8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d156      	bne.n	8000fbe <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000f14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fa80 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000f2e:	f7ff fe3f 	bl	8000bb0 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f32:	f001 fa6f 	bl	8002414 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <HAL_PCD_MspInit+0xec>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	4a23      	ldr	r2, [pc, #140]	; (8000fcc <HAL_PCD_MspInit+0xec>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_PCD_MspInit+0xec>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f54:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f6e:	230a      	movs	r3, #10
 8000f70:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <HAL_PCD_MspInit+0xf0>)
 8000f7c:	f000 fefe 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f98:	4619      	mov	r1, r3
 8000f9a:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <HAL_PCD_MspInit+0xf0>)
 8000f9c:	f000 feee 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <HAL_PCD_MspInit+0xec>)
 8000fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <HAL_PCD_MspInit+0xec>)
 8000fa8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000fac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_PCD_MspInit+0xec>)
 8000fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37e0      	adds	r7, #224	; 0xe0
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40080000 	.word	0x40080000
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020000 	.word	0x58020000

08000fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b0f      	cmp	r3, #15
 8000fe0:	d844      	bhi.n	800106c <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	2019      	movs	r0, #25
 8000fe8:	f000 fa8a 	bl	8001500 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fec:	2019      	movs	r0, #25
 8000fee:	f000 faa1 	bl	8001534 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_InitTick+0xb0>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_InitTick+0xb4>)
 8000ffa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ffe:	4a22      	ldr	r2, [pc, #136]	; (8001088 <HAL_InitTick+0xb4>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_InitTick+0xb4>)
 800100a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001016:	f107 020c 	add.w	r2, r7, #12
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f002 f9bf 	bl	80033a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001026:	f002 f9a7 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 800102a:	4603      	mov	r3, r0
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001032:	4a16      	ldr	r2, [pc, #88]	; (800108c <HAL_InitTick+0xb8>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	0c9b      	lsrs	r3, r3, #18
 800103a:	3b01      	subs	r3, #1
 800103c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <HAL_InitTick+0xbc>)
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_InitTick+0xc0>)
 8001042:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0xbc>)
 8001046:	f240 32e7 	movw	r2, #999	; 0x3e7
 800104a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800104c:	4a10      	ldr	r2, [pc, #64]	; (8001090 <HAL_InitTick+0xbc>)
 800104e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001050:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <HAL_InitTick+0xbc>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <HAL_InitTick+0xbc>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800105e:	480c      	ldr	r0, [pc, #48]	; (8001090 <HAL_InitTick+0xbc>)
 8001060:	f003 fe29 	bl	8004cb6 <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d107      	bne.n	800107a <HAL_InitTick+0xa6>
 800106a:	e001      	b.n	8001070 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e005      	b.n	800107c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001070:	4807      	ldr	r0, [pc, #28]	; (8001090 <HAL_InitTick+0xbc>)
 8001072:	f003 fe81 	bl	8004d78 <HAL_TIM_Base_Start_IT>
 8001076:	4603      	mov	r3, r0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3738      	adds	r7, #56	; 0x38
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	24000008 	.word	0x24000008
 8001088:	58024400 	.word	0x58024400
 800108c:	431bde83 	.word	0x431bde83
 8001090:	24008ad8 	.word	0x24008ad8
 8001094:	40010000 	.word	0x40010000

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM1_UP_IRQHandler+0x10>)
 80010ca:	f003 fecd 	bl	8004e68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	24008ad8 	.word	0x24008ad8

080010d8 <RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <RNG_IRQHandler+0x10>)
 80010de:	f003 fd67 	bl	8004bb0 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	24008a04 	.word	0x24008a04

080010ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f0:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <SystemInit+0xe4>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <SystemInit+0xe4>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001100:	4b34      	ldr	r3, [pc, #208]	; (80011d4 <SystemInit+0xe8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	2b06      	cmp	r3, #6
 800110a:	d807      	bhi.n	800111c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <SystemInit+0xe8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f023 030f 	bic.w	r3, r3, #15
 8001114:	4a2f      	ldr	r2, [pc, #188]	; (80011d4 <SystemInit+0xe8>)
 8001116:	f043 0307 	orr.w	r3, r3, #7
 800111a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <SystemInit+0xec>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a2d      	ldr	r2, [pc, #180]	; (80011d8 <SystemInit+0xec>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <SystemInit+0xec>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <SystemInit+0xec>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4929      	ldr	r1, [pc, #164]	; (80011d8 <SystemInit+0xec>)
 8001134:	4b29      	ldr	r3, [pc, #164]	; (80011dc <SystemInit+0xf0>)
 8001136:	4013      	ands	r3, r2
 8001138:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <SystemInit+0xe8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0308 	and.w	r3, r3, #8
 8001142:	2b00      	cmp	r3, #0
 8001144:	d007      	beq.n	8001156 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <SystemInit+0xe8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 030f 	bic.w	r3, r3, #15
 800114e:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <SystemInit+0xe8>)
 8001150:	f043 0307 	orr.w	r3, r3, #7
 8001154:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <SystemInit+0xec>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800115c:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <SystemInit+0xec>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <SystemInit+0xec>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <SystemInit+0xec>)
 800116a:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <SystemInit+0xf4>)
 800116c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800116e:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <SystemInit+0xec>)
 8001170:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <SystemInit+0xf8>)
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <SystemInit+0xec>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <SystemInit+0xfc>)
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <SystemInit+0xec>)
 800117c:	2200      	movs	r2, #0
 800117e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001180:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <SystemInit+0xec>)
 8001182:	4a19      	ldr	r2, [pc, #100]	; (80011e8 <SystemInit+0xfc>)
 8001184:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <SystemInit+0xec>)
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <SystemInit+0xec>)
 800118e:	4a16      	ldr	r2, [pc, #88]	; (80011e8 <SystemInit+0xfc>)
 8001190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <SystemInit+0xec>)
 8001194:	2200      	movs	r2, #0
 8001196:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <SystemInit+0xec>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0e      	ldr	r2, [pc, #56]	; (80011d8 <SystemInit+0xec>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <SystemInit+0xec>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <SystemInit+0x100>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <SystemInit+0x104>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011b6:	d202      	bcs.n	80011be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <SystemInit+0x108>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <SystemInit+0x10c>)
 80011c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80011c4:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00
 80011d4:	52002000 	.word	0x52002000
 80011d8:	58024400 	.word	0x58024400
 80011dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80011e0:	02020200 	.word	0x02020200
 80011e4:	01ff0000 	.word	0x01ff0000
 80011e8:	01010280 	.word	0x01010280
 80011ec:	5c001000 	.word	0x5c001000
 80011f0:	ffff0000 	.word	0xffff0000
 80011f4:	51008108 	.word	0x51008108
 80011f8:	52004000 	.word	0x52004000

080011fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001234 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001200:	f7ff ff74 	bl	80010ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001206:	490d      	ldr	r1, [pc, #52]	; (800123c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800120c:	e002      	b.n	8001214 <LoopCopyDataInit>

0800120e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800120e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001210:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001212:	3304      	adds	r3, #4

08001214 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001214:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001216:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001218:	d3f9      	bcc.n	800120e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800121c:	4c0a      	ldr	r4, [pc, #40]	; (8001248 <LoopFillZerobss+0x22>)
  movs r3, #0
 800121e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001220:	e001      	b.n	8001226 <LoopFillZerobss>

08001222 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001222:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001224:	3204      	adds	r2, #4

08001226 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001226:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001228:	d3fb      	bcc.n	8001222 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122a:	f006 fdff 	bl	8007e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800122e:	f7ff f9fd 	bl	800062c <main>
  bx  lr
 8001232:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001234:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001238:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800123c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001240:	08008164 	.word	0x08008164
  ldr r2, =_sbss
 8001244:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001248:	24008b34 	.word	0x24008b34

0800124c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800124c:	e7fe      	b.n	800124c <ADC3_IRQHandler>
	...

08001250 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001256:	2003      	movs	r0, #3
 8001258:	f000 f947 	bl	80014ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800125c:	f001 fecc 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8001260:	4602      	mov	r2, r0
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_Init+0x68>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	4913      	ldr	r1, [pc, #76]	; (80012bc <HAL_Init+0x6c>)
 800126e:	5ccb      	ldrb	r3, [r1, r3]
 8001270:	f003 031f 	and.w	r3, r3, #31
 8001274:	fa22 f303 	lsr.w	r3, r2, r3
 8001278:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_Init+0x68>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <HAL_Init+0x6c>)
 8001284:	5cd3      	ldrb	r3, [r2, r3]
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	4a0b      	ldr	r2, [pc, #44]	; (80012c0 <HAL_Init+0x70>)
 8001292:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <HAL_Init+0x74>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129a:	200f      	movs	r0, #15
 800129c:	f7ff fe9a 	bl	8000fd4 <HAL_InitTick>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e002      	b.n	80012b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012aa:	f7ff fc87 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58024400 	.word	0x58024400
 80012bc:	080080bc 	.word	0x080080bc
 80012c0:	24000004 	.word	0x24000004
 80012c4:	24000000 	.word	0x24000000

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	2400000c 	.word	0x2400000c
 80012ec:	24008b24 	.word	0x24008b24

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	24008b24 	.word	0x24008b24

08001308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff ffee 	bl	80012f0 <HAL_GetTick>
 8001314:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001320:	d005      	beq.n	800132e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001322:	4b0a      	ldr	r3, [pc, #40]	; (800134c <HAL_Delay+0x44>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	4413      	add	r3, r2
 800132c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132e:	bf00      	nop
 8001330:	f7ff ffde 	bl	80012f0 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	429a      	cmp	r2, r3
 800133e:	d8f7      	bhi.n	8001330 <HAL_Delay+0x28>
  {
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	2400000c 	.word	0x2400000c

08001350 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <HAL_GetREVID+0x14>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0c1b      	lsrs	r3, r3, #16
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	5c001000 	.word	0x5c001000

08001368 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001378:	4904      	ldr	r1, [pc, #16]	; (800138c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	58000400 	.word	0x58000400

08001390 <__NVIC_SetPriorityGrouping>:
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <__NVIC_SetPriorityGrouping+0x40>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00
 80013d4:	05fa0000 	.word	0x05fa0000

080013d8 <__NVIC_GetPriorityGrouping>:
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff4c 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150e:	f7ff ff63 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001512:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	68b9      	ldr	r1, [r7, #8]
 8001518:	6978      	ldr	r0, [r7, #20]
 800151a:	f7ff ffb3 	bl	8001484 <NVIC_EncodePriority>
 800151e:	4602      	mov	r2, r0
 8001520:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff82 	bl	8001430 <__NVIC_SetPriority>
}
 800152c:	bf00      	nop
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff ff56 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0c6      	b.n	80016f0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff fb44 	bl	8000bf8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2223      	movs	r2, #35	; 0x23
 8001574:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <HAL_ETH_Init+0x1a8>)
 8001578:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800157c:	4a5e      	ldr	r2, [pc, #376]	; (80016f8 <HAL_ETH_Init+0x1a8>)
 800157e:	f043 0302 	orr.w	r3, r3, #2
 8001582:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001586:	4b5c      	ldr	r3, [pc, #368]	; (80016f8 <HAL_ETH_Init+0x1a8>)
 8001588:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7a1b      	ldrb	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d103      	bne.n	80015a4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff fee3 	bl	8001368 <HAL_SYSCFG_ETHInterfaceSelect>
 80015a2:	e003      	b.n	80015ac <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015a4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80015a8:	f7ff fede 	bl	8001368 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff fe94 	bl	80012f0 <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015ca:	e00f      	b.n	80015ec <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80015cc:	f7ff fe90 	bl	80012f0 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015da:	d907      	bls.n	80015ec <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2204      	movs	r2, #4
 80015e0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	22e0      	movs	r2, #224	; 0xe0
 80015e6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e081      	b.n	80016f0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1e6      	bne.n	80015cc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f000 fac0 	bl	8001b84 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001604:	f001 fe72 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8001608:	4603      	mov	r3, r0
 800160a:	4a3c      	ldr	r2, [pc, #240]	; (80016fc <HAL_ETH_Init+0x1ac>)
 800160c:	fba2 2303 	umull	r2, r3, r2, r3
 8001610:	0c9a      	lsrs	r2, r3, #18
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	3a01      	subs	r2, #1
 8001618:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa13 	bl	8001a48 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001638:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800163c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	22e0      	movs	r2, #224	; 0xe0
 8001654:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e04a      	b.n	80016f0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	f241 1308 	movw	r3, #4360	; 0x1108
 8001662:	4413      	add	r3, r2
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b26      	ldr	r3, [pc, #152]	; (8001700 <HAL_ETH_Init+0x1b0>)
 8001668:	4013      	ands	r3, r2
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6952      	ldr	r2, [r2, #20]
 800166e:	0052      	lsls	r2, r2, #1
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	6809      	ldr	r1, [r1, #0]
 8001674:	431a      	orrs	r2, r3
 8001676:	f241 1308 	movw	r3, #4360	; 0x1108
 800167a:	440b      	add	r3, r1
 800167c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fad8 	bl	8001c34 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f000 fb1c 	bl	8001cc2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	3305      	adds	r3, #5
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	021a      	lsls	r2, r3, #8
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	3303      	adds	r3, #3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	061a      	lsls	r2, r3, #24
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	3302      	adds	r3, #2
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	041b      	lsls	r3, r3, #16
 80016bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	3301      	adds	r3, #1
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016d6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2210      	movs	r2, #16
 80016e6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2210      	movs	r2, #16
 80016ec:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	58024400 	.word	0x58024400
 80016fc:	431bde83 	.word	0x431bde83
 8001700:	ffff8001 	.word	0xffff8001

08001704 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001716:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	791b      	ldrb	r3, [r3, #4]
 800171c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800171e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	7b1b      	ldrb	r3, [r3, #12]
 8001724:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001726:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	7b5b      	ldrb	r3, [r3, #13]
 800172c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800172e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7b9b      	ldrb	r3, [r3, #14]
 8001734:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001736:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	7bdb      	ldrb	r3, [r3, #15]
 800173c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800173e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	7c12      	ldrb	r2, [r2, #16]
 8001744:	2a00      	cmp	r2, #0
 8001746:	d102      	bne.n	800174e <ETH_SetMACConfig+0x4a>
 8001748:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800174c:	e000      	b.n	8001750 <ETH_SetMACConfig+0x4c>
 800174e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001750:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	7c52      	ldrb	r2, [r2, #17]
 8001756:	2a00      	cmp	r2, #0
 8001758:	d102      	bne.n	8001760 <ETH_SetMACConfig+0x5c>
 800175a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800175e:	e000      	b.n	8001762 <ETH_SetMACConfig+0x5e>
 8001760:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001762:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	7c9b      	ldrb	r3, [r3, #18]
 8001768:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800176a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001770:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001776:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	7f1b      	ldrb	r3, [r3, #28]
 800177c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800177e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	7f5b      	ldrb	r3, [r3, #29]
 8001784:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001786:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	7f92      	ldrb	r2, [r2, #30]
 800178c:	2a00      	cmp	r2, #0
 800178e:	d102      	bne.n	8001796 <ETH_SetMACConfig+0x92>
 8001790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001794:	e000      	b.n	8001798 <ETH_SetMACConfig+0x94>
 8001796:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001798:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	7fdb      	ldrb	r3, [r3, #31]
 800179e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80017a0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80017a8:	2a00      	cmp	r2, #0
 80017aa:	d102      	bne.n	80017b2 <ETH_SetMACConfig+0xae>
 80017ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017b0:	e000      	b.n	80017b4 <ETH_SetMACConfig+0xb0>
 80017b2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80017b4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80017ba:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017c2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80017c4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80017ca:	4313      	orrs	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <ETH_SetMACConfig+0x22c>)
 80017d6:	4013      	ands	r3, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	68f9      	ldr	r1, [r7, #12]
 80017de:	430b      	orrs	r3, r1
 80017e0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017e6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017ee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80017f0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80017fa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001802:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001804:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800180c:	2a00      	cmp	r2, #0
 800180e:	d102      	bne.n	8001816 <ETH_SetMACConfig+0x112>
 8001810:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001814:	e000      	b.n	8001818 <ETH_SetMACConfig+0x114>
 8001816:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001818:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800181e:	4313      	orrs	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4b42      	ldr	r3, [pc, #264]	; (8001934 <ETH_SetMACConfig+0x230>)
 800182a:	4013      	ands	r3, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	68f9      	ldr	r1, [r7, #12]
 8001832:	430b      	orrs	r3, r1
 8001834:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800183c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001842:	4313      	orrs	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <ETH_SetMACConfig+0x234>)
 800184e:	4013      	ands	r3, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	430b      	orrs	r3, r1
 8001858:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001860:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001866:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800186e:	2a00      	cmp	r2, #0
 8001870:	d101      	bne.n	8001876 <ETH_SetMACConfig+0x172>
 8001872:	2280      	movs	r2, #128	; 0x80
 8001874:	e000      	b.n	8001878 <ETH_SetMACConfig+0x174>
 8001876:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001878:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800187e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800188a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800188e:	4013      	ands	r3, r2
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	68f9      	ldr	r1, [r7, #12]
 8001896:	430b      	orrs	r3, r1
 8001898:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80018a0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80018a8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b6:	f023 0103 	bic.w	r1, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80018ce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	d101      	bne.n	80018f2 <ETH_SetMACConfig+0x1ee>
 80018ee:	2240      	movs	r2, #64	; 0x40
 80018f0:	e000      	b.n	80018f4 <ETH_SetMACConfig+0x1f0>
 80018f2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80018f4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80018fc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80018fe:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001906:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001908:	4313      	orrs	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001914:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	430a      	orrs	r2, r1
 8001920:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	00048083 	.word	0x00048083
 8001934:	c0f88000 	.word	0xc0f88000
 8001938:	fffffef0 	.word	0xfffffef0

0800193c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <ETH_SetDMAConfig+0xf8>)
 8001952:	4013      	ands	r3, r2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	6809      	ldr	r1, [r1, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001962:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	791b      	ldrb	r3, [r3, #4]
 8001968:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800196e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	7b1b      	ldrb	r3, [r3, #12]
 8001974:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001982:	4413      	add	r3, r2
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <ETH_SetDMAConfig+0xfc>)
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6811      	ldr	r1, [r2, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	431a      	orrs	r2, r3
 8001992:	f241 0304 	movw	r3, #4100	; 0x1004
 8001996:	440b      	add	r3, r1
 8001998:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	7b5b      	ldrb	r3, [r3, #13]
 800199e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <ETH_SetDMAConfig+0x100>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6811      	ldr	r1, [r2, #0]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	431a      	orrs	r2, r3
 80019be:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80019c2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	7d1b      	ldrb	r3, [r3, #20]
 80019cc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80019ce:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	7f5b      	ldrb	r3, [r3, #29]
 80019d4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f241 1304 	movw	r3, #4356	; 0x1104
 80019e2:	4413      	add	r3, r2
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <ETH_SetDMAConfig+0x104>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6811      	ldr	r1, [r2, #0]
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	f241 1304 	movw	r3, #4356	; 0x1104
 80019f6:	440b      	add	r3, r1
 80019f8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	7f1b      	ldrb	r3, [r3, #28]
 80019fe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001a04:	4313      	orrs	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a10:	4413      	add	r3, r2
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <ETH_SetDMAConfig+0x108>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6811      	ldr	r1, [r2, #0]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	f241 1308 	movw	r3, #4360	; 0x1108
 8001a24:	440b      	add	r3, r1
 8001a26:	601a      	str	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	ffff87fd 	.word	0xffff87fd
 8001a38:	ffff2ffe 	.word	0xffff2ffe
 8001a3c:	fffec000 	.word	0xfffec000
 8001a40:	ffc0efef 	.word	0xffc0efef
 8001a44:	7fc0ffff 	.word	0x7fc0ffff

08001a48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0a4      	sub	sp, #144	; 0x90
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001a56:	2300      	movs	r3, #0
 8001a58:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001a72:	2301      	movs	r3, #1
 8001a74:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a88:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001aa0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001aa4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001aac:	2300      	movs	r3, #0
 8001aae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001aca:	2300      	movs	r3, #0
 8001acc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ada:	2301      	movs	r3, #1
 8001adc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001af2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001af8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001afc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001b22:	2300      	movs	r3, #0
 8001b24:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001b26:	2301      	movs	r3, #1
 8001b28:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b30:	4619      	mov	r1, r3
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff fde6 	bl	8001704 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001b52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b56:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001b5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b60:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001b68:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	4619      	mov	r1, r3
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fee1 	bl	800193c <ETH_SetDMAConfig>
}
 8001b7a:	bf00      	nop
 8001b7c:	3790      	adds	r7, #144	; 0x90
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001b9e:	f001 fba5 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8001ba2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d908      	bls.n	8001bbe <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4a1d      	ldr	r2, [pc, #116]	; (8001c24 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d804      	bhi.n	8001bbe <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	e027      	b.n	8001c0e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d908      	bls.n	8001bd8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d204      	bcs.n	8001bd8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	e01a      	b.n	8001c0e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4a13      	ldr	r2, [pc, #76]	; (8001c28 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d303      	bcc.n	8001be8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d911      	bls.n	8001c0c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d908      	bls.n	8001c02 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4a0f      	ldr	r2, [pc, #60]	; (8001c30 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d804      	bhi.n	8001c02 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e005      	b.n	8001c0e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e000      	b.n	8001c0e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001c0c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	01312cff 	.word	0x01312cff
 8001c24:	02160ebf 	.word	0x02160ebf
 8001c28:	03938700 	.word	0x03938700
 8001c2c:	05f5e0ff 	.word	0x05f5e0ff
 8001c30:	08f0d17f 	.word	0x08f0d17f

08001c34 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e01d      	b.n	8001c7e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	68d9      	ldr	r1, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	3206      	adds	r2, #6
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d9de      	bls.n	8001c42 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	f241 132c 	movw	r3, #4396	; 0x112c
 8001c92:	4413      	add	r3, r2
 8001c94:	2203      	movs	r2, #3
 8001c96:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	f241 1314 	movw	r3, #4372	; 0x1114
 8001ca4:	4413      	add	r3, r2
 8001ca6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001cb4:	601a      	str	r2, [r3, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	e024      	b.n	8001d1a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6919      	ldr	r1, [r3, #16]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	440b      	add	r3, r1
 8001ce0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2200      	movs	r2, #0
 8001cec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d9d7      	bls.n	8001cd0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f241 1330 	movw	r3, #4400	; 0x1130
 8001d46:	4413      	add	r3, r2
 8001d48:	2203      	movs	r2, #3
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6919      	ldr	r1, [r3, #16]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	f241 131c 	movw	r3, #4380	; 0x111c
 8001d58:	4413      	add	r3, r2
 8001d5a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691b      	ldr	r3, [r3, #16]
 8001d60:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f241 1328 	movw	r3, #4392	; 0x1128
 8001d6c:	4413      	add	r3, r2
 8001d6e:	6019      	str	r1, [r3, #0]
}
 8001d70:	bf00      	nop
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	; 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_GPIO_Init+0x234>)
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d8e:	e194      	b.n	80020ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8186 	beq.w	80020b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x44>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	69b9      	ldr	r1, [r7, #24]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80e0 	beq.w	80020b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <HAL_GPIO_Init+0x238>)
 8001ef6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001efa:	4a2e      	ldr	r2, [pc, #184]	; (8001fb4 <HAL_GPIO_Init+0x238>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f04:	4b2b      	ldr	r3, [pc, #172]	; (8001fb4 <HAL_GPIO_Init+0x238>)
 8001f06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f12:	4a29      	ldr	r2, [pc, #164]	; (8001fb8 <HAL_GPIO_Init+0x23c>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_GPIO_Init+0x240>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d052      	beq.n	8001fe4 <HAL_GPIO_Init+0x268>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_GPIO_Init+0x244>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d031      	beq.n	8001faa <HAL_GPIO_Init+0x22e>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	; (8001fc4 <HAL_GPIO_Init+0x248>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <HAL_GPIO_Init+0x22a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1d      	ldr	r2, [pc, #116]	; (8001fc8 <HAL_GPIO_Init+0x24c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d025      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1c      	ldr	r2, [pc, #112]	; (8001fcc <HAL_GPIO_Init+0x250>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d01f      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_GPIO_Init+0x254>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d019      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_GPIO_Init+0x258>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d013      	beq.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_GPIO_Init+0x25c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d00d      	beq.n	8001f92 <HAL_GPIO_Init+0x216>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_GPIO_Init+0x260>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d007      	beq.n	8001f8e <HAL_GPIO_Init+0x212>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <HAL_GPIO_Init+0x264>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_Init+0x20e>
 8001f86:	2309      	movs	r3, #9
 8001f88:	e02d      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f8a:	230a      	movs	r3, #10
 8001f8c:	e02b      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f8e:	2308      	movs	r3, #8
 8001f90:	e029      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f92:	2307      	movs	r3, #7
 8001f94:	e027      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f96:	2306      	movs	r3, #6
 8001f98:	e025      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	e023      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	e021      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e01f      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	e01d      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e01b      	b.n	8001fe6 <HAL_GPIO_Init+0x26a>
 8001fae:	bf00      	nop
 8001fb0:	58000080 	.word	0x58000080
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	58000400 	.word	0x58000400
 8001fbc:	58020000 	.word	0x58020000
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	58020800 	.word	0x58020800
 8001fc8:	58020c00 	.word	0x58020c00
 8001fcc:	58021000 	.word	0x58021000
 8001fd0:	58021400 	.word	0x58021400
 8001fd4:	58021800 	.word	0x58021800
 8001fd8:	58021c00 	.word	0x58021c00
 8001fdc:	58022000 	.word	0x58022000
 8001fe0:	58022400 	.word	0x58022400
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	69fa      	ldr	r2, [r7, #28]
 8001fe8:	f002 0203 	and.w	r2, r2, #3
 8001fec:	0092      	lsls	r2, r2, #2
 8001fee:	4093      	lsls	r3, r2
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff6:	4938      	ldr	r1, [pc, #224]	; (80020d8 <HAL_GPIO_Init+0x35c>)
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	3302      	adds	r3, #2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	43db      	mvns	r3, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4013      	ands	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800202a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	4013      	ands	r3, r2
 8002042:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002058:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	3301      	adds	r3, #1
 80020b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f47f ae63 	bne.w	8001d90 <HAL_GPIO_Init+0x14>
  }
}
 80020ca:	bf00      	nop
 80020cc:	bf00      	nop
 80020ce:	3724      	adds	r7, #36	; 0x24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	58000400 	.word	0x58000400

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800210e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002110:	b08f      	sub	sp, #60	; 0x3c
 8002112:	af0a      	add	r7, sp, #40	; 0x28
 8002114:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e116      	b.n	800234e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d106      	bne.n	8002140 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7fe fed0 	bl	8000ee0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2203      	movs	r2, #3
 8002144:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800214c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f004 f958 	bl	8006414 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	603b      	str	r3, [r7, #0]
 800216a:	687e      	ldr	r6, [r7, #4]
 800216c:	466d      	mov	r5, sp
 800216e:	f106 0410 	add.w	r4, r6, #16
 8002172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800217a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800217e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002182:	1d33      	adds	r3, r6, #4
 8002184:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002186:	6838      	ldr	r0, [r7, #0]
 8002188:	f004 f8d6 	bl	8006338 <USB_CoreInit>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2202      	movs	r2, #2
 8002196:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0d7      	b.n	800234e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f004 f946 	bl	8006436 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
 80021ae:	e04a      	b.n	8002246 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	333d      	adds	r3, #61	; 0x3d
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	1a9b      	subs	r3, r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	333c      	adds	r3, #60	; 0x3c
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	b298      	uxth	r0, r3
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3342      	adds	r3, #66	; 0x42
 80021ec:	4602      	mov	r2, r0
 80021ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021f0:	7bfa      	ldrb	r2, [r7, #15]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	1a9b      	subs	r3, r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	440b      	add	r3, r1
 80021fe:	333f      	adds	r3, #63	; 0x3f
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002204:	7bfa      	ldrb	r2, [r7, #15]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3344      	adds	r3, #68	; 0x44
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002218:	7bfa      	ldrb	r2, [r7, #15]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	00db      	lsls	r3, r3, #3
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	3348      	adds	r3, #72	; 0x48
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800222c:	7bfa      	ldrb	r2, [r7, #15]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3350      	adds	r3, #80	; 0x50
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	3301      	adds	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3af      	bcc.n	80021b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	e044      	b.n	80022e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002256:	7bfa      	ldrb	r2, [r7, #15]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800226c:	7bfa      	ldrb	r2, [r7, #15]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800227e:	7bfa      	ldrb	r2, [r7, #15]
 8002280:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002282:	7bfa      	ldrb	r2, [r7, #15]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ae:	7bfa      	ldrb	r2, [r7, #15]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022c4:	7bfa      	ldrb	r2, [r7, #15]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	7bfb      	ldrb	r3, [r7, #15]
 80022dc:	3301      	adds	r3, #1
 80022de:	73fb      	strb	r3, [r7, #15]
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d3b5      	bcc.n	8002256 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	603b      	str	r3, [r7, #0]
 80022f0:	687e      	ldr	r6, [r7, #4]
 80022f2:	466d      	mov	r5, sp
 80022f4:	f106 0410 	add.w	r4, r6, #16
 80022f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002304:	e885 0003 	stmia.w	r5, {r0, r1}
 8002308:	1d33      	adds	r3, r6, #4
 800230a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800230c:	6838      	ldr	r0, [r7, #0]
 800230e:	f004 f8df 	bl	80064d0 <USB_DevInit>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e014      	b.n	800234e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	2b01      	cmp	r3, #1
 800233a:	d102      	bne.n	8002342 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f80b 	bl	8002358 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fa99 	bl	800687e <USB_DevDisconnect>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002358 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_PCDEx_ActivateLPM+0x44>)
 8002388:	4313      	orrs	r3, r2
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	10000003 	.word	0x10000003

080023a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_PWREx_ConfigSupply+0x70>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d00a      	beq.n	80023ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_PWREx_ConfigSupply+0x70>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d001      	beq.n	80023c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e01f      	b.n	8002406 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e01d      	b.n	8002406 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_PWREx_ConfigSupply+0x70>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f023 0207 	bic.w	r2, r3, #7
 80023d2:	490f      	ldr	r1, [pc, #60]	; (8002410 <HAL_PWREx_ConfigSupply+0x70>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023da:	f7fe ff89 	bl	80012f0 <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e0:	e009      	b.n	80023f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023e2:	f7fe ff85 	bl	80012f0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f0:	d901      	bls.n	80023f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e007      	b.n	8002406 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_PWREx_ConfigSupply+0x70>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002402:	d1ee      	bne.n	80023e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	58024800 	.word	0x58024800

08002414 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	60d3      	str	r3, [r2, #12]
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	58024800 	.word	0x58024800

08002434 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08c      	sub	sp, #48	; 0x30
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d102      	bne.n	8002448 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	f000 bc1c 	b.w	8002c80 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8087 	beq.w	8002564 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002456:	4b9e      	ldr	r3, [pc, #632]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002460:	4b9b      	ldr	r3, [pc, #620]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	2b10      	cmp	r3, #16
 800246a:	d007      	beq.n	800247c <HAL_RCC_OscConfig+0x48>
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b18      	cmp	r3, #24
 8002470:	d110      	bne.n	8002494 <HAL_RCC_OscConfig+0x60>
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b94      	ldr	r3, [pc, #592]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d06c      	beq.n	8002562 <HAL_RCC_OscConfig+0x12e>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d168      	bne.n	8002562 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e3f5      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x78>
 800249e:	4b8c      	ldr	r3, [pc, #560]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a8b      	ldr	r2, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e02e      	b.n	800250a <HAL_RCC_OscConfig+0xd6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x9a>
 80024b4:	4b86      	ldr	r3, [pc, #536]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a85      	ldr	r2, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b83      	ldr	r3, [pc, #524]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a82      	ldr	r2, [pc, #520]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	e01d      	b.n	800250a <HAL_RCC_OscConfig+0xd6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0xbe>
 80024d8:	4b7d      	ldr	r3, [pc, #500]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a7c      	ldr	r2, [pc, #496]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a79      	ldr	r2, [pc, #484]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0xd6>
 80024f2:	4b77      	ldr	r3, [pc, #476]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a76      	ldr	r2, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80024f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b74      	ldr	r3, [pc, #464]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a73      	ldr	r2, [pc, #460]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002508:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d013      	beq.n	800253a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002512:	f7fe feed 	bl	80012f0 <HAL_GetTick>
 8002516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002518:	e008      	b.n	800252c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251a:	f7fe fee9 	bl	80012f0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b64      	cmp	r3, #100	; 0x64
 8002526:	d901      	bls.n	800252c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e3a9      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800252c:	4b68      	ldr	r3, [pc, #416]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0f0      	beq.n	800251a <HAL_RCC_OscConfig+0xe6>
 8002538:	e014      	b.n	8002564 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fed9 	bl	80012f0 <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002542:	f7fe fed5 	bl	80012f0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b64      	cmp	r3, #100	; 0x64
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e395      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002554:	4b5e      	ldr	r3, [pc, #376]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x10e>
 8002560:	e000      	b.n	8002564 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002562:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80ca 	beq.w	8002706 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002572:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800257a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800257c:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_RCC_OscConfig+0x164>
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b18      	cmp	r3, #24
 800258c:	d156      	bne.n	800263c <HAL_RCC_OscConfig+0x208>
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d151      	bne.n	800263c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002598:	4b4d      	ldr	r3, [pc, #308]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_OscConfig+0x17c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e367      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025b0:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f023 0219 	bic.w	r2, r3, #25
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4944      	ldr	r1, [pc, #272]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025c2:	f7fe fe95 	bl	80012f0 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ca:	f7fe fe91 	bl	80012f0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e351      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025dc:	4b3c      	ldr	r3, [pc, #240]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d0f0      	beq.n	80025ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	f7fe feb2 	bl	8001350 <HAL_GetREVID>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d817      	bhi.n	8002626 <HAL_RCC_OscConfig+0x1f2>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b40      	cmp	r3, #64	; 0x40
 80025fc:	d108      	bne.n	8002610 <HAL_RCC_OscConfig+0x1dc>
 80025fe:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002606:	4a32      	ldr	r2, [pc, #200]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260e:	e07a      	b.n	8002706 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	031b      	lsls	r3, r3, #12
 800261e:	492c      	ldr	r1, [pc, #176]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002620:	4313      	orrs	r3, r2
 8002622:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002624:	e06f      	b.n	8002706 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002626:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	4926      	ldr	r1, [pc, #152]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263a:	e064      	b.n	8002706 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d047      	beq.n	80026d4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0219 	bic.w	r2, r3, #25
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	491f      	ldr	r1, [pc, #124]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe fe4b 	bl	80012f0 <HAL_GetTick>
 800265a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800265e:	f7fe fe47 	bl	80012f0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e307      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267c:	f7fe fe68 	bl	8001350 <HAL_GetREVID>
 8002680:	4603      	mov	r3, r0
 8002682:	f241 0203 	movw	r2, #4099	; 0x1003
 8002686:	4293      	cmp	r3, r2
 8002688:	d817      	bhi.n	80026ba <HAL_RCC_OscConfig+0x286>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b40      	cmp	r3, #64	; 0x40
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_OscConfig+0x270>
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 800269c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a0:	6053      	str	r3, [r2, #4]
 80026a2:	e030      	b.n	8002706 <HAL_RCC_OscConfig+0x2d2>
 80026a4:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	031b      	lsls	r3, r3, #12
 80026b2:	4907      	ldr	r1, [pc, #28]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
 80026b8:	e025      	b.n	8002706 <HAL_RCC_OscConfig+0x2d2>
 80026ba:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	061b      	lsls	r3, r3, #24
 80026c8:	4901      	ldr	r1, [pc, #4]	; (80026d0 <HAL_RCC_OscConfig+0x29c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	604b      	str	r3, [r1, #4]
 80026ce:	e01a      	b.n	8002706 <HAL_RCC_OscConfig+0x2d2>
 80026d0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026d4:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a9d      	ldr	r2, [pc, #628]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80026da:	f023 0301 	bic.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe06 	bl	80012f0 <HAL_GetTick>
 80026e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026e8:	f7fe fe02 	bl	80012f0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e2c2      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026fa:	4b95      	ldr	r3, [pc, #596]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0304 	and.w	r3, r3, #4
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a9 	beq.w	8002866 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002714:	4b8e      	ldr	r3, [pc, #568]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800271c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800271e:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d007      	beq.n	800273a <HAL_RCC_OscConfig+0x306>
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b18      	cmp	r3, #24
 800272e:	d13a      	bne.n	80027a6 <HAL_RCC_OscConfig+0x372>
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d135      	bne.n	80027a6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800273a:	4b85      	ldr	r3, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x31e>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d001      	beq.n	8002752 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e296      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002752:	f7fe fdfd 	bl	8001350 <HAL_GetREVID>
 8002756:	4603      	mov	r3, r0
 8002758:	f241 0203 	movw	r2, #4099	; 0x1003
 800275c:	4293      	cmp	r3, r2
 800275e:	d817      	bhi.n	8002790 <HAL_RCC_OscConfig+0x35c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	2b20      	cmp	r3, #32
 8002766:	d108      	bne.n	800277a <HAL_RCC_OscConfig+0x346>
 8002768:	4b79      	ldr	r3, [pc, #484]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002770:	4a77      	ldr	r2, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002776:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002778:	e075      	b.n	8002866 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800277a:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	069b      	lsls	r3, r3, #26
 8002788:	4971      	ldr	r1, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278e:	e06a      	b.n	8002866 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002790:	4b6f      	ldr	r3, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	496c      	ldr	r1, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027a4:	e05f      	b.n	8002866 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d042      	beq.n	8002834 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a67      	ldr	r2, [pc, #412]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80027b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fd99 	bl	80012f0 <HAL_GetTick>
 80027be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80027c2:	f7fe fd95 	bl	80012f0 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e255      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027d4:	4b5e      	ldr	r3, [pc, #376]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027e0:	f7fe fdb6 	bl	8001350 <HAL_GetREVID>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f241 0203 	movw	r2, #4099	; 0x1003
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d817      	bhi.n	800281e <HAL_RCC_OscConfig+0x3ea>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	d108      	bne.n	8002808 <HAL_RCC_OscConfig+0x3d4>
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027fe:	4a54      	ldr	r2, [pc, #336]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002804:	6053      	str	r3, [r2, #4]
 8002806:	e02e      	b.n	8002866 <HAL_RCC_OscConfig+0x432>
 8002808:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	069b      	lsls	r3, r3, #26
 8002816:	494e      	ldr	r1, [pc, #312]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e023      	b.n	8002866 <HAL_RCC_OscConfig+0x432>
 800281e:	4b4c      	ldr	r3, [pc, #304]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	061b      	lsls	r3, r3, #24
 800282c:	4948      	ldr	r1, [pc, #288]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	60cb      	str	r3, [r1, #12]
 8002832:	e018      	b.n	8002866 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002834:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a45      	ldr	r2, [pc, #276]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800283a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800283e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7fe fd56 	bl	80012f0 <HAL_GetTick>
 8002844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002848:	f7fe fd52 	bl	80012f0 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b02      	cmp	r3, #2
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e212      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800285a:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d036      	beq.n	80028e0 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d019      	beq.n	80028ae <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fd33 	bl	80012f0 <HAL_GetTick>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fd2f 	bl	80012f0 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1ef      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80028a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x45a>
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80028b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b2:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ba:	f7fe fd19 	bl	80012f0 <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c2:	f7fe fd15 	bl	80012f0 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e1d5      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80028d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0320 	and.w	r3, r3, #32
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d039      	beq.n	8002960 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d019      	beq.n	8002928 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028f4:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 80028fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002900:	f7fe fcf6 	bl	80012f0 <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002908:	f7fe fcf2 	bl	80012f0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1b2      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x4d4>
 8002926:	e01b      	b.n	8002960 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCC_OscConfig+0x51c>)
 800292e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002932:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002934:	f7fe fcdc 	bl	80012f0 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800293c:	f7fe fcd8 	bl	80012f0 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d904      	bls.n	8002954 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e198      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
 800294e:	bf00      	nop
 8002950:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002954:	4ba3      	ldr	r3, [pc, #652]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ed      	bne.n	800293c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 8081 	beq.w	8002a70 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800296e:	4b9e      	ldr	r3, [pc, #632]	; (8002be8 <HAL_RCC_OscConfig+0x7b4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a9d      	ldr	r2, [pc, #628]	; (8002be8 <HAL_RCC_OscConfig+0x7b4>)
 8002974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800297a:	f7fe fcb9 	bl	80012f0 <HAL_GetTick>
 800297e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002982:	f7fe fcb5 	bl	80012f0 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b64      	cmp	r3, #100	; 0x64
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e175      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002994:	4b94      	ldr	r3, [pc, #592]	; (8002be8 <HAL_RCC_OscConfig+0x7b4>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x582>
 80029a8:	4b8e      	ldr	r3, [pc, #568]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a8d      	ldr	r2, [pc, #564]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
 80029b4:	e02d      	b.n	8002a12 <HAL_RCC_OscConfig+0x5de>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5a4>
 80029be:	4b89      	ldr	r3, [pc, #548]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c2:	4a88      	ldr	r2, [pc, #544]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029c4:	f023 0301 	bic.w	r3, r3, #1
 80029c8:	6713      	str	r3, [r2, #112]	; 0x70
 80029ca:	4b86      	ldr	r3, [pc, #536]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ce:	4a85      	ldr	r2, [pc, #532]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70
 80029d6:	e01c      	b.n	8002a12 <HAL_RCC_OscConfig+0x5de>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d10c      	bne.n	80029fa <HAL_RCC_OscConfig+0x5c6>
 80029e0:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a7f      	ldr	r2, [pc, #508]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029e6:	f043 0304 	orr.w	r3, r3, #4
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	4a7c      	ldr	r2, [pc, #496]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6713      	str	r3, [r2, #112]	; 0x70
 80029f8:	e00b      	b.n	8002a12 <HAL_RCC_OscConfig+0x5de>
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	4a79      	ldr	r2, [pc, #484]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a00:	f023 0301 	bic.w	r3, r3, #1
 8002a04:	6713      	str	r3, [r2, #112]	; 0x70
 8002a06:	4b77      	ldr	r3, [pc, #476]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	4a76      	ldr	r2, [pc, #472]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a0c:	f023 0304 	bic.w	r3, r3, #4
 8002a10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d015      	beq.n	8002a46 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fc69 	bl	80012f0 <HAL_GetTick>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fc65 	bl	80012f0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e123      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0ee      	beq.n	8002a22 <HAL_RCC_OscConfig+0x5ee>
 8002a44:	e014      	b.n	8002a70 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fc53 	bl	80012f0 <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fc4f 	bl	80012f0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e10d      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a64:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1ee      	bne.n	8002a4e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8102 	beq.w	8002c7e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a7a:	4b5a      	ldr	r3, [pc, #360]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a82:	2b18      	cmp	r3, #24
 8002a84:	f000 80bd 	beq.w	8002c02 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f040 8095 	bne.w	8002bbc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a53      	ldr	r2, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fc27 	bl	80012f0 <HAL_GetTick>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fc23 	bl	80012f0 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e0e3      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac8:	4b48      	ldr	r3, [pc, #288]	; (8002bec <HAL_RCC_OscConfig+0x7b8>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ad4:	0112      	lsls	r2, r2, #4
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	4942      	ldr	r1, [pc, #264]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	628b      	str	r3, [r1, #40]	; 0x28
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	3b01      	subs	r3, #1
 8002aee:	025b      	lsls	r3, r3, #9
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	3b01      	subs	r3, #1
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b06:	3b01      	subs	r3, #1
 8002b08:	061b      	lsls	r3, r3, #24
 8002b0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b0e:	4935      	ldr	r1, [pc, #212]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002b14:	4b33      	ldr	r3, [pc, #204]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	4a32      	ldr	r2, [pc, #200]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b20:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_RCC_OscConfig+0x7bc>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b2c:	00d2      	lsls	r2, r2, #3
 8002b2e:	492d      	ldr	r1, [pc, #180]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b34:	4b2b      	ldr	r3, [pc, #172]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f023 020c 	bic.w	r2, r3, #12
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	4928      	ldr	r1, [pc, #160]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b46:	4b27      	ldr	r3, [pc, #156]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f023 0202 	bic.w	r2, r3, #2
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	4924      	ldr	r1, [pc, #144]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b64:	4b1f      	ldr	r3, [pc, #124]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4a1e      	ldr	r2, [pc, #120]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	4a18      	ldr	r2, [pc, #96]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b94:	f7fe fbac 	bl	80012f0 <HAL_GetTick>
 8002b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b9a:	e008      	b.n	8002bae <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9c:	f7fe fba8 	bl	80012f0 <HAL_GetTick>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e068      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0f0      	beq.n	8002b9c <HAL_RCC_OscConfig+0x768>
 8002bba:	e060      	b.n	8002c7e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bbc:	4b09      	ldr	r3, [pc, #36]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x7b0>)
 8002bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fb92 	bl	80012f0 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bce:	e011      	b.n	8002bf4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe fb8e 	bl	80012f0 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d90a      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e04e      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
 8002be2:	bf00      	nop
 8002be4:	58024400 	.word	0x58024400
 8002be8:	58024800 	.word	0x58024800
 8002bec:	fffffc0c 	.word	0xfffffc0c
 8002bf0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf4:	4b24      	ldr	r3, [pc, #144]	; (8002c88 <HAL_RCC_OscConfig+0x854>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e7      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x79c>
 8002c00:	e03d      	b.n	8002c7e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c02:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <HAL_RCC_OscConfig+0x854>)
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c06:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c08:	4b1f      	ldr	r3, [pc, #124]	; (8002c88 <HAL_RCC_OscConfig+0x854>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d031      	beq.n	8002c7a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f003 0203 	and.w	r2, r3, #3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d12a      	bne.n	8002c7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	091b      	lsrs	r3, r3, #4
 8002c28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d122      	bne.n	8002c7a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d11a      	bne.n	8002c7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	0a5b      	lsrs	r3, r3, #9
 8002c48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d111      	bne.n	8002c7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0c1b      	lsrs	r3, r3, #16
 8002c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d108      	bne.n	8002c7a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	0e1b      	lsrs	r3, r3, #24
 8002c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3730      	adds	r7, #48	; 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	58024400 	.word	0x58024400

08002c8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e19c      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b8a      	ldr	r3, [pc, #552]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d910      	bls.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 020f 	bic.w	r2, r3, #15
 8002cb6:	4985      	ldr	r1, [pc, #532]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d001      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e184      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	4b7b      	ldr	r3, [pc, #492]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d908      	bls.n	8002cfe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cec:	4b78      	ldr	r3, [pc, #480]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	4975      	ldr	r1, [pc, #468]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d010      	beq.n	8002d2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d908      	bls.n	8002d2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d1a:	4b6d      	ldr	r3, [pc, #436]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	496a      	ldr	r1, [pc, #424]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699a      	ldr	r2, [r3, #24]
 8002d3c:	4b64      	ldr	r3, [pc, #400]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d908      	bls.n	8002d5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d48:	4b61      	ldr	r3, [pc, #388]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	495e      	ldr	r1, [pc, #376]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d010      	beq.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	4b59      	ldr	r3, [pc, #356]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d908      	bls.n	8002d88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	4953      	ldr	r1, [pc, #332]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d010      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b4d      	ldr	r3, [pc, #308]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d908      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da4:	4b4a      	ldr	r3, [pc, #296]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	f023 020f 	bic.w	r2, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4947      	ldr	r1, [pc, #284]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d055      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dc2:	4b43      	ldr	r3, [pc, #268]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4940      	ldr	r1, [pc, #256]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d107      	bne.n	8002dec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ddc:	4b3c      	ldr	r3, [pc, #240]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d121      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0f6      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d107      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d115      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0ea      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0de      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e0d6      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f023 0207 	bic.w	r2, r3, #7
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4925      	ldr	r1, [pc, #148]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3e:	f7fe fa57 	bl	80012f0 <HAL_GetTick>
 8002e42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e46:	f7fe fa53 	bl	80012f0 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e0be      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d1eb      	bne.n	8002e46 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d010      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	f003 030f 	and.w	r3, r3, #15
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d208      	bcs.n	8002e9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f023 020f 	bic.w	r2, r3, #15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	490e      	ldr	r1, [pc, #56]	; (8002ed0 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 030f 	and.w	r3, r3, #15
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d214      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 020f 	bic.w	r2, r3, #15
 8002eb2:	4906      	ldr	r1, [pc, #24]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e086      	b.n	8002fda <HAL_RCC_ClockConfig+0x34e>
 8002ecc:	52002000 	.word	0x52002000
 8002ed0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	4b3f      	ldr	r3, [pc, #252]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d208      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ef0:	4b3c      	ldr	r3, [pc, #240]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4939      	ldr	r1, [pc, #228]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d208      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f1e:	4b31      	ldr	r3, [pc, #196]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	492e      	ldr	r1, [pc, #184]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	4b28      	ldr	r3, [pc, #160]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d208      	bcs.n	8002f5e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f4c:	4b25      	ldr	r3, [pc, #148]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	4922      	ldr	r1, [pc, #136]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d208      	bcs.n	8002f8c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4917      	ldr	r1, [pc, #92]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f8c:	f000 f834 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b14      	ldr	r3, [pc, #80]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	0a1b      	lsrs	r3, r3, #8
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	4912      	ldr	r1, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x35c>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002faa:	4b0e      	ldr	r3, [pc, #56]	; (8002fe4 <HAL_RCC_ClockConfig+0x358>)
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_RCC_ClockConfig+0x35c>)
 8002fb4:	5cd3      	ldrb	r3, [r2, r3]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x360>)
 8002fc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x364>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x368>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe f800 	bl	8000fd4 <HAL_InitTick>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	58024400 	.word	0x58024400
 8002fe8:	080080bc 	.word	0x080080bc
 8002fec:	24000004 	.word	0x24000004
 8002ff0:	24000000 	.word	0x24000000
 8002ff4:	24000008 	.word	0x24000008

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffe:	4bb3      	ldr	r3, [pc, #716]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003006:	2b18      	cmp	r3, #24
 8003008:	f200 8155 	bhi.w	80032b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <HAL_RCC_GetSysClockFreq+0x1c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003079 	.word	0x08003079
 8003018:	080032b7 	.word	0x080032b7
 800301c:	080032b7 	.word	0x080032b7
 8003020:	080032b7 	.word	0x080032b7
 8003024:	080032b7 	.word	0x080032b7
 8003028:	080032b7 	.word	0x080032b7
 800302c:	080032b7 	.word	0x080032b7
 8003030:	080032b7 	.word	0x080032b7
 8003034:	0800309f 	.word	0x0800309f
 8003038:	080032b7 	.word	0x080032b7
 800303c:	080032b7 	.word	0x080032b7
 8003040:	080032b7 	.word	0x080032b7
 8003044:	080032b7 	.word	0x080032b7
 8003048:	080032b7 	.word	0x080032b7
 800304c:	080032b7 	.word	0x080032b7
 8003050:	080032b7 	.word	0x080032b7
 8003054:	080030a5 	.word	0x080030a5
 8003058:	080032b7 	.word	0x080032b7
 800305c:	080032b7 	.word	0x080032b7
 8003060:	080032b7 	.word	0x080032b7
 8003064:	080032b7 	.word	0x080032b7
 8003068:	080032b7 	.word	0x080032b7
 800306c:	080032b7 	.word	0x080032b7
 8003070:	080032b7 	.word	0x080032b7
 8003074:	080030ab 	.word	0x080030ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003078:	4b94      	ldr	r3, [pc, #592]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d009      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003084:	4b91      	ldr	r3, [pc, #580]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	4a90      	ldr	r2, [pc, #576]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003096:	e111      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003098:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800309a:	61bb      	str	r3, [r7, #24]
    break;
 800309c:	e10e      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030a0:	61bb      	str	r3, [r7, #24]
    break;
 80030a2:	e10b      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030a4:	4b8c      	ldr	r3, [pc, #560]	; (80032d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030a6:	61bb      	str	r3, [r7, #24]
    break;
 80030a8:	e108      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030aa:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030b4:	4b85      	ldr	r3, [pc, #532]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	091b      	lsrs	r3, r3, #4
 80030ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030c0:	4b82      	ldr	r3, [pc, #520]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030ca:	4b80      	ldr	r3, [pc, #512]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	08db      	lsrs	r3, r3, #3
 80030d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	fb02 f303 	mul.w	r3, r2, r3
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80e1 	beq.w	80032b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	f000 8083 	beq.w	80031fc <HAL_RCC_GetSysClockFreq+0x204>
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	f200 80a1 	bhi.w	8003240 <HAL_RCC_GetSysClockFreq+0x248>
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x114>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d056      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800310a:	e099      	b.n	8003240 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800310c:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d02d      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003118:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	08db      	lsrs	r3, r3, #3
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	4a6b      	ldr	r2, [pc, #428]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003124:	fa22 f303 	lsr.w	r3, r2, r3
 8003128:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	ee07 3a90 	vmov	s15, r3
 8003130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	ee07 3a90 	vmov	s15, r3
 800313a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003142:	4b62      	ldr	r3, [pc, #392]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	ed97 6a02 	vldr	s12, [r7, #8]
 8003156:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800315a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003172:	e087      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	ee07 3a90 	vmov	s15, r3
 800317a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003186:	4b51      	ldr	r3, [pc, #324]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003196:	ed97 6a02 	vldr	s12, [r7, #8]
 800319a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800319e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b6:	e065      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ca:	4b40      	ldr	r3, [pc, #256]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031da:	ed97 6a02 	vldr	s12, [r7, #8]
 80031de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031fa:	e043      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003206:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b2f      	ldr	r3, [pc, #188]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003222:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323e:	e021      	b.n	8003284 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a02 	vldr	s12, [r7, #8]
 8003266:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003282:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	0a5b      	lsrs	r3, r3, #9
 800328a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800328e:	3301      	adds	r3, #1
 8003290:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	ee07 3a90 	vmov	s15, r3
 8003298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800329c:	edd7 6a07 	vldr	s13, [r7, #28]
 80032a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a8:	ee17 3a90 	vmov	r3, s15
 80032ac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032ae:	e005      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
    break;
 80032b4:	e002      	b.n	80032bc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80032b6:	4b07      	ldr	r3, [pc, #28]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032b8:	61bb      	str	r3, [r7, #24]
    break;
 80032ba:	bf00      	nop
  }

  return sysclockfreq;
 80032bc:	69bb      	ldr	r3, [r7, #24]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3724      	adds	r7, #36	; 0x24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	03d09000 	.word	0x03d09000
 80032d4:	003d0900 	.word	0x003d0900
 80032d8:	007a1200 	.word	0x007a1200
 80032dc:	46000000 	.word	0x46000000
 80032e0:	4c742400 	.word	0x4c742400
 80032e4:	4a742400 	.word	0x4a742400
 80032e8:	4af42400 	.word	0x4af42400

080032ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032f2:	f7ff fe81 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_GetHCLKFreq+0x50>)
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	490f      	ldr	r1, [pc, #60]	; (8003340 <HAL_RCC_GetHCLKFreq+0x54>)
 8003304:	5ccb      	ldrb	r3, [r1, r3]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	fa22 f303 	lsr.w	r3, r2, r3
 800330e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <HAL_RCC_GetHCLKFreq+0x50>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_GetHCLKFreq+0x54>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <HAL_RCC_GetHCLKFreq+0x58>)
 8003328:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <HAL_RCC_GetHCLKFreq+0x5c>)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <HAL_RCC_GetHCLKFreq+0x58>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	58024400 	.word	0x58024400
 8003340:	080080bc 	.word	0x080080bc
 8003344:	24000004 	.word	0x24000004
 8003348:	24000000 	.word	0x24000000

0800334c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003350:	f7ff ffcc 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003354:	4602      	mov	r2, r0
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	4904      	ldr	r1, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003362:	5ccb      	ldrb	r3, [r1, r3]
 8003364:	f003 031f 	and.w	r3, r3, #31
 8003368:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800336c:	4618      	mov	r0, r3
 800336e:	bd80      	pop	{r7, pc}
 8003370:	58024400 	.word	0x58024400
 8003374:	080080bc 	.word	0x080080bc

08003378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800337c:	f7ff ffb6 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	4904      	ldr	r1, [pc, #16]	; (80033a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	58024400 	.word	0x58024400
 80033a0:	080080bc 	.word	0x080080bc

080033a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	223f      	movs	r2, #63	; 0x3f
 80033b2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033b4:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f003 0207 	and.w	r2, r3, #7
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033cc:	4b14      	ldr	r3, [pc, #80]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 020f 	and.w	r2, r3, #15
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80033e4:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_RCC_GetClockConfig+0x7c>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <HAL_RCC_GetClockConfig+0x80>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	601a      	str	r2, [r3, #0]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	58024400 	.word	0x58024400
 8003424:	52002000 	.word	0x52002000

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003430:	2300      	movs	r3, #0
 8003432:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003434:	2300      	movs	r3, #0
 8003436:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d03f      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003448:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800344c:	d02a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800344e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003452:	d824      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003454:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003458:	d018      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800345a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800345e:	d81e      	bhi.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	d007      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800346a:	e018      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800346c:	4bab      	ldr	r3, [pc, #684]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	4aaa      	ldr	r2, [pc, #680]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003476:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003478:	e015      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3304      	adds	r3, #4
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f001 f9cf 	bl	8004824 <RCCEx_PLL2_Config>
 8003486:	4603      	mov	r3, r0
 8003488:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800348a:	e00c      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3324      	adds	r3, #36	; 0x24
 8003490:	2102      	movs	r1, #2
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fa78 	bl	8004988 <RCCEx_PLL3_Config>
 8003498:	4603      	mov	r3, r0
 800349a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800349c:	e003      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
      break;
 80034a2:	e000      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80034a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034ac:	4b9b      	ldr	r3, [pc, #620]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b8:	4998      	ldr	r1, [pc, #608]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	650b      	str	r3, [r1, #80]	; 0x50
 80034be:	e001      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	7dfb      	ldrb	r3, [r7, #23]
 80034c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d03d      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d826      	bhi.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f5 	.word	0x080034f5
 80034e4:	08003503 	.word	0x08003503
 80034e8:	08003515 	.word	0x08003515
 80034ec:	0800352d 	.word	0x0800352d
 80034f0:	0800352d 	.word	0x0800352d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f4:	4b89      	ldr	r3, [pc, #548]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a88      	ldr	r2, [pc, #544]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003500:	e015      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3304      	adds	r3, #4
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f001 f98b 	bl	8004824 <RCCEx_PLL2_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003512:	e00c      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3324      	adds	r3, #36	; 0x24
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f001 fa34 	bl	8004988 <RCCEx_PLL3_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003524:	e003      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	75fb      	strb	r3, [r7, #23]
      break;
 800352a:	e000      	b.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800352c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003534:	4b79      	ldr	r3, [pc, #484]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003538:	f023 0207 	bic.w	r2, r3, #7
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	4976      	ldr	r1, [pc, #472]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	650b      	str	r3, [r1, #80]	; 0x50
 8003546:	e001      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003554:	2b00      	cmp	r3, #0
 8003556:	d042      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003560:	d02b      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003566:	d825      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003568:	2bc0      	cmp	r3, #192	; 0xc0
 800356a:	d028      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800356c:	2bc0      	cmp	r3, #192	; 0xc0
 800356e:	d821      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	d016      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d81d      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d007      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003580:	e018      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003582:	4b66      	ldr	r3, [pc, #408]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	4a65      	ldr	r2, [pc, #404]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800358e:	e017      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f944 	bl	8004824 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035a0:	e00e      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3324      	adds	r3, #36	; 0x24
 80035a6:	2100      	movs	r1, #0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f9ed 	bl	8004988 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035b2:	e005      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	e002      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035ba:	bf00      	nop
 80035bc:	e000      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80035be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d109      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035c6:	4b55      	ldr	r3, [pc, #340]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d2:	4952      	ldr	r1, [pc, #328]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	650b      	str	r3, [r1, #80]	; 0x50
 80035d8:	e001      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d049      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f4:	d030      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fa:	d82a      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003600:	d02c      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003602:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003606:	d824      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360c:	d018      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800360e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003612:	d81e      	bhi.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003618:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361c:	d007      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800361e:	e018      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003620:	4b3e      	ldr	r3, [pc, #248]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4a3d      	ldr	r2, [pc, #244]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800362c:	e017      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3304      	adds	r3, #4
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f001 f8f5 	bl	8004824 <RCCEx_PLL2_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800363e:	e00e      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3324      	adds	r3, #36	; 0x24
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f001 f99e 	bl	8004988 <RCCEx_PLL3_Config>
 800364c:	4603      	mov	r3, r0
 800364e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003650:	e005      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	75fb      	strb	r3, [r7, #23]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003658:	bf00      	nop
 800365a:	e000      	b.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800365c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003668:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003672:	492a      	ldr	r1, [pc, #168]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003674:	4313      	orrs	r3, r2
 8003676:	658b      	str	r3, [r1, #88]	; 0x58
 8003678:	e001      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367a:	7dfb      	ldrb	r3, [r7, #23]
 800367c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	2b00      	cmp	r3, #0
 8003688:	d04c      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003694:	d030      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003696:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800369a:	d82a      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800369c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036a0:	d02c      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80036a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036a6:	d824      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036ac:	d018      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80036ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b2:	d81e      	bhi.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036bc:	d007      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036be:	e018      	b.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c4:	4a15      	ldr	r2, [pc, #84]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036cc:	e017      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3304      	adds	r3, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	4618      	mov	r0, r3
 80036d6:	f001 f8a5 	bl	8004824 <RCCEx_PLL2_Config>
 80036da:	4603      	mov	r3, r0
 80036dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036de:	e00e      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3324      	adds	r3, #36	; 0x24
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 f94e 	bl	8004988 <RCCEx_PLL3_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036f0:	e005      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
      break;
 80036f6:	e002      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036f8:	bf00      	nop
 80036fa:	e000      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10d      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003708:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003712:	4902      	ldr	r1, [pc, #8]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	658b      	str	r3, [r1, #88]	; 0x58
 8003718:	e004      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800371a:	bf00      	nop
 800371c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d032      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003734:	2b30      	cmp	r3, #48	; 0x30
 8003736:	d01c      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003738:	2b30      	cmp	r3, #48	; 0x30
 800373a:	d817      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800373c:	2b20      	cmp	r3, #32
 800373e:	d00c      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003740:	2b20      	cmp	r3, #32
 8003742:	d813      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d016      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003748:	2b10      	cmp	r3, #16
 800374a:	d10f      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374c:	4baf      	ldr	r3, [pc, #700]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003750:	4aae      	ldr	r2, [pc, #696]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003758:	e00e      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	2102      	movs	r1, #2
 8003760:	4618      	mov	r0, r3
 8003762:	f001 f85f 	bl	8004824 <RCCEx_PLL2_Config>
 8003766:	4603      	mov	r3, r0
 8003768:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800376a:	e005      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	75fb      	strb	r3, [r7, #23]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d109      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800377e:	4ba3      	ldr	r3, [pc, #652]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	49a0      	ldr	r1, [pc, #640]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800378c:	4313      	orrs	r3, r2
 800378e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003790:	e001      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003792:	7dfb      	ldrb	r3, [r7, #23]
 8003794:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d047      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037aa:	d030      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80037ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037b0:	d82a      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037b6:	d02c      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80037b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037bc:	d824      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c2:	d018      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d81e      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d007      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037d4:	e018      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037d6:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4a8c      	ldr	r2, [pc, #560]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037e2:	e017      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f001 f81a 	bl	8004824 <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037f4:	e00e      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	; 0x24
 80037fa:	2100      	movs	r1, #0
 80037fc:	4618      	mov	r0, r3
 80037fe:	f001 f8c3 	bl	8004988 <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003806:	e005      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
      break;
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003812:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d109      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800381a:	4b7c      	ldr	r3, [pc, #496]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	4979      	ldr	r1, [pc, #484]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	650b      	str	r3, [r1, #80]	; 0x50
 800382c:	e001      	b.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d049      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003846:	d02e      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384c:	d828      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800384e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003852:	d02a      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003858:	d822      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800385a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385e:	d026      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003864:	d81c      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003866:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800386a:	d010      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800386c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003870:	d816      	bhi.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01d      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d111      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	2101      	movs	r1, #1
 8003882:	4618      	mov	r0, r3
 8003884:	f000 ffce 	bl	8004824 <RCCEx_PLL2_Config>
 8003888:	4603      	mov	r3, r0
 800388a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800388c:	e012      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3324      	adds	r3, #36	; 0x24
 8003892:	2101      	movs	r1, #1
 8003894:	4618      	mov	r0, r3
 8003896:	f001 f877 	bl	8004988 <RCCEx_PLL3_Config>
 800389a:	4603      	mov	r3, r0
 800389c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800389e:	e009      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	75fb      	strb	r3, [r7, #23]
      break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038a6:	bf00      	nop
 80038a8:	e004      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80038b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d109      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038ba:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c6:	4951      	ldr	r1, [pc, #324]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	650b      	str	r3, [r1, #80]	; 0x50
 80038cc:	e001      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ce:	7dfb      	ldrb	r3, [r7, #23]
 80038d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d04b      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038e8:	d02e      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80038ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ee:	d828      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f4:	d02a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d822      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003900:	d026      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003902:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003906:	d81c      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800390c:	d010      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800390e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003912:	d816      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003918:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800391c:	d111      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3304      	adds	r3, #4
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f000 ff7d 	bl	8004824 <RCCEx_PLL2_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800392e:	e012      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3324      	adds	r3, #36	; 0x24
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f001 f826 	bl	8004988 <RCCEx_PLL3_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003940:	e009      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	75fb      	strb	r3, [r7, #23]
      break;
 8003946:	e006      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003948:	bf00      	nop
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800394c:	bf00      	nop
 800394e:	e002      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003950:	bf00      	nop
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800395c:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800395e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003960:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800396a:	4928      	ldr	r1, [pc, #160]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800396c:	4313      	orrs	r3, r2
 800396e:	658b      	str	r3, [r1, #88]	; 0x58
 8003970:	e001      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d02f      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003986:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800398a:	d00e      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800398c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003990:	d814      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d015      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800399a:	d10f      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	4a1a      	ldr	r2, [pc, #104]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039a8:	e00c      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2101      	movs	r1, #1
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 ff37 	bl	8004824 <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80039ba:	e003      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	75fb      	strb	r3, [r7, #23]
      break;
 80039c0:	e000      	b.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80039c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039ca:	4b10      	ldr	r3, [pc, #64]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	490d      	ldr	r1, [pc, #52]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	650b      	str	r3, [r1, #80]	; 0x50
 80039dc:	e001      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	7dfb      	ldrb	r3, [r7, #23]
 80039e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d033      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f2:	2b03      	cmp	r3, #3
 80039f4:	d81c      	bhi.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a37 	.word	0x08003a37
 8003a00:	08003a11 	.word	0x08003a11
 8003a04:	08003a1f 	.word	0x08003a1f
 8003a08:	08003a37 	.word	0x08003a37
 8003a0c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a10:	4bb8      	ldr	r3, [pc, #736]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	4ab7      	ldr	r2, [pc, #732]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a1c:	e00c      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f000 fefd 	bl	8004824 <RCCEx_PLL2_Config>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a2e:	e003      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	75fb      	strb	r3, [r7, #23]
      break;
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a3e:	4bad      	ldr	r3, [pc, #692]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a42:	f023 0203 	bic.w	r2, r3, #3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	49aa      	ldr	r1, [pc, #680]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a50:	e001      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	7dfb      	ldrb	r3, [r7, #23]
 8003a54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8086 	beq.w	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a64:	4ba4      	ldr	r3, [pc, #656]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4aa3      	ldr	r2, [pc, #652]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a70:	f7fd fc3e 	bl	80012f0 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a76:	e009      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fd fc3a 	bl	80012f0 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d902      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	75fb      	strb	r3, [r7, #23]
        break;
 8003a8a:	e005      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a8c:	4b9a      	ldr	r3, [pc, #616]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0ef      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d166      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a9e:	4b95      	ldr	r3, [pc, #596]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aa0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aa8:	4053      	eors	r3, r2
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d013      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab2:	4b90      	ldr	r3, [pc, #576]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003aba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003abc:	4b8d      	ldr	r3, [pc, #564]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a8c      	ldr	r2, [pc, #560]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac8:	4b8a      	ldr	r3, [pc, #552]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003acc:	4a89      	ldr	r2, [pc, #548]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ad4:	4a87      	ldr	r2, [pc, #540]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ae0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae4:	d115      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae6:	f7fd fc03 	bl	80012f0 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aec:	e00b      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fd fbff 	bl	80012f0 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d902      	bls.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	75fb      	strb	r3, [r7, #23]
            break;
 8003b04:	e005      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b06:	4b7b      	ldr	r3, [pc, #492]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0ed      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d126      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b26:	d10d      	bne.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003b28:	4b72      	ldr	r3, [pc, #456]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b36:	0919      	lsrs	r1, r3, #4
 8003b38:	4b70      	ldr	r3, [pc, #448]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003b3a:	400b      	ands	r3, r1
 8003b3c:	496d      	ldr	r1, [pc, #436]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	610b      	str	r3, [r1, #16]
 8003b42:	e005      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b44:	4b6b      	ldr	r3, [pc, #428]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	4a6a      	ldr	r2, [pc, #424]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b4e:	6113      	str	r3, [r2, #16]
 8003b50:	4b68      	ldr	r3, [pc, #416]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5e:	4965      	ldr	r1, [pc, #404]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	670b      	str	r3, [r1, #112]	; 0x70
 8003b64:	e004      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	75bb      	strb	r3, [r7, #22]
 8003b6a:	e001      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7dfb      	ldrb	r3, [r7, #23]
 8003b6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d07e      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b80:	2b28      	cmp	r3, #40	; 0x28
 8003b82:	d867      	bhi.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003c5b 	.word	0x08003c5b
 8003b90:	08003c55 	.word	0x08003c55
 8003b94:	08003c55 	.word	0x08003c55
 8003b98:	08003c55 	.word	0x08003c55
 8003b9c:	08003c55 	.word	0x08003c55
 8003ba0:	08003c55 	.word	0x08003c55
 8003ba4:	08003c55 	.word	0x08003c55
 8003ba8:	08003c55 	.word	0x08003c55
 8003bac:	08003c31 	.word	0x08003c31
 8003bb0:	08003c55 	.word	0x08003c55
 8003bb4:	08003c55 	.word	0x08003c55
 8003bb8:	08003c55 	.word	0x08003c55
 8003bbc:	08003c55 	.word	0x08003c55
 8003bc0:	08003c55 	.word	0x08003c55
 8003bc4:	08003c55 	.word	0x08003c55
 8003bc8:	08003c55 	.word	0x08003c55
 8003bcc:	08003c43 	.word	0x08003c43
 8003bd0:	08003c55 	.word	0x08003c55
 8003bd4:	08003c55 	.word	0x08003c55
 8003bd8:	08003c55 	.word	0x08003c55
 8003bdc:	08003c55 	.word	0x08003c55
 8003be0:	08003c55 	.word	0x08003c55
 8003be4:	08003c55 	.word	0x08003c55
 8003be8:	08003c55 	.word	0x08003c55
 8003bec:	08003c5b 	.word	0x08003c5b
 8003bf0:	08003c55 	.word	0x08003c55
 8003bf4:	08003c55 	.word	0x08003c55
 8003bf8:	08003c55 	.word	0x08003c55
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003c55 	.word	0x08003c55
 8003c08:	08003c55 	.word	0x08003c55
 8003c0c:	08003c5b 	.word	0x08003c5b
 8003c10:	08003c55 	.word	0x08003c55
 8003c14:	08003c55 	.word	0x08003c55
 8003c18:	08003c55 	.word	0x08003c55
 8003c1c:	08003c55 	.word	0x08003c55
 8003c20:	08003c55 	.word	0x08003c55
 8003c24:	08003c55 	.word	0x08003c55
 8003c28:	08003c55 	.word	0x08003c55
 8003c2c:	08003c5b 	.word	0x08003c5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	2101      	movs	r1, #1
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 fdf4 	bl	8004824 <RCCEx_PLL2_Config>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fe9d 	bl	8004988 <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c6e:	4921      	ldr	r1, [pc, #132]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	654b      	str	r3, [r1, #84]	; 0x54
 8003c74:	e001      	b.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	7dfb      	ldrb	r3, [r7, #23]
 8003c78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d03e      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d820      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cd7 	.word	0x08003cd7
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cbf 	.word	0x08003cbf
 8003ca0:	08003cd7 	.word	0x08003cd7
 8003ca4:	08003cd7 	.word	0x08003cd7
 8003ca8:	08003cd7 	.word	0x08003cd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 fdb6 	bl	8004824 <RCCEx_PLL2_Config>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cbc:	e00c      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	3324      	adds	r3, #36	; 0x24
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fe5f 	bl	8004988 <RCCEx_PLL3_Config>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003cce:	e003      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d110      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce2:	f023 0207 	bic.w	r2, r3, #7
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cea:	4902      	ldr	r1, [pc, #8]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	654b      	str	r3, [r1, #84]	; 0x54
 8003cf0:	e008      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003cf2:	bf00      	nop
 8003cf4:	58024400 	.word	0x58024400
 8003cf8:	58024800 	.word	0x58024800
 8003cfc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d039      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	2b05      	cmp	r3, #5
 8003d18:	d820      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003d1a:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d63 	.word	0x08003d63
 8003d24:	08003d39 	.word	0x08003d39
 8003d28:	08003d4b 	.word	0x08003d4b
 8003d2c:	08003d63 	.word	0x08003d63
 8003d30:	08003d63 	.word	0x08003d63
 8003d34:	08003d63 	.word	0x08003d63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fd70 	bl	8004824 <RCCEx_PLL2_Config>
 8003d44:	4603      	mov	r3, r0
 8003d46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d48:	e00c      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3324      	adds	r3, #36	; 0x24
 8003d4e:	2101      	movs	r1, #1
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 fe19 	bl	8004988 <RCCEx_PLL3_Config>
 8003d56:	4603      	mov	r3, r0
 8003d58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d60:	e000      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d6a:	4bb7      	ldr	r3, [pc, #732]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6e:	f023 0207 	bic.w	r2, r3, #7
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d78:	49b3      	ldr	r1, [pc, #716]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7e:	e001      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d80:	7dfb      	ldrb	r3, [r7, #23]
 8003d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d04b      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9a:	d02e      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da0:	d828      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da6:	d02a      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dac:	d822      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db2:	d026      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003db4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003db8:	d81c      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dbe:	d010      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d816      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d01d      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003dca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dce:	d111      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3304      	adds	r3, #4
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fd24 	bl	8004824 <RCCEx_PLL2_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003de0:	e012      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3324      	adds	r3, #36	; 0x24
 8003de6:	2102      	movs	r1, #2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fdcd 	bl	8004988 <RCCEx_PLL3_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003df2:	e009      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
      break;
 8003df8:	e006      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e004      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e002      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e02:	bf00      	nop
 8003e04:	e000      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10a      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e0e:	4b8e      	ldr	r3, [pc, #568]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e1c:	498a      	ldr	r1, [pc, #552]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	654b      	str	r3, [r1, #84]	; 0x54
 8003e22:	e001      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d04b      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e3e:	d02e      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e44:	d828      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4a:	d02a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e50:	d822      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e56:	d026      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e5c:	d81c      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e62:	d010      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e68:	d816      	bhi.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d01d      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d111      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3304      	adds	r3, #4
 8003e78:	2100      	movs	r1, #0
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 fcd2 	bl	8004824 <RCCEx_PLL2_Config>
 8003e80:	4603      	mov	r3, r0
 8003e82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e84:	e012      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3324      	adds	r3, #36	; 0x24
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f000 fd7b 	bl	8004988 <RCCEx_PLL3_Config>
 8003e92:	4603      	mov	r3, r0
 8003e94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e96:	e009      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e9c:	e006      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e004      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ea2:	bf00      	nop
 8003ea4:	e002      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ea6:	bf00      	nop
 8003ea8:	e000      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003eaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eb2:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ec0:	4961      	ldr	r1, [pc, #388]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	658b      	str	r3, [r1, #88]	; 0x58
 8003ec6:	e001      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d04b      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ede:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ee2:	d02e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003ee4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ee8:	d828      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eee:	d02a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003ef0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef4:	d822      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ef6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003efa:	d026      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003efc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f00:	d81c      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f06:	d010      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f0c:	d816      	bhi.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01d      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f16:	d111      	bne.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fc80 	bl	8004824 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f28:	e012      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3324      	adds	r3, #36	; 0x24
 8003f2e:	2102      	movs	r1, #2
 8003f30:	4618      	mov	r0, r3
 8003f32:	f000 fd29 	bl	8004988 <RCCEx_PLL3_Config>
 8003f36:	4603      	mov	r3, r0
 8003f38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f3a:	e009      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f42:	bf00      	nop
 8003f44:	e004      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f46:	bf00      	nop
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f50:	7dfb      	ldrb	r3, [r7, #23]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f56:	4b3c      	ldr	r3, [pc, #240]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f64:	4938      	ldr	r1, [pc, #224]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	658b      	str	r3, [r1, #88]	; 0x58
 8003f6a:	e001      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	7dfb      	ldrb	r3, [r7, #23]
 8003f6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f86:	d10a      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3324      	adds	r3, #36	; 0x24
 8003f8c:	2102      	movs	r1, #2
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 fcfa 	bl	8004988 <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f9e:	4b2a      	ldr	r3, [pc, #168]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fac:	4926      	ldr	r1, [pc, #152]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0310 	and.w	r3, r3, #16
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc8:	d10a      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3324      	adds	r3, #36	; 0x24
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fcd9 	bl	8004988 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fee:	4916      	ldr	r1, [pc, #88]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d036      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800400a:	d01f      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800400c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004010:	d817      	bhi.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401a:	d009      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800401c:	e011      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	2100      	movs	r1, #0
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fbfd 	bl	8004824 <RCCEx_PLL2_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800402e:	e00e      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3324      	adds	r3, #36	; 0x24
 8004034:	2102      	movs	r1, #2
 8004036:	4618      	mov	r0, r3
 8004038:	f000 fca6 	bl	8004988 <RCCEx_PLL3_Config>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004040:	e005      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
      break;
 8004046:	e002      	b.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004048:	58024400 	.word	0x58024400
      break;
 800404c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800404e:	7dfb      	ldrb	r3, [r7, #23]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10a      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004054:	4b93      	ldr	r3, [pc, #588]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004058:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004062:	4990      	ldr	r1, [pc, #576]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	658b      	str	r3, [r1, #88]	; 0x58
 8004068:	e001      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
 800406c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d033      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004080:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004084:	d01c      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004086:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800408a:	d816      	bhi.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800408c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004090:	d003      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004092:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004096:	d007      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004098:	e00f      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409a:	4b82      	ldr	r3, [pc, #520]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	4a81      	ldr	r2, [pc, #516]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80040a6:	e00c      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	2101      	movs	r1, #1
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fc6a 	bl	8004988 <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80040b8:	e003      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
      break;
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80040c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c2:	7dfb      	ldrb	r3, [r7, #23]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10a      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c8:	4b76      	ldr	r3, [pc, #472]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	4973      	ldr	r1, [pc, #460]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	654b      	str	r3, [r1, #84]	; 0x54
 80040dc:	e001      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	7dfb      	ldrb	r3, [r7, #23]
 80040e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d029      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d003      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80040f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fa:	d007      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80040fc:	e00f      	b.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fe:	4b69      	ldr	r3, [pc, #420]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	4a68      	ldr	r2, [pc, #416]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004108:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800410a:	e00b      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	2102      	movs	r1, #2
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fb86 	bl	8004824 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	75fb      	strb	r3, [r7, #23]
      break;
 8004122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004124:	7dfb      	ldrb	r3, [r7, #23]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800412a:	4b5e      	ldr	r3, [pc, #376]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800412c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004136:	495b      	ldr	r1, [pc, #364]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800413c:	e001      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	2102      	movs	r1, #2
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fc17 	bl	8004988 <RCCEx_PLL3_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d030      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004178:	d017      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800417a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800417e:	d811      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004184:	d013      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418a:	d80b      	bhi.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800418c:	2b00      	cmp	r3, #0
 800418e:	d010      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004194:	d106      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004196:	4b43      	ldr	r3, [pc, #268]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	4a42      	ldr	r2, [pc, #264]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800419c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80041a2:	e007      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	e004      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041aa:	bf00      	nop
 80041ac:	e002      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80041b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ba:	4b3a      	ldr	r3, [pc, #232]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	4937      	ldr	r1, [pc, #220]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	654b      	str	r3, [r1, #84]	; 0x54
 80041cc:	e001      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ce:	7dfb      	ldrb	r3, [r7, #23]
 80041d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d008      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041de:	4b31      	ldr	r3, [pc, #196]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	492e      	ldr	r1, [pc, #184]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041fc:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800420a:	4926      	ldr	r1, [pc, #152]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800420c:	4313      	orrs	r3, r2
 800420e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004228:	491e      	ldr	r1, [pc, #120]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800423a:	4b1a      	ldr	r3, [pc, #104]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004240:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004244:	6113      	str	r3, [r2, #16]
 8004246:	4b17      	ldr	r3, [pc, #92]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004250:	4914      	ldr	r1, [pc, #80]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da08      	bge.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800425e:	4b11      	ldr	r3, [pc, #68]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800426c:	4313      	orrs	r3, r2
 800426e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d009      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800427c:	4b09      	ldr	r3, [pc, #36]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	4906      	ldr	r1, [pc, #24]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800428c:	4313      	orrs	r3, r2
 800428e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004290:	7dbb      	ldrb	r3, [r7, #22]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	e000      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	58024400 	.word	0x58024400

080042a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042ac:	f7ff f81e 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	091b      	lsrs	r3, r3, #4
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	58024400 	.word	0x58024400
 80042d0:	080080bc 	.word	0x080080bc

080042d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042dc:	4ba1      	ldr	r3, [pc, #644]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80042e6:	4b9f      	ldr	r3, [pc, #636]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	0b1b      	lsrs	r3, r3, #12
 80042ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80042f2:	4b9c      	ldr	r3, [pc, #624]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80042fe:	4b99      	ldr	r3, [pc, #612]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004302:	08db      	lsrs	r3, r3, #3
 8004304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	ee07 3a90 	vmov	s15, r3
 8004312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004316:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8111 	beq.w	8004544 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	2b02      	cmp	r3, #2
 8004326:	f000 8083 	beq.w	8004430 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b02      	cmp	r3, #2
 800432e:	f200 80a1 	bhi.w	8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d056      	beq.n	80043ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800433e:	e099      	b.n	8004474 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004340:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02d      	beq.n	80043a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800434c:	4b85      	ldr	r3, [pc, #532]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	08db      	lsrs	r3, r3, #3
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	4a84      	ldr	r2, [pc, #528]	; (8004568 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004358:	fa22 f303 	lsr.w	r3, r2, r3
 800435c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	4b7b      	ldr	r3, [pc, #492]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	ed97 6a03 	vldr	s12, [r7, #12]
 800438a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800438e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80043a6:	e087      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004570 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b6a      	ldr	r3, [pc, #424]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ea:	e065      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b59      	ldr	r3, [pc, #356]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004412:	eddf 5a56 	vldr	s11, [pc, #344]	; 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800442e:	e043      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a45 	vldr	s11, [pc, #276]	; 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004472:	e021      	b.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	ee07 3a90 	vmov	s15, r3
 800447a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800447e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004486:	4b37      	ldr	r3, [pc, #220]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448e:	ee07 3a90 	vmov	s15, r3
 8004492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004496:	ed97 6a03 	vldr	s12, [r7, #12]
 800449a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800456c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800449e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80044b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80044b8:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	0a5b      	lsrs	r3, r3, #9
 80044be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044de:	ee17 2a90 	vmov	r2, s15
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004500:	edd7 6a07 	vldr	s13, [r7, #28]
 8004504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450c:	ee17 2a90 	vmov	r2, s15
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	0e1b      	lsrs	r3, r3, #24
 800451a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800452a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800452e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800453a:	ee17 2a90 	vmov	r2, s15
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004542:	e008      	b.n	8004556 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	609a      	str	r2, [r3, #8]
}
 8004556:	bf00      	nop
 8004558:	3724      	adds	r7, #36	; 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	58024400 	.word	0x58024400
 8004568:	03d09000 	.word	0x03d09000
 800456c:	46000000 	.word	0x46000000
 8004570:	4c742400 	.word	0x4c742400
 8004574:	4a742400 	.word	0x4a742400
 8004578:	4af42400 	.word	0x4af42400

0800457c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004584:	4ba1      	ldr	r3, [pc, #644]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f003 0303 	and.w	r3, r3, #3
 800458c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800458e:	4b9f      	ldr	r3, [pc, #636]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	0d1b      	lsrs	r3, r3, #20
 8004594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004598:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800459a:	4b9c      	ldr	r3, [pc, #624]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80045a6:	4b99      	ldr	r3, [pc, #612]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	08db      	lsrs	r3, r3, #3
 80045ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	ee07 3a90 	vmov	s15, r3
 80045ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8111 	beq.w	80047ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	f000 8083 	beq.w	80046d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f200 80a1 	bhi.w	800471c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d056      	beq.n	8004694 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80045e6:	e099      	b.n	800471c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e8:	4b88      	ldr	r3, [pc, #544]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0320 	and.w	r3, r3, #32
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d02d      	beq.n	8004650 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80045f4:	4b85      	ldr	r3, [pc, #532]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	08db      	lsrs	r3, r3, #3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	4a84      	ldr	r2, [pc, #528]	; (8004810 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	ee07 3a90 	vmov	s15, r3
 800460c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b7b      	ldr	r3, [pc, #492]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800464e:	e087      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004818 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b6a      	ldr	r3, [pc, #424]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004692:	e065      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800481c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046a6:	4b59      	ldr	r3, [pc, #356]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ae:	ee07 3a90 	vmov	s15, r3
 80046b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80046d6:	e043      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80046e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ea:	4b48      	ldr	r3, [pc, #288]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f2:	ee07 3a90 	vmov	s15, r3
 80046f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800470e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800471a:	e021      	b.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004726:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800481c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800472a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472e:	4b37      	ldr	r3, [pc, #220]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004736:	ee07 3a90 	vmov	s15, r3
 800473a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004742:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004814 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800475e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004760:	4b2a      	ldr	r3, [pc, #168]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	0a5b      	lsrs	r3, r3, #9
 8004766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004776:	ee37 7a87 	vadd.f32	s14, s15, s14
 800477a:	edd7 6a07 	vldr	s13, [r7, #28]
 800477e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004786:	ee17 2a90 	vmov	r2, s15
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800478e:	4b1f      	ldr	r3, [pc, #124]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	0c1b      	lsrs	r3, r3, #16
 8004794:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047b4:	ee17 2a90 	vmov	r2, s15
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80047bc:	4b13      	ldr	r3, [pc, #76]	; (800480c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	0e1b      	lsrs	r3, r3, #24
 80047c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047e2:	ee17 2a90 	vmov	r2, s15
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80047ea:	e008      	b.n	80047fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	609a      	str	r2, [r3, #8]
}
 80047fe:	bf00      	nop
 8004800:	3724      	adds	r7, #36	; 0x24
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	58024400 	.word	0x58024400
 8004810:	03d09000 	.word	0x03d09000
 8004814:	46000000 	.word	0x46000000
 8004818:	4c742400 	.word	0x4c742400
 800481c:	4a742400 	.word	0x4a742400
 8004820:	4af42400 	.word	0x4af42400

08004824 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004832:	4b53      	ldr	r3, [pc, #332]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	2b03      	cmp	r3, #3
 800483c:	d101      	bne.n	8004842 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e099      	b.n	8004976 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004842:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a4e      	ldr	r2, [pc, #312]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004848:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800484c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800484e:	f7fc fd4f 	bl	80012f0 <HAL_GetTick>
 8004852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004854:	e008      	b.n	8004868 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004856:	f7fc fd4b 	bl	80012f0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	2b02      	cmp	r3, #2
 8004862:	d901      	bls.n	8004868 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e086      	b.n	8004976 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004868:	4b45      	ldr	r3, [pc, #276]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f0      	bne.n	8004856 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004874:	4b42      	ldr	r3, [pc, #264]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	031b      	lsls	r3, r3, #12
 8004882:	493f      	ldr	r1, [pc, #252]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004884:	4313      	orrs	r3, r2
 8004886:	628b      	str	r3, [r1, #40]	; 0x28
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	3b01      	subs	r3, #1
 800488e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	3b01      	subs	r3, #1
 8004898:	025b      	lsls	r3, r3, #9
 800489a:	b29b      	uxth	r3, r3
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	3b01      	subs	r3, #1
 80048b2:	061b      	lsls	r3, r3, #24
 80048b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048b8:	4931      	ldr	r1, [pc, #196]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048be:	4b30      	ldr	r3, [pc, #192]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	492d      	ldr	r1, [pc, #180]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048d0:	4b2b      	ldr	r3, [pc, #172]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f023 0220 	bic.w	r2, r3, #32
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	4928      	ldr	r1, [pc, #160]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048e2:	4b27      	ldr	r3, [pc, #156]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	4a26      	ldr	r2, [pc, #152]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	f023 0310 	bic.w	r3, r3, #16
 80048ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <RCCEx_PLL2_Config+0x160>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	69d2      	ldr	r2, [r2, #28]
 80048fa:	00d2      	lsls	r2, r2, #3
 80048fc:	4920      	ldr	r1, [pc, #128]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004902:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	4a1e      	ldr	r2, [pc, #120]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004908:	f043 0310 	orr.w	r3, r3, #16
 800490c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d106      	bne.n	8004922 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004914:	4b1a      	ldr	r3, [pc, #104]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	4a19      	ldr	r2, [pc, #100]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 800491a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800491e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004920:	e00f      	b.n	8004942 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d106      	bne.n	8004936 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004928:	4b15      	ldr	r3, [pc, #84]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	4a14      	ldr	r2, [pc, #80]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004932:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004934:	e005      	b.n	8004942 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	4a11      	ldr	r2, [pc, #68]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 800493c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004940:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 8004948:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800494e:	f7fc fccf 	bl	80012f0 <HAL_GetTick>
 8004952:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004954:	e008      	b.n	8004968 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004956:	f7fc fccb 	bl	80012f0 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e006      	b.n	8004976 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004968:	4b05      	ldr	r3, [pc, #20]	; (8004980 <RCCEx_PLL2_Config+0x15c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
 8004984:	ffff0007 	.word	0xffff0007

08004988 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004996:	4b53      	ldr	r3, [pc, #332]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499a:	f003 0303 	and.w	r3, r3, #3
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d101      	bne.n	80049a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e099      	b.n	8004ada <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049a6:	4b4f      	ldr	r3, [pc, #316]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4e      	ldr	r2, [pc, #312]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b2:	f7fc fc9d 	bl	80012f0 <HAL_GetTick>
 80049b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049b8:	e008      	b.n	80049cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80049ba:	f7fc fc99 	bl	80012f0 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e086      	b.n	8004ada <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049cc:	4b45      	ldr	r3, [pc, #276]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f0      	bne.n	80049ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049d8:	4b42      	ldr	r3, [pc, #264]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	051b      	lsls	r3, r3, #20
 80049e6:	493f      	ldr	r1, [pc, #252]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	628b      	str	r3, [r1, #40]	; 0x28
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	3b01      	subs	r3, #1
 80049fc:	025b      	lsls	r3, r3, #9
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	3b01      	subs	r3, #1
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a1c:	4931      	ldr	r1, [pc, #196]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a22:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	492d      	ldr	r1, [pc, #180]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	4928      	ldr	r1, [pc, #160]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a52:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <RCCEx_PLL3_Config+0x160>)
 8004a58:	4013      	ands	r3, r2
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	69d2      	ldr	r2, [r2, #28]
 8004a5e:	00d2      	lsls	r2, r2, #3
 8004a60:	4920      	ldr	r1, [pc, #128]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a66:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a78:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a84:	e00f      	b.n	8004aa6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a98:	e005      	b.n	8004aa6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a9a:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004aa6:	4b0f      	ldr	r3, [pc, #60]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab2:	f7fc fc1d 	bl	80012f0 <HAL_GetTick>
 8004ab6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ab8:	e008      	b.n	8004acc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004aba:	f7fc fc19 	bl	80012f0 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e006      	b.n	8004ada <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004acc:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <RCCEx_PLL3_Config+0x15c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	58024400 	.word	0x58024400
 8004ae8:	ffff0007 	.word	0xffff0007

08004aec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e054      	b.n	8004ba8 <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7a5b      	ldrb	r3, [r3, #9]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f7fc f940 	bl	8000d94 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f023 0120 	bic.w	r1, r3, #32
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0204 	orr.w	r2, r2, #4
 8004b3e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d104      	bne.n	8004b58 <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2204      	movs	r2, #4
 8004b52:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e027      	b.n	8004ba8 <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8004b58:	f7fc fbca 	bl	80012f0 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b5e:	e015      	b.n	8004b8c <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b60:	f7fc fbc6 	bl	80012f0 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d90e      	bls.n	8004b8c <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 0304 	and.w	r3, r3, #4
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d107      	bne.n	8004b8c <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2204      	movs	r2, #4
 8004b80:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e00d      	b.n	8004ba8 <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d0e2      	beq.n	8004b60 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f003 0320 	and.w	r3, r3, #32
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d105      	bne.n	8004bd6 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e023      	b.n	8004c1e <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b40      	cmp	r3, #64	; 0x40
 8004be2:	d11c      	bne.n	8004c1e <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0304 	and.w	r3, r3, #4
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d008      	beq.n	8004c04 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c00:	605a      	str	r2, [r3, #4]
 8004c02:	e00c      	b.n	8004c1e <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2208      	movs	r2, #8
 8004c08:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0208 	bic.w	r2, r2, #8
 8004c1c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d10b      	bne.n	8004c3c <HAL_RNG_IRQHandler+0x8c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2204      	movs	r2, #4
 8004c28:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f839 	bl	8004ca2 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0260 	mvn.w	r2, #96	; 0x60
 8004c38:	605a      	str	r2, [r3, #4]

    return;
 8004c3a:	e024      	b.n	8004c86 <HAL_RNG_IRQHandler+0xd6>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0301 	and.w	r3, r3, #1
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d11d      	bne.n	8004c86 <HAL_RNG_IRQHandler+0xd6>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0208 	bic.w	r2, r2, #8
 8004c58:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	7a5b      	ldrb	r3, [r3, #9]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d00b      	beq.n	8004c86 <HAL_RNG_IRQHandler+0xd6>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f803 	bl	8004c8c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e049      	b.n	8004d5c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d106      	bne.n	8004ce2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f841 	bl	8004d64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	f000 f9ff 	bl	80050f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d001      	beq.n	8004d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e054      	b.n	8004e3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a26      	ldr	r2, [pc, #152]	; (8004e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d022      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d01d      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a22      	ldr	r2, [pc, #136]	; (8004e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d018      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a21      	ldr	r2, [pc, #132]	; (8004e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a1f      	ldr	r2, [pc, #124]	; (8004e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d00e      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1e      	ldr	r2, [pc, #120]	; (8004e58 <HAL_TIM_Base_Start_IT+0xe0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d009      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a1c      	ldr	r2, [pc, #112]	; (8004e5c <HAL_TIM_Base_Start_IT+0xe4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_TIM_Base_Start_IT+0x80>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <HAL_TIM_Base_Start_IT+0xe8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d115      	bne.n	8004e24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_TIM_Base_Start_IT+0xec>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2b06      	cmp	r3, #6
 8004e08:	d015      	beq.n	8004e36 <HAL_TIM_Base_Start_IT+0xbe>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d011      	beq.n	8004e36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f042 0201 	orr.w	r2, r2, #1
 8004e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e22:	e008      	b.n	8004e36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	e000      	b.n	8004e38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40010000 	.word	0x40010000
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800
 8004e54:	40000c00 	.word	0x40000c00
 8004e58:	40010400 	.word	0x40010400
 8004e5c:	40001800 	.word	0x40001800
 8004e60:	40014000 	.word	0x40014000
 8004e64:	00010007 	.word	0x00010007

08004e68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0202 	mvn.w	r2, #2
 8004e94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f905 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f8f7 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f908 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0304 	and.w	r3, r3, #4
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b04      	cmp	r3, #4
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0204 	mvn.w	r2, #4
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f8db 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f8cd 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f8de 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0308 	and.w	r3, r3, #8
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0208 	mvn.w	r2, #8
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2204      	movs	r2, #4
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f8b1 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f8a3 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f8b4 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b10      	cmp	r3, #16
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b10      	cmp	r3, #16
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0210 	mvn.w	r2, #16
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2208      	movs	r2, #8
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f887 	bl	80050ba <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f879 	bl	80050a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f88a 	bl	80050ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d10e      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d107      	bne.n	8004fec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0201 	mvn.w	r2, #1
 8004fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fb fdd0 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d10e      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d107      	bne.n	8005018 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f914 	bl	8005240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005026:	d10e      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005032:	2b80      	cmp	r3, #128	; 0x80
 8005034:	d107      	bne.n	8005046 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f907 	bl	8005254 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d10e      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505e:	2b40      	cmp	r3, #64	; 0x40
 8005060:	d107      	bne.n	8005072 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800506a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f838 	bl	80050e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b20      	cmp	r3, #32
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0220 	mvn.w	r2, #32
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8c7 	bl	800522c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b083      	sub	sp, #12
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050c2:	bf00      	nop
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050ce:	b480      	push	{r7}
 80050d0:	b083      	sub	sp, #12
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b083      	sub	sp, #12
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050ea:	bf00      	nop
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr
	...

080050f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a40      	ldr	r2, [pc, #256]	; (800520c <TIM_Base_SetConfig+0x114>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005116:	d00f      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <TIM_Base_SetConfig+0x118>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d00b      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a3c      	ldr	r2, [pc, #240]	; (8005214 <TIM_Base_SetConfig+0x11c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d007      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a3b      	ldr	r2, [pc, #236]	; (8005218 <TIM_Base_SetConfig+0x120>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d003      	beq.n	8005138 <TIM_Base_SetConfig+0x40>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a3a      	ldr	r2, [pc, #232]	; (800521c <TIM_Base_SetConfig+0x124>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d108      	bne.n	800514a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a2f      	ldr	r2, [pc, #188]	; (800520c <TIM_Base_SetConfig+0x114>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d01f      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005158:	d01b      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a2c      	ldr	r2, [pc, #176]	; (8005210 <TIM_Base_SetConfig+0x118>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d017      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a2b      	ldr	r2, [pc, #172]	; (8005214 <TIM_Base_SetConfig+0x11c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d013      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <TIM_Base_SetConfig+0x120>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00f      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a29      	ldr	r2, [pc, #164]	; (800521c <TIM_Base_SetConfig+0x124>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00b      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a28      	ldr	r2, [pc, #160]	; (8005220 <TIM_Base_SetConfig+0x128>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d007      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a27      	ldr	r2, [pc, #156]	; (8005224 <TIM_Base_SetConfig+0x12c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d003      	beq.n	8005192 <TIM_Base_SetConfig+0x9a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a26      	ldr	r2, [pc, #152]	; (8005228 <TIM_Base_SetConfig+0x130>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d108      	bne.n	80051a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a10      	ldr	r2, [pc, #64]	; (800520c <TIM_Base_SetConfig+0x114>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00f      	beq.n	80051f0 <TIM_Base_SetConfig+0xf8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a12      	ldr	r2, [pc, #72]	; (800521c <TIM_Base_SetConfig+0x124>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00b      	beq.n	80051f0 <TIM_Base_SetConfig+0xf8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a11      	ldr	r2, [pc, #68]	; (8005220 <TIM_Base_SetConfig+0x128>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d007      	beq.n	80051f0 <TIM_Base_SetConfig+0xf8>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a10      	ldr	r2, [pc, #64]	; (8005224 <TIM_Base_SetConfig+0x12c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0xf8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a0f      	ldr	r2, [pc, #60]	; (8005228 <TIM_Base_SetConfig+0x130>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40010400 	.word	0x40010400
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800

0800522c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e042      	b.n	8005300 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fb fdc1 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2224      	movs	r2, #36	; 0x24
 8005296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 0201 	bic.w	r2, r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f82c 	bl	8005308 <UART_SetConfig>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e022      	b.n	8005300 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fd80 	bl	8005dc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 fe07 	bl	8005f0c <UART_CheckIdleState>
 80052fe:	4603      	mov	r3, r0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	b5b0      	push	{r4, r5, r7, lr}
 800530a:	b08e      	sub	sp, #56	; 0x38
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	4313      	orrs	r3, r2
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4bbf      	ldr	r3, [pc, #764]	; (8005634 <UART_SetConfig+0x32c>)
 8005336:	4013      	ands	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800533e:	430b      	orrs	r3, r1
 8005340:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4ab5      	ldr	r2, [pc, #724]	; (8005638 <UART_SetConfig+0x330>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d004      	beq.n	8005372 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800536e:	4313      	orrs	r3, r2
 8005370:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	4bb0      	ldr	r3, [pc, #704]	; (800563c <UART_SetConfig+0x334>)
 800537a:	4013      	ands	r3, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005382:	430b      	orrs	r3, r1
 8005384:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	f023 010f 	bic.w	r1, r3, #15
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4aa7      	ldr	r2, [pc, #668]	; (8005640 <UART_SetConfig+0x338>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d176      	bne.n	8005494 <UART_SetConfig+0x18c>
 80053a6:	4ba7      	ldr	r3, [pc, #668]	; (8005644 <UART_SetConfig+0x33c>)
 80053a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ae:	2b28      	cmp	r3, #40	; 0x28
 80053b0:	d86c      	bhi.n	800548c <UART_SetConfig+0x184>
 80053b2:	a201      	add	r2, pc, #4	; (adr r2, 80053b8 <UART_SetConfig+0xb0>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	0800545d 	.word	0x0800545d
 80053bc:	0800548d 	.word	0x0800548d
 80053c0:	0800548d 	.word	0x0800548d
 80053c4:	0800548d 	.word	0x0800548d
 80053c8:	0800548d 	.word	0x0800548d
 80053cc:	0800548d 	.word	0x0800548d
 80053d0:	0800548d 	.word	0x0800548d
 80053d4:	0800548d 	.word	0x0800548d
 80053d8:	08005465 	.word	0x08005465
 80053dc:	0800548d 	.word	0x0800548d
 80053e0:	0800548d 	.word	0x0800548d
 80053e4:	0800548d 	.word	0x0800548d
 80053e8:	0800548d 	.word	0x0800548d
 80053ec:	0800548d 	.word	0x0800548d
 80053f0:	0800548d 	.word	0x0800548d
 80053f4:	0800548d 	.word	0x0800548d
 80053f8:	0800546d 	.word	0x0800546d
 80053fc:	0800548d 	.word	0x0800548d
 8005400:	0800548d 	.word	0x0800548d
 8005404:	0800548d 	.word	0x0800548d
 8005408:	0800548d 	.word	0x0800548d
 800540c:	0800548d 	.word	0x0800548d
 8005410:	0800548d 	.word	0x0800548d
 8005414:	0800548d 	.word	0x0800548d
 8005418:	08005475 	.word	0x08005475
 800541c:	0800548d 	.word	0x0800548d
 8005420:	0800548d 	.word	0x0800548d
 8005424:	0800548d 	.word	0x0800548d
 8005428:	0800548d 	.word	0x0800548d
 800542c:	0800548d 	.word	0x0800548d
 8005430:	0800548d 	.word	0x0800548d
 8005434:	0800548d 	.word	0x0800548d
 8005438:	0800547d 	.word	0x0800547d
 800543c:	0800548d 	.word	0x0800548d
 8005440:	0800548d 	.word	0x0800548d
 8005444:	0800548d 	.word	0x0800548d
 8005448:	0800548d 	.word	0x0800548d
 800544c:	0800548d 	.word	0x0800548d
 8005450:	0800548d 	.word	0x0800548d
 8005454:	0800548d 	.word	0x0800548d
 8005458:	08005485 	.word	0x08005485
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005462:	e222      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800546a:	e21e      	b.n	80058aa <UART_SetConfig+0x5a2>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005472:	e21a      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800547a:	e216      	b.n	80058aa <UART_SetConfig+0x5a2>
 800547c:	2320      	movs	r3, #32
 800547e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005482:	e212      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005484:	2340      	movs	r3, #64	; 0x40
 8005486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800548a:	e20e      	b.n	80058aa <UART_SetConfig+0x5a2>
 800548c:	2380      	movs	r3, #128	; 0x80
 800548e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005492:	e20a      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a6b      	ldr	r2, [pc, #428]	; (8005648 <UART_SetConfig+0x340>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d130      	bne.n	8005500 <UART_SetConfig+0x1f8>
 800549e:	4b69      	ldr	r3, [pc, #420]	; (8005644 <UART_SetConfig+0x33c>)
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d826      	bhi.n	80054f8 <UART_SetConfig+0x1f0>
 80054aa:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <UART_SetConfig+0x1a8>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054d9 	.word	0x080054d9
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ce:	e1ec      	b.n	80058aa <UART_SetConfig+0x5a2>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054d6:	e1e8      	b.n	80058aa <UART_SetConfig+0x5a2>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054de:	e1e4      	b.n	80058aa <UART_SetConfig+0x5a2>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054e6:	e1e0      	b.n	80058aa <UART_SetConfig+0x5a2>
 80054e8:	2320      	movs	r3, #32
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054ee:	e1dc      	b.n	80058aa <UART_SetConfig+0x5a2>
 80054f0:	2340      	movs	r3, #64	; 0x40
 80054f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054f6:	e1d8      	b.n	80058aa <UART_SetConfig+0x5a2>
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80054fe:	e1d4      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a51      	ldr	r2, [pc, #324]	; (800564c <UART_SetConfig+0x344>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d130      	bne.n	800556c <UART_SetConfig+0x264>
 800550a:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <UART_SetConfig+0x33c>)
 800550c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550e:	f003 0307 	and.w	r3, r3, #7
 8005512:	2b05      	cmp	r3, #5
 8005514:	d826      	bhi.n	8005564 <UART_SetConfig+0x25c>
 8005516:	a201      	add	r2, pc, #4	; (adr r2, 800551c <UART_SetConfig+0x214>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	08005535 	.word	0x08005535
 8005520:	0800553d 	.word	0x0800553d
 8005524:	08005545 	.word	0x08005545
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005555 	.word	0x08005555
 8005530:	0800555d 	.word	0x0800555d
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800553a:	e1b6      	b.n	80058aa <UART_SetConfig+0x5a2>
 800553c:	2304      	movs	r3, #4
 800553e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005542:	e1b2      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005544:	2308      	movs	r3, #8
 8005546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800554a:	e1ae      	b.n	80058aa <UART_SetConfig+0x5a2>
 800554c:	2310      	movs	r3, #16
 800554e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005552:	e1aa      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005554:	2320      	movs	r3, #32
 8005556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800555a:	e1a6      	b.n	80058aa <UART_SetConfig+0x5a2>
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005562:	e1a2      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005564:	2380      	movs	r3, #128	; 0x80
 8005566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800556a:	e19e      	b.n	80058aa <UART_SetConfig+0x5a2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a37      	ldr	r2, [pc, #220]	; (8005650 <UART_SetConfig+0x348>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d130      	bne.n	80055d8 <UART_SetConfig+0x2d0>
 8005576:	4b33      	ldr	r3, [pc, #204]	; (8005644 <UART_SetConfig+0x33c>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b05      	cmp	r3, #5
 8005580:	d826      	bhi.n	80055d0 <UART_SetConfig+0x2c8>
 8005582:	a201      	add	r2, pc, #4	; (adr r2, 8005588 <UART_SetConfig+0x280>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055a1 	.word	0x080055a1
 800558c:	080055a9 	.word	0x080055a9
 8005590:	080055b1 	.word	0x080055b1
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055c1 	.word	0x080055c1
 800559c:	080055c9 	.word	0x080055c9
 80055a0:	2300      	movs	r3, #0
 80055a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055a6:	e180      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055a8:	2304      	movs	r3, #4
 80055aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ae:	e17c      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055b0:	2308      	movs	r3, #8
 80055b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055b6:	e178      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055b8:	2310      	movs	r3, #16
 80055ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055be:	e174      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055c0:	2320      	movs	r3, #32
 80055c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055c6:	e170      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055ce:	e16c      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055d0:	2380      	movs	r3, #128	; 0x80
 80055d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80055d6:	e168      	b.n	80058aa <UART_SetConfig+0x5a2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1d      	ldr	r2, [pc, #116]	; (8005654 <UART_SetConfig+0x34c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d142      	bne.n	8005668 <UART_SetConfig+0x360>
 80055e2:	4b18      	ldr	r3, [pc, #96]	; (8005644 <UART_SetConfig+0x33c>)
 80055e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d838      	bhi.n	8005660 <UART_SetConfig+0x358>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x2ec>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	0800560d 	.word	0x0800560d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	0800561d 	.word	0x0800561d
 8005600:	08005625 	.word	0x08005625
 8005604:	0800562d 	.word	0x0800562d
 8005608:	08005659 	.word	0x08005659
 800560c:	2300      	movs	r3, #0
 800560e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005612:	e14a      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005614:	2304      	movs	r3, #4
 8005616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800561a:	e146      	b.n	80058aa <UART_SetConfig+0x5a2>
 800561c:	2308      	movs	r3, #8
 800561e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005622:	e142      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005624:	2310      	movs	r3, #16
 8005626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800562a:	e13e      	b.n	80058aa <UART_SetConfig+0x5a2>
 800562c:	2320      	movs	r3, #32
 800562e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005632:	e13a      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005634:	cfff69f3 	.word	0xcfff69f3
 8005638:	58000c00 	.word	0x58000c00
 800563c:	11fff4ff 	.word	0x11fff4ff
 8005640:	40011000 	.word	0x40011000
 8005644:	58024400 	.word	0x58024400
 8005648:	40004400 	.word	0x40004400
 800564c:	40004800 	.word	0x40004800
 8005650:	40004c00 	.word	0x40004c00
 8005654:	40005000 	.word	0x40005000
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800565e:	e124      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005666:	e120      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4acc      	ldr	r2, [pc, #816]	; (80059a0 <UART_SetConfig+0x698>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d176      	bne.n	8005760 <UART_SetConfig+0x458>
 8005672:	4bcc      	ldr	r3, [pc, #816]	; (80059a4 <UART_SetConfig+0x69c>)
 8005674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005676:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567a:	2b28      	cmp	r3, #40	; 0x28
 800567c:	d86c      	bhi.n	8005758 <UART_SetConfig+0x450>
 800567e:	a201      	add	r2, pc, #4	; (adr r2, 8005684 <UART_SetConfig+0x37c>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	08005729 	.word	0x08005729
 8005688:	08005759 	.word	0x08005759
 800568c:	08005759 	.word	0x08005759
 8005690:	08005759 	.word	0x08005759
 8005694:	08005759 	.word	0x08005759
 8005698:	08005759 	.word	0x08005759
 800569c:	08005759 	.word	0x08005759
 80056a0:	08005759 	.word	0x08005759
 80056a4:	08005731 	.word	0x08005731
 80056a8:	08005759 	.word	0x08005759
 80056ac:	08005759 	.word	0x08005759
 80056b0:	08005759 	.word	0x08005759
 80056b4:	08005759 	.word	0x08005759
 80056b8:	08005759 	.word	0x08005759
 80056bc:	08005759 	.word	0x08005759
 80056c0:	08005759 	.word	0x08005759
 80056c4:	08005739 	.word	0x08005739
 80056c8:	08005759 	.word	0x08005759
 80056cc:	08005759 	.word	0x08005759
 80056d0:	08005759 	.word	0x08005759
 80056d4:	08005759 	.word	0x08005759
 80056d8:	08005759 	.word	0x08005759
 80056dc:	08005759 	.word	0x08005759
 80056e0:	08005759 	.word	0x08005759
 80056e4:	08005741 	.word	0x08005741
 80056e8:	08005759 	.word	0x08005759
 80056ec:	08005759 	.word	0x08005759
 80056f0:	08005759 	.word	0x08005759
 80056f4:	08005759 	.word	0x08005759
 80056f8:	08005759 	.word	0x08005759
 80056fc:	08005759 	.word	0x08005759
 8005700:	08005759 	.word	0x08005759
 8005704:	08005749 	.word	0x08005749
 8005708:	08005759 	.word	0x08005759
 800570c:	08005759 	.word	0x08005759
 8005710:	08005759 	.word	0x08005759
 8005714:	08005759 	.word	0x08005759
 8005718:	08005759 	.word	0x08005759
 800571c:	08005759 	.word	0x08005759
 8005720:	08005759 	.word	0x08005759
 8005724:	08005751 	.word	0x08005751
 8005728:	2301      	movs	r3, #1
 800572a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800572e:	e0bc      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005730:	2304      	movs	r3, #4
 8005732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005736:	e0b8      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005738:	2308      	movs	r3, #8
 800573a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800573e:	e0b4      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005740:	2310      	movs	r3, #16
 8005742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005746:	e0b0      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005748:	2320      	movs	r3, #32
 800574a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800574e:	e0ac      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005750:	2340      	movs	r3, #64	; 0x40
 8005752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005756:	e0a8      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800575e:	e0a4      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a90      	ldr	r2, [pc, #576]	; (80059a8 <UART_SetConfig+0x6a0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d130      	bne.n	80057cc <UART_SetConfig+0x4c4>
 800576a:	4b8e      	ldr	r3, [pc, #568]	; (80059a4 <UART_SetConfig+0x69c>)
 800576c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	2b05      	cmp	r3, #5
 8005774:	d826      	bhi.n	80057c4 <UART_SetConfig+0x4bc>
 8005776:	a201      	add	r2, pc, #4	; (adr r2, 800577c <UART_SetConfig+0x474>)
 8005778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577c:	08005795 	.word	0x08005795
 8005780:	0800579d 	.word	0x0800579d
 8005784:	080057a5 	.word	0x080057a5
 8005788:	080057ad 	.word	0x080057ad
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057bd 	.word	0x080057bd
 8005794:	2300      	movs	r3, #0
 8005796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800579a:	e086      	b.n	80058aa <UART_SetConfig+0x5a2>
 800579c:	2304      	movs	r3, #4
 800579e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057a2:	e082      	b.n	80058aa <UART_SetConfig+0x5a2>
 80057a4:	2308      	movs	r3, #8
 80057a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057aa:	e07e      	b.n	80058aa <UART_SetConfig+0x5a2>
 80057ac:	2310      	movs	r3, #16
 80057ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057b2:	e07a      	b.n	80058aa <UART_SetConfig+0x5a2>
 80057b4:	2320      	movs	r3, #32
 80057b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ba:	e076      	b.n	80058aa <UART_SetConfig+0x5a2>
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057c2:	e072      	b.n	80058aa <UART_SetConfig+0x5a2>
 80057c4:	2380      	movs	r3, #128	; 0x80
 80057c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80057ca:	e06e      	b.n	80058aa <UART_SetConfig+0x5a2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a76      	ldr	r2, [pc, #472]	; (80059ac <UART_SetConfig+0x6a4>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d130      	bne.n	8005838 <UART_SetConfig+0x530>
 80057d6:	4b73      	ldr	r3, [pc, #460]	; (80059a4 <UART_SetConfig+0x69c>)
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b05      	cmp	r3, #5
 80057e0:	d826      	bhi.n	8005830 <UART_SetConfig+0x528>
 80057e2:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x4e0>)
 80057e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e8:	08005801 	.word	0x08005801
 80057ec:	08005809 	.word	0x08005809
 80057f0:	08005811 	.word	0x08005811
 80057f4:	08005819 	.word	0x08005819
 80057f8:	08005821 	.word	0x08005821
 80057fc:	08005829 	.word	0x08005829
 8005800:	2300      	movs	r3, #0
 8005802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005806:	e050      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800580e:	e04c      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005816:	e048      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800581e:	e044      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005820:	2320      	movs	r3, #32
 8005822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005826:	e040      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005828:	2340      	movs	r3, #64	; 0x40
 800582a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800582e:	e03c      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005836:	e038      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a5c      	ldr	r2, [pc, #368]	; (80059b0 <UART_SetConfig+0x6a8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d130      	bne.n	80058a4 <UART_SetConfig+0x59c>
 8005842:	4b58      	ldr	r3, [pc, #352]	; (80059a4 <UART_SetConfig+0x69c>)
 8005844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	2b05      	cmp	r3, #5
 800584c:	d826      	bhi.n	800589c <UART_SetConfig+0x594>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x54c>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	0800586d 	.word	0x0800586d
 8005858:	08005875 	.word	0x08005875
 800585c:	0800587d 	.word	0x0800587d
 8005860:	08005885 	.word	0x08005885
 8005864:	0800588d 	.word	0x0800588d
 8005868:	08005895 	.word	0x08005895
 800586c:	2302      	movs	r3, #2
 800586e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005872:	e01a      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005874:	2304      	movs	r3, #4
 8005876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800587a:	e016      	b.n	80058aa <UART_SetConfig+0x5a2>
 800587c:	2308      	movs	r3, #8
 800587e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005882:	e012      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005884:	2310      	movs	r3, #16
 8005886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800588a:	e00e      	b.n	80058aa <UART_SetConfig+0x5a2>
 800588c:	2320      	movs	r3, #32
 800588e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005892:	e00a      	b.n	80058aa <UART_SetConfig+0x5a2>
 8005894:	2340      	movs	r3, #64	; 0x40
 8005896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800589a:	e006      	b.n	80058aa <UART_SetConfig+0x5a2>
 800589c:	2380      	movs	r3, #128	; 0x80
 800589e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80058a2:	e002      	b.n	80058aa <UART_SetConfig+0x5a2>
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a40      	ldr	r2, [pc, #256]	; (80059b0 <UART_SetConfig+0x6a8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	f040 80ef 	bne.w	8005a94 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	dc46      	bgt.n	800594c <UART_SetConfig+0x644>
 80058be:	2b02      	cmp	r3, #2
 80058c0:	f2c0 8081 	blt.w	80059c6 <UART_SetConfig+0x6be>
 80058c4:	3b02      	subs	r3, #2
 80058c6:	2b1e      	cmp	r3, #30
 80058c8:	d87d      	bhi.n	80059c6 <UART_SetConfig+0x6be>
 80058ca:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0x5c8>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	08005953 	.word	0x08005953
 80058d4:	080059c7 	.word	0x080059c7
 80058d8:	0800595b 	.word	0x0800595b
 80058dc:	080059c7 	.word	0x080059c7
 80058e0:	080059c7 	.word	0x080059c7
 80058e4:	080059c7 	.word	0x080059c7
 80058e8:	0800596b 	.word	0x0800596b
 80058ec:	080059c7 	.word	0x080059c7
 80058f0:	080059c7 	.word	0x080059c7
 80058f4:	080059c7 	.word	0x080059c7
 80058f8:	080059c7 	.word	0x080059c7
 80058fc:	080059c7 	.word	0x080059c7
 8005900:	080059c7 	.word	0x080059c7
 8005904:	080059c7 	.word	0x080059c7
 8005908:	0800597b 	.word	0x0800597b
 800590c:	080059c7 	.word	0x080059c7
 8005910:	080059c7 	.word	0x080059c7
 8005914:	080059c7 	.word	0x080059c7
 8005918:	080059c7 	.word	0x080059c7
 800591c:	080059c7 	.word	0x080059c7
 8005920:	080059c7 	.word	0x080059c7
 8005924:	080059c7 	.word	0x080059c7
 8005928:	080059c7 	.word	0x080059c7
 800592c:	080059c7 	.word	0x080059c7
 8005930:	080059c7 	.word	0x080059c7
 8005934:	080059c7 	.word	0x080059c7
 8005938:	080059c7 	.word	0x080059c7
 800593c:	080059c7 	.word	0x080059c7
 8005940:	080059c7 	.word	0x080059c7
 8005944:	080059c7 	.word	0x080059c7
 8005948:	080059b9 	.word	0x080059b9
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d036      	beq.n	80059be <UART_SetConfig+0x6b6>
 8005950:	e039      	b.n	80059c6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005952:	f7fe fca9 	bl	80042a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005956:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005958:	e03b      	b.n	80059d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595a:	f107 0314 	add.w	r3, r7, #20
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fcb8 	bl	80042d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005968:	e033      	b.n	80059d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fe04 	bl	800457c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005978:	e02b      	b.n	80059d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <UART_SetConfig+0x69c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <UART_SetConfig+0x69c>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	08db      	lsrs	r3, r3, #3
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	4a08      	ldr	r2, [pc, #32]	; (80059b4 <UART_SetConfig+0x6ac>)
 8005992:	fa22 f303 	lsr.w	r3, r2, r3
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005998:	e01b      	b.n	80059d2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <UART_SetConfig+0x6ac>)
 800599c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800599e:	e018      	b.n	80059d2 <UART_SetConfig+0x6ca>
 80059a0:	40011400 	.word	0x40011400
 80059a4:	58024400 	.word	0x58024400
 80059a8:	40007800 	.word	0x40007800
 80059ac:	40007c00 	.word	0x40007c00
 80059b0:	58000c00 	.word	0x58000c00
 80059b4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059b8:	4bc4      	ldr	r3, [pc, #784]	; (8005ccc <UART_SetConfig+0x9c4>)
 80059ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059bc:	e009      	b.n	80059d2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80059c4:	e005      	b.n	80059d2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80059d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 81da 	beq.w	8005d8e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	4abc      	ldr	r2, [pc, #752]	; (8005cd0 <UART_SetConfig+0x9c8>)
 80059e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ec:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	4413      	add	r3, r2
 80059f8:	6a3a      	ldr	r2, [r7, #32]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d305      	bcc.n	8005a0a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a04:	6a3a      	ldr	r2, [r7, #32]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d903      	bls.n	8005a12 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a10:	e1bd      	b.n	8005d8e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a14:	4618      	mov	r0, r3
 8005a16:	f04f 0100 	mov.w	r1, #0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1e:	4aac      	ldr	r2, [pc, #688]	; (8005cd0 <UART_SetConfig+0x9c8>)
 8005a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f7fa fc59 	bl	80002e0 <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4610      	mov	r0, r2
 8005a34:	4619      	mov	r1, r3
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	f04f 0300 	mov.w	r3, #0
 8005a3e:	020b      	lsls	r3, r1, #8
 8005a40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a44:	0202      	lsls	r2, r0, #8
 8005a46:	6879      	ldr	r1, [r7, #4]
 8005a48:	6849      	ldr	r1, [r1, #4]
 8005a4a:	0849      	lsrs	r1, r1, #1
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	f04f 0100 	mov.w	r1, #0
 8005a52:	1814      	adds	r4, r2, r0
 8005a54:	eb43 0501 	adc.w	r5, r3, r1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f04f 0300 	mov.w	r3, #0
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7fa fc3b 	bl	80002e0 <__aeabi_uldivmod>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4613      	mov	r3, r2
 8005a70:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a78:	d308      	bcc.n	8005a8c <UART_SetConfig+0x784>
 8005a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a80:	d204      	bcs.n	8005a8c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a88:	60da      	str	r2, [r3, #12]
 8005a8a:	e180      	b.n	8005d8e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005a92:	e17c      	b.n	8005d8e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	f040 80be 	bne.w	8005c1c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8005aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	dc49      	bgt.n	8005b3c <UART_SetConfig+0x834>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	db7c      	blt.n	8005ba6 <UART_SetConfig+0x89e>
 8005aac:	2b20      	cmp	r3, #32
 8005aae:	d87a      	bhi.n	8005ba6 <UART_SetConfig+0x89e>
 8005ab0:	a201      	add	r2, pc, #4	; (adr r2, 8005ab8 <UART_SetConfig+0x7b0>)
 8005ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab6:	bf00      	nop
 8005ab8:	08005b43 	.word	0x08005b43
 8005abc:	08005b4b 	.word	0x08005b4b
 8005ac0:	08005ba7 	.word	0x08005ba7
 8005ac4:	08005ba7 	.word	0x08005ba7
 8005ac8:	08005b53 	.word	0x08005b53
 8005acc:	08005ba7 	.word	0x08005ba7
 8005ad0:	08005ba7 	.word	0x08005ba7
 8005ad4:	08005ba7 	.word	0x08005ba7
 8005ad8:	08005b63 	.word	0x08005b63
 8005adc:	08005ba7 	.word	0x08005ba7
 8005ae0:	08005ba7 	.word	0x08005ba7
 8005ae4:	08005ba7 	.word	0x08005ba7
 8005ae8:	08005ba7 	.word	0x08005ba7
 8005aec:	08005ba7 	.word	0x08005ba7
 8005af0:	08005ba7 	.word	0x08005ba7
 8005af4:	08005ba7 	.word	0x08005ba7
 8005af8:	08005b73 	.word	0x08005b73
 8005afc:	08005ba7 	.word	0x08005ba7
 8005b00:	08005ba7 	.word	0x08005ba7
 8005b04:	08005ba7 	.word	0x08005ba7
 8005b08:	08005ba7 	.word	0x08005ba7
 8005b0c:	08005ba7 	.word	0x08005ba7
 8005b10:	08005ba7 	.word	0x08005ba7
 8005b14:	08005ba7 	.word	0x08005ba7
 8005b18:	08005ba7 	.word	0x08005ba7
 8005b1c:	08005ba7 	.word	0x08005ba7
 8005b20:	08005ba7 	.word	0x08005ba7
 8005b24:	08005ba7 	.word	0x08005ba7
 8005b28:	08005ba7 	.word	0x08005ba7
 8005b2c:	08005ba7 	.word	0x08005ba7
 8005b30:	08005ba7 	.word	0x08005ba7
 8005b34:	08005ba7 	.word	0x08005ba7
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	2b40      	cmp	r3, #64	; 0x40
 8005b3e:	d02e      	beq.n	8005b9e <UART_SetConfig+0x896>
 8005b40:	e031      	b.n	8005ba6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b42:	f7fd fc03 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8005b46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b48:	e033      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b4a:	f7fd fc15 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8005b4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005b50:	e02f      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b52:	f107 0314 	add.w	r3, r7, #20
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fbbc 	bl	80042d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b60:	e027      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7fe fd08 	bl	800457c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b70:	e01f      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b72:	4b58      	ldr	r3, [pc, #352]	; (8005cd4 <UART_SetConfig+0x9cc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b7e:	4b55      	ldr	r3, [pc, #340]	; (8005cd4 <UART_SetConfig+0x9cc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	08db      	lsrs	r3, r3, #3
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	4a53      	ldr	r2, [pc, #332]	; (8005cd8 <UART_SetConfig+0x9d0>)
 8005b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b90:	e00f      	b.n	8005bb2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005b92:	4b51      	ldr	r3, [pc, #324]	; (8005cd8 <UART_SetConfig+0x9d0>)
 8005b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b96:	e00c      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b98:	4b4c      	ldr	r3, [pc, #304]	; (8005ccc <UART_SetConfig+0x9c4>)
 8005b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 80ea 	beq.w	8005d8e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	4a44      	ldr	r2, [pc, #272]	; (8005cd0 <UART_SetConfig+0x9c8>)
 8005bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d916      	bls.n	8005c14 <UART_SetConfig+0x90c>
 8005be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d212      	bcs.n	8005c14 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c06:	4313      	orrs	r3, r2
 8005c08:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e0bc      	b.n	8005d8e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005c1a:	e0b8      	b.n	8005d8e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005c20:	2b20      	cmp	r3, #32
 8005c22:	dc4b      	bgt.n	8005cbc <UART_SetConfig+0x9b4>
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f2c0 8087 	blt.w	8005d38 <UART_SetConfig+0xa30>
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	f200 8084 	bhi.w	8005d38 <UART_SetConfig+0xa30>
 8005c30:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0x930>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005cc3 	.word	0x08005cc3
 8005c3c:	08005cdd 	.word	0x08005cdd
 8005c40:	08005d39 	.word	0x08005d39
 8005c44:	08005d39 	.word	0x08005d39
 8005c48:	08005ce5 	.word	0x08005ce5
 8005c4c:	08005d39 	.word	0x08005d39
 8005c50:	08005d39 	.word	0x08005d39
 8005c54:	08005d39 	.word	0x08005d39
 8005c58:	08005cf5 	.word	0x08005cf5
 8005c5c:	08005d39 	.word	0x08005d39
 8005c60:	08005d39 	.word	0x08005d39
 8005c64:	08005d39 	.word	0x08005d39
 8005c68:	08005d39 	.word	0x08005d39
 8005c6c:	08005d39 	.word	0x08005d39
 8005c70:	08005d39 	.word	0x08005d39
 8005c74:	08005d39 	.word	0x08005d39
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d39 	.word	0x08005d39
 8005c80:	08005d39 	.word	0x08005d39
 8005c84:	08005d39 	.word	0x08005d39
 8005c88:	08005d39 	.word	0x08005d39
 8005c8c:	08005d39 	.word	0x08005d39
 8005c90:	08005d39 	.word	0x08005d39
 8005c94:	08005d39 	.word	0x08005d39
 8005c98:	08005d39 	.word	0x08005d39
 8005c9c:	08005d39 	.word	0x08005d39
 8005ca0:	08005d39 	.word	0x08005d39
 8005ca4:	08005d39 	.word	0x08005d39
 8005ca8:	08005d39 	.word	0x08005d39
 8005cac:	08005d39 	.word	0x08005d39
 8005cb0:	08005d39 	.word	0x08005d39
 8005cb4:	08005d39 	.word	0x08005d39
 8005cb8:	08005d2b 	.word	0x08005d2b
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d037      	beq.n	8005d30 <UART_SetConfig+0xa28>
 8005cc0:	e03a      	b.n	8005d38 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc2:	f7fd fb43 	bl	800334c <HAL_RCC_GetPCLK1Freq>
 8005cc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005cc8:	e03c      	b.n	8005d44 <UART_SetConfig+0xa3c>
 8005cca:	bf00      	nop
 8005ccc:	003d0900 	.word	0x003d0900
 8005cd0:	080080cc 	.word	0x080080cc
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7fd fb4c 	bl	8003378 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005ce2:	e02f      	b.n	8005d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce4:	f107 0314 	add.w	r3, r7, #20
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe faf3 	bl	80042d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005cf2:	e027      	b.n	8005d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf4:	f107 0308 	add.w	r3, r7, #8
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fe fc3f 	bl	800457c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d02:	e01f      	b.n	8005d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d04:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <UART_SetConfig+0xab0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0320 	and.w	r3, r3, #32
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d10:	4b29      	ldr	r3, [pc, #164]	; (8005db8 <UART_SetConfig+0xab0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	08db      	lsrs	r3, r3, #3
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	4a28      	ldr	r2, [pc, #160]	; (8005dbc <UART_SetConfig+0xab4>)
 8005d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d22:	e00f      	b.n	8005d44 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8005d24:	4b25      	ldr	r3, [pc, #148]	; (8005dbc <UART_SetConfig+0xab4>)
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d28:	e00c      	b.n	8005d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d2a:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <UART_SetConfig+0xab8>)
 8005d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d2e:	e009      	b.n	8005d44 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005d36:	e005      	b.n	8005d44 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005d42:	bf00      	nop
    }

    if (pclk != 0U)
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d021      	beq.n	8005d8e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <UART_SetConfig+0xabc>)
 8005d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d54:	461a      	mov	r2, r3
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	085b      	lsrs	r3, r3, #1
 8005d62:	441a      	add	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	2b0f      	cmp	r3, #15
 8005d72:	d909      	bls.n	8005d88 <UART_SetConfig+0xa80>
 8005d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d7a:	d205      	bcs.n	8005d88 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60da      	str	r2, [r3, #12]
 8005d86:	e002      	b.n	8005d8e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005daa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3738      	adds	r7, #56	; 0x38
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bdb0      	pop	{r4, r5, r7, pc}
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	03d09000 	.word	0x03d09000
 8005dc0:	003d0900 	.word	0x003d0900
 8005dc4:	080080cc 	.word	0x080080cc

08005dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00a      	beq.n	8005df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00a      	beq.n	8005e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00a      	beq.n	8005e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00a      	beq.n	8005e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01a      	beq.n	8005ede <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ec6:	d10a      	bne.n	8005ede <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	605a      	str	r2, [r3, #4]
  }
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f1c:	f7fb f9e8 	bl	80012f0 <HAL_GetTick>
 8005f20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d10e      	bne.n	8005f4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f82f 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e025      	b.n	8005f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d10e      	bne.n	8005f7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f819 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e00f      	b.n	8005f9a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3710      	adds	r7, #16
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b09c      	sub	sp, #112	; 0x70
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb2:	e0a9      	b.n	8006108 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fba:	f000 80a5 	beq.w	8006108 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbe:	f7fb f997 	bl	80012f0 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d302      	bcc.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d140      	bne.n	8006056 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005fe8:	667b      	str	r3, [r7, #100]	; 0x64
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ff2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ff4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ff8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e6      	bne.n	8005fd4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	e853 3f00 	ldrex	r3, [r3]
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	663b      	str	r3, [r7, #96]	; 0x60
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006026:	64ba      	str	r2, [r7, #72]	; 0x48
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800602c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800602e:	e841 2300 	strex	r3, r2, [r1]
 8006032:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1e5      	bne.n	8006006 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2220      	movs	r2, #32
 8006046:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006052:	2303      	movs	r3, #3
 8006054:	e069      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0304 	and.w	r3, r3, #4
 8006060:	2b00      	cmp	r3, #0
 8006062:	d051      	beq.n	8006108 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800606e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006072:	d149      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800607c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006092:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800609c:	637b      	str	r3, [r7, #52]	; 0x34
 800609e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060d0:	623a      	str	r2, [r7, #32]
 80060d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d4:	69f9      	ldr	r1, [r7, #28]
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	e841 2300 	strex	r3, r2, [r1]
 80060dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1e5      	bne.n	80060b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e010      	b.n	800612a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	69da      	ldr	r2, [r3, #28]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	4013      	ands	r3, r2
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	429a      	cmp	r2, r3
 8006116:	bf0c      	ite	eq
 8006118:	2301      	moveq	r3, #1
 800611a:	2300      	movne	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	461a      	mov	r2, r3
 8006120:	79fb      	ldrb	r3, [r7, #7]
 8006122:	429a      	cmp	r2, r3
 8006124:	f43f af46 	beq.w	8005fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3770      	adds	r7, #112	; 0x70
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}

08006132 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_UARTEx_DisableFifoMode+0x16>
 8006144:	2302      	movs	r3, #2
 8006146:	e027      	b.n	8006198 <HAL_UARTEx_DisableFifoMode+0x66>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0201 	bic.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006176:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2220      	movs	r2, #32
 800618a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e02d      	b.n	8006218 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2224      	movs	r2, #36	; 0x24
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f84f 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2220      	movs	r2, #32
 800620a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006234:	2302      	movs	r3, #2
 8006236:	e02d      	b.n	8006294 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2224      	movs	r2, #36	; 0x24
 8006244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f022 0201 	bic.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 f811 	bl	800629c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062bc:	e031      	b.n	8006322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062be:	2310      	movs	r3, #16
 80062c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062c2:	2310      	movs	r3, #16
 80062c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	0e5b      	lsrs	r3, r3, #25
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	0f5b      	lsrs	r3, r3, #29
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062e6:	7bbb      	ldrb	r3, [r7, #14]
 80062e8:	7b3a      	ldrb	r2, [r7, #12]
 80062ea:	4911      	ldr	r1, [pc, #68]	; (8006330 <UARTEx_SetNbDataToProcess+0x94>)
 80062ec:	5c8a      	ldrb	r2, [r1, r2]
 80062ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062f2:	7b3a      	ldrb	r2, [r7, #12]
 80062f4:	490f      	ldr	r1, [pc, #60]	; (8006334 <UARTEx_SetNbDataToProcess+0x98>)
 80062f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	7b7a      	ldrb	r2, [r7, #13]
 8006308:	4909      	ldr	r1, [pc, #36]	; (8006330 <UARTEx_SetNbDataToProcess+0x94>)
 800630a:	5c8a      	ldrb	r2, [r1, r2]
 800630c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006310:	7b7a      	ldrb	r2, [r7, #13]
 8006312:	4908      	ldr	r1, [pc, #32]	; (8006334 <UARTEx_SetNbDataToProcess+0x98>)
 8006314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006316:	fb93 f3f2 	sdiv	r3, r3, r2
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	080080e4 	.word	0x080080e4
 8006334:	080080ec 	.word	0x080080ec

08006338 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006338:	b084      	sub	sp, #16
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	f107 001c 	add.w	r0, r7, #28
 8006346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	2b01      	cmp	r3, #1
 800634e:	d120      	bne.n	8006392 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006354:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68da      	ldr	r2, [r3, #12]
 8006360:	4b2a      	ldr	r3, [pc, #168]	; (800640c <USB_CoreInit+0xd4>)
 8006362:	4013      	ands	r3, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006376:	2b01      	cmp	r3, #1
 8006378:	d105      	bne.n	8006386 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	68db      	ldr	r3, [r3, #12]
 800637e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 faa8 	bl	80068dc <USB_CoreReset>
 800638c:	4603      	mov	r3, r0
 800638e:	73fb      	strb	r3, [r7, #15]
 8006390:	e01a      	b.n	80063c8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa9c 	bl	80068dc <USB_CoreReset>
 80063a4:	4603      	mov	r3, r0
 80063a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	639a      	str	r2, [r3, #56]	; 0x38
 80063ba:	e005      	b.n	80063c8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d116      	bne.n	80063fc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80063dc:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <USB_CoreInit+0xd8>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f043 0206 	orr.w	r2, r3, #6
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f043 0220 	orr.w	r2, r3, #32
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006408:	b004      	add	sp, #16
 800640a:	4770      	bx	lr
 800640c:	ffbdffbf 	.word	0xffbdffbf
 8006410:	03ee0000 	.word	0x03ee0000

08006414 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f023 0201 	bic.w	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006452:	78fb      	ldrb	r3, [r7, #3]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d115      	bne.n	8006484 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006464:	2001      	movs	r0, #1
 8006466:	f7fa ff4f 	bl	8001308 <HAL_Delay>
      ms++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fa25 	bl	80068c0 <USB_GetMode>
 8006476:	4603      	mov	r3, r0
 8006478:	2b01      	cmp	r3, #1
 800647a:	d01e      	beq.n	80064ba <USB_SetCurrentMode+0x84>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b31      	cmp	r3, #49	; 0x31
 8006480:	d9f0      	bls.n	8006464 <USB_SetCurrentMode+0x2e>
 8006482:	e01a      	b.n	80064ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006484:	78fb      	ldrb	r3, [r7, #3]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d115      	bne.n	80064b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006496:	2001      	movs	r0, #1
 8006498:	f7fa ff36 	bl	8001308 <HAL_Delay>
      ms++;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	3301      	adds	r3, #1
 80064a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fa0c 	bl	80068c0 <USB_GetMode>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d005      	beq.n	80064ba <USB_SetCurrentMode+0x84>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b31      	cmp	r3, #49	; 0x31
 80064b2:	d9f0      	bls.n	8006496 <USB_SetCurrentMode+0x60>
 80064b4:	e001      	b.n	80064ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e005      	b.n	80064c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b32      	cmp	r3, #50	; 0x32
 80064be:	d101      	bne.n	80064c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e000      	b.n	80064c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
	...

080064d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d0:	b084      	sub	sp, #16
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80064de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064ea:	2300      	movs	r3, #0
 80064ec:	613b      	str	r3, [r7, #16]
 80064ee:	e009      	b.n	8006504 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	3340      	adds	r3, #64	; 0x40
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3301      	adds	r3, #1
 8006502:	613b      	str	r3, [r7, #16]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	2b0e      	cmp	r3, #14
 8006508:	d9f2      	bls.n	80064f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11c      	bne.n	800654a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800651e:	f043 0302 	orr.w	r3, r3, #2
 8006522:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	601a      	str	r2, [r3, #0]
 8006548:	e005      	b.n	8006556 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800655c:	461a      	mov	r2, r3
 800655e:	2300      	movs	r3, #0
 8006560:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006568:	4619      	mov	r1, r3
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006570:	461a      	mov	r2, r3
 8006572:	680b      	ldr	r3, [r1, #0]
 8006574:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006578:	2b01      	cmp	r3, #1
 800657a:	d10c      	bne.n	8006596 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d104      	bne.n	800658c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006582:	2100      	movs	r1, #0
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 f961 	bl	800684c <USB_SetDevSpeed>
 800658a:	e008      	b.n	800659e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800658c:	2101      	movs	r1, #1
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f95c 	bl	800684c <USB_SetDevSpeed>
 8006594:	e003      	b.n	800659e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006596:	2103      	movs	r1, #3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f957 	bl	800684c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800659e:	2110      	movs	r1, #16
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8f3 	bl	800678c <USB_FlushTxFifo>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f91d 	bl	80067f0 <USB_FlushRxFifo>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c6:	461a      	mov	r2, r3
 80065c8:	2300      	movs	r3, #0
 80065ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	461a      	mov	r2, r3
 80065d4:	2300      	movs	r3, #0
 80065d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065de:	461a      	mov	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e043      	b.n	8006672 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006600:	d118      	bne.n	8006634 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	461a      	mov	r2, r3
 8006616:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	e013      	b.n	8006646 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	015a      	lsls	r2, r3, #5
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4413      	add	r3, r2
 8006626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662a:	461a      	mov	r2, r3
 800662c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e008      	b.n	8006646 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006640:	461a      	mov	r2, r3
 8006642:	2300      	movs	r3, #0
 8006644:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	461a      	mov	r2, r3
 8006654:	2300      	movs	r3, #0
 8006656:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006664:	461a      	mov	r2, r3
 8006666:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800666a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	3301      	adds	r3, #1
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	429a      	cmp	r2, r3
 8006678:	d3b7      	bcc.n	80065ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
 800667e:	e043      	b.n	8006708 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006696:	d118      	bne.n	80066ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10a      	bne.n	80066b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066aa:	461a      	mov	r2, r3
 80066ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	e013      	b.n	80066dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c0:	461a      	mov	r2, r3
 80066c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	e008      	b.n	80066dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	015a      	lsls	r2, r3, #5
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	4413      	add	r3, r2
 80066d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d6:	461a      	mov	r2, r3
 80066d8:	2300      	movs	r3, #0
 80066da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	461a      	mov	r2, r3
 80066fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006700:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3301      	adds	r3, #1
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d3b7      	bcc.n	8006680 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006722:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006730:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	2b00      	cmp	r3, #0
 8006736:	d105      	bne.n	8006744 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f043 0210 	orr.w	r2, r3, #16
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699a      	ldr	r2, [r3, #24]
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <USB_DevInit+0x2b4>)
 800674a:	4313      	orrs	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006764:	2b01      	cmp	r3, #1
 8006766:	d105      	bne.n	8006774 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699a      	ldr	r2, [r3, #24]
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <USB_DevInit+0x2b8>)
 800676e:	4313      	orrs	r3, r2
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006774:	7dfb      	ldrb	r3, [r7, #23]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3718      	adds	r7, #24
 800677a:	46bd      	mov	sp, r7
 800677c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006780:	b004      	add	sp, #16
 8006782:	4770      	bx	lr
 8006784:	803c3800 	.word	0x803c3800
 8006788:	40000004 	.word	0x40000004

0800678c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	4a12      	ldr	r2, [pc, #72]	; (80067ec <USB_FlushTxFifo+0x60>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d901      	bls.n	80067aa <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e01a      	b.n	80067e0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	daf3      	bge.n	800679a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	019b      	lsls	r3, r3, #6
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3301      	adds	r3, #1
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	4a08      	ldr	r2, [pc, #32]	; (80067ec <USB_FlushTxFifo+0x60>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d901      	bls.n	80067d2 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e006      	b.n	80067e0 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d0f1      	beq.n	80067c2 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	00030d40 	.word	0x00030d40

080067f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	4a11      	ldr	r2, [pc, #68]	; (8006848 <USB_FlushRxFifo+0x58>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d901      	bls.n	800680c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e017      	b.n	800683c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	daf3      	bge.n	80067fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2210      	movs	r2, #16
 800681c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	3301      	adds	r3, #1
 8006822:	60fb      	str	r3, [r7, #12]
 8006824:	4a08      	ldr	r2, [pc, #32]	; (8006848 <USB_FlushRxFifo+0x58>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d901      	bls.n	800682e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e006      	b.n	800683c <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b10      	cmp	r3, #16
 8006838:	d0f1      	beq.n	800681e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	00030d40 	.word	0x00030d40

0800684c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006898:	f023 0303 	bic.w	r3, r3, #3
 800689c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	f003 0301 	and.w	r3, r3, #1
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	4a13      	ldr	r2, [pc, #76]	; (800693c <USB_CoreReset+0x60>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d901      	bls.n	80068f8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e01a      	b.n	800692e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	daf3      	bge.n	80068e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3301      	adds	r3, #1
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4a09      	ldr	r2, [pc, #36]	; (800693c <USB_CoreReset+0x60>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d901      	bls.n	8006920 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e006      	b.n	800692e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d0f1      	beq.n	8006910 <USB_CoreReset+0x34>

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	00030d40 	.word	0x00030d40

08006940 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800694e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006952:	2b84      	cmp	r3, #132	; 0x84
 8006954:	d005      	beq.n	8006962 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006956:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4413      	add	r3, r2
 800695e:	3303      	adds	r3, #3
 8006960:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006962:	68fb      	ldr	r3, [r7, #12]
}
 8006964:	4618      	mov	r0, r3
 8006966:	3714      	adds	r7, #20
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006974:	f000 faf6 	bl	8006f64 <vTaskStartScheduler>
  
  return osOK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	bd80      	pop	{r7, pc}

0800697e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800697e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006980:	b089      	sub	sp, #36	; 0x24
 8006982:	af04      	add	r7, sp, #16
 8006984:	6078      	str	r0, [r7, #4]
 8006986:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d020      	beq.n	80069d2 <osThreadCreate+0x54>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01c      	beq.n	80069d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685c      	ldr	r4, [r3, #4]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681d      	ldr	r5, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691e      	ldr	r6, [r3, #16]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff ffc8 	bl	8006940 <makeFreeRtosPriority>
 80069b0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069ba:	9202      	str	r2, [sp, #8]
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	9100      	str	r1, [sp, #0]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	4632      	mov	r2, r6
 80069c4:	4629      	mov	r1, r5
 80069c6:	4620      	mov	r0, r4
 80069c8:	f000 f8ed 	bl	8006ba6 <xTaskCreateStatic>
 80069cc:	4603      	mov	r3, r0
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	e01c      	b.n	8006a0c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685c      	ldr	r4, [r3, #4]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80069de:	b29e      	uxth	r6, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff ffaa 	bl	8006940 <makeFreeRtosPriority>
 80069ec:	4602      	mov	r2, r0
 80069ee:	f107 030c 	add.w	r3, r7, #12
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	9200      	str	r2, [sp, #0]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	4632      	mov	r2, r6
 80069fa:	4629      	mov	r1, r5
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 f92f 	bl	8006c60 <xTaskCreate>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d001      	beq.n	8006a0c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e000      	b.n	8006a0e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3714      	adds	r7, #20
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a16 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d001      	beq.n	8006a2c <osDelay+0x16>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	e000      	b.n	8006a2e <osDelay+0x18>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 fa64 	bl	8006efc <vTaskDelay>
  
  return osOK;
 8006a34:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f103 0208 	add.w	r2, r3, #8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a56:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f103 0208 	add.w	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f103 0208 	add.w	r2, r3, #8
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	601a      	str	r2, [r3, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006af6:	d103      	bne.n	8006b00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	e00c      	b.n	8006b1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3308      	adds	r3, #8
 8006b04:	60fb      	str	r3, [r7, #12]
 8006b06:	e002      	b.n	8006b0e <vListInsert+0x2e>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d2f6      	bcs.n	8006b08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	601a      	str	r2, [r3, #0]
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b52:	b480      	push	{r7}
 8006b54:	b085      	sub	sp, #20
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6892      	ldr	r2, [r2, #8]
 8006b68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6852      	ldr	r2, [r2, #4]
 8006b72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d103      	bne.n	8006b86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	1e5a      	subs	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b08e      	sub	sp, #56	; 0x38
 8006baa:	af04      	add	r7, sp, #16
 8006bac:	60f8      	str	r0, [r7, #12]
 8006bae:	60b9      	str	r1, [r7, #8]
 8006bb0:	607a      	str	r2, [r7, #4]
 8006bb2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10a      	bne.n	8006bd0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bbe:	f383 8811 	msr	BASEPRI, r3
 8006bc2:	f3bf 8f6f 	isb	sy
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006bcc:	bf00      	nop
 8006bce:	e7fe      	b.n	8006bce <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10a      	bne.n	8006bec <xTaskCreateStatic+0x46>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	61fb      	str	r3, [r7, #28]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006bec:	23b4      	movs	r3, #180	; 0xb4
 8006bee:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2bb4      	cmp	r3, #180	; 0xb4
 8006bf4:	d00a      	beq.n	8006c0c <xTaskCreateStatic+0x66>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	61bb      	str	r3, [r7, #24]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01e      	beq.n	8006c52 <xTaskCreateStatic+0xac>
 8006c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d01b      	beq.n	8006c52 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c22:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	9303      	str	r3, [sp, #12]
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	9302      	str	r3, [sp, #8]
 8006c34:	f107 0314 	add.w	r3, r7, #20
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	68b9      	ldr	r1, [r7, #8]
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f851 	bl	8006cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c4c:	f000 f8ec 	bl	8006e28 <prvAddNewTaskToReadyList>
 8006c50:	e001      	b.n	8006c56 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c52:	2300      	movs	r3, #0
 8006c54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c56:	697b      	ldr	r3, [r7, #20]
	}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3728      	adds	r7, #40	; 0x28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08c      	sub	sp, #48	; 0x30
 8006c64:	af04      	add	r7, sp, #16
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	603b      	str	r3, [r7, #0]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c70:	88fb      	ldrh	r3, [r7, #6]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f000 feef 	bl	8007a58 <pvPortMalloc>
 8006c7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00e      	beq.n	8006ca0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c82:	20b4      	movs	r0, #180	; 0xb4
 8006c84:	f000 fee8 	bl	8007a58 <pvPortMalloc>
 8006c88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
 8006c96:	e005      	b.n	8006ca4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c98:	6978      	ldr	r0, [r7, #20]
 8006c9a:	f000 ffa9 	bl	8007bf0 <vPortFree>
 8006c9e:	e001      	b.n	8006ca4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d017      	beq.n	8006cda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9303      	str	r3, [sp, #12]
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	9302      	str	r3, [sp, #8]
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 f80f 	bl	8006cec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cce:	69f8      	ldr	r0, [r7, #28]
 8006cd0:	f000 f8aa 	bl	8006e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	e002      	b.n	8006ce0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cde:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ce0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3720      	adds	r7, #32
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
	...

08006cec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b088      	sub	sp, #32
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006d04:	440b      	add	r3, r1
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f023 0307 	bic.w	r3, r3, #7
 8006d12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	617b      	str	r3, [r7, #20]
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d01f      	beq.n	8006d7a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	e012      	b.n	8006d66 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	4413      	add	r3, r2
 8006d46:	7819      	ldrb	r1, [r3, #0]
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3334      	adds	r3, #52	; 0x34
 8006d50:	460a      	mov	r2, r1
 8006d52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	4413      	add	r3, r2
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d006      	beq.n	8006d6e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	3301      	adds	r3, #1
 8006d64:	61fb      	str	r3, [r7, #28]
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	2b0f      	cmp	r3, #15
 8006d6a:	d9e9      	bls.n	8006d40 <prvInitialiseNewTask+0x54>
 8006d6c:	e000      	b.n	8006d70 <prvInitialiseNewTask+0x84>
			{
				break;
 8006d6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d78:	e003      	b.n	8006d82 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	2b06      	cmp	r3, #6
 8006d86:	d901      	bls.n	8006d8c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006d88:	2306      	movs	r3, #6
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	3304      	adds	r3, #4
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff fe6b 	bl	8006a7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	3318      	adds	r3, #24
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fe66 	bl	8006a7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dba:	f1c3 0207 	rsb	r2, r3, #7
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	334c      	adds	r3, #76	; 0x4c
 8006ddc:	2260      	movs	r2, #96	; 0x60
 8006dde:	2100      	movs	r1, #0
 8006de0:	4618      	mov	r0, r3
 8006de2:	f001 f849 	bl	8007e78 <memset>
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <prvInitialiseNewTask+0x130>)
 8006dea:	651a      	str	r2, [r3, #80]	; 0x50
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <prvInitialiseNewTask+0x134>)
 8006df0:	655a      	str	r2, [r3, #84]	; 0x54
 8006df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df4:	4a0b      	ldr	r2, [pc, #44]	; (8006e24 <prvInitialiseNewTask+0x138>)
 8006df6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	69b8      	ldr	r0, [r7, #24]
 8006dfe:	f000 fc1f 	bl	8007640 <pxPortInitialiseStack>
 8006e02:	4602      	mov	r2, r0
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e14:	bf00      	nop
 8006e16:	3720      	adds	r7, #32
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	08008114 	.word	0x08008114
 8006e20:	08008134 	.word	0x08008134
 8006e24:	080080f4 	.word	0x080080f4

08006e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e30:	f000 fd30 	bl	8007894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e34:	4b2a      	ldr	r3, [pc, #168]	; (8006ee0 <prvAddNewTaskToReadyList+0xb8>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	4a29      	ldr	r2, [pc, #164]	; (8006ee0 <prvAddNewTaskToReadyList+0xb8>)
 8006e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e3e:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d109      	bne.n	8006e5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e46:	4a27      	ldr	r2, [pc, #156]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e4c:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <prvAddNewTaskToReadyList+0xb8>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d110      	bne.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e54:	f000 facc 	bl	80073f0 <prvInitialiseTaskLists>
 8006e58:	e00d      	b.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e5a:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <prvAddNewTaskToReadyList+0xc0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e62:	4b20      	ldr	r3, [pc, #128]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d802      	bhi.n	8006e76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e70:	4a1c      	ldr	r2, [pc, #112]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e76:	4b1d      	ldr	r3, [pc, #116]	; (8006eec <prvAddNewTaskToReadyList+0xc4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	4a1b      	ldr	r2, [pc, #108]	; (8006eec <prvAddNewTaskToReadyList+0xc4>)
 8006e7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e84:	2201      	movs	r2, #1
 8006e86:	409a      	lsls	r2, r3
 8006e88:	4b19      	ldr	r3, [pc, #100]	; (8006ef0 <prvAddNewTaskToReadyList+0xc8>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	4a18      	ldr	r2, [pc, #96]	; (8006ef0 <prvAddNewTaskToReadyList+0xc8>)
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e96:	4613      	mov	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4413      	add	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <prvAddNewTaskToReadyList+0xcc>)
 8006ea0:	441a      	add	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f7ff fdf5 	bl	8006a98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006eae:	f000 fd21 	bl	80078f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <prvAddNewTaskToReadyList+0xc0>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00e      	beq.n	8006ed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006eba:	4b0a      	ldr	r3, [pc, #40]	; (8006ee4 <prvAddNewTaskToReadyList+0xbc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d207      	bcs.n	8006ed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ec8:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <prvAddNewTaskToReadyList+0xd0>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	24000510 	.word	0x24000510
 8006ee4:	24000410 	.word	0x24000410
 8006ee8:	2400051c 	.word	0x2400051c
 8006eec:	2400052c 	.word	0x2400052c
 8006ef0:	24000518 	.word	0x24000518
 8006ef4:	24000414 	.word	0x24000414
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d017      	beq.n	8006f3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <vTaskDelay+0x60>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <vTaskDelay+0x30>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60bb      	str	r3, [r7, #8]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f2c:	f000 f884 	bl	8007038 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f30:	2100      	movs	r1, #0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fb1e 	bl	8007574 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f38:	f000 f88c 	bl	8007054 <xTaskResumeAll>
 8006f3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <vTaskDelay+0x64>)
 8006f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f54:	bf00      	nop
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	24000538 	.word	0x24000538
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08a      	sub	sp, #40	; 0x28
 8006f68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f72:	463a      	mov	r2, r7
 8006f74:	1d39      	adds	r1, r7, #4
 8006f76:	f107 0308 	add.w	r3, r7, #8
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7f9 fb2c 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f80:	6839      	ldr	r1, [r7, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	9202      	str	r2, [sp, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	460a      	mov	r2, r1
 8006f92:	4921      	ldr	r1, [pc, #132]	; (8007018 <vTaskStartScheduler+0xb4>)
 8006f94:	4821      	ldr	r0, [pc, #132]	; (800701c <vTaskStartScheduler+0xb8>)
 8006f96:	f7ff fe06 	bl	8006ba6 <xTaskCreateStatic>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4a20      	ldr	r2, [pc, #128]	; (8007020 <vTaskStartScheduler+0xbc>)
 8006f9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fa0:	4b1f      	ldr	r3, [pc, #124]	; (8007020 <vTaskStartScheduler+0xbc>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e001      	b.n	8006fb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d11b      	bne.n	8006ff0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	613b      	str	r3, [r7, #16]
}
 8006fca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006fcc:	4b15      	ldr	r3, [pc, #84]	; (8007024 <vTaskStartScheduler+0xc0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	334c      	adds	r3, #76	; 0x4c
 8006fd2:	4a15      	ldr	r2, [pc, #84]	; (8007028 <vTaskStartScheduler+0xc4>)
 8006fd4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fd6:	4b15      	ldr	r3, [pc, #84]	; (800702c <vTaskStartScheduler+0xc8>)
 8006fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fdc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <vTaskStartScheduler+0xcc>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fe4:	4b13      	ldr	r3, [pc, #76]	; (8007034 <vTaskStartScheduler+0xd0>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006fea:	f000 fbb1 	bl	8007750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006fee:	e00e      	b.n	800700e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ff6:	d10a      	bne.n	800700e <vTaskStartScheduler+0xaa>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <vTaskStartScheduler+0xa8>
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	080080b4 	.word	0x080080b4
 800701c:	080073c1 	.word	0x080073c1
 8007020:	24000534 	.word	0x24000534
 8007024:	24000410 	.word	0x24000410
 8007028:	24000014 	.word	0x24000014
 800702c:	24000530 	.word	0x24000530
 8007030:	2400051c 	.word	0x2400051c
 8007034:	24000514 	.word	0x24000514

08007038 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007038:	b480      	push	{r7}
 800703a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800703c:	4b04      	ldr	r3, [pc, #16]	; (8007050 <vTaskSuspendAll+0x18>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3301      	adds	r3, #1
 8007042:	4a03      	ldr	r2, [pc, #12]	; (8007050 <vTaskSuspendAll+0x18>)
 8007044:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007046:	bf00      	nop
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	24000538 	.word	0x24000538

08007054 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007062:	4b41      	ldr	r3, [pc, #260]	; (8007168 <xTaskResumeAll+0x114>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <xTaskResumeAll+0x2c>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	603b      	str	r3, [r7, #0]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007080:	f000 fc08 	bl	8007894 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007084:	4b38      	ldr	r3, [pc, #224]	; (8007168 <xTaskResumeAll+0x114>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3b01      	subs	r3, #1
 800708a:	4a37      	ldr	r2, [pc, #220]	; (8007168 <xTaskResumeAll+0x114>)
 800708c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708e:	4b36      	ldr	r3, [pc, #216]	; (8007168 <xTaskResumeAll+0x114>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d161      	bne.n	800715a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007096:	4b35      	ldr	r3, [pc, #212]	; (800716c <xTaskResumeAll+0x118>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d05d      	beq.n	800715a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800709e:	e02e      	b.n	80070fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a0:	4b33      	ldr	r3, [pc, #204]	; (8007170 <xTaskResumeAll+0x11c>)
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3318      	adds	r3, #24
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7ff fd50 	bl	8006b52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7ff fd4b 	bl	8006b52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c0:	2201      	movs	r2, #1
 80070c2:	409a      	lsls	r2, r3
 80070c4:	4b2b      	ldr	r3, [pc, #172]	; (8007174 <xTaskResumeAll+0x120>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	4a2a      	ldr	r2, [pc, #168]	; (8007174 <xTaskResumeAll+0x120>)
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d2:	4613      	mov	r3, r2
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4a27      	ldr	r2, [pc, #156]	; (8007178 <xTaskResumeAll+0x124>)
 80070dc:	441a      	add	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	3304      	adds	r3, #4
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f7ff fcd7 	bl	8006a98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ee:	4b23      	ldr	r3, [pc, #140]	; (800717c <xTaskResumeAll+0x128>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d302      	bcc.n	80070fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80070f8:	4b21      	ldr	r3, [pc, #132]	; (8007180 <xTaskResumeAll+0x12c>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070fe:	4b1c      	ldr	r3, [pc, #112]	; (8007170 <xTaskResumeAll+0x11c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1cc      	bne.n	80070a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d001      	beq.n	8007110 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800710c:	f000 fa12 	bl	8007534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007110:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <xTaskResumeAll+0x130>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800711c:	f000 f836 	bl	800718c <xTaskIncrementTick>
 8007120:	4603      	mov	r3, r0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007126:	4b16      	ldr	r3, [pc, #88]	; (8007180 <xTaskResumeAll+0x12c>)
 8007128:	2201      	movs	r2, #1
 800712a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3b01      	subs	r3, #1
 8007130:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f1      	bne.n	800711c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007138:	4b12      	ldr	r3, [pc, #72]	; (8007184 <xTaskResumeAll+0x130>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800713e:	4b10      	ldr	r3, [pc, #64]	; (8007180 <xTaskResumeAll+0x12c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007146:	2301      	movs	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800714a:	4b0f      	ldr	r3, [pc, #60]	; (8007188 <xTaskResumeAll+0x134>)
 800714c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007150:	601a      	str	r2, [r3, #0]
 8007152:	f3bf 8f4f 	dsb	sy
 8007156:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800715a:	f000 fbcb 	bl	80078f4 <vPortExitCritical>

	return xAlreadyYielded;
 800715e:	68bb      	ldr	r3, [r7, #8]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	24000538 	.word	0x24000538
 800716c:	24000510 	.word	0x24000510
 8007170:	240004d0 	.word	0x240004d0
 8007174:	24000518 	.word	0x24000518
 8007178:	24000414 	.word	0x24000414
 800717c:	24000410 	.word	0x24000410
 8007180:	24000524 	.word	0x24000524
 8007184:	24000520 	.word	0x24000520
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007196:	4b4e      	ldr	r3, [pc, #312]	; (80072d0 <xTaskIncrementTick+0x144>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f040 808e 	bne.w	80072bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071a0:	4b4c      	ldr	r3, [pc, #304]	; (80072d4 <xTaskIncrementTick+0x148>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3301      	adds	r3, #1
 80071a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071a8:	4a4a      	ldr	r2, [pc, #296]	; (80072d4 <xTaskIncrementTick+0x148>)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d120      	bne.n	80071f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80071b4:	4b48      	ldr	r3, [pc, #288]	; (80072d8 <xTaskIncrementTick+0x14c>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00a      	beq.n	80071d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	603b      	str	r3, [r7, #0]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <xTaskIncrementTick+0x46>
 80071d4:	4b40      	ldr	r3, [pc, #256]	; (80072d8 <xTaskIncrementTick+0x14c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	4b40      	ldr	r3, [pc, #256]	; (80072dc <xTaskIncrementTick+0x150>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a3e      	ldr	r2, [pc, #248]	; (80072d8 <xTaskIncrementTick+0x14c>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	4a3e      	ldr	r2, [pc, #248]	; (80072dc <xTaskIncrementTick+0x150>)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4b3d      	ldr	r3, [pc, #244]	; (80072e0 <xTaskIncrementTick+0x154>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3301      	adds	r3, #1
 80071ee:	4a3c      	ldr	r2, [pc, #240]	; (80072e0 <xTaskIncrementTick+0x154>)
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	f000 f99f 	bl	8007534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071f6:	4b3b      	ldr	r3, [pc, #236]	; (80072e4 <xTaskIncrementTick+0x158>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d348      	bcc.n	8007292 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007200:	4b35      	ldr	r3, [pc, #212]	; (80072d8 <xTaskIncrementTick+0x14c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720a:	4b36      	ldr	r3, [pc, #216]	; (80072e4 <xTaskIncrementTick+0x158>)
 800720c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007210:	601a      	str	r2, [r3, #0]
					break;
 8007212:	e03e      	b.n	8007292 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007214:	4b30      	ldr	r3, [pc, #192]	; (80072d8 <xTaskIncrementTick+0x14c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	429a      	cmp	r2, r3
 800722a:	d203      	bcs.n	8007234 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800722c:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <xTaskIncrementTick+0x158>)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007232:	e02e      	b.n	8007292 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	3304      	adds	r3, #4
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fc8a 	bl	8006b52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007242:	2b00      	cmp	r3, #0
 8007244:	d004      	beq.n	8007250 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	3318      	adds	r3, #24
 800724a:	4618      	mov	r0, r3
 800724c:	f7ff fc81 	bl	8006b52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	2201      	movs	r2, #1
 8007256:	409a      	lsls	r2, r3
 8007258:	4b23      	ldr	r3, [pc, #140]	; (80072e8 <xTaskIncrementTick+0x15c>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4313      	orrs	r3, r2
 800725e:	4a22      	ldr	r2, [pc, #136]	; (80072e8 <xTaskIncrementTick+0x15c>)
 8007260:	6013      	str	r3, [r2, #0]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a1f      	ldr	r2, [pc, #124]	; (80072ec <xTaskIncrementTick+0x160>)
 8007270:	441a      	add	r2, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	3304      	adds	r3, #4
 8007276:	4619      	mov	r1, r3
 8007278:	4610      	mov	r0, r2
 800727a:	f7ff fc0d 	bl	8006a98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007282:	4b1b      	ldr	r3, [pc, #108]	; (80072f0 <xTaskIncrementTick+0x164>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	429a      	cmp	r2, r3
 800728a:	d3b9      	bcc.n	8007200 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007290:	e7b6      	b.n	8007200 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007292:	4b17      	ldr	r3, [pc, #92]	; (80072f0 <xTaskIncrementTick+0x164>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	4914      	ldr	r1, [pc, #80]	; (80072ec <xTaskIncrementTick+0x160>)
 800729a:	4613      	mov	r3, r2
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	4413      	add	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	440b      	add	r3, r1
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d901      	bls.n	80072ae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80072aa:	2301      	movs	r3, #1
 80072ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072ae:	4b11      	ldr	r3, [pc, #68]	; (80072f4 <xTaskIncrementTick+0x168>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80072b6:	2301      	movs	r3, #1
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e004      	b.n	80072c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <xTaskIncrementTick+0x16c>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	4a0d      	ldr	r2, [pc, #52]	; (80072f8 <xTaskIncrementTick+0x16c>)
 80072c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072c6:	697b      	ldr	r3, [r7, #20]
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3718      	adds	r7, #24
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	24000538 	.word	0x24000538
 80072d4:	24000514 	.word	0x24000514
 80072d8:	240004c8 	.word	0x240004c8
 80072dc:	240004cc 	.word	0x240004cc
 80072e0:	24000528 	.word	0x24000528
 80072e4:	24000530 	.word	0x24000530
 80072e8:	24000518 	.word	0x24000518
 80072ec:	24000414 	.word	0x24000414
 80072f0:	24000410 	.word	0x24000410
 80072f4:	24000524 	.word	0x24000524
 80072f8:	24000520 	.word	0x24000520

080072fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007302:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <vTaskSwitchContext+0xac>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800730a:	4b28      	ldr	r3, [pc, #160]	; (80073ac <vTaskSwitchContext+0xb0>)
 800730c:	2201      	movs	r2, #1
 800730e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007310:	e044      	b.n	800739c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007312:	4b26      	ldr	r3, [pc, #152]	; (80073ac <vTaskSwitchContext+0xb0>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007318:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <vTaskSwitchContext+0xb4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	fab3 f383 	clz	r3, r3
 8007324:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	f1c3 031f 	rsb	r3, r3, #31
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	4921      	ldr	r1, [pc, #132]	; (80073b4 <vTaskSwitchContext+0xb8>)
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	440b      	add	r3, r1
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10a      	bne.n	8007358 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007346:	f383 8811 	msr	BASEPRI, r3
 800734a:	f3bf 8f6f 	isb	sy
 800734e:	f3bf 8f4f 	dsb	sy
 8007352:	607b      	str	r3, [r7, #4]
}
 8007354:	bf00      	nop
 8007356:	e7fe      	b.n	8007356 <vTaskSwitchContext+0x5a>
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	4613      	mov	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	4413      	add	r3, r2
 8007360:	009b      	lsls	r3, r3, #2
 8007362:	4a14      	ldr	r2, [pc, #80]	; (80073b4 <vTaskSwitchContext+0xb8>)
 8007364:	4413      	add	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	605a      	str	r2, [r3, #4]
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3308      	adds	r3, #8
 800737a:	429a      	cmp	r2, r3
 800737c:	d104      	bne.n	8007388 <vTaskSwitchContext+0x8c>
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	605a      	str	r2, [r3, #4]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	4a0a      	ldr	r2, [pc, #40]	; (80073b8 <vTaskSwitchContext+0xbc>)
 8007390:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007392:	4b09      	ldr	r3, [pc, #36]	; (80073b8 <vTaskSwitchContext+0xbc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	334c      	adds	r3, #76	; 0x4c
 8007398:	4a08      	ldr	r2, [pc, #32]	; (80073bc <vTaskSwitchContext+0xc0>)
 800739a:	6013      	str	r3, [r2, #0]
}
 800739c:	bf00      	nop
 800739e:	371c      	adds	r7, #28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	24000538 	.word	0x24000538
 80073ac:	24000524 	.word	0x24000524
 80073b0:	24000518 	.word	0x24000518
 80073b4:	24000414 	.word	0x24000414
 80073b8:	24000410 	.word	0x24000410
 80073bc:	24000014 	.word	0x24000014

080073c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073c8:	f000 f852 	bl	8007470 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073cc:	4b06      	ldr	r3, [pc, #24]	; (80073e8 <prvIdleTask+0x28>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d9f9      	bls.n	80073c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <prvIdleTask+0x2c>)
 80073d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073e4:	e7f0      	b.n	80073c8 <prvIdleTask+0x8>
 80073e6:	bf00      	nop
 80073e8:	24000414 	.word	0x24000414
 80073ec:	e000ed04 	.word	0xe000ed04

080073f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073f6:	2300      	movs	r3, #0
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	e00c      	b.n	8007416 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <prvInitialiseTaskLists+0x60>)
 8007408:	4413      	add	r3, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7ff fb17 	bl	8006a3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	3301      	adds	r3, #1
 8007414:	607b      	str	r3, [r7, #4]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b06      	cmp	r3, #6
 800741a:	d9ef      	bls.n	80073fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800741c:	480d      	ldr	r0, [pc, #52]	; (8007454 <prvInitialiseTaskLists+0x64>)
 800741e:	f7ff fb0e 	bl	8006a3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007422:	480d      	ldr	r0, [pc, #52]	; (8007458 <prvInitialiseTaskLists+0x68>)
 8007424:	f7ff fb0b 	bl	8006a3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007428:	480c      	ldr	r0, [pc, #48]	; (800745c <prvInitialiseTaskLists+0x6c>)
 800742a:	f7ff fb08 	bl	8006a3e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800742e:	480c      	ldr	r0, [pc, #48]	; (8007460 <prvInitialiseTaskLists+0x70>)
 8007430:	f7ff fb05 	bl	8006a3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007434:	480b      	ldr	r0, [pc, #44]	; (8007464 <prvInitialiseTaskLists+0x74>)
 8007436:	f7ff fb02 	bl	8006a3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800743a:	4b0b      	ldr	r3, [pc, #44]	; (8007468 <prvInitialiseTaskLists+0x78>)
 800743c:	4a05      	ldr	r2, [pc, #20]	; (8007454 <prvInitialiseTaskLists+0x64>)
 800743e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <prvInitialiseTaskLists+0x7c>)
 8007442:	4a05      	ldr	r2, [pc, #20]	; (8007458 <prvInitialiseTaskLists+0x68>)
 8007444:	601a      	str	r2, [r3, #0]
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	24000414 	.word	0x24000414
 8007454:	240004a0 	.word	0x240004a0
 8007458:	240004b4 	.word	0x240004b4
 800745c:	240004d0 	.word	0x240004d0
 8007460:	240004e4 	.word	0x240004e4
 8007464:	240004fc 	.word	0x240004fc
 8007468:	240004c8 	.word	0x240004c8
 800746c:	240004cc 	.word	0x240004cc

08007470 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b082      	sub	sp, #8
 8007474:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007476:	e019      	b.n	80074ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007478:	f000 fa0c 	bl	8007894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747c:	4b10      	ldr	r3, [pc, #64]	; (80074c0 <prvCheckTasksWaitingTermination+0x50>)
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3304      	adds	r3, #4
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fb62 	bl	8006b52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800748e:	4b0d      	ldr	r3, [pc, #52]	; (80074c4 <prvCheckTasksWaitingTermination+0x54>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3b01      	subs	r3, #1
 8007494:	4a0b      	ldr	r2, [pc, #44]	; (80074c4 <prvCheckTasksWaitingTermination+0x54>)
 8007496:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <prvCheckTasksWaitingTermination+0x58>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3b01      	subs	r3, #1
 800749e:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <prvCheckTasksWaitingTermination+0x58>)
 80074a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074a2:	f000 fa27 	bl	80078f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f810 	bl	80074cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <prvCheckTasksWaitingTermination+0x58>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e1      	bne.n	8007478 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	240004e4 	.word	0x240004e4
 80074c4:	24000510 	.word	0x24000510
 80074c8:	240004f8 	.word	0x240004f8

080074cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	334c      	adds	r3, #76	; 0x4c
 80074d8:	4618      	mov	r0, r3
 80074da:	f000 fce3 	bl	8007ea4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d108      	bne.n	80074fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 fb7f 	bl	8007bf0 <vPortFree>
				vPortFree( pxTCB );
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 fb7c 	bl	8007bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074f8:	e018      	b.n	800752c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007500:	2b01      	cmp	r3, #1
 8007502:	d103      	bne.n	800750c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fb73 	bl	8007bf0 <vPortFree>
	}
 800750a:	e00f      	b.n	800752c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007512:	2b02      	cmp	r3, #2
 8007514:	d00a      	beq.n	800752c <prvDeleteTCB+0x60>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60fb      	str	r3, [r7, #12]
}
 8007528:	bf00      	nop
 800752a:	e7fe      	b.n	800752a <prvDeleteTCB+0x5e>
	}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <prvResetNextTaskUnblockTime+0x38>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <prvResetNextTaskUnblockTime+0x3c>)
 8007546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800754c:	e008      	b.n	8007560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <prvResetNextTaskUnblockTime+0x38>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4a04      	ldr	r2, [pc, #16]	; (8007570 <prvResetNextTaskUnblockTime+0x3c>)
 800755e:	6013      	str	r3, [r2, #0]
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	240004c8 	.word	0x240004c8
 8007570:	24000530 	.word	0x24000530

08007574 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800757e:	4b29      	ldr	r3, [pc, #164]	; (8007624 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007584:	4b28      	ldr	r3, [pc, #160]	; (8007628 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3304      	adds	r3, #4
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fae1 	bl	8006b52 <uxListRemove>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d10b      	bne.n	80075ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007596:	4b24      	ldr	r3, [pc, #144]	; (8007628 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2201      	movs	r2, #1
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43da      	mvns	r2, r3
 80075a4:	4b21      	ldr	r3, [pc, #132]	; (800762c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4013      	ands	r3, r2
 80075aa:	4a20      	ldr	r2, [pc, #128]	; (800762c <prvAddCurrentTaskToDelayedList+0xb8>)
 80075ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075b4:	d10a      	bne.n	80075cc <prvAddCurrentTaskToDelayedList+0x58>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d007      	beq.n	80075cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075bc:	4b1a      	ldr	r3, [pc, #104]	; (8007628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4619      	mov	r1, r3
 80075c4:	481a      	ldr	r0, [pc, #104]	; (8007630 <prvAddCurrentTaskToDelayedList+0xbc>)
 80075c6:	f7ff fa67 	bl	8006a98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075ca:	e026      	b.n	800761a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075d4:	4b14      	ldr	r3, [pc, #80]	; (8007628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d209      	bcs.n	80075f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075e4:	4b13      	ldr	r3, [pc, #76]	; (8007634 <prvAddCurrentTaskToDelayedList+0xc0>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	4b0f      	ldr	r3, [pc, #60]	; (8007628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3304      	adds	r3, #4
 80075ee:	4619      	mov	r1, r3
 80075f0:	4610      	mov	r0, r2
 80075f2:	f7ff fa75 	bl	8006ae0 <vListInsert>
}
 80075f6:	e010      	b.n	800761a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075f8:	4b0f      	ldr	r3, [pc, #60]	; (8007638 <prvAddCurrentTaskToDelayedList+0xc4>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <prvAddCurrentTaskToDelayedList+0xb4>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3304      	adds	r3, #4
 8007602:	4619      	mov	r1, r3
 8007604:	4610      	mov	r0, r2
 8007606:	f7ff fa6b 	bl	8006ae0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800760a:	4b0c      	ldr	r3, [pc, #48]	; (800763c <prvAddCurrentTaskToDelayedList+0xc8>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	429a      	cmp	r2, r3
 8007612:	d202      	bcs.n	800761a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007614:	4a09      	ldr	r2, [pc, #36]	; (800763c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	6013      	str	r3, [r2, #0]
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	24000514 	.word	0x24000514
 8007628:	24000410 	.word	0x24000410
 800762c:	24000518 	.word	0x24000518
 8007630:	240004fc 	.word	0x240004fc
 8007634:	240004cc 	.word	0x240004cc
 8007638:	240004c8 	.word	0x240004c8
 800763c:	24000530 	.word	0x24000530

08007640 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	60b9      	str	r1, [r7, #8]
 800764a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3b04      	subs	r3, #4
 8007650:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3b04      	subs	r3, #4
 800765e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	f023 0201 	bic.w	r2, r3, #1
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3b04      	subs	r3, #4
 800766e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007670:	4a0c      	ldr	r2, [pc, #48]	; (80076a4 <pxPortInitialiseStack+0x64>)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3b14      	subs	r3, #20
 800767a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3b04      	subs	r3, #4
 8007686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f06f 0202 	mvn.w	r2, #2
 800768e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3b20      	subs	r3, #32
 8007694:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007696:	68fb      	ldr	r3, [r7, #12]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3714      	adds	r7, #20
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	080076a9 	.word	0x080076a9

080076a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076b2:	4b12      	ldr	r3, [pc, #72]	; (80076fc <prvTaskExitError+0x54>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ba:	d00a      	beq.n	80076d2 <prvTaskExitError+0x2a>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <prvTaskExitError+0x28>
	__asm volatile
 80076d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d6:	f383 8811 	msr	BASEPRI, r3
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	f3bf 8f4f 	dsb	sy
 80076e2:	60bb      	str	r3, [r7, #8]
}
 80076e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076e6:	bf00      	nop
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0fc      	beq.n	80076e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076ee:	bf00      	nop
 80076f0:	bf00      	nop
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	24000010 	.word	0x24000010

08007700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <pxCurrentTCBConst2>)
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	6808      	ldr	r0, [r1, #0]
 8007706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	f380 8809 	msr	PSP, r0
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8811 	msr	BASEPRI, r0
 800771a:	4770      	bx	lr
 800771c:	f3af 8000 	nop.w

08007720 <pxCurrentTCBConst2>:
 8007720:	24000410 	.word	0x24000410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007728:	4808      	ldr	r0, [pc, #32]	; (800774c <prvPortStartFirstTask+0x24>)
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f380 8808 	msr	MSP, r0
 8007732:	f04f 0000 	mov.w	r0, #0
 8007736:	f380 8814 	msr	CONTROL, r0
 800773a:	b662      	cpsie	i
 800773c:	b661      	cpsie	f
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	df00      	svc	0
 8007748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800774a:	bf00      	nop
 800774c:	e000ed08 	.word	0xe000ed08

08007750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b086      	sub	sp, #24
 8007754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007756:	4b46      	ldr	r3, [pc, #280]	; (8007870 <xPortStartScheduler+0x120>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a46      	ldr	r2, [pc, #280]	; (8007874 <xPortStartScheduler+0x124>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d10a      	bne.n	8007776 <xPortStartScheduler+0x26>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	613b      	str	r3, [r7, #16]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007776:	4b3e      	ldr	r3, [pc, #248]	; (8007870 <xPortStartScheduler+0x120>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a3f      	ldr	r2, [pc, #252]	; (8007878 <xPortStartScheduler+0x128>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d10a      	bne.n	8007796 <xPortStartScheduler+0x46>
	__asm volatile
 8007780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007784:	f383 8811 	msr	BASEPRI, r3
 8007788:	f3bf 8f6f 	isb	sy
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	60fb      	str	r3, [r7, #12]
}
 8007792:	bf00      	nop
 8007794:	e7fe      	b.n	8007794 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <xPortStartScheduler+0x12c>)
 8007798:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	22ff      	movs	r2, #255	; 0xff
 80077a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	4b31      	ldr	r3, [pc, #196]	; (8007880 <xPortStartScheduler+0x130>)
 80077bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80077be:	4b31      	ldr	r3, [pc, #196]	; (8007884 <xPortStartScheduler+0x134>)
 80077c0:	2207      	movs	r2, #7
 80077c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077c4:	e009      	b.n	80077da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80077c6:	4b2f      	ldr	r3, [pc, #188]	; (8007884 <xPortStartScheduler+0x134>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3b01      	subs	r3, #1
 80077cc:	4a2d      	ldr	r2, [pc, #180]	; (8007884 <xPortStartScheduler+0x134>)
 80077ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e2:	2b80      	cmp	r3, #128	; 0x80
 80077e4:	d0ef      	beq.n	80077c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80077e6:	4b27      	ldr	r3, [pc, #156]	; (8007884 <xPortStartScheduler+0x134>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f1c3 0307 	rsb	r3, r3, #7
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d00a      	beq.n	8007808 <xPortStartScheduler+0xb8>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	60bb      	str	r3, [r7, #8]
}
 8007804:	bf00      	nop
 8007806:	e7fe      	b.n	8007806 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007808:	4b1e      	ldr	r3, [pc, #120]	; (8007884 <xPortStartScheduler+0x134>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	4a1d      	ldr	r2, [pc, #116]	; (8007884 <xPortStartScheduler+0x134>)
 8007810:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007812:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <xPortStartScheduler+0x134>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800781a:	4a1a      	ldr	r2, [pc, #104]	; (8007884 <xPortStartScheduler+0x134>)
 800781c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	b2da      	uxtb	r2, r3
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007826:	4b18      	ldr	r3, [pc, #96]	; (8007888 <xPortStartScheduler+0x138>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a17      	ldr	r2, [pc, #92]	; (8007888 <xPortStartScheduler+0x138>)
 800782c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007830:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007832:	4b15      	ldr	r3, [pc, #84]	; (8007888 <xPortStartScheduler+0x138>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a14      	ldr	r2, [pc, #80]	; (8007888 <xPortStartScheduler+0x138>)
 8007838:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800783c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800783e:	f000 f8dd 	bl	80079fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007842:	4b12      	ldr	r3, [pc, #72]	; (800788c <xPortStartScheduler+0x13c>)
 8007844:	2200      	movs	r2, #0
 8007846:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007848:	f000 f8fc 	bl	8007a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800784c:	4b10      	ldr	r3, [pc, #64]	; (8007890 <xPortStartScheduler+0x140>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a0f      	ldr	r2, [pc, #60]	; (8007890 <xPortStartScheduler+0x140>)
 8007852:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007856:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007858:	f7ff ff66 	bl	8007728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800785c:	f7ff fd4e 	bl	80072fc <vTaskSwitchContext>
	prvTaskExitError();
 8007860:	f7ff ff22 	bl	80076a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	e000ed00 	.word	0xe000ed00
 8007874:	410fc271 	.word	0x410fc271
 8007878:	410fc270 	.word	0x410fc270
 800787c:	e000e400 	.word	0xe000e400
 8007880:	2400053c 	.word	0x2400053c
 8007884:	24000540 	.word	0x24000540
 8007888:	e000ed20 	.word	0xe000ed20
 800788c:	24000010 	.word	0x24000010
 8007890:	e000ef34 	.word	0xe000ef34

08007894 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	607b      	str	r3, [r7, #4]
}
 80078ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <vPortEnterCritical+0x58>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <vPortEnterCritical+0x58>)
 80078b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80078b8:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <vPortEnterCritical+0x58>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d10f      	bne.n	80078e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <vPortEnterCritical+0x5c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00a      	beq.n	80078e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80078ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ce:	f383 8811 	msr	BASEPRI, r3
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	f3bf 8f4f 	dsb	sy
 80078da:	603b      	str	r3, [r7, #0]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <vPortEnterCritical+0x4a>
	}
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	24000010 	.word	0x24000010
 80078f0:	e000ed04 	.word	0xe000ed04

080078f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80078fa:	4b12      	ldr	r3, [pc, #72]	; (8007944 <vPortExitCritical+0x50>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d10a      	bne.n	8007918 <vPortExitCritical+0x24>
	__asm volatile
 8007902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	607b      	str	r3, [r7, #4]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007918:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <vPortExitCritical+0x50>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3b01      	subs	r3, #1
 800791e:	4a09      	ldr	r2, [pc, #36]	; (8007944 <vPortExitCritical+0x50>)
 8007920:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007922:	4b08      	ldr	r3, [pc, #32]	; (8007944 <vPortExitCritical+0x50>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <vPortExitCritical+0x42>
 800792a:	2300      	movs	r3, #0
 800792c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007934:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	24000010 	.word	0x24000010
	...

08007950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007950:	f3ef 8009 	mrs	r0, PSP
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <pxCurrentTCBConst>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	f01e 0f10 	tst.w	lr, #16
 8007960:	bf08      	it	eq
 8007962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	6010      	str	r0, [r2, #0]
 800796c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007970:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007974:	f380 8811 	msr	BASEPRI, r0
 8007978:	f3bf 8f4f 	dsb	sy
 800797c:	f3bf 8f6f 	isb	sy
 8007980:	f7ff fcbc 	bl	80072fc <vTaskSwitchContext>
 8007984:	f04f 0000 	mov.w	r0, #0
 8007988:	f380 8811 	msr	BASEPRI, r0
 800798c:	bc09      	pop	{r0, r3}
 800798e:	6819      	ldr	r1, [r3, #0]
 8007990:	6808      	ldr	r0, [r1, #0]
 8007992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007996:	f01e 0f10 	tst.w	lr, #16
 800799a:	bf08      	it	eq
 800799c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80079a0:	f380 8809 	msr	PSP, r0
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst>:
 80079b0:	24000410 	.word	0x24000410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	607b      	str	r3, [r7, #4]
}
 80079d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80079d2:	f7ff fbdb 	bl	800718c <xTaskIncrementTick>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80079dc:	4b06      	ldr	r3, [pc, #24]	; (80079f8 <SysTick_Handler+0x40>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	2300      	movs	r3, #0
 80079e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	f383 8811 	msr	BASEPRI, r3
}
 80079ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a00:	4b0b      	ldr	r3, [pc, #44]	; (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a06:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <vPortSetupTimerInterrupt+0x38>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	; (8007a38 <vPortSetupTimerInterrupt+0x3c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a0a      	ldr	r2, [pc, #40]	; (8007a3c <vPortSetupTimerInterrupt+0x40>)
 8007a12:	fba2 2303 	umull	r2, r3, r2, r3
 8007a16:	099b      	lsrs	r3, r3, #6
 8007a18:	4a09      	ldr	r2, [pc, #36]	; (8007a40 <vPortSetupTimerInterrupt+0x44>)
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007a1e:	4b04      	ldr	r3, [pc, #16]	; (8007a30 <vPortSetupTimerInterrupt+0x34>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
}
 8007a24:	bf00      	nop
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	e000e010 	.word	0xe000e010
 8007a34:	e000e018 	.word	0xe000e018
 8007a38:	24000000 	.word	0x24000000
 8007a3c:	10624dd3 	.word	0x10624dd3
 8007a40:	e000e014 	.word	0xe000e014

08007a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007a54 <vPortEnableVFP+0x10>
 8007a48:	6801      	ldr	r1, [r0, #0]
 8007a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007a4e:	6001      	str	r1, [r0, #0]
 8007a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007a52:	bf00      	nop
 8007a54:	e000ed88 	.word	0xe000ed88

08007a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a64:	f7ff fae8 	bl	8007038 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a68:	4b5b      	ldr	r3, [pc, #364]	; (8007bd8 <pvPortMalloc+0x180>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a70:	f000 f920 	bl	8007cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a74:	4b59      	ldr	r3, [pc, #356]	; (8007bdc <pvPortMalloc+0x184>)
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8093 	bne.w	8007ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01d      	beq.n	8007ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007a88:	2208      	movs	r2, #8
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f003 0307 	and.w	r3, r3, #7
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d014      	beq.n	8007ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f023 0307 	bic.w	r3, r3, #7
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00a      	beq.n	8007ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8007aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	617b      	str	r3, [r7, #20]
}
 8007ac0:	bf00      	nop
 8007ac2:	e7fe      	b.n	8007ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d06e      	beq.n	8007ba8 <pvPortMalloc+0x150>
 8007aca:	4b45      	ldr	r3, [pc, #276]	; (8007be0 <pvPortMalloc+0x188>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d869      	bhi.n	8007ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ad4:	4b43      	ldr	r3, [pc, #268]	; (8007be4 <pvPortMalloc+0x18c>)
 8007ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ad8:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <pvPortMalloc+0x18c>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ade:	e004      	b.n	8007aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d903      	bls.n	8007afc <pvPortMalloc+0xa4>
 8007af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1f1      	bne.n	8007ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007afc:	4b36      	ldr	r3, [pc, #216]	; (8007bd8 <pvPortMalloc+0x180>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d050      	beq.n	8007ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b06:	6a3b      	ldr	r3, [r7, #32]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2208      	movs	r2, #8
 8007b0c:	4413      	add	r3, r2
 8007b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	1ad2      	subs	r2, r2, r3
 8007b20:	2308      	movs	r3, #8
 8007b22:	005b      	lsls	r3, r3, #1
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d91f      	bls.n	8007b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f003 0307 	and.w	r3, r3, #7
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00a      	beq.n	8007b50 <pvPortMalloc+0xf8>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	613b      	str	r3, [r7, #16]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	1ad2      	subs	r2, r2, r3
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b62:	69b8      	ldr	r0, [r7, #24]
 8007b64:	f000 f908 	bl	8007d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <pvPortMalloc+0x188>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	1ad3      	subs	r3, r2, r3
 8007b72:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <pvPortMalloc+0x188>)
 8007b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b76:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <pvPortMalloc+0x188>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4b1b      	ldr	r3, [pc, #108]	; (8007be8 <pvPortMalloc+0x190>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d203      	bcs.n	8007b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b82:	4b17      	ldr	r3, [pc, #92]	; (8007be0 <pvPortMalloc+0x188>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <pvPortMalloc+0x190>)
 8007b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	4b13      	ldr	r3, [pc, #76]	; (8007bdc <pvPortMalloc+0x184>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007b9e:	4b13      	ldr	r3, [pc, #76]	; (8007bec <pvPortMalloc+0x194>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	4a11      	ldr	r2, [pc, #68]	; (8007bec <pvPortMalloc+0x194>)
 8007ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007ba8:	f7ff fa54 	bl	8007054 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bac:	69fb      	ldr	r3, [r7, #28]
 8007bae:	f003 0307 	and.w	r3, r3, #7
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <pvPortMalloc+0x174>
	__asm volatile
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	60fb      	str	r3, [r7, #12]
}
 8007bc8:	bf00      	nop
 8007bca:	e7fe      	b.n	8007bca <pvPortMalloc+0x172>
	return pvReturn;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3728      	adds	r7, #40	; 0x28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	2400854c 	.word	0x2400854c
 8007bdc:	24008560 	.word	0x24008560
 8007be0:	24008550 	.word	0x24008550
 8007be4:	24008544 	.word	0x24008544
 8007be8:	24008554 	.word	0x24008554
 8007bec:	24008558 	.word	0x24008558

08007bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d04d      	beq.n	8007c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c02:	2308      	movs	r3, #8
 8007c04:	425b      	negs	r3, r3
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4413      	add	r3, r2
 8007c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	4b24      	ldr	r3, [pc, #144]	; (8007ca8 <vPortFree+0xb8>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4013      	ands	r3, r2
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <vPortFree+0x44>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <vPortFree+0x62>
	__asm volatile
 8007c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c40:	f383 8811 	msr	BASEPRI, r3
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	60bb      	str	r3, [r7, #8]
}
 8007c4e:	bf00      	nop
 8007c50:	e7fe      	b.n	8007c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <vPortFree+0xb8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01e      	beq.n	8007c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d11a      	bne.n	8007c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ca8 <vPortFree+0xb8>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	43db      	mvns	r3, r3
 8007c72:	401a      	ands	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c78:	f7ff f9de 	bl	8007038 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <vPortFree+0xbc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4413      	add	r3, r2
 8007c86:	4a09      	ldr	r2, [pc, #36]	; (8007cac <vPortFree+0xbc>)
 8007c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c8a:	6938      	ldr	r0, [r7, #16]
 8007c8c:	f000 f874 	bl	8007d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c90:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <vPortFree+0xc0>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3301      	adds	r3, #1
 8007c96:	4a06      	ldr	r2, [pc, #24]	; (8007cb0 <vPortFree+0xc0>)
 8007c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007c9a:	f7ff f9db 	bl	8007054 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c9e:	bf00      	nop
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	24008560 	.word	0x24008560
 8007cac:	24008550 	.word	0x24008550
 8007cb0:	2400855c 	.word	0x2400855c

08007cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007cc0:	4b27      	ldr	r3, [pc, #156]	; (8007d60 <prvHeapInit+0xac>)
 8007cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3307      	adds	r3, #7
 8007cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0307 	bic.w	r3, r3, #7
 8007cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cdc:	68ba      	ldr	r2, [r7, #8]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <prvHeapInit+0xac>)
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cec:	4a1d      	ldr	r2, [pc, #116]	; (8007d64 <prvHeapInit+0xb0>)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cf2:	4b1c      	ldr	r3, [pc, #112]	; (8007d64 <prvHeapInit+0xb0>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d00:	2208      	movs	r2, #8
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	1a9b      	subs	r3, r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0307 	bic.w	r3, r3, #7
 8007d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4a15      	ldr	r2, [pc, #84]	; (8007d68 <prvHeapInit+0xb4>)
 8007d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007d16:	4b14      	ldr	r3, [pc, #80]	; (8007d68 <prvHeapInit+0xb4>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d1e:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <prvHeapInit+0xb4>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d34:	4b0c      	ldr	r3, [pc, #48]	; (8007d68 <prvHeapInit+0xb4>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a0a      	ldr	r2, [pc, #40]	; (8007d6c <prvHeapInit+0xb8>)
 8007d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	4a09      	ldr	r2, [pc, #36]	; (8007d70 <prvHeapInit+0xbc>)
 8007d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d4c:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <prvHeapInit+0xc0>)
 8007d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d52:	601a      	str	r2, [r3, #0]
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	24000544 	.word	0x24000544
 8007d64:	24008544 	.word	0x24008544
 8007d68:	2400854c 	.word	0x2400854c
 8007d6c:	24008554 	.word	0x24008554
 8007d70:	24008550 	.word	0x24008550
 8007d74:	24008560 	.word	0x24008560

08007d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d80:	4b28      	ldr	r3, [pc, #160]	; (8007e24 <prvInsertBlockIntoFreeList+0xac>)
 8007d82:	60fb      	str	r3, [r7, #12]
 8007d84:	e002      	b.n	8007d8c <prvInsertBlockIntoFreeList+0x14>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d8f7      	bhi.n	8007d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	4413      	add	r3, r2
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d108      	bne.n	8007dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	441a      	add	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	441a      	add	r2, r3
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d118      	bne.n	8007e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d00d      	beq.n	8007df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	441a      	add	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	e008      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007df6:	4b0c      	ldr	r3, [pc, #48]	; (8007e28 <prvInsertBlockIntoFreeList+0xb0>)
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e003      	b.n	8007e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e08:	68fa      	ldr	r2, [r7, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e16:	bf00      	nop
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	24008544 	.word	0x24008544
 8007e28:	2400854c 	.word	0x2400854c

08007e2c <__libc_init_array>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	4d0d      	ldr	r5, [pc, #52]	; (8007e64 <__libc_init_array+0x38>)
 8007e30:	4c0d      	ldr	r4, [pc, #52]	; (8007e68 <__libc_init_array+0x3c>)
 8007e32:	1b64      	subs	r4, r4, r5
 8007e34:	10a4      	asrs	r4, r4, #2
 8007e36:	2600      	movs	r6, #0
 8007e38:	42a6      	cmp	r6, r4
 8007e3a:	d109      	bne.n	8007e50 <__libc_init_array+0x24>
 8007e3c:	4d0b      	ldr	r5, [pc, #44]	; (8007e6c <__libc_init_array+0x40>)
 8007e3e:	4c0c      	ldr	r4, [pc, #48]	; (8007e70 <__libc_init_array+0x44>)
 8007e40:	f000 f8e8 	bl	8008014 <_init>
 8007e44:	1b64      	subs	r4, r4, r5
 8007e46:	10a4      	asrs	r4, r4, #2
 8007e48:	2600      	movs	r6, #0
 8007e4a:	42a6      	cmp	r6, r4
 8007e4c:	d105      	bne.n	8007e5a <__libc_init_array+0x2e>
 8007e4e:	bd70      	pop	{r4, r5, r6, pc}
 8007e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e54:	4798      	blx	r3
 8007e56:	3601      	adds	r6, #1
 8007e58:	e7ee      	b.n	8007e38 <__libc_init_array+0xc>
 8007e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e5e:	4798      	blx	r3
 8007e60:	3601      	adds	r6, #1
 8007e62:	e7f2      	b.n	8007e4a <__libc_init_array+0x1e>
 8007e64:	0800815c 	.word	0x0800815c
 8007e68:	0800815c 	.word	0x0800815c
 8007e6c:	0800815c 	.word	0x0800815c
 8007e70:	08008160 	.word	0x08008160

08007e74 <__retarget_lock_acquire_recursive>:
 8007e74:	4770      	bx	lr

08007e76 <__retarget_lock_release_recursive>:
 8007e76:	4770      	bx	lr

08007e78 <memset>:
 8007e78:	4402      	add	r2, r0
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d100      	bne.n	8007e82 <memset+0xa>
 8007e80:	4770      	bx	lr
 8007e82:	f803 1b01 	strb.w	r1, [r3], #1
 8007e86:	e7f9      	b.n	8007e7c <memset+0x4>

08007e88 <cleanup_glue>:
 8007e88:	b538      	push	{r3, r4, r5, lr}
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	6809      	ldr	r1, [r1, #0]
 8007e8e:	4605      	mov	r5, r0
 8007e90:	b109      	cbz	r1, 8007e96 <cleanup_glue+0xe>
 8007e92:	f7ff fff9 	bl	8007e88 <cleanup_glue>
 8007e96:	4621      	mov	r1, r4
 8007e98:	4628      	mov	r0, r5
 8007e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9e:	f000 b869 	b.w	8007f74 <_free_r>
	...

08007ea4 <_reclaim_reent>:
 8007ea4:	4b2c      	ldr	r3, [pc, #176]	; (8007f58 <_reclaim_reent+0xb4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4283      	cmp	r3, r0
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	4604      	mov	r4, r0
 8007eae:	d051      	beq.n	8007f54 <_reclaim_reent+0xb0>
 8007eb0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007eb2:	b143      	cbz	r3, 8007ec6 <_reclaim_reent+0x22>
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d14a      	bne.n	8007f50 <_reclaim_reent+0xac>
 8007eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	b111      	cbz	r1, 8007ec6 <_reclaim_reent+0x22>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f000 f857 	bl	8007f74 <_free_r>
 8007ec6:	6961      	ldr	r1, [r4, #20]
 8007ec8:	b111      	cbz	r1, 8007ed0 <_reclaim_reent+0x2c>
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f852 	bl	8007f74 <_free_r>
 8007ed0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007ed2:	b111      	cbz	r1, 8007eda <_reclaim_reent+0x36>
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f000 f84d 	bl	8007f74 <_free_r>
 8007eda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007edc:	b111      	cbz	r1, 8007ee4 <_reclaim_reent+0x40>
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f000 f848 	bl	8007f74 <_free_r>
 8007ee4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007ee6:	b111      	cbz	r1, 8007eee <_reclaim_reent+0x4a>
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 f843 	bl	8007f74 <_free_r>
 8007eee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007ef0:	b111      	cbz	r1, 8007ef8 <_reclaim_reent+0x54>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f000 f83e 	bl	8007f74 <_free_r>
 8007ef8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007efa:	b111      	cbz	r1, 8007f02 <_reclaim_reent+0x5e>
 8007efc:	4620      	mov	r0, r4
 8007efe:	f000 f839 	bl	8007f74 <_free_r>
 8007f02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f04:	b111      	cbz	r1, 8007f0c <_reclaim_reent+0x68>
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 f834 	bl	8007f74 <_free_r>
 8007f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f0e:	b111      	cbz	r1, 8007f16 <_reclaim_reent+0x72>
 8007f10:	4620      	mov	r0, r4
 8007f12:	f000 f82f 	bl	8007f74 <_free_r>
 8007f16:	69a3      	ldr	r3, [r4, #24]
 8007f18:	b1e3      	cbz	r3, 8007f54 <_reclaim_reent+0xb0>
 8007f1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	4798      	blx	r3
 8007f20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007f22:	b1b9      	cbz	r1, 8007f54 <_reclaim_reent+0xb0>
 8007f24:	4620      	mov	r0, r4
 8007f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f2a:	f7ff bfad 	b.w	8007e88 <cleanup_glue>
 8007f2e:	5949      	ldr	r1, [r1, r5]
 8007f30:	b941      	cbnz	r1, 8007f44 <_reclaim_reent+0xa0>
 8007f32:	3504      	adds	r5, #4
 8007f34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f36:	2d80      	cmp	r5, #128	; 0x80
 8007f38:	68d9      	ldr	r1, [r3, #12]
 8007f3a:	d1f8      	bne.n	8007f2e <_reclaim_reent+0x8a>
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	f000 f819 	bl	8007f74 <_free_r>
 8007f42:	e7ba      	b.n	8007eba <_reclaim_reent+0x16>
 8007f44:	680e      	ldr	r6, [r1, #0]
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 f814 	bl	8007f74 <_free_r>
 8007f4c:	4631      	mov	r1, r6
 8007f4e:	e7ef      	b.n	8007f30 <_reclaim_reent+0x8c>
 8007f50:	2500      	movs	r5, #0
 8007f52:	e7ef      	b.n	8007f34 <_reclaim_reent+0x90>
 8007f54:	bd70      	pop	{r4, r5, r6, pc}
 8007f56:	bf00      	nop
 8007f58:	24000014 	.word	0x24000014

08007f5c <__malloc_lock>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	; (8007f64 <__malloc_lock+0x8>)
 8007f5e:	f7ff bf89 	b.w	8007e74 <__retarget_lock_acquire_recursive>
 8007f62:	bf00      	nop
 8007f64:	24008b2c 	.word	0x24008b2c

08007f68 <__malloc_unlock>:
 8007f68:	4801      	ldr	r0, [pc, #4]	; (8007f70 <__malloc_unlock+0x8>)
 8007f6a:	f7ff bf84 	b.w	8007e76 <__retarget_lock_release_recursive>
 8007f6e:	bf00      	nop
 8007f70:	24008b2c 	.word	0x24008b2c

08007f74 <_free_r>:
 8007f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d048      	beq.n	800800c <_free_r+0x98>
 8007f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f7e:	9001      	str	r0, [sp, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f1a1 0404 	sub.w	r4, r1, #4
 8007f86:	bfb8      	it	lt
 8007f88:	18e4      	addlt	r4, r4, r3
 8007f8a:	f7ff ffe7 	bl	8007f5c <__malloc_lock>
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <_free_r+0x9c>)
 8007f90:	9801      	ldr	r0, [sp, #4]
 8007f92:	6813      	ldr	r3, [r2, #0]
 8007f94:	4615      	mov	r5, r2
 8007f96:	b933      	cbnz	r3, 8007fa6 <_free_r+0x32>
 8007f98:	6063      	str	r3, [r4, #4]
 8007f9a:	6014      	str	r4, [r2, #0]
 8007f9c:	b003      	add	sp, #12
 8007f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fa2:	f7ff bfe1 	b.w	8007f68 <__malloc_unlock>
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	d90b      	bls.n	8007fc2 <_free_r+0x4e>
 8007faa:	6821      	ldr	r1, [r4, #0]
 8007fac:	1862      	adds	r2, r4, r1
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	bf04      	itt	eq
 8007fb2:	681a      	ldreq	r2, [r3, #0]
 8007fb4:	685b      	ldreq	r3, [r3, #4]
 8007fb6:	6063      	str	r3, [r4, #4]
 8007fb8:	bf04      	itt	eq
 8007fba:	1852      	addeq	r2, r2, r1
 8007fbc:	6022      	streq	r2, [r4, #0]
 8007fbe:	602c      	str	r4, [r5, #0]
 8007fc0:	e7ec      	b.n	8007f9c <_free_r+0x28>
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	b10b      	cbz	r3, 8007fcc <_free_r+0x58>
 8007fc8:	42a3      	cmp	r3, r4
 8007fca:	d9fa      	bls.n	8007fc2 <_free_r+0x4e>
 8007fcc:	6811      	ldr	r1, [r2, #0]
 8007fce:	1855      	adds	r5, r2, r1
 8007fd0:	42a5      	cmp	r5, r4
 8007fd2:	d10b      	bne.n	8007fec <_free_r+0x78>
 8007fd4:	6824      	ldr	r4, [r4, #0]
 8007fd6:	4421      	add	r1, r4
 8007fd8:	1854      	adds	r4, r2, r1
 8007fda:	42a3      	cmp	r3, r4
 8007fdc:	6011      	str	r1, [r2, #0]
 8007fde:	d1dd      	bne.n	8007f9c <_free_r+0x28>
 8007fe0:	681c      	ldr	r4, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	6053      	str	r3, [r2, #4]
 8007fe6:	4421      	add	r1, r4
 8007fe8:	6011      	str	r1, [r2, #0]
 8007fea:	e7d7      	b.n	8007f9c <_free_r+0x28>
 8007fec:	d902      	bls.n	8007ff4 <_free_r+0x80>
 8007fee:	230c      	movs	r3, #12
 8007ff0:	6003      	str	r3, [r0, #0]
 8007ff2:	e7d3      	b.n	8007f9c <_free_r+0x28>
 8007ff4:	6825      	ldr	r5, [r4, #0]
 8007ff6:	1961      	adds	r1, r4, r5
 8007ff8:	428b      	cmp	r3, r1
 8007ffa:	bf04      	itt	eq
 8007ffc:	6819      	ldreq	r1, [r3, #0]
 8007ffe:	685b      	ldreq	r3, [r3, #4]
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	bf04      	itt	eq
 8008004:	1949      	addeq	r1, r1, r5
 8008006:	6021      	streq	r1, [r4, #0]
 8008008:	6054      	str	r4, [r2, #4]
 800800a:	e7c7      	b.n	8007f9c <_free_r+0x28>
 800800c:	b003      	add	sp, #12
 800800e:	bd30      	pop	{r4, r5, pc}
 8008010:	24008564 	.word	0x24008564

08008014 <_init>:
 8008014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008016:	bf00      	nop
 8008018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801a:	bc08      	pop	{r3}
 800801c:	469e      	mov	lr, r3
 800801e:	4770      	bx	lr

08008020 <_fini>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	bf00      	nop
 8008024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008026:	bc08      	pop	{r3}
 8008028:	469e      	mov	lr, r3
 800802a:	4770      	bx	lr
