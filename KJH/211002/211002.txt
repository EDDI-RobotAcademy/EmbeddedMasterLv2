0x0000000000000000

0000 = 64bit = 8byte

0xf = 15 = 0b1111 = 8+4+2+1



int fn1 (int n1, int n2)
{
	int result = 0;
	int result2 = 0;
	
	result = n1 * n2 / n2 + n1 + n2;
	result2 = result * 3;
	
	return result2;
}

int main (void)
{
	
	int num1 = 10, num2 = 20;
	int num3 = 0;
	num3 = fn1(num1, num2);

	result = 0;si

	return num3;
}
	



리딩 심볼이 나오지 않을 경우
g 옵션의 차이점

디버깅 하면서 어셈블리를 볼려고한다.

$shell clear
- 텍스트를 삭제한다.

메인에 브레이크 포인트 
b main
런
r
디스어셈블리
disas

화살표가 안걸릴경우
주소부분은 우클릭한다.

실제 기계어 코드의 시작
더미코드는 첫번째줄
디버깅할때 찾는거 귀찮아서 브랜치가 여기에 있다는걸 확인하기 위해서 알려주는 코드가 들어가ㅣㅇㅆ다.

브레이크 포인트를 걸때 여기에 왼쪽에 있는 숫자
여러분들 프로그래밍 할때 나타나는 메모리(텍스트의 가상메모리 주소)
스택 힙 데이터 텍스트

b *<주소>

r

숫자를 우리가 알아볼수있는 니모닉 어셈블리로 알아볼수있는걸
디스어셈

어셈 : 니모닉 -> 숫자
디스어셈 : 숫자 -> 니모닉

$l
현재 진행하는 코드의 리스트를 보여준다.

set list 20
l mult

관심사는 어셈블리 코드를 보는것


우리가 알고있는 변수의 이름이 나오지 않는다.
변수의 이름이 하나도 안보인다.
변수의 정의 -> 데이터를 담는 공간
변수 하면 제일먼저 떠올려야 하는것
힌트 : 주소(메모리)
변수의 정의 : 변수라는것은 특정한 데이터 타입을 저장할수있는 메모리 공간
인트형 포인터 주소 메모리공간 등등 (메모리 공간)
이개념이 철저하게 박혀있어야 자료구조에서 노드들이 회전하고 난리 부르스를 춰도 헷갈리지 않을수있다.


접두어가 기억이 안난다면 변수는 메모리 공간이다.라고 이해

변수 이름이 보이지 않는다
그이유는 변수는 메모리이기 때문에 변수는 메모리에 관리하고 있는 모습이 이부분이다.

12, 19 번째줄이 스택이다.


일부로 실수한다.
$s

$disas

어셈레벨은 건너뛰고 c언어 레벨에서 시작(main부터 시작)

우리가 지금 볼려고 하는건 c언어가 실제로 어떻게 동작하는지를 보기위함이라
건너뛰면 안된다.

$s (step)
$r (run)
$b (breakpoint)

r을 눌러서 재실행


s는 c언어 레벨에서 스텝인투
우리는 어셈블리 레벨에서 스텝인투 si
step in to instraction

컴퓨터 구조 이런 명령어 isa

0x0000555555555164 <+4>:	push   %rbp
부터 시작을 해야한다.

푸쉬 알비피가 뭘해야되는지 알아야한다.
push 넣다
push 스택에 밀어넣는다.
다른메모리는 아니다. 푸쉬라는 인스트럭션은 무조건 스택에 밀어넣느낟
%rbp레지스터에 들어있는 값을(포인터의 원리랑 똑같다) 스택에 밀어넣는다.

rbp레지스터에 있는 값을 스택에 밀어넣겠다.

인텔에서 사용하는 범용레지스터
pc 버전에 맞는 인텔계열에 레지스터
맨앞에 r이 붙어있다.
인텔의 계보를 따지자면 32bit시절 eax (32비트 4바이트)
rax(64비트 8바이트)
ax(16비트 2바이트)
alx(8비트 1바이트 로우 바이트)
bhx(8비트 1바이트 하이 바이트)

여러분들이 아마 학교에서 공부할때 cisc risc머신
반도체 다이사이즈가 작다보니까 올려놓을수있는 부품의 갯수가 적다보니까 arm(risc)같은 경우는
되도록이면 쓰잘떼기 없는것들은 넣지않고 정말 필요한것만 넣자해서
메모리에서 메모리로 데이터 이동이 불가능하다.

인텔(cisc)은 메모리에서 메모
어드레스를 해석할수있는 dmux같은걸 잔뜩 때려박아서 하드웨어에서 이동하겠다하면 메모리에서 메모리로 데이터 이동이 가능하다.

arm은 레지스터에서 다시 메모리로 옮긴다
road store구조라고 하는 이유가 이렇다

서버는 인텔이나 amd를 사용하니까 알아두면 좋다

얘네들은 연산용 범용 레지스터(eflags)

제어레지스터와 메인 레지스터는 다르다.

실제 프로그램을 돌게해주는 범용 레지스터와 다르다.
연산용 레지스터가 실제 프로그램을 돌게해준다.

arm에서 한번 해보긴 할건데 ax레지스터에 가장 중요한것은 함수의 리턴값이 ax레지스터에 저장된다.
rax에 저장된다.
arm에서는 r0를 쓴다 (불변)
cpu설계자들이 그렇게 만들어놨다.

fpga에서 만들때 ax는 저기로 가도록 만들어놨다
polling 컨벤션이라고 하는데 법칙이다.

rcx(요즘은 이걸 연산용으로 쓴다)
(포문돌릴때 카운트 연산용으로 쓴다)

무엇보다 제일 중요한것은 rbp, rsp 이 두개의 레지스터가 가장 중요하다.
rbp(베이스 포인터) (arm - fp와 같음)
rsp(스택 포인터) 스택의 최상단을 나타낸다.
우리가 높이를 쌓는데 어디서 쌓은건지 기준이 필요하기떄문에 base는 기준, stack은 최상단
(사실 여기에는 굉장히 지랄맞은게 하나있다)
얘는 위로 쌓지않는다.
(스택은 아래로 쌓는다)

코드 데이터 힙 스택
힙 (에멀록, 뉴)

힙이 스택을 덮어쓰거나 하는경우가 발생한다.(이를 이용해서 해킹이 가능하다)

rip 제일 또 중요하다. (주소?)
컴퓨터 구조에서 들어봤을거다. (컴퓨터 구조에서 ip와 같다)
인스트럭션 포인터, 다음에 실행할 프로그램(명령)에 주소값을 포인팅한다.
굉장히 중요한녀석

eflags (arm을 사용하면 인터럽트를 차단하거나 인터럽트를 승인하기위해서 하드웨어적으로 끄거나 키거나 사용할수있다. cpsr spsr레지스터와 동일한 역할을 한다. eflags레지스터와 값을 활성화 가능)
하드웨어차원에서 끌수있어서 소프트웨어에서 아무리 요청해도 안된다
cpu명령어 차원에서 막는거다.

eflags : 0x246값을 바꾸면 인터럽트를 활성화 될수도있고 꺼질수도있다.
PF ZF IF 0010 0100 0110
pf : ?
zf : ?
if : 인터럽트 플래그

=================================
(gdb) disas
Dump of assembler code for function main:
   0x0000555555555160 <+0>:	endbr64 
=> 0x0000555555555164 <+4>:	push   %rbp
   0x0000555555555165 <+5>:	mov    %rsp,%rbp
   0x0000555555555168 <+8>:	sub    $0x10,%rsp
   0x000055555555516c <+12>:	movl   $0x3,-0xc(%rbp)
   0x0000555555555173 <+19>:	movl   $0x2,-0x8(%rbp)
   0x000055555555517a <+26>:	mov    -0x8(%rbp),%edx
   0x000055555555517d <+29>:	mov    -0xc(%rbp),%eax
   0x0000555555555180 <+32>:	mov    %edx,%esi
   0x0000555555555182 <+34>:	mov    %eax,%edi
   0x0000555555555184 <+36>:	callq  0x555555555149 <mult>
   0x0000555555555189 <+41>:	mov    %eax,-0x4(%rbp)
   0x000055555555518c <+44>:	mov    -0x4(%rbp),%eax
   0x000055555555518f <+47>:	mov    %eax,%esi
   0x0000555555555191 <+49>:	lea    0xe6c(%rip),%rdi        # 0x555555556004
   0x0000555555555198 <+56>:	mov    $0x0,%eax
   0x000055555555519d <+61>:	callq  0x555555555050 <printf@plt>
   0x00005555555551a2 <+66>:	mov    $0x0,%eax
   0x00005555555551a7 <+71>:	leaveq 
   0x00005555555551a8 <+72>:	retq   
End of assembler dump.
(gdb) info registers
rax            0x555555555160      93824992235872
rbx            0x5555555551b0      93824992235952
rcx            0x5555555551b0      93824992235952
rdx            0x7fffffffe068      140737488347240
rsi            0x7fffffffe058      140737488347224
rdi            0x1                 1
rbp            0x0                 0x0
rsp            0x7fffffffdf68      0x7fffffffdf68
r8             0x0                 0
r9             0x7ffff7fe0d50      140737354009936
r10            0xb                 11
r11            0x2                 2
r12            0x555555555060      93824992235616
r13            0x7fffffffe050      140737488347216
r14            0x0                 0
r15            0x0                 0
rip            0x555555555164      0x555555555164 <main+4>
eflags         0x246               [ PF ZF IF ]
cs             0x33                51
ss             0x2b                43
ds             0x0                 0
es             0x0                 0
fs             0x0                 0
gs             0x0                 0
====================================
push 하게되면 rsp값이 8이 빠진다.
rbp = 0x0
rsp = 0x7ffffff
====================================
(gdb) si
0x0000555555555165	9	{
(gdb) disas
Dump of assembler code for function main:
   0x0000555555555160 <+0>:	endbr64 
   0x0000555555555164 <+4>:	push   %rbp
=> 0x0000555555555165 <+5>:	mov    %rsp,%rbp
   0x0000555555555168 <+8>:	sub    $0x10,%rsp
   0x000055555555516c <+12>:	movl   $0x3,-0xc(%rbp)
   0x0000555555555173 <+19>:	movl   $0x2,-0x8(%rbp)
   0x000055555555517a <+26>:	mov    -0x8(%rbp),%edx
   0x000055555555517d <+29>:	mov    -0xc(%rbp),%eax
   0x0000555555555180 <+32>:	mov    %edx,%esi
   0x0000555555555182 <+34>:	mov    %eax,%edi
   0x0000555555555184 <+36>:	callq  0x555555555149 <mult>
   0x0000555555555189 <+41>:	mov    %eax,-0x4(%rbp)
   0x000055555555518c <+44>:	mov    -0x4(%rbp),%eax
   0x000055555555518f <+47>:	mov    %eax,%esi
   0x0000555555555191 <+49>:	lea    0xe6c(%rip),%rdi        # 0x555555556004
   0x0000555555555198 <+56>:	mov    $0x0,%eax
   0x000055555555519d <+61>:	callq  0x555555555050 <printf@plt>
   0x00005555555551a2 <+66>:	mov    $0x0,%eax
   0x00005555555551a7 <+71>:	leaveq 
   0x00005555555551a8 <+72>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$1 = 0x7fffffffdf60
(gdb) p/x $rsp $rbp
A syntax error in expression, near `$rbp'.
(gdb) p/x $rsp
$2 = 0x7fffffffdf60
(gdb) p/x $rsb
$3 = 0x0
(gdb) Quit
(gdb) x $rsp
0x7fffffffdf60:	0x00000000
========================================
메모리 값을 확인할때 x라는 명령어를 집어넣으면 현재 스택에 최상위 값(0)이 들어있어야 한다.

포인터에 크기는? (cpu, 레지스터)

옛날에 32비트 시절 리눅스의 가상메모리 크기는 4gb
그시절 메모리 좋아봐야 32gb, 64GB

터미널
ps -ef : 현재 돌아가는 모든 프로그램 리스트
딱봐도 100개가 넘는다 100*4GB => 감당 가능? (불가능)
64비트에서도 버틸수가 없는 메모리
가상 메모리 4GB
32비트 시절에서는 이게 자릿수가 8자리로 표현이된다
16진수 두자리는 1바이트
32비트는 16진수 몇개? (8개)
0x0000555555555160 (8바이트)
32비트 시절에는 16진수 자리가 8개(32bit)
어쨋든 우리가 표현할수있는메모리 => 얘네들을 가지고 메모리를 표현한다면 어떻게 전구간을 처리할수있을까?
모두 표현하자니 물리메모리가 그공간을 전부 표현할수없다.
우리가 레지스터를 사용하는데있어서는 전부다 표현할수있으니까 이 레지스터로 표현할수있는 가상메모리+

#펌웨어에는 없는 개념입니다.

0번지부터 0xffff까지 모두 표현할수있다.

변수의 정의 (특정한 데이터 타입을 저장할수있는 메모리공간)
포인터의 정의(메모리 주소값을 저장할수있는 메모리 공간)

메모리 주소값(가상메모리)
(가상메모리->몇바이트? 8바이트)

리눅스 윈도우 맥과 같은 일반적인 pc의 경우입니다.

펌웨어는 사실상 특수 로직.
생성되는 바이트나 과정들이 pc와는 다르다.

그냥 mcu같은 경우에는 
가상메모리나 물리메모리는 작업하는 c코드를 받아서 사용하기떄문에 이런 과점에서 작용하는게 좋다.
물리메모리를 변환한 메모리를 여러 테스트간에 적용할때 이런상황에서 개념을 적용할때 좀더 수월하다.

진짜메모리가 아니니까 가상메모리라고 한다.
펌웨어는 다이렉트 맵핑이다.
sram이 있기때문에 다이렉트 맵핑이고 메모리 크기가 크지않기때문에...
메모리들이 페리패럴에 직접적으로 맵핑되어있다.
그런데 우리가 사용하는 범용피씨에서 던지면 메모리 어디에요? 라고 알수있는게 뭐가있을까?


펌웨어는 하드웨어차원에서 맵핑을 하는데, 레지스터 캐시 

씽크패드 x1

응답성을 떨어트리게 된다.
물건파는사람입장에서 접근하면, 사용자들이 응답을 받지못한다면 문제가 생긴다.
그런것들 아무것도 모르는 일반 사용자가 봤을때는 그런문제점을 없앨려면 메모리를 잘라놔야한다.
(이게 페이징이다) -> 가상메모리를 물리메모리로 바꾸는 매커니즘
책이 많을때, 텍스트가 하나있을때 페이지를 찾으세요!(오래걸린다)
15장에 3번째 섹션을 보세요 (앞에 안보고 15장부터 본다)
검색속도가 빨라지고 사용자의 응답속도가 빨라진다
운영체제 전반적인 속도는 떨어진다. (왜?)

펌웨어는 그래서 즉각적인 응답을 해야하는것들(펌웨어)
데이터가 대규모로 들어온다.(영상, 음성, 레이더) 그냥 펌웨어만들어가는 경우는 절대없다
무조건 운영체제가 들어가야되는데 순회검색을하면 오래걸리기 때문에 응답성이 중요하다.

포인터의 크기가 8바이트라서 8이빠진다.
bp sp는 스택관련 레지스터(포인터 -> 메모리를 제어하기 위햐서 존재)
스택 -> 메모리 포인터 단위인 8바이트가 빠진다.
메모리만 와야된다.
8바이트 메모리안에들어있는 1포인터안에 들어갈수있는 크기는 cpu따라서가냐?(그거는 컴파일러에서 조절가능하다)
그것도 그냥 포인터를 여러개 붙여놓은거?
(배열은 메모리다발이 붙어있는거(선형성을 갖은채로))
(벡터(리스트) 

배열나오는건 프린트 하잖아요? 여기서 볼거에요
일단은 13분이니까 약간 초과가 되엉쓴ㄴ데 21분까지 쉬었다가 진행하겠습니다.

12시까지 하고 식사하고 1시부터 3시까지...

=======
쉬는시간
=======

mov (복사 명령어)
num = 3
무브의 역할은 '=' 입니다
대입, 엄밀하게는 복사


=================================================================
(gdb) si
0x0000555555555168	9	{
(gdb) disas
Dump of assembler code for function main:
   0x0000555555555160 <+0>:	endbr64 
   0x0000555555555164 <+4>:	push   %rbp
   0x0000555555555165 <+5>:	mov    %rsp,%rbp
=> 0x0000555555555168 <+8>:	sub    $0x10,%rsp
   0x000055555555516c <+12>:	movl   $0x3,-0xc(%rbp)
   0x0000555555555173 <+19>:	movl   $0x2,-0x8(%rbp)
   0x000055555555517a <+26>:	mov    -0x8(%rbp),%edx
   0x000055555555517d <+29>:	mov    -0xc(%rbp),%eax
   0x0000555555555180 <+32>:	mov    %edx,%esi
   0x0000555555555182 <+34>:	mov    %eax,%edi
   0x0000555555555184 <+36>:	callq  0x555555555149 <mult>
   0x0000555555555189 <+41>:	mov    %eax,-0x4(%rbp)
   0x000055555555518c <+44>:	mov    -0x4(%rbp),%eax
   0x000055555555518f <+47>:	mov    %eax,%esi
   0x0000555555555191 <+49>:	lea    0xe6c(%rip),%rdi        # 0x555555556004
   0x0000555555555198 <+56>:	mov    $0x0,%eax
   0x000055555555519d <+61>:	callq  0x555555555050 <printf@plt>
   0x00005555555551a2 <+66>:	mov    $0x0,%eax
   0x00005555555551a7 <+71>:	leaveq 
   0x00005555555551a8 <+72>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$6 = 0x7fffffffdf60
(gdb) p/x $rbp
$7 = 0x7fffffffdf60
=======================================================================
이제부터 스택이 만들어진다
0x10 16바이트를 빼라
b10
$(디버깅에서는 레지스터)
%어셈블리 명령어(어셈블리에서 레지스터)
$(어셈블리에서는 상수)

gdb에서 익숙해지면 좋은것 내가 원하는것을 커맨드 쳐서 직관에서 확인할수있다는 점이 좋다.
처음에 옛날에 작업할때는 그래픽툴을 좋아했지만 갈수록 커맨드 툴을 쓰게된다.
웹같은 경우에는 뷰가있는데
초급 중급은 툴쓰지만 고급은 커맨드를 쓴다.

======================================================================

(gdb) disas
Dump of assembler code for function main:
   0x0000555555555160 <+0>:	endbr64 
   0x0000555555555164 <+4>:	push   %rbp
   0x0000555555555165 <+5>:	mov    %rsp,%rbp
   0x0000555555555168 <+8>:	sub    $0x10,%rsp
=> 0x000055555555516c <+12>:	movl   $0x3,-0xc(%rbp)
   0x0000555555555173 <+19>:	movl   $0x2,-0x8(%rbp)
   0x000055555555517a <+26>:	mov    -0x8(%rbp),%edx
   0x000055555555517d <+29>:	mov    -0xc(%rbp),%eax
   0x0000555555555180 <+32>:	mov    %edx,%esi
   0x0000555555555182 <+34>:	mov    %eax,%edi
   0x0000555555555184 <+36>:	callq  0x555555555149 <mult>
   0x0000555555555189 <+41>:	mov    %eax,-0x4(%rbp)
   0x000055555555518c <+44>:	mov    -0x4(%rbp),%eax
   0x000055555555518f <+47>:	mov    %eax,%esi
   0x0000555555555191 <+49>:	lea    0xe6c(%rip),%rdi        # 0x555555556004
   0x0000555555555198 <+56>:	mov    $0x0,%eax
   0x000055555555519d <+61>:	callq  0x555555555050 <printf@plt>
   0x00005555555551a2 <+66>:	mov    $0x0,%eax
   0x00005555555551a7 <+71>:	leaveq 
   0x00005555555551a8 <+72>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$8 = 0x7fffffffdf50
(gdb) p/x $rbp
$9 = 0x7fffffffdf60
======================================================================
bp와 sp에 공간이 생겼다(스택이 할당되었다)
스택 -> 지역변수
지역변수가 16바이트 만큼 공간이 생겼다.
rbp
스택공간이 잡혀있던만큼 숫자 3을 집어넣어라

모든 동작 자체가 포인터 베이스로 동작한다.

=> 0x000055555555516c <+12>:	movl   $0x3,-0xc(%rbp)
함수 인자에 접근할때는 +로접근한다.
rbp 20 rsp 10 이둘사이 10차이 16
0C 12 이 사이만큼 들어있다.

movl 4바이트의 공간을 이동시킬때 bit l을 쓴다.
네모박스 하나그린다음에 rsp rbp 이렇게 온걸 sub하나 그어놓고 16바이트 공간을 그려놓고

14에 메모리를 보면 

인스트럭션 스케쥴링
씨피육 다이나믹하게 구성할수도있다
파이프라인이 꺠질

sp에 션한하는게 여러개있을수있다.

sp가 나중에 맨밑으로간다.
여러가지 인스트럭션 메세지때문에 sp가 움직이지않고 bp가 움직인다.

그림그릴때 별도의 네모칸을 하나그린다.
연산레지스터는 cpu에있다.
네모박스 해놓으라고 한거
메모리는 cpu와 떨어져있다.
%edx 3
%eax 2
=====================================================
(gdb) x $rbp - 0x8
0x7fffffffdf58:	0x00000002
(gdb) p/x $eax
$10 = 0x55555160
(gdb) p/x $edx
$11 = 0xffffe068
(gdb) si
0x000055555555517d	13		res = mult(num, num2);
(gdb) 
0x0000555555555180	13		res = mult(num, num2);
(gdb) disas
Dump of assembler code for function main:
   0x0000555555555160 <+0>:	endbr64 
   0x0000555555555164 <+4>:	push   %rbp
   0x0000555555555165 <+5>:	mov    %rsp,%rbp
   0x0000555555555168 <+8>:	sub    $0x10,%rsp
   0x000055555555516c <+12>:	movl   $0x3,-0xc(%rbp)
   0x0000555555555173 <+19>:	movl   $0x2,-0x8(%rbp)
   0x000055555555517a <+26>:	mov    -0x8(%rbp),%edx
   0x000055555555517d <+29>:	mov    -0xc(%rbp),%eax
=> 0x0000555555555180 <+32>:	mov    %edx,%esi
   0x0000555555555182 <+34>:	mov    %eax,%edi
   0x0000555555555184 <+36>:	callq  0x555555555149 <mult>
   0x0000555555555189 <+41>:	mov    %eax,-0x4(%rbp)
   0x000055555555518c <+44>:	mov    -0x4(%rbp),%eax
   0x000055555555518f <+47>:	mov    %eax,%esi
   0x0000555555555191 <+49>:	lea    0xe6c(%rip),%rdi        # 0x555555556004
   0x0000555555555198 <+56>:	mov    $0x0,%eax
   0x000055555555519d <+61>:	callq  0x555555555050 <printf@plt>
   0x00005555555551a2 <+66>:	mov    $0x0,%eax
   0x00005555555551a7 <+71>:	leaveq 
   0x00005555555551a8 <+72>:	retq   
End of assembler dump.
==========================================================
메모리에 저장되어있던 값이 레지스터로 넘어가는게 확인되나요??

쓸데없는 코드


혁신과 관리

ax 함수의 리턴값
sp
bp 스택잡기위한것
ip 다음 실행될 명령어(주소값을 가르킨다) -(ip에 쟤를 넣는다)

함수를 호출하는 시점에 어디로 가야하는지 저장해놓는다
0x0000555555555189(다음주소)

현재 rsp = 0x~~~b10
복귀 rsp = 0x~~~b08 <<<- 0x0000555555555189(복귀주소)

===============================================================
(gdb) si
mult (n1=21845, n2=1431654832) at late.c:4
4	{
(gdb) disas
Dump of assembler code for function mult:
=> 0x0000555555555149 <+0>:	endbr64 
   0x000055555555514d <+4>:	push   %rbp
   0x000055555555514e <+5>:	mov    %rsp,%rbp
   0x0000555555555151 <+8>:	mov    %edi,-0x4(%rbp)
   0x0000555555555154 <+11>:	mov    %esi,-0x8(%rbp)
   0x0000555555555157 <+14>:	mov    -0x4(%rbp),%eax
   0x000055555555515a <+17>:	imul   -0x8(%rbp),%eax
   0x000055555555515e <+21>:	pop    %rbp
   0x000055555555515f <+22>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$20 = 0x7fffffffdf48
(gdb) x $rsp
0x7fffffffdf48:	0x55555189
(gdb) 
0x7fffffffdf4c:	0x00005555
(gdb) 
0x7fffffffdf50:	0xffffe050
(gdb) 
0x7fffffffdf54:	0x00000003


=============================================================

새로운 함수로 이동
예상대로 rsp 8바이트가 빠져있다

스택이 하나더 내려가면서 복귀주소가 들어가있다.
rsp에서 4바이트를 보면 그다음 4바이트를 보여준다.

데이터를 만들때 지역변수가 필요없다
그래서 서브가 없다

처음 메인전에 스택만들기전이랑 똑같다
똑같지만 봐야하는게 그림이다.
얘를 쉘클리어하고
현재 p/x $rsp, p/x $rbp값을 확인한다.

=========================================================
(gdb) si
0x000055555555514d	4	{
(gdb) disas
Dump of assembler code for function mult:
   0x0000555555555149 <+0>:	endbr64 
=> 0x000055555555514d <+4>:	push   %rbp
   0x000055555555514e <+5>:	mov    %rsp,%rbp
   0x0000555555555151 <+8>:	mov    %edi,-0x4(%rbp)
   0x0000555555555154 <+11>:	mov    %esi,-0x8(%rbp)
   0x0000555555555157 <+14>:	mov    -0x4(%rbp),%eax
   0x000055555555515a <+17>:	imul   -0x8(%rbp),%eax
   0x000055555555515e <+21>:	pop    %rbp
   0x000055555555515f <+22>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$21 = 0x7fffffffdf48
(gdb) p/x $rbp
$22 = 0x7fffffffdf60
=====================================================

=====================================================
(gdb) si
0x000055555555514e	4	{
(gdb) disas
Dump of assembler code for function mult:
   0x0000555555555149 <+0>:	endbr64 
   0x000055555555514d <+4>:	push   %rbp
=> 0x000055555555514e <+5>:	mov    %rsp,%rbp
   0x0000555555555151 <+8>:	mov    %edi,-0x4(%rbp)
   0x0000555555555154 <+11>:	mov    %esi,-0x8(%rbp)
   0x0000555555555157 <+14>:	mov    -0x4(%rbp),%eax
   0x000055555555515a <+17>:	imul   -0x8(%rbp),%eax
   0x000055555555515e <+21>:	pop    %rbp
   0x000055555555515f <+22>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$26 = 0x7fffffffdf40
(gdb) x $rso
Value can't be converted to integer.
(gdb) x $rsp
0x7fffffffdf40:	0xffffdf60
(gdb) 
0x7fffffffdf44:	0x00007fff

======================================================

main에서는 얘가 쓰던 스택이 위에있었는데
mult에서 스택이 초기화 되고 지역변수에따라 증가한다.
c언어에서 지역변수를 함수간에 이동할수없는 이유(베리어를 만들어주고있다)
새로운 스택이 생성되어서
그래서 나온개념 -> 포인터

스택 프레임을 생성한다.
일단은 무브까지만 하고 식사를 한다.


기존에있던건 메인스택이다
bp와 같아진건 새로운 스택이다를 표기해주면 좋다.
=======================================================
(gdb) si
0x0000555555555151	4	{
(gdb) disas
Dump of assembler code for function mult:
   0x0000555555555149 <+0>:	endbr64 
   0x000055555555514d <+4>:	push   %rbp
   0x000055555555514e <+5>:	mov    %rsp,%rbp
=> 0x0000555555555151 <+8>:	mov    %edi,-0x4(%rbp)
   0x0000555555555154 <+11>:	mov    %esi,-0x8(%rbp)
   0x0000555555555157 <+14>:	mov    -0x4(%rbp),%eax
   0x000055555555515a <+17>:	imul   -0x8(%rbp),%eax
   0x000055555555515e <+21>:	pop    %rbp
   0x000055555555515f <+22>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$27 = 0x7fffffffdf40
(gdb) p/x $rpb
$28 = 0x0
(gdb) p/x $rpb
$29 = 0x0
(gdb) p/x $rbp
$30 = 0x7fffffffdf40

========================================================


=============
점심먹고 왔다.
=============

(gdb) disas
Dump of assembler code for function mult:
   0x0000555555555149 <+0>:	endbr64 
   0x000055555555514d <+4>:	push   %rbp
   0x000055555555514e <+5>:	mov    %rsp,%rbp
=> 0x0000555555555151 <+8>:	mov    %edi,-0x4(%rbp)
   0x0000555555555154 <+11>:	mov    %esi,-0x8(%rbp)
   0x0000555555555157 <+14>:	mov    -0x4(%rbp),%eax
   0x000055555555515a <+17>:	imul   -0x8(%rbp),%eax
   0x000055555555515e <+21>:	pop    %rbp
   0x000055555555515f <+22>:	retq   
End of assembler dump.
(gdb) si
0x0000555555555154	4	{
(gdb) si
5		return n1 * n2;
(gdb) x $rbp - 4
0x7fffffffdf3c:	0x00000003
(gdb) x $rbp - 8
0x7fffffffdf38:	0x00000002

pop %rbp 스택프레임에 생성과 스택프레임에 해제를 담당하고있는 것들

자료구조 (함수 이름마다 라인을 그어야한다.)
재귀 호출을 하게되면 복귀를 해서 avr트리 같은 경우에는 재귀호출 복귀 후에 적용을 해야한다.
함수이름마다 경계선을 그어야한다.

재귀호출은
뭐에요?
함수안에서 함수를 들어간건가?
새로운 스택 프레임을 만든건가?
(새로운 스택 프레임을 만든거다)
새로운 스택프레임을 새롭게 만든거다
동작하는 코드가 똑같은거다.
그래야 자료구조 하는게 혼동이 안될수있다.

pop %rpb
팝은 복귀했던 내용들을 뱉어내기 시작한다
팝은 현재스택에 최상위에 있는 내용을 뱉어낸다.
팝은 스택에 최상위에서 값을 뱉어낸다.
현재 스택의 최상위에 rpb가 들어있다.
저장해놨던 rpb가 복원이 된다 팝이없으면 뺴내기만 한다.
스택에서 빠져서 저기로 들어간다.
rax를 적어
현재 스택에 최상위에 있는 값이 저기로 들어간다.
===================================================================
(gdb) disas
Dump of assembler code for function mult:
   0x0000555555555149 <+0>:	endbr64 
   0x000055555555514d <+4>:	push   %rbp
   0x000055555555514e <+5>:	mov    %rsp,%rbp
   0x0000555555555151 <+8>:	mov    %edi,-0x4(%rbp)
   0x0000555555555154 <+11>:	mov    %esi,-0x8(%rbp)
=> 0x0000555555555157 <+14>:	mov    -0x4(%rbp),%eax
   0x000055555555515a <+17>:	imul   -0x8(%rbp),%eax
   0x000055555555515e <+21>:	pop    %rbp
   0x000055555555515f <+22>:	retq   
End of assembler dump.
(gdb) p/x $rsp
$31 = 0x7fffffffdf40
(gdb) x $rsp
0x7fffffffdf40:	0xffffdf60
(gdb) 
0x7fffffffdf44:	0x00007fff
(gdb) p/x $rbp
$32 = 0x7fffffffdf40
===================================================================
현재 스택 최상위 이전 rbp값이 들어있따.
그걸  rbp에 넣으면 이전으로 복원이 된다.
rbp rsp 있었고 이전으로 돌려야한다.

retq 는 콜과 비슷한 친구 주소로 점프하는 애와 스택에 복귀주소를 저장하는 push기능

retq는 반대로한다 pop을 하고 팝 반대로 하는 위치와 똑같다.
다음에 실행할 명령어의 주소값을 가르킨다.
pop은 현재 스택의 최상위에 값을 뺀다.
push %rbp값을 뺀다.

푸쉬하기전에 callq가있었고 푸쉬하기전에 스택의 복귀주소를 저장한다.
남아있는 스택에 최상위에 남아있는게 뭐냐
복귀주소가 남아있다.
pop을 할때 스택값이 +가된다.
push는 밀어넣기때문에 스택값이 -가 된다.
p/x $rsp

x $rsp


%eax의 역할 return 값을 저장한다.
우리의 mult라는 함수는 곱셈을 리턴한다.
현재 ax는 6

printf를 보면 %rip의 위치가 저거다 어셈블러(# 주석)


x 0x555555556004
x/c 0x555555556004
배열로 구성되어있다.
연속된 메모리(변수랑 같다)

변수도 메모리에 값
배열도 메모리 다발
전부 메모리 이다.


n은 스텝아웃
(n은 c언어 단위, ni는 인스트럭션 단위)

아직 머리가 혼란스러울거다.
시간이 조금 남아있지만 디버깅했던걸 디버깅을 이시간에 다시 그려보아라

자료구조를 할때 이개념이 빠삭하게 준비가 되어있어야

인스트럭션 셋 메뉴얼을 보면
int3 명령어
운영체제한테 이쪽 페이지를 사용하겠습니다.
0xCC 이메모리 영역을 사용하겠습니다.
이거를 해킹에 써먹는 기법이 있다.
컴파일러가 저장시킨다.
데이터 영역에 있다.

asm에서 보면 이상수값 왼쪽에 있던 기계어에 테스트 값보다 높은 자리에 있었을거다

텍스트는 가장

이거는 커널코드를 봐야될거다
메모리 배치해주는애 시스이그젝
페이지 폴트가 발생하면서
인터럽트 발생 및 가상메모리를 물리메모리로 변경해주는 절차가 필요하다.


gdb a.out



디스크에 있는 내용을 다로드하지않으면 프로그램이 안돌아갈까?
조금 가져오고 실행 디멘드 온 페이징
리눅스 시스템프로그램을 할때 배울내용
이렇게 하면 스크에 있는 내용을 메모리로 가져오기위해 페이징 작업을 한다
디스크에서 읽는것 메모리에 로드하는것도 오래걸리는데
여기에 메모리 변환까지 일어날때 올릴때 굉장히 오래걸린다
그러면 컴퓨터 안쓴다
일단 지금 당장 필요한부분만 땡겨와서 메모리를 쓴다
커널에 페이지를 요청한다
디스크를 읽어서 메모리에 로드해서 여차저차한다

메모리 스왑이라던지 페이지를 갈아끼워넣는 작업이 필요한데
이거는 리눅스 시스템에서 한다.

32비트에서는 스택에서 가져왔지만
지금은 레지스터에서 가져온다

-O2 -g 옵션을 주면 자세하게 볼수있다.

코드가 좀 희안하게 바뀐다.

최적화를 하면
아주 스마트하게 바뀐 결과를 볼수있다.
최적화를 하면 계산을 끝내서 가져온다

-O1 옵션도 간단한 처리를 해서준다
함수 폴링 컨벤션을 보고싶다
scanf를 쓴다
o를 하나 비워놓고

함수에 들어오는 파라미터는 무조건 스택에 넣어서 처리한다(인텔)
인자를 아무리 많이넣어도 스택에서 처리한다.

(암)레지스터 베이스로 처리한다.
레지스터 갯수(4)이상으로 넘어가면 암에서도 스택으로 처리를 한다.

테일러 급수로 sin wave만드는 코드 -> c라이브러리 코드와 asm 코드 성능차이 8배

